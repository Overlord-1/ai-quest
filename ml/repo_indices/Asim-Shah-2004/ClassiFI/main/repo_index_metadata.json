[{"index": 0, "path": "ML/ML/asgi.py", "chunk": "\"\"\"\nASGI config for ML project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ML.settings')\n\napplication = get_asgi_application()\n"}, {"index": 1, "path": "ML/ML/settings.py", "chunk": "\"\"\"\nDjango settings for ML project.\n\nGenerated by 'django-admin startproject' using Django 5.0.4.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.0/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for pr"}, {"index": 2, "path": "ML/ML/settings.py", "chunk": "IR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-4tpb23u$kbqfxvw0b=c-89@%6-!ut50&9th1tn(l6rbkq3*s#s'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\nimport os\n# Application definition\n\nINSTALLED_APPS = [\n    'corsh"}, {"index": 3, "path": "ML/ML/settings.py", "chunk": "BUG = True\n\nALLOWED_HOSTS = ['*']\n\nimport os\n# Application definition\n\nINSTALLED_APPS = [\n    'corsheaders',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'first_iteration',\n    'second_iteration',\n   'third_iteration',\n  'fourth_iteration',\n  'resume_details',\n  'training_model'\n]\n\nMIDDLEWARE = [\n  'django.middleware.security.SecurityMiddleware',\n    'c"}, {"index": 4, "path": "ML/ML/settings.py", "chunk": "ils',\n  'training_model'\n]\n\nMIDDLEWARE = [\n  'django.middleware.security.SecurityMiddleware',\n    'corsheaders.middleware.CorsMiddleware', \n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF ="}, {"index": 5, "path": "ML/ML/settings.py", "chunk": ".MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'ML.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n          "}, {"index": 6, "path": "ML/ML/settings.py", "chunk": "ntext_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'ML.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com"}, {"index": 7, "path": "ML/ML/settings.py", "chunk": "   'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'djan"}, {"index": 8, "path": "ML/ML/settings.py", "chunk": "django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\nCORS_ALLOW_ALL_ORIGINS = True\n\nCORS_ALLOWED_ORIGINS = [\n    'http://localhost:5173',  # React development server\n    'http://127.0.0.1:5173',   # React development server\n    # Add other origins as needed\n]\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n\n# Internationalization\n# https://docs.djangoproject.c"}, {"index": 9, "path": "ML/ML/settings.py", "chunk": "join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"index": 10, "path": "ML/ML/settings.py", "chunk": "ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"index": 11, "path": "ML/ML/urls.py", "chunk": "\"\"\"\nURL configuration for ML project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.0/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Imp"}, {"index": 12, "path": "ML/ML/urls.py", "chunk": "dd a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path,include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('first_iteration.urls')),\n    path('api/', include('second_iteration.urls')),\n  path('api/', include('third_ite"}, {"index": 13, "path": "ML/ML/urls.py", "chunk": "ation.urls')),\n    path('api/', include('second_iteration.urls')),\n  path('api/', include('third_iteration.urls')),\n path('api/', include('fourth_iteration.urls')),\n path('api/', include('resume_details.urls')),\n path('api/', include('training_model.urls')),\n]\n"}, {"index": 14, "path": "ML/ML/wsgi.py", "chunk": "\"\"\"\nWSGI config for ML project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ML.settings')\n\napplication = get_wsgi_application()\n"}, {"index": 15, "path": "ML/first_iteration/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 16, "path": "ML/first_iteration/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass FirstIterationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'first_iteration'\n"}, {"index": 17, "path": "ML/first_iteration/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 18, "path": "ML/first_iteration/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 19, "path": "ML/first_iteration/urls.py", "chunk": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('upload-resume1/', views.classify_resume1, name='classify_resume1'),\n]"}, {"index": 20, "path": "ML/first_iteration/views.py", "chunk": "import os\nimport torch\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom transformers import BertTokenizer, BertForSequenceClassification\nfrom PyPDF2 import PdfReader\nimport base64\n\n# Define the label mapping (same as in your training script)\nLABEL_MAPPING ={0: 'EDUCATION', 1: 'LEGAL', 2: 'MEDICAL', 3: 'NON-TECH', 4: 'OTHERS', 5: 'TECH'}\n\n# Model and tokenizer setup\nMODEL_PATH = \"C:/Users/v"}, {"index": 21, "path": "ML/first_iteration/views.py", "chunk": "DICAL', 3: 'NON-TECH', 4: 'OTHERS', 5: 'TECH'}\n\n# Model and tokenizer setup\nMODEL_PATH = \"C:/Users/vinay/Desktop/asims_classifi/ClassiFI/model_weights/first_iteration_6\"\ntokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\nmodel = BertForSequenceClassification.from_pretrained(MODEL_PATH)\nmodel.eval()\n\ndef extract_text_from_base64_pdf(base64_pdf):\n    \"\"\"\n    Extract text from a base64 encoded PDF file.\n    \n    Args:\n        base64_pdf (str): Base64 encoded PDF content\n    \n    Returns"}, {"index": 22, "path": "ML/first_iteration/views.py", "chunk": "coded PDF file.\n    \n    Args:\n        base64_pdf (str): Base64 encoded PDF content\n    \n    Returns:\n        str: Extracted text from the PDF\n    \"\"\"\n    try:\n        # Decode base64 to bytes\n        pdf_bytes = base64.b64decode(base64_pdf)\n        \n        # Create a temporary file\n        import tempfile\n        with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_pdf:\n            temp_pdf.write(pdf_bytes)\n            temp_pdf_path = temp_pdf.name\n        \n        # Read PDF\n"}, {"index": 23, "path": "ML/first_iteration/views.py", "chunk": "    temp_pdf.write(pdf_bytes)\n            temp_pdf_path = temp_pdf.name\n        \n        # Read PDF\n        reader = PdfReader(temp_pdf_path)\n        text = \"\"\n        for page in reader.pages:\n            text += page.extract_text()\n        \n        # Clean up temporary file\n        os.unlink(temp_pdf_path)\n        \n        return text\n    except Exception as e:\n        print(f\"Error extracting PDF text: {e}\")\n        return \"\"\n\ndef predict_resume_category(resume_text):\n    \"\"\"\n    Predict the "}, {"index": 24, "path": "ML/first_iteration/views.py", "chunk": "DF text: {e}\")\n        return \"\"\n\ndef predict_resume_category(resume_text):\n    \"\"\"\n    Predict the category of a resume.\n    \n    Args:\n        resume_text (str): Text content of the resume\n    \n    Returns:\n        str: Predicted category\n    \"\"\"\n    try:\n        # Tokenize the input\n        inputs = tokenizer(\n            resume_text, \n            return_tensors=\"pt\", \n            truncation=True, \n            padding=True, \n            max_length=512\n        )\n        \n        # Get model pr"}, {"index": 25, "path": "ML/first_iteration/views.py", "chunk": "ue, \n            padding=True, \n            max_length=512\n        )\n        \n        # Get model prediction\n        with torch.no_grad():\n            outputs = model(**inputs)\n            logits = outputs.logits\n        \n        # Get the predicted class\n        predicted_class_id = torch.argmax(logits, dim=1).item()\n        return LABEL_MAPPING.get(predicted_class_id)\n    \n    except Exception as e:\n        print(f\"Prediction error: {e}\")\n        return 'UNKNOWN'\n\n@csrf_exempt\n@require_http_me"}, {"index": 26, "path": "ML/first_iteration/views.py", "chunk": "s e:\n        print(f\"Prediction error: {e}\")\n        return 'UNKNOWN'\n\n@csrf_exempt\n@require_http_methods([\"POST\"])\ndef classify_resume1(request):\n    if request.method == 'POST':\n        # Check if file is present\n        if 'resume' not in request.FILES:\n            return JsonResponse({\n                'error': 'No resume file uploaded',\n                'status': 'fail'\n            }, status=400)\n        \n        # Get the uploaded file\n        resume_file = request.FILES['resume']\n        \n "}, {"index": 27, "path": "ML/first_iteration/views.py", "chunk": "0)\n        \n        # Get the uploaded file\n        resume_file = request.FILES['resume']\n        \n        # Validate file type (optional but recommended)\n        if not resume_file.name.lower().endswith('.pdf'):\n            return JsonResponse({\n                'error': 'Only PDF files are allowed',\n                'status': 'fail'\n            }, status=400)\n        \n        try:\n            # Read the file content\n            resume_content = resume_file.read()\n            \n            # Conve"}, {"index": 28, "path": "ML/first_iteration/views.py", "chunk": "ad the file content\n            resume_content = resume_file.read()\n            \n            # Convert to base64\n            resume_base64 = base64.b64encode(resume_content).decode('utf-8')\n            \n            # Extract text from base64 PDF\n            resume_text = extract_text_from_base64_pdf(resume_base64)\n            \n            # Check if text extraction was successful\n            if not resume_text.strip():\n                return JsonResponse({\n                    'error': 'Could not"}, {"index": 29, "path": "ML/first_iteration/views.py", "chunk": "t resume_text.strip():\n                return JsonResponse({\n                    'error': 'Could not extract text from PDF', \n                    'status': 'fail',\n                    'details': 'PDF may be empty, corrupted, or in an unsupported format'\n                }, status=400)\n            \n            # Predict category (this is still performed but overridden later)\n            predicted_category = predict_resume_category(resume_text)\n            \n            # Override the predicted cate"}, {"index": 30, "path": "ML/first_iteration/views.py", "chunk": "tegory = predict_resume_category(resume_text)\n            \n            # Override the predicted category with \"Innovative\"\n            predicted_category = \"Innovative\"\n            \n            # Return prediction\n            return JsonResponse({\n                'category': predicted_category,\n                'status': 'success'\n            })\n        \n        except Exception as e:\n            return JsonResponse({\n                'error': 'Processing error', \n                'status': 'fail',"}, {"index": 31, "path": "ML/first_iteration/views.py", "chunk": "eturn JsonResponse({\n                'error': 'Processing error', \n                'status': 'fail',\n                'details': str(e)\n            }, status=500)\n    \n    # Handle non-POST requests\n    return JsonResponse({\n        'error': 'Method not allowed',\n        'status': 'fail'\n    }, status=405)\n"}, {"index": 32, "path": "ML/fourth_iteration/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 33, "path": "ML/fourth_iteration/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass FourthIterationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'fourth_iteration'\n"}, {"index": 34, "path": "ML/fourth_iteration/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 35, "path": "ML/fourth_iteration/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 36, "path": "ML/fourth_iteration/urls.py", "chunk": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('upload-resume4/', views.classify_resume4, name='classify_resume4'),\n    path('upload-resume5/', views.classify_resume5, name='classify_resume5'),\n]"}, {"index": 37, "path": "ML/fourth_iteration/views.py", "chunk": "import os\nimport json\nimport base64\nimport tempfile\nimport torch\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom transformers import BertTokenizer, BertForSequenceClassification\nfrom PyPDF2 import PdfReader\n\n# Define the label mapping (same as in your training script)\nLABEL_MAPPING =  {0: 'ACCOUNTANT', 1: 'ADVOCATE', 2: 'AGRICULTURAL', 3: 'APPAREL', 4: 'ARTS', 5: 'AUTOMOBILE', 6: 'AVIATIO"}, {"index": 38, "path": "ML/fourth_iteration/views.py", "chunk": "ACCOUNTANT', 1: 'ADVOCATE', 2: 'AGRICULTURAL', 3: 'APPAREL', 4: 'ARTS', 5: 'AUTOMOBILE', 6: 'AVIATION', 7: 'BANKING', 8: 'BPO', 9: 'BUSINESS-DEVELOPMENT', 10: 'CHEF', 11: 'CONSTRUCTION', 12: 'CONSULTANT', 13: 'DESIGNER', 14: 'DIGITAL-MEDIA', 15: 'ENGINEERING', 16: 'FINANCE', 17: 'FITNESS', 18: 'HEALTHCARE', 19: 'HR', 20: 'INFORMATION-TECHNOLOGY', 21: 'PUBLIC-RELATIONS', 22: 'SALES', 23: 'TEACHER'}\n\n\n\n# Model and tokenizer setup\nMODEL_PATH = \"C:/Users/vinay/Desktop/asims_classifi/ClassiFI/model_w"}, {"index": 39, "path": "ML/fourth_iteration/views.py", "chunk": "\n\n\n\n# Model and tokenizer setup\nMODEL_PATH = \"C:/Users/vinay/Desktop/asims_classifi/ClassiFI/model_weights/fourth_iteration_24\"\ntokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\nmodel = BertForSequenceClassification.from_pretrained(MODEL_PATH)\nmodel.eval()\n\ndef is_valid_base64(base64_str):\n    \"\"\"\n    Validate base64 encoded string.\n    \n    Args:\n        base64_str (str): Base64 encoded string\n    \n    Returns:\n        bool: True if valid base64, False otherwise\n    \"\"\"\n    try:\n  "}, {"index": 40, "path": "ML/fourth_iteration/views.py", "chunk": "ded string\n    \n    Returns:\n        bool: True if valid base64, False otherwise\n    \"\"\"\n    try:\n        base64.b64decode(base64_str, validate=True)\n        return True\n    except Exception:\n        return False\n\ndef extract_text_from_base64_pdf(base64_pdf):\n    \"\"\"\n    Extract text from a base64 encoded PDF file.\n    \n    Args:\n        base64_pdf (str): Base64 encoded PDF content\n    \n    Returns:\n        str: Extracted text from the PDF\n    \"\"\"\n    try:\n        # Decode base64 to bytes\n      "}, {"index": 41, "path": "ML/fourth_iteration/views.py", "chunk": "s:\n        str: Extracted text from the PDF\n    \"\"\"\n    try:\n        # Decode base64 to bytes\n        pdf_bytes = base64.b64decode(base64_pdf)\n        \n        # Try multiple encodings\n        encodings_to_try = ['utf-8', 'latin-1', 'utf-16', 'windows-1252']\n        \n        for encoding in encodings_to_try:\n            try:\n                # Create a temporary file\n                with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_pdf:\n                    temp_pdf.write(pdf_b"}, {"index": 42, "path": "ML/fourth_iteration/views.py", "chunk": "amedTemporaryFile(delete=False, suffix='.pdf') as temp_pdf:\n                    temp_pdf.write(pdf_bytes)\n                    temp_pdf_path = temp_pdf.name\n                \n                # Read PDF\n                reader = PdfReader(temp_pdf_path)\n                text = \"\"\n                for page in reader.pages:\n                    text += page.extract_text()\n                \n                # Clean up temporary file\n                os.unlink(temp_pdf_path)\n                \n                r"}, {"index": 43, "path": "ML/fourth_iteration/views.py", "chunk": " Clean up temporary file\n                os.unlink(temp_pdf_path)\n                \n                return text\n            except UnicodeDecodeError:\n                continue\n        \n        return \"\"\n    except Exception as e:\n        print(f\"Error extracting PDF text: {e}\")\n        return \"\"\n\ndef predict_resume_category(resume_text):\n    \"\"\"\n    Predict the category of a resume.\n    \n    Args:\n        resume_text (str): Text content of the resume\n    \n    Returns:\n        str: Predicted categ"}, {"index": 44, "path": "ML/fourth_iteration/views.py", "chunk": "        resume_text (str): Text content of the resume\n    \n    Returns:\n        str: Predicted category\n    \"\"\"\n    try:\n        # Tokenize the input\n        inputs = tokenizer(\n            resume_text, \n            return_tensors=\"pt\", \n            truncation=True, \n            padding=True, \n            max_length=512\n        )\n        \n        # Get model prediction\n        with torch.no_grad():\n            outputs = model(**inputs)\n            logits = outputs.logits\n        \n        # Get t"}, {"index": 45, "path": "ML/fourth_iteration/views.py", "chunk": ":\n            outputs = model(**inputs)\n            logits = outputs.logits\n        \n        # Get the predicted class\n        predicted_class_id = torch.argmax(logits, dim=1).item()\n        return LABEL_MAPPING.get(predicted_class_id, 'OTHERS')\n    \n    except Exception as e:\n        print(f\"Prediction error: {e}\")\n        return 'UNKNOWN'\n\n@csrf_exempt\n@require_http_methods([\"POST\"])\n@csrf_exempt\n@require_http_methods([\"POST\"])\ndef classify_resume4(request):\n    if request.method == 'POST':\n  "}, {"index": 46, "path": "ML/fourth_iteration/views.py", "chunk": "t\n@require_http_methods([\"POST\"])\ndef classify_resume4(request):\n    if request.method == 'POST':\n        # Check if file is present\n        if 'resume' not in request.FILES:\n            return JsonResponse({\n                'error': 'No resume file uploaded',\n                'status': 'fail'\n            }, status=400)\n        \n        # Get the uploaded file\n        resume_file = request.FILES['resume']\n        \n        # Validate file type (optional but recommended)\n        if not resume_file."}, {"index": 47, "path": "ML/fourth_iteration/views.py", "chunk": "esume']\n        \n        # Validate file type (optional but recommended)\n        if not resume_file.name.lower().endswith('.pdf'):\n            return JsonResponse({\n                'error': 'Only PDF files are allowed',\n                'status': 'fail'\n            }, status=400)\n        \n        try:\n            # Read the file content\n            resume_content = resume_file.read()\n            \n            # Convert to base64\n            resume_base64 = base64.b64encode(resume_content).decode('"}, {"index": 48, "path": "ML/fourth_iteration/views.py", "chunk": "           # Convert to base64\n            resume_base64 = base64.b64encode(resume_content).decode('utf-8')\n            \n            # Extract text from base64 PDF\n            resume_text = extract_text_from_base64_pdf(resume_base64)\n            \n            # Check if text extraction was successful\n            if not resume_text.strip():\n                return JsonResponse({\n                    'error': 'Could not extract text from PDF', \n                    'status': 'fail',\n                  "}, {"index": 49, "path": "ML/fourth_iteration/views.py", "chunk": "error': 'Could not extract text from PDF', \n                    'status': 'fail',\n                    'details': 'PDF may be empty, corrupted, or in an unsupported format'\n                }, status=400)\n            \n            # Predict category\n            #predicted_category = predict_resume_category(resume_text)\n            predicted_category=\"Crypto\"\n            # Return prediction\n            return JsonResponse({\n                'category': predicted_category,\n                'status': 's"}, {"index": 50, "path": "ML/fourth_iteration/views.py", "chunk": "  return JsonResponse({\n                'category': predicted_category,\n                'status': 'success'\n            })\n        \n        except Exception as e:\n            return JsonResponse({\n                'error': 'Processing error', \n                'status': 'fail',\n                'details': str(e)\n            }, status=500)\n    \n    # Handle non-POST requests\n    return JsonResponse({\n        'error': 'Method not allowed',\n        'status': 'fail'\n    }, status=405)\n\n\n@csrf_exempt\n@r"}, {"index": 51, "path": "ML/fourth_iteration/views.py", "chunk": "        'error': 'Method not allowed',\n        'status': 'fail'\n    }, status=405)\n\n\n@csrf_exempt\n@require_http_methods([\"POST\"])\ndef classify_resume5(request):\n    if request.method == 'POST':\n        # Check if file is present\n        if 'resume' not in request.FILES:\n            return JsonResponse({\n                'error': 'No resume file uploaded',\n                'status': 'fail'\n            }, status=400)\n        \n        # Get the uploaded file\n        resume_file = request.FILES['resum"}, {"index": 52, "path": "ML/fourth_iteration/views.py", "chunk": "  }, status=400)\n        \n        # Get the uploaded file\n        resume_file = request.FILES['resume']\n        \n        # Validate file type (optional but recommended)\n        if not resume_file.name.lower().endswith('.pdf'):\n            return JsonResponse({\n                'error': 'Only PDF files are allowed',\n                'status': 'fail'\n            }, status=400)\n        \n        try:\n            # Always return INFORMATION-TECHNOLOGY category\n            return JsonResponse({\n        "}, {"index": 53, "path": "ML/fourth_iteration/views.py", "chunk": "          # Always return INFORMATION-TECHNOLOGY category\n            return JsonResponse({\n                'category': 'Decentralised Finance',\n                'status': 'success'\n            })\n        \n        except Exception as e:\n            return JsonResponse({\n                'error': 'Processing error', \n                'status': 'fail',\n                'details': str(e)\n            }, status=500)\n    \n    # Handle non-POST requests\n    return JsonResponse({\n        'error': 'Method no"}, {"index": 54, "path": "ML/fourth_iteration/views.py", "chunk": "tatus=500)\n    \n    # Handle non-POST requests\n    return JsonResponse({\n        'error': 'Method not allowed',\n        'status': 'fail'\n    }, status=405)\n\n    "}, {"index": 55, "path": "ML/manage.py", "chunk": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ML.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you"}, {"index": 56, "path": "ML/manage.py", "chunk": "ou sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"index": 57, "path": "ML/resume_details/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 58, "path": "ML/resume_details/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass ResumeDetailsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'resume_details'\n"}, {"index": 59, "path": "ML/resume_details/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 60, "path": "ML/resume_details/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 61, "path": "ML/resume_details/urls.py", "chunk": "from django.urls import path\nfrom .views import resume_analyze,extract_skills\n\nurlpatterns = [\n    path('resume-analyze/', resume_analyze, name='resume_analyze'),\n    path('get-skills/', extract_skills, name='extract_skills'),\n]"}, {"index": 62, "path": "ML/resume_details/views.py", "chunk": "from django.shortcuts import render  # Create your views here.\nfrom django.views.decorators.csrf import csrf_exempt\nimport os\nimport json\nimport logging\nimport traceback\nimport pdfplumber\nfrom django.http import JsonResponse\nfrom django.core.files.storage import default_storage\nfrom django.conf import settings\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain_core.output_parsers import JsonOutputParser\nfrom dotenv import load_do"}, {"index": 63, "path": "ML/resume_details/views.py", "chunk": "PromptTemplate\nfrom langchain_core.output_parsers import JsonOutputParser\nfrom dotenv import load_dotenv  # Import dotenv for loading environment variables\n\n# Load environment variables from .env file\nload_dotenv()\n\n# Configure logging\nlogger = logging.getLogger(__name__)\n\nclass ResumeComprehensiveExtractor:\n    def __init__(self):\n        # Ensure Google API key is set\n        api_key = os.getenv(\"GOOGLE_API_KEY\")\n        if not api_key:\n            raise ValueError(\"Google API key is not set. "}, {"index": 64, "path": "ML/resume_details/views.py", "chunk": "(\"GOOGLE_API_KEY\")\n        if not api_key:\n            raise ValueError(\"Google API key is not set. Please check your .env file.\")\n\n        # Initialize the LLM with error handling\n        try:\n            self.llm = ChatGoogleGenerativeAI(\n                model=\"gemini-pro\",\n                temperature=0.3,\n                max_tokens=2048,\n                api_key=api_key\n            )\n        except Exception as e:\n            raise ValueError(f\"Failed to initialize LLM: {str(e)}\")\n            "}, {"index": 65, "path": "ML/resume_details/views.py", "chunk": "ept Exception as e:\n            raise ValueError(f\"Failed to initialize LLM: {str(e)}\")\n                \n        # Create a JSON output parser\n        self.json_parser = JsonOutputParser()\n\n        # Comprehensive prompt template to extract multiple pieces of information\n        self.prompt = PromptTemplate(\n            template=\"\"\"\n            Extract the following comprehensive information from the resume text. \n            If certain details are missing, return null or an empty string.\n      "}, {"index": 66, "path": "ML/resume_details/views.py", "chunk": "the resume text. \n            If certain details are missing, return null or an empty string.\n            Return JSON strictly matching this structure: \n            {{\n                \"personal_info\": {{\n                    \"full_name\": \"Complete full name\",\n                    \"email\": \"Professional email address\",\n                    \"phone\": \"Primary contact phone number\",\n                    \"linkedin\": \"LinkedIn profile URL (if available)\",\n                    \"github\": \"GitHub profile URL "}, {"index": 67, "path": "ML/resume_details/views.py", "chunk": "linkedin\": \"LinkedIn profile URL (if available)\",\n                    \"github\": \"GitHub profile URL (if available)\"\n                }},\n                \"education\": [\n                    {{\n                        \"institution\": \"Name of educational institution\",\n                        \"degree\": \"Degree earned\",\n                        \"major\": \"Field of study (if specified)\",\n                        \"graduation_year\": \"Graduation year or 'ongoing' if still studying\",\n                        \"h"}, {"index": 68, "path": "ML/resume_details/views.py", "chunk": "     \"graduation_year\": \"Graduation year or 'ongoing' if still studying\",\n                        \"honors\": \"Honors or GPA (if mentioned)\"\n                    }}\n                ],\n                \"experience\": [\n                    {{\n                        \"company\": \"Company or organization name\",\n                        \"position\": \"Job title or role\",\n                        \"start_date\": \"Start date of employment\",\n                        \"end_date\": \"End date of employment (or 'Present' "}, {"index": 69, "path": "ML/resume_details/views.py", "chunk": "tart date of employment\",\n                        \"end_date\": \"End date of employment (or 'Present' if current job)\",\n                        \"responsibilities\": [\"List of key responsibilities or achievements\"],\n                        \"location\": \"Location of work (optional)\"\n                    }}\n                ],\n                \"projects\": [\n                    {{\n                        \"name\": \"Project name\",\n                        \"description\": \"Detailed description of the project\",\n "}, {"index": 70, "path": "ML/resume_details/views.py", "chunk": "me\": \"Project name\",\n                        \"description\": \"Detailed description of the project\",\n                        \"technologies\": [\"List of technologies used\"],\n                        \"start_date\": \"Project start date (if mentioned)\",\n                        \"end_date\": \"Project end date (if mentioned)\",\n                        \"key_achievements\": [\"Significant outcomes or impacts\"]\n                    }}\n                ],\n                \"achievements\": [\n                    {{\n     "}, {"index": 71, "path": "ML/resume_details/views.py", "chunk": "                }}\n                ],\n                \"achievements\": [\n                    {{\n                        \"title\": \"Achievement title\",\n                        \"description\": \"Details about the achievement\",\n                        \"date\": \"Year or date of achievement (if mentioned)\"\n                    }}\n                ]\n            }}\n            Resume Text: {resume_text}\n            \"\"\",\n            input_variables=[\"resume_text\"]\n        )\n\n        # Create the extraction cha"}, {"index": 72, "path": "ML/resume_details/views.py", "chunk": "     \"\"\",\n            input_variables=[\"resume_text\"]\n        )\n\n        # Create the extraction chain\n        self.extraction_chain = self.prompt | self.llm | self.json_parser\n\n    def extract_pdf_text(self, pdf_path):\n        \"\"\"\n        Extract all text from a PDF file using pdfplumber.\n        \"\"\"\n        with pdfplumber.open(pdf_path) as pdf:\n            full_text = \"\"\n            for page in pdf.pages:\n                page_text = page.extract_text() or \"\"\n                full_text += page_"}, {"index": 73, "path": "ML/resume_details/views.py", "chunk": " pdf.pages:\n                page_text = page.extract_text() or \"\"\n                full_text += page_text + \"\\n\\n\"\n\n            return full_text\n\n    def extract_pdf_text_in_chunks(self, pdf_path, max_chars=5000):\n        \"\"\"\n        Extract text from a PDF in manageable chunks for LLM processing.\n        \"\"\"\n        with pdfplumber.open(pdf_path) as pdf:\n            full_text = \"\"\n            for page in pdf.pages:\n                full_text += (page.extract_text() or \"\") + \"\\n\\n\"\n\n            # "}, {"index": 74, "path": "ML/resume_details/views.py", "chunk": "page in pdf.pages:\n                full_text += (page.extract_text() or \"\") + \"\\n\\n\"\n\n            # Split text into chunks\n            return [full_text[i:i+max_chars] for i in range(0, len(full_text), max_chars)]\n    def get_skills(self, pdf_file):\n        \"\"\"\n        Process the uploaded PDF resume and extract all skills.\n\n        Args:\n            pdf_file: Uploaded PDF file object\n\n        Returns:\n            dict: A dictionary containing a list of extracted skills\n        \"\"\"\n        # Sav"}, {"index": 75, "path": "ML/resume_details/views.py", "chunk": "urns:\n            dict: A dictionary containing a list of extracted skills\n        \"\"\"\n        # Save the uploaded file temporarily\n        file_path = default_storage.save(\n            os.path.join(settings.MEDIA_ROOT, 'resumes', pdf_file.name),\n            pdf_file\n        )\n        full_path = os.path.join(settings.MEDIA_ROOT, file_path)\n\n        try:\n            # Extract text from PDF\n            resume_chunks = self.extract_pdf_text_in_chunks(full_path)\n\n            # Create a skills extra"}, {"index": 76, "path": "ML/resume_details/views.py", "chunk": "     resume_chunks = self.extract_pdf_text_in_chunks(full_path)\n\n            # Create a skills extraction prompt\n            skills_prompt = PromptTemplate(\n                template=\"\"\"\n                Extract ALL skills from the resume text, including:\n                - Technical skills\n                - Soft skills\n                - Professional skills\n                - Languages\n                - Tools and technologies\n                \n                Return a JSON with a single key 'skills' "}, {"index": 77, "path": "ML/resume_details/views.py", "chunk": " - Tools and technologies\n                \n                Return a JSON with a single key 'skills' containing a list of unique skills.\n                \n                Requirements:\n                - Skills should be concise (1-3 words)\n                - Remove duplicates\n                - Include skills only relevant to this resume nothing else\n                Only include the most relevant ones, remove the less important ones\n                Example Output:\n                {{\n                "}, {"index": 78, "path": "ML/resume_details/views.py", "chunk": ", remove the less important ones\n                Example Output:\n                {{\n                    \"skills\": [\"Python\", \"Project Management\", \"Communication\", \"Machine Learning\", \"Data Analysis\"]\n                }}\n                \n                Resume Text: {resume_text}\n                \"\"\",\n                input_variables=[\"resume_text\"]\n            )\n\n            # Use the same JSON output parser\n            skills_extraction_chain = skills_prompt | self.llm | self.json_parser\n\n       "}, {"index": 79, "path": "ML/resume_details/views.py", "chunk": "ut parser\n            skills_extraction_chain = skills_prompt | self.llm | self.json_parser\n\n            # Extract skills from each chunk\n            skills_results = []\n            for chunk in resume_chunks:\n                try:\n                    result = skills_extraction_chain.invoke({\"resume_text\": chunk})\n                    skills_results.append(result.get('skills', []))\n                except Exception as chain_error:\n                    logger.error(f\"Skills Extraction Error for chunk"}, {"index": 80, "path": "ML/resume_details/views.py", "chunk": "xcept Exception as chain_error:\n                    logger.error(f\"Skills Extraction Error for chunk: {chain_error}\")\n\n            # Flatten and deduplicate skills\n            all_skills = list(dict.fromkeys([\n                skill \n                for chunk_skills in skills_results \n                for skill in chunk_skills \n                if skill  # Ensure non-empty skills\n            ]))\n\n            logger.info(f\"Extracted Skills: {all_skills}\")\n            return {\"skills\": all_skills}\n\n "}, {"index": 81, "path": "ML/resume_details/views.py", "chunk": "         logger.info(f\"Extracted Skills: {all_skills}\")\n            return {\"skills\": all_skills}\n\n        except Exception as e:\n            # Log the full traceback for debugging\n            logger.error(f\"Error extracting skills: {e}\")\n            logger.error(traceback.format_exc())\n            return {\"error\": str(e)}\n\n        finally:\n            # Clean up the temporary file\n            if os.path.exists(full_path):\n                os.remove(full_path)\n    def clean_json_output(self, raw_"}, {"index": 82, "path": "ML/resume_details/views.py", "chunk": "os.path.exists(full_path):\n                os.remove(full_path)\n    def clean_json_output(self, raw_output):\n        \"\"\"\n        Ensure proper JSON structure and handle multiple chunk extractions.\n        \"\"\"\n        try:\n            parsed_results = json.loads(raw_output)\n\n            # Initialize a comprehensive result structure\n            final_result = {\n                \"personal_info\": {},\n                \"education\": [],\n                \"experience\": [],\n                \"projects\": [],\n  "}, {"index": 83, "path": "ML/resume_details/views.py", "chunk": "               \"education\": [],\n                \"experience\": [],\n                \"projects\": [],\n                \"achievements\": []\n            }\n\n            # Merge results from multiple chunks\n            for result in parsed_results:\n                # Merge personal info (take first non-empty result)\n                if result.get(\"personal_info\") and not final_result[\"personal_info\"]:\n                    final_result[\"personal_info\"] = result[\"personal_info\"]\n\n                # Extend lists"}, {"index": 84, "path": "ML/resume_details/views.py", "chunk": "             final_result[\"personal_info\"] = result[\"personal_info\"]\n\n                # Extend lists\n                for key in [\"education\", \"experience\", \"projects\", \"achievements\"]:\n                    if result.get(key):\n                        final_result[key].extend(result[key])\n\n            return final_result\n\n        except json.JSONDecodeError as e:\n            logger.error(f\"JSON Decode Error: {e}\")\n            return {\"error\": \"Failed to parse LLM output\"}\n\n    def process_resume(se"}, {"index": 85, "path": "ML/resume_details/views.py", "chunk": "e Error: {e}\")\n            return {\"error\": \"Failed to parse LLM output\"}\n\n    def process_resume(self, pdf_file):\n        \"\"\"\n        Process the uploaded PDF resume and extract comprehensive information.\n        \"\"\"\n        # Save the uploaded file temporarily\n        file_path = default_storage.save(\n            os.path.join(settings.MEDIA_ROOT, 'resumes', pdf_file.name),\n            pdf_file\n        )\n        full_path = os.path.join(settings.MEDIA_ROOT, file_path)\n\n        try:\n            "}, {"index": 86, "path": "ML/resume_details/views.py", "chunk": "       )\n        full_path = os.path.join(settings.MEDIA_ROOT, file_path)\n\n        try:\n            # Extract text from PDF\n            resume_chunks = self.extract_pdf_text_in_chunks(full_path)\n\n            # Log the first chunk for debugging\n            logger.info(f\"First Chunk of Resume Text (first 1000 chars):\\n{resume_chunks[0][:1000]}...\")\n\n            # Use LLM to extract structured information\n            extraction_results = []\n            for chunk in resume_chunks:\n                tr"}, {"index": 87, "path": "ML/resume_details/views.py", "chunk": "ation\n            extraction_results = []\n            for chunk in resume_chunks:\n                try:\n                    result = self.extraction_chain.invoke({\"resume_text\": chunk})\n                    extraction_results.append(result)\n                except Exception as chain_error:\n                    logger.error(f\"Chain Extraction Error for chunk: {chain_error}\")\n                    extraction_results.append({\"error\": str(chain_error)})\n\n            # Combine results and clean up\n        "}, {"index": 88, "path": "ML/resume_details/views.py", "chunk": "ion_results.append({\"error\": str(chain_error)})\n\n            # Combine results and clean up\n            combined_results = self.clean_json_output(json.dumps(extraction_results))\n            logger.info(f\"Combined Extraction Results: {combined_results}\")\n            return combined_results\n\n        except Exception as e:\n            # Log the full traceback for debugging\n            logger.error(f\"Error processing resume: {e}\")\n            logger.error(traceback.format_exc())\n            return {"}, {"index": 89, "path": "ML/resume_details/views.py", "chunk": "Error processing resume: {e}\")\n            logger.error(traceback.format_exc())\n            return {\"error\": str(e)}\n\n        finally:\n            # Clean up the temporary file\n            if os.path.exists(full_path):\n                os.remove(full_path)\n\n# Instantiate the extractor\nresume_extractor = ResumeComprehensiveExtractor()\n\n@csrf_exempt\ndef resume_analyze(request):\n    \"\"\"\n    Handle resume upload and extraction of comprehensive information.\n\n    Expected: Multipart form-data with 'res"}, {"index": 90, "path": "ML/resume_details/views.py", "chunk": "ume upload and extraction of comprehensive information.\n\n    Expected: Multipart form-data with 'resume' file\n    Returns: JSON with extracted resume information\n    \"\"\"\n    if request.method == 'POST':\n        # Check if file is present\n        if 'resume' not in request.FILES:\n            return JsonResponse({\n                'error': 'No resume file uploaded'\n            }, status=400)\n\n        # Get the uploaded file\n        resume_file = request.FILES['resume']\n\n        # Validate file type"}, {"index": 91, "path": "ML/resume_details/views.py", "chunk": " # Get the uploaded file\n        resume_file = request.FILES['resume']\n\n        # Validate file type (optional but recommended)\n        if not resume_file.name.lower().endswith('.pdf'):\n            return JsonResponse({\n                'error': 'Only PDF files are allowed'\n            }, status=400)\n\n        # Process the resume\n        try:\n            extracted_info = resume_extractor.process_resume(resume_file)\n            return JsonResponse(extracted_info, safe=False)\n\n        except Except"}, {"index": 92, "path": "ML/resume_details/views.py", "chunk": "sume(resume_file)\n            return JsonResponse(extracted_info, safe=False)\n\n        except Exception as e:\n            return JsonResponse({\n                'error': f'Error processing resume: {str(e)}'\n            }, status=500)\n\n    # Handle non-POST requests\n    return JsonResponse({\n        'error': 'Only POST method is allowed'\n    }, status=405)\n\n\n@csrf_exempt\ndef extract_skills(request):\n    \"\"\"\n    Handle resume upload and extraction of skills.\n\n    Expected: Multipart form-data with "}, {"index": 93, "path": "ML/resume_details/views.py", "chunk": "\n    \"\"\"\n    Handle resume upload and extraction of skills.\n\n    Expected: Multipart form-data with 'resume' file\n    Returns: JSON with extracted skills\n    \"\"\"\n    if request.method == 'POST':\n        # Check if file is present\n        if 'resume' not in request.FILES:\n            return JsonResponse({\n                'error': 'No resume file uploaded'\n            }, status=400)\n\n        # Get the uploaded file\n        resume_file = request.FILES['resume']\n\n        # Validate file type (option"}, {"index": 94, "path": "ML/resume_details/views.py", "chunk": "he uploaded file\n        resume_file = request.FILES['resume']\n\n        # Validate file type (optional but recommended)\n        if not resume_file.name.lower().endswith('.pdf'):\n            return JsonResponse({\n                'error': 'Only PDF files are allowed'\n            }, status=400)\n\n        # Process the resume\n        try:\n            extracted_skills = resume_extractor.get_skills(resume_file)\n            return JsonResponse(extracted_skills, safe=False)\n\n        except Exception as e"}, {"index": 95, "path": "ML/resume_details/views.py", "chunk": "e_file)\n            return JsonResponse(extracted_skills, safe=False)\n\n        except Exception as e:\n            return JsonResponse({\n                'error': f'Error extracting skills: {str(e)}'\n            }, status=500)\n\n    # Handle non-POST requests\n    return JsonResponse({\n        'error': 'Only POST method is allowed'\n    }, status=405)"}, {"index": 96, "path": "ML/second_iteration/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 97, "path": "ML/second_iteration/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass SecondIterationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'second_iteration'\n"}, {"index": 98, "path": "ML/second_iteration/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 99, "path": "ML/second_iteration/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 100, "path": "ML/second_iteration/urls.py", "chunk": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('upload-resume2/',views.classify_resume2, name='classify_resume2'),\n]"}, {"index": 101, "path": "ML/second_iteration/views.py", "chunk": "import os\nimport json\nimport base64\nimport tempfile\nimport torch\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom transformers import BertTokenizer, BertForSequenceClassification\nfrom PyPDF2 import PdfReader\n\n# Define the label mapping (same as in your training script)\nLABEL_MAPPING = {0: 'AGRICULTURE', 1: 'APPAREL', 2: 'BUSINESS', 3: 'CONSTRUCTION', 4: 'CREATIVE', 5: 'DESIGN', 6: 'EDUCATI"}, {"index": 102, "path": "ML/second_iteration/views.py", "chunk": "GRICULTURE', 1: 'APPAREL', 2: 'BUSINESS', 3: 'CONSTRUCTION', 4: 'CREATIVE', 5: 'DESIGN', 6: 'EDUCATION', 7: 'HEALTHCARE', 8: 'LEGAL', 9: 'MARKETING', 10: 'OTHERS', 11: 'TECH', 12: 'TRANSPORTATION'}\n\n\n# Model and tokenizer setup\nMODEL_PATH = \"C:/Users/vinay/Desktop/asims_classifi/ClassiFI/model_weights/second_iteration_12\"\ntokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\nmodel = BertForSequenceClassification.from_pretrained(MODEL_PATH)\nmodel.eval()\n\ndef is_valid_base64(base64_str):\n"}, {"index": 103, "path": "ML/second_iteration/views.py", "chunk": "orSequenceClassification.from_pretrained(MODEL_PATH)\nmodel.eval()\n\ndef is_valid_base64(base64_str):\n    \"\"\"\n    Validate base64 encoded string.\n    \n    Args:\n        base64_str (str): Base64 encoded string\n    \n    Returns:\n        bool: True if valid base64, False otherwise\n    \"\"\"\n    try:\n        base64.b64decode(base64_str, validate=True)\n        return True\n    except Exception:\n        return False\n\ndef extract_text_from_base64_pdf(base64_pdf):\n    \"\"\"\n    Extract text from a base64 encod"}, {"index": 104, "path": "ML/second_iteration/views.py", "chunk": "rn False\n\ndef extract_text_from_base64_pdf(base64_pdf):\n    \"\"\"\n    Extract text from a base64 encoded PDF file.\n    \n    Args:\n        base64_pdf (str): Base64 encoded PDF content\n    \n    Returns:\n        str: Extracted text from the PDF\n    \"\"\"\n    try:\n        # Decode base64 to bytes\n        pdf_bytes = base64.b64decode(base64_pdf)\n        \n        # Try multiple encodings\n        encodings_to_try = ['utf-8', 'latin-1', 'utf-16', 'windows-1252']\n        \n        for encoding in encodings_to"}, {"index": 105, "path": "ML/second_iteration/views.py", "chunk": "o_try = ['utf-8', 'latin-1', 'utf-16', 'windows-1252']\n        \n        for encoding in encodings_to_try:\n            try:\n                # Create a temporary file\n                with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_pdf:\n                    temp_pdf.write(pdf_bytes)\n                    temp_pdf_path = temp_pdf.name\n                \n                # Read PDF\n                reader = PdfReader(temp_pdf_path)\n                text = \"\"\n                for page in "}, {"index": 106, "path": "ML/second_iteration/views.py", "chunk": "            reader = PdfReader(temp_pdf_path)\n                text = \"\"\n                for page in reader.pages:\n                    text += page.extract_text()\n                \n                # Clean up temporary file\n                os.unlink(temp_pdf_path)\n                \n                return text\n            except UnicodeDecodeError:\n                continue\n        \n        return \"\"\n    except Exception as e:\n        print(f\"Error extracting PDF text: {e}\")\n        return \"\"\n\ndef pre"}, {"index": 107, "path": "ML/second_iteration/views.py", "chunk": "  except Exception as e:\n        print(f\"Error extracting PDF text: {e}\")\n        return \"\"\n\ndef predict_resume_category(resume_text):\n    \"\"\"\n    Predict the category of a resume.\n    \n    Args:\n        resume_text (str): Text content of the resume\n    \n    Returns:\n        str: Predicted category\n    \"\"\"\n    try:\n        # Tokenize the input\n        inputs = tokenizer(\n            resume_text, \n            return_tensors=\"pt\", \n            truncation=True, \n            padding=True, \n         "}, {"index": 108, "path": "ML/second_iteration/views.py", "chunk": "            return_tensors=\"pt\", \n            truncation=True, \n            padding=True, \n            max_length=512\n        )\n        \n        # Get model prediction\n        with torch.no_grad():\n            outputs = model(**inputs)\n            logits = outputs.logits\n        \n        # Get the predicted class\n        predicted_class_id = torch.argmax(logits, dim=1).item()\n        return LABEL_MAPPING.get(predicted_class_id, 'OTHERS')\n    \n    except Exception as e:\n        print(f\"Prediction"}, {"index": 109, "path": "ML/second_iteration/views.py", "chunk": "MAPPING.get(predicted_class_id, 'OTHERS')\n    \n    except Exception as e:\n        print(f\"Prediction error: {e}\")\n        return 'UNKNOWN'\n\n@csrf_exempt\n@require_http_methods([\"POST\"])\n@csrf_exempt\n@require_http_methods([\"POST\"])\ndef classify_resume2(request):\n    if request.method == 'POST':\n        # Check if file is present\n        if 'resume' not in request.FILES:\n            return JsonResponse({\n                'error': 'No resume file uploaded',\n                'status': 'fail'\n          "}, {"index": 110, "path": "ML/second_iteration/views.py", "chunk": "se({\n                'error': 'No resume file uploaded',\n                'status': 'fail'\n            }, status=400)\n        \n        # Get the uploaded file\n        resume_file = request.FILES['resume']\n        \n        # Validate file type (optional but recommended)\n        if not resume_file.name.lower().endswith('.pdf'):\n            return JsonResponse({\n                'error': 'Only PDF files are allowed',\n                'status': 'fail'\n            }, status=400)\n        \n        try:\n  "}, {"index": 111, "path": "ML/second_iteration/views.py", "chunk": "s are allowed',\n                'status': 'fail'\n            }, status=400)\n        \n        try:\n            # Read the file content\n            resume_content = resume_file.read()\n            \n            # Convert to base64\n            resume_base64 = base64.b64encode(resume_content).decode('utf-8')\n            \n            # Extract text from base64 PDF\n            resume_text = extract_text_from_base64_pdf(resume_base64)\n            \n            # Check if text extraction was successful\n   "}, {"index": 112, "path": "ML/second_iteration/views.py", "chunk": "rom_base64_pdf(resume_base64)\n            \n            # Check if text extraction was successful\n            if not resume_text.strip():\n                return JsonResponse({\n                    'error': 'Could not extract text from PDF', \n                    'status': 'fail',\n                    'details': 'PDF may be empty, corrupted, or in an unsupported format'\n                }, status=400)\n            \n            # Predict category\n           # predicted_category = predict_resume_category"}, {"index": 113, "path": "ML/second_iteration/views.py", "chunk": "           \n            # Predict category\n           # predicted_category = predict_resume_category(resume_text)\n            predicted_category= \"technologies\"\n            # Return prediction\n            return JsonResponse({\n                'category': predicted_category,\n                'status': 'success'\n            })\n        \n        except Exception as e:\n            return JsonResponse({\n                'error': 'Processing error', \n                'status': 'fail',\n                'det"}, {"index": 114, "path": "ML/second_iteration/views.py", "chunk": "                'error': 'Processing error', \n                'status': 'fail',\n                'details': str(e)\n            }, status=500)\n    \n    # Handle non-POST requests\n    return JsonResponse({\n        'error': 'Method not allowed',\n        'status': 'fail'\n    }, status=405)"}, {"index": 115, "path": "ML/third_iteration/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 116, "path": "ML/third_iteration/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass ThirdIterationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'third_iteration'\n"}, {"index": 117, "path": "ML/third_iteration/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 118, "path": "ML/third_iteration/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 119, "path": "ML/third_iteration/urls.py", "chunk": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('upload-resume3/', views.classify_resume3, name='classify_resume3'),\n]"}, {"index": 120, "path": "ML/third_iteration/views.py", "chunk": "import os\nimport json\nimport base64\nimport tempfile\nimport torch\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom transformers import BertTokenizer, BertForSequenceClassification\nfrom PyPDF2 import PdfReader\n\n# Define the label mapping (same as in your training script)\nLABEL_MAPPING = {0: 'ACCOUNTING', 1: 'ARTS', 2: 'AUTOMOBILE', 3: 'AVIATION', 4: 'BANKING', 5: 'BUSINESS_DEVELOPMENT', 6: '"}, {"index": 121, "path": "ML/third_iteration/views.py", "chunk": "CCOUNTING', 1: 'ARTS', 2: 'AUTOMOBILE', 3: 'AVIATION', 4: 'BANKING', 5: 'BUSINESS_DEVELOPMENT', 6: 'CONSTRUCTION', 7: 'CONSULTING', 8: 'CREATIVE', 9: 'EDUCATION', 10: 'ENGINEERING', 11: 'FINANCE', 12: 'HEALTHCARE', 13: 'INFORMATION_TECHNOLOGY', 14: 'LEGAL', 15: 'MARKETING', 16: 'OTHERS', 17: 'SALES'}\n\n# Model and tokenizer setup\nMODEL_PATH = \"C:/Users/vinay/Desktop/asims_classifi/ClassiFI/model_weights/third_iteration_18\"\ntokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\nmodel = Ber"}, {"index": 122, "path": "ML/third_iteration/views.py", "chunk": "ights/third_iteration_18\"\ntokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\nmodel = BertForSequenceClassification.from_pretrained(MODEL_PATH)\nmodel.eval()\n\ndef is_valid_base64(base64_str):\n    \"\"\"\n    Validate base64 encoded string.\n    \n    Args:\n        base64_str (str): Base64 encoded string\n    \n    Returns:\n        bool: True if valid base64, False otherwise\n    \"\"\"\n    try:\n        base64.b64decode(base64_str, validate=True)\n        return True\n    except Exception:\n        re"}, {"index": 123, "path": "ML/third_iteration/views.py", "chunk": "    base64.b64decode(base64_str, validate=True)\n        return True\n    except Exception:\n        return False\n\ndef extract_text_from_base64_pdf(base64_pdf):\n    \"\"\"\n    Extract text from a base64 encoded PDF file.\n    \n    Args:\n        base64_pdf (str): Base64 encoded PDF content\n    \n    Returns:\n        str: Extracted text from the PDF\n    \"\"\"\n    try:\n        # Decode base64 to bytes\n        pdf_bytes = base64.b64decode(base64_pdf)\n        \n        # Try multiple encodings\n        encodings"}, {"index": 124, "path": "ML/third_iteration/views.py", "chunk": "pdf_bytes = base64.b64decode(base64_pdf)\n        \n        # Try multiple encodings\n        encodings_to_try = ['utf-8', 'latin-1', 'utf-16', 'windows-1252']\n        \n        for encoding in encodings_to_try:\n            try:\n                # Create a temporary file\n                with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as temp_pdf:\n                    temp_pdf.write(pdf_bytes)\n                    temp_pdf_path = temp_pdf.name\n                \n                # Read PDF\n  "}, {"index": 125, "path": "ML/third_iteration/views.py", "chunk": "es)\n                    temp_pdf_path = temp_pdf.name\n                \n                # Read PDF\n                reader = PdfReader(temp_pdf_path)\n                text = \"\"\n                for page in reader.pages:\n                    text += page.extract_text()\n                \n                # Clean up temporary file\n                os.unlink(temp_pdf_path)\n                \n                return text\n            except UnicodeDecodeError:\n                continue\n        \n        return \"\"\n"}, {"index": 126, "path": "ML/third_iteration/views.py", "chunk": "urn text\n            except UnicodeDecodeError:\n                continue\n        \n        return \"\"\n    except Exception as e:\n        print(f\"Error extracting PDF text: {e}\")\n        return \"\"\n\ndef predict_resume_category(resume_text):\n    \"\"\"\n    Predict the category of a resume.\n    \n    Args:\n        resume_text (str): Text content of the resume\n    \n    Returns:\n        str: Predicted category\n    \"\"\"\n    try:\n        # Tokenize the input\n        inputs = tokenizer(\n            resume_text,"}, {"index": 127, "path": "ML/third_iteration/views.py", "chunk": "y\n    \"\"\"\n    try:\n        # Tokenize the input\n        inputs = tokenizer(\n            resume_text, \n            return_tensors=\"pt\", \n            truncation=True, \n            padding=True, \n            max_length=512\n        )\n        \n        # Get model prediction\n        with torch.no_grad():\n            outputs = model(**inputs)\n            logits = outputs.logits\n        \n        # Get the predicted class\n        predicted_class_id = torch.argmax(logits, dim=1).item()\n        return LABE"}, {"index": 128, "path": "ML/third_iteration/views.py", "chunk": " predicted class\n        predicted_class_id = torch.argmax(logits, dim=1).item()\n        return LABEL_MAPPING.get(predicted_class_id, 'OTHERS')\n    \n    except Exception as e:\n        print(f\"Prediction error: {e}\")\n        return 'UNKNOWN'\n\n@csrf_exempt\n@require_http_methods([\"POST\"])\n@csrf_exempt\n@require_http_methods([\"POST\"])\ndef classify_resume3(request):\n    if request.method == 'POST':\n        # Check if file is present\n        if 'resume' not in request.FILES:\n            return JsonResp"}, {"index": 129, "path": "ML/third_iteration/views.py", "chunk": "    # Check if file is present\n        if 'resume' not in request.FILES:\n            return JsonResponse({\n                'error': 'No resume file uploaded',\n                'status': 'fail'\n            }, status=400)\n        \n        # Get the uploaded file\n        resume_file = request.FILES['resume']\n        \n        # Validate file type (optional but recommended)\n        if not resume_file.name.lower().endswith('.pdf'):\n            return JsonResponse({\n                'error': 'Only PDF fi"}, {"index": 130, "path": "ML/third_iteration/views.py", "chunk": "me.lower().endswith('.pdf'):\n            return JsonResponse({\n                'error': 'Only PDF files are allowed',\n                'status': 'fail'\n            }, status=400)\n        \n        try:\n            # Read the file content\n            resume_content = resume_file.read()\n            \n            # Convert to base64\n            resume_base64 = base64.b64encode(resume_content).decode('utf-8')\n            \n            # Extract text from base64 PDF\n            resume_text = extract_text"}, {"index": 131, "path": "ML/third_iteration/views.py", "chunk": "f-8')\n            \n            # Extract text from base64 PDF\n            resume_text = extract_text_from_base64_pdf(resume_base64)\n            \n            # Check if text extraction was successful\n            if not resume_text.strip():\n                return JsonResponse({\n                    'error': 'Could not extract text from PDF', \n                    'status': 'fail',\n                    'details': 'PDF may be empty, corrupted, or in an unsupported format'\n                }, status=400)"}, {"index": 132, "path": "ML/third_iteration/views.py", "chunk": "'details': 'PDF may be empty, corrupted, or in an unsupported format'\n                }, status=400)\n            \n            # Predict category\n            #predicted_category = predict_resume_category(resume_text)\n            predicted_category=\"Blockchain\"\n            # Return prediction\n            return JsonResponse({\n                'category': predicted_category,\n                'status': 'success'\n            })\n        \n        except Exception as e:\n            return JsonResponse({\n "}, {"index": 133, "path": "ML/third_iteration/views.py", "chunk": "'success'\n            })\n        \n        except Exception as e:\n            return JsonResponse({\n                'error': 'Processing error', \n                'status': 'fail',\n                'details': str(e)\n            }, status=500)\n    \n    # Handle non-POST requests\n    return JsonResponse({\n        'error': 'Method not allowed',\n        'status': 'fail'\n    }, status=405)"}, {"index": 134, "path": "ML/training_model/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 135, "path": "ML/training_model/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass TrainingModelConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'training_model'\n"}, {"index": 136, "path": "ML/training_model/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 137, "path": "ML/training_model/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 138, "path": "ML/training_model/urls.py", "chunk": "# urls.py in your app directory\nfrom django.urls import path\nfrom .views import train_classification_view, predict_classification_view,predict_single_document_view,comprehensive_document_analysis_view\n\nurlpatterns = [\n    path('train1/', train_classification_view, name='train_classification'),\n    path('predict1/', predict_classification_view, name='predict_classification'),\n    path('uploadsingle/', predict_single_document_view, name='predict_classification'),\n    path('analyze/', comprehensive"}, {"index": 139, "path": "ML/training_model/urls.py", "chunk": "/', predict_single_document_view, name='predict_classification'),\n    path('analyze/', comprehensive_document_analysis_view, name='comprehensive_document_analysis_view'),\n]"}, {"index": 140, "path": "ML/training_model/views.py", "chunk": "import os\nimport json\nimport shutil\nimport zipfile\nimport pandas as pd\nimport torch\nimport warnings\nfrom django.conf import settings\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.core.files.storage import default_storage\nimport os\nimport datetime\nimport shutil\nimport os\nimport PyPDF2\nimport docx\nimport pandas as pd\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains im"}, {"index": 141, "path": "ML/training_model/views.py", "chunk": " import ChatGoogleGenerativeAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.core.files.storage import default_storage\n\n\n# Machine Learning Imports\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom transformers import (\n    BertTokenizer, \n    BertForSequenceClassification, \n    Trainer, \n    TrainingArguments\n)\nfrom datasets import"}, {"index": 142, "path": "ML/training_model/views.py", "chunk": "zer, \n    BertForSequenceClassification, \n    Trainer, \n    TrainingArguments\n)\nfrom datasets import Dataset\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support\n\n# Suppress specific warnings\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\nclass DocumentClassificationView:\n    def __init__(self):\n        # Initialize model and tokenizer paths\n        self.model_path = os.path.join(settings.BASE_DIR, 'combined_category_model2')\n        self.tokenizer = BertTokenize"}, {"index": 143, "path": "ML/training_model/views.py", "chunk": " = os.path.join(settings.BASE_DIR, 'combined_category_model2')\n        self.tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n        \n        # Try to load existing model, if not exists, it will be None\n        try:\n            self.model = BertForSequenceClassification.from_pretrained(self.model_path)\n            self.model.eval()\n        except:\n            self.model = None\n\n        # Load label mapping if exists\n        self.label_mapping = self._load_label_mapping()\n\n    def _"}, {"index": 144, "path": "ML/training_model/views.py", "chunk": "   # Load label mapping if exists\n        self.label_mapping = self._load_label_mapping()\n\n    def _load_label_mapping(self):\n        \"\"\"\n        Load label mapping file\n        \"\"\"\n        mapping_path = os.path.join(self.model_path, 'label_mapping.json')\n        if os.path.exists(mapping_path):\n            with open(mapping_path, 'r') as f:\n                return json.load(f)\n        return None\n\n    def process_zip_file(self, zip_file):\n        \"\"\"\n        Process uploaded zip file and create"}, {"index": 145, "path": "ML/training_model/views.py", "chunk": "\n\n    def process_zip_file(self, zip_file):\n        \"\"\"\n        Process uploaded zip file and create DataFrame with file details\n        \"\"\"\n        # Create a temporary directory to extract files\n        temp_dir = os.path.join(settings.MEDIA_ROOT, 'temp_upload')\n        os.makedirs(temp_dir, exist_ok=True)\n\n        # Extract zip file\n        with zipfile.ZipFile(zip_file, 'r') as zip_ref:\n            zip_ref.extractall(temp_dir)\n\n        # Create DataFrame to store file information\n        fil"}, {"index": 146, "path": "ML/training_model/views.py", "chunk": "      zip_ref.extractall(temp_dir)\n\n        # Create DataFrame to store file information\n        file_data = []\n        unique_categories = set()\n\n        for root, dirs, files in os.walk(temp_dir):\n            for file in files:\n                if file.endswith('.txt'):\n                    file_path = os.path.join(root, file)\n                    category = os.path.basename(root)  # Folder name as category\n                    unique_categories.add(category)\n                    \n                 "}, {"index": 147, "path": "ML/training_model/views.py", "chunk": " category\n                    unique_categories.add(category)\n                    \n                    # Read file content\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        content = f.read()\n                    \n                    file_data.append({\n                        'filename': file,\n                        'category': category,\n                        'text': content\n                    })\n\n        # Convert to DataFrame\n        df = pd.DataF"}, {"index": 148, "path": "ML/training_model/views.py", "chunk": "        'text': content\n                    })\n\n        # Convert to DataFrame\n        df = pd.DataFrame(file_data)\n        \n        # Clean up temporary directory\n        shutil.rmtree(temp_dir)\n\n        # Create or update label mapping\n        if self.label_mapping is None:\n            self.label_mapping = {cat: idx for idx, cat in enumerate(sorted(unique_categories))}\n            \n            # Save label mapping\n            mapping_path = os.path.join(self.model_path, 'label_mapping.json')\n "}, {"index": 149, "path": "ML/training_model/views.py", "chunk": " Save label mapping\n            mapping_path = os.path.join(self.model_path, 'label_mapping.json')\n            with open(mapping_path, 'w') as f:\n                json.dump(self.label_mapping, f)\n\n        # Add numeric label\n        df['label'] = df['category'].map(self.label_mapping)\n\n        return df\n\n    def predict_document_category(self, text):\n        \"\"\"\n        Predict category for a single document\n        \"\"\"\n        if self.model is None:\n            raise ValueError(\"Model has not be"}, {"index": 150, "path": "ML/training_model/views.py", "chunk": "e document\n        \"\"\"\n        if self.model is None:\n            raise ValueError(\"Model has not been trained. Please train the model first.\")\n\n        # Tokenize input\n        inputs = self.tokenizer(\n            text, \n            return_tensors=\"pt\", \n            truncation=True, \n            padding=True, \n            max_length=512\n        )\n        \n        # Move inputs to the same device as the model\n        device = next(self.model.parameters()).device\n        inputs = {k: v.to(device)"}, {"index": 151, "path": "ML/training_model/views.py", "chunk": "as the model\n        device = next(self.model.parameters()).device\n        inputs = {k: v.to(device) for k, v in inputs.items()}\n        \n        # Predict\n        with torch.no_grad():\n            outputs = self.model(**inputs)\n            logits = outputs.logits\n        \n        predicted_class_id = torch.argmax(logits, dim=1).item()\n        \n        # Reverse lookup category name from ID\n        reverse_mapping = {v: k for k, v in self.label_mapping.items()}\n        return reverse_mapping[pre"}, {"index": 152, "path": "ML/training_model/views.py", "chunk": "  reverse_mapping = {v: k for k, v in self.label_mapping.items()}\n        return reverse_mapping[predicted_class_id]\n\ndef tokenize_function(examples, tokenizer, max_length=512):\n    \"\"\"\n    Tokenize the input text using BERT tokenizer\n    \"\"\"\n    return tokenizer(\n        examples['text'], \n        truncation=True, \n        padding=True, \n        max_length=max_length\n    )\n\ndef compute_metrics(pred):\n    \"\"\"\n    Compute evaluation metrics\n    \"\"\"\n    labels = pred.label_ids\n    preds = pred.pre"}, {"index": 153, "path": "ML/training_model/views.py", "chunk": "ed):\n    \"\"\"\n    Compute evaluation metrics\n    \"\"\"\n    labels = pred.label_ids\n    preds = pred.predictions.argmax(-1)\n    \n    # Calculate metrics\n    precision, recall, f1, _ = precision_recall_fscore_support(\n        labels, preds, average='weighted'\n    )\n    accuracy = accuracy_score(labels, preds)\n    \n    return {\n        'accuracy': accuracy,\n        'precision': precision,\n        'recall': recall,\n        'f1': f1\n    }\n\ndef train_document_classifier(training_df, base_model_path='./mo"}, {"index": 154, "path": "ML/training_model/views.py", "chunk": "l': recall,\n        'f1': f1\n    }\n\ndef train_document_classifier(training_df, base_model_path='./models'):\n    \"\"\"\n    Train BERT model for document classification with timestamped folder\n    \"\"\"\n    # Create timestamped folder\n    timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    model_path = os.path.join(base_model_path, f'document_classifier_{timestamp}')\n    \n    # Ensure model directory exists\n    os.makedirs(model_path, exist_ok=True)\n    \n    # Prepare train, validation s"}, {"index": 155, "path": "ML/training_model/views.py", "chunk": "l directory exists\n    os.makedirs(model_path, exist_ok=True)\n    \n    # Prepare train, validation split\n    train, val = train_test_split(\n        training_df, \n        test_size=0.2, \n        random_state=42, \n        stratify=training_df['category']\n    )\n    \n    # Initialize tokenizer and model\n    tokenizer = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n    num_labels = len(training_df['category'].unique())\n    model = BertForSequenceClassification.from_pretrained(\n        \"bert-base"}, {"index": 156, "path": "ML/training_model/views.py", "chunk": "['category'].unique())\n    model = BertForSequenceClassification.from_pretrained(\n        \"bert-base-uncased\", \n        num_labels=num_labels\n    )\n    \n    # Prepare label mapping\n    label_mapping = {cat: idx for idx, cat in enumerate(sorted(training_df['category'].unique()))}\n    \n    # Convert dataframes to Hugging Face Datasets\n    train_dataset = Dataset.from_pandas(train)\n    val_dataset = Dataset.from_pandas(val)\n    \n    # Tokenize datasets\n    def tokenize_wrapper(examples):\n        re"}, {"index": 157, "path": "ML/training_model/views.py", "chunk": "Dataset.from_pandas(val)\n    \n    # Tokenize datasets\n    def tokenize_wrapper(examples):\n        return tokenize_function(examples, tokenizer)\n    \n    train_dataset = train_dataset.map(tokenize_wrapper, batched=True)\n    val_dataset = val_dataset.map(tokenize_wrapper, batched=True)\n    \n    # Set dataset format\n    train_dataset.set_format(type=\"torch\", columns=[\"input_ids\", \"attention_mask\", \"label\"])\n    val_dataset.set_format(type=\"torch\", columns=[\"input_ids\", \"attention_mask\", \"label\"])\n "}, {"index": 158, "path": "ML/training_model/views.py", "chunk": "abel\"])\n    val_dataset.set_format(type=\"torch\", columns=[\"input_ids\", \"attention_mask\", \"label\"])\n    \n    # Training arguments\n    training_args = TrainingArguments(\n        output_dir=model_path,\n        evaluation_strategy=\"epoch\",\n        learning_rate=2e-5,\n        per_device_train_batch_size=16,\n        per_device_eval_batch_size=16,\n        num_train_epochs=5,\n        weight_decay=0.01,\n        logging_dir=os.path.join(model_path, \"logs\"),\n        logging_steps=10,\n        save_total_lim"}, {"index": 159, "path": "ML/training_model/views.py", "chunk": "      logging_dir=os.path.join(model_path, \"logs\"),\n        logging_steps=10,\n        save_total_limit=2,\n        save_strategy=\"epoch\",\n    )\n    \n    # Initialize Trainer\n    trainer = Trainer(\n        model=model,\n        args=training_args,\n        train_dataset=train_dataset,\n        eval_dataset=val_dataset,\n        tokenizer=tokenizer,\n        compute_metrics=compute_metrics,\n    )\n    \n    # Train the model\n    trainer.train()\n    \n    # Save model, tokenizer, and label mapping\n    train"}, {"index": 160, "path": "ML/training_model/views.py", "chunk": " # Train the model\n    trainer.train()\n    \n    # Save model, tokenizer, and label mapping\n    trainer.save_model(model_path)\n    tokenizer.save_pretrained(model_path)\n    \n    # Save label mapping\n    with open(os.path.join(model_path, 'label_mapping.json'), 'w') as f:\n        json.dump(label_mapping, f)\n    \n    print(f\"Model training completed and saved to {model_path}\")\n    return model, tokenizer, label_mapping, model_path\n\n@csrf_exempt\ndef train_classification_view(request):\n    \"\"\"\n    Vi"}, {"index": 161, "path": "ML/training_model/views.py", "chunk": "izer, label_mapping, model_path\n\n@csrf_exempt\ndef train_classification_view(request):\n    \"\"\"\n    View to handle training on uploaded zip file with timestamped model saving\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            # Get uploaded zip file\n            zip_file = request.FILES.get('file')\n            if not zip_file:\n                return JsonResponse({'error': 'No file uploaded'}, status=400)\n\n            # Save file temporarily\n            file_path = default_storage.sav"}, {"index": 162, "path": "ML/training_model/views.py", "chunk": "aded'}, status=400)\n\n            # Save file temporarily\n            file_path = default_storage.save('uploads/training_data.zip', zip_file)\n            full_file_path = os.path.join(settings.MEDIA_ROOT, file_path)\n\n            # Process zip file\n            classifier = DocumentClassificationView()\n            training_df = classifier.process_zip_file(full_file_path)\n\n            # Train the model\n            base_model_path = os.path.join(settings.BASE_DIR, 'models')\n            os.makedirs(ba"}, {"index": 163, "path": "ML/training_model/views.py", "chunk": "l\n            base_model_path = os.path.join(settings.BASE_DIR, 'models')\n            os.makedirs(base_model_path, exist_ok=True)\n            \n            model, tokenizer, label_mapping, model_path = train_document_classifier(\n                training_df, \n                base_model_path\n            )\n\n            return JsonResponse({\n                'message': 'Model trained successfully',\n                'total_files': len(training_df),\n                'categories': list(training_df['categor"}, {"index": 164, "path": "ML/training_model/views.py", "chunk": "            'total_files': len(training_df),\n                'categories': list(training_df['category'].unique()),\n                'model_path': model_path\n            })\n\n        except Exception as e:\n            return JsonResponse({'error': str(e)}, status=500)\n    \n    return JsonResponse({'error': 'Invalid request method'}, status=405)\n@csrf_exempt\ndef predict_classification_view(request):\n    \"\"\"\n    View to handle prediction on uploaded zip file of text files without predefined labels\n  "}, {"index": 165, "path": "ML/training_model/views.py", "chunk": "   \"\"\"\n    View to handle prediction on uploaded zip file of text files without predefined labels\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            # Get uploaded zip file\n            zip_file = request.FILES.get('file')\n            if not zip_file:\n                return JsonResponse({'error': 'No file uploaded'}, status=400)\n\n            # Save file temporarily\n            file_path = default_storage.save('uploads/prediction_data.zip', zip_file)\n            full_file_path = os."}, {"index": 166, "path": "ML/training_model/views.py", "chunk": "ath = default_storage.save('uploads/prediction_data.zip', zip_file)\n            full_file_path = os.path.join(settings.MEDIA_ROOT, file_path)\n\n            # Initialize classifier\n            classifier = DocumentClassificationView()\n            \n            # Check if model is trained\n            if classifier.model is None:\n                return JsonResponse({\n                    'error': 'No trained model found. Please train a model first.'\n                }, status=400)\n\n            # Create"}, {"index": 167, "path": "ML/training_model/views.py", "chunk": "ained model found. Please train a model first.'\n                }, status=400)\n\n            # Create a temporary directory to extract files\n            temp_dir = os.path.join(settings.MEDIA_ROOT, 'temp_prediction')\n            os.makedirs(temp_dir, exist_ok=True)\n\n            # Extract zip file\n            with zipfile.ZipFile(full_file_path, 'r') as zip_ref:\n                zip_ref.extractall(temp_dir)\n\n            # Prepare prediction results\n            prediction_results = []\n\n            #"}, {"index": 168, "path": "ML/training_model/views.py", "chunk": "mp_dir)\n\n            # Prepare prediction results\n            prediction_results = []\n\n            # Process each text file\n            for filename in os.listdir(temp_dir):\n                if filename.endswith('.txt'):\n                    file_path = os.path.join(temp_dir, filename)\n                    \n                    # Read file content\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        text_content = f.read()\n                    \n               "}, {"index": 169, "path": "ML/training_model/views.py", "chunk": "='utf-8') as f:\n                        text_content = f.read()\n                    \n                    # Predict category\n                    predicted_category = classifier.predict_document_category(text_content)\n                    \n                    # Store prediction result\n                    prediction_results.append({\n                        'filename': filename,\n                        'text': text_content,\n                        'predicted_category': predicted_category\n            "}, {"index": 170, "path": "ML/training_model/views.py", "chunk": " 'text': text_content,\n                        'predicted_category': predicted_category\n                    })\n\n            # Clean up temporary directory\n            shutil.rmtree(temp_dir)\n\n            # Create results directory\n            results_dir = os.path.join(settings.MEDIA_ROOT, 'prediction_results')\n            os.makedirs(results_dir, exist_ok=True)\n\n            # Create timestamped results file\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n            re"}, {"index": 171, "path": "ML/training_model/views.py", "chunk": "esults file\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n            results_filename = f'prediction_results_{timestamp}.csv'\n            results_path = os.path.join(results_dir, results_filename)\n\n            # Save results to CSV\n            results_df = pd.DataFrame(prediction_results)\n            results_df.to_csv(results_path, index=False)\n\n            return JsonResponse({\n                'message': 'Prediction completed successfully',\n                'total_fi"}, {"index": 172, "path": "ML/training_model/views.py", "chunk": "Response({\n                'message': 'Prediction completed successfully',\n                'total_files': len(prediction_results),\n                'results_file': results_filename,\n                'predictions': prediction_results\n            })\n\n        except ValueError as ve:\n            # Specific error if model is not usable\n            return JsonResponse({'error': str(ve)}, status=400)\n        except Exception as e:\n            return JsonResponse({'error': str(e)}, status=500)\n    \n    r"}, {"index": 173, "path": "ML/training_model/views.py", "chunk": "    except Exception as e:\n            return JsonResponse({'error': str(e)}, status=500)\n    \n    return JsonResponse({'error': 'Invalid request method'}, status=405)\n\n@csrf_exempt\ndef predict_single_document_view(request):\n    \"\"\"\n    View to handle prediction for a single uploaded document across all trained models\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            # Get uploaded text file\n            uploaded_file = request.FILES.get('file')\n            if not uploaded_file:\n "}, {"index": 174, "path": "ML/training_model/views.py", "chunk": " text file\n            uploaded_file = request.FILES.get('file')\n            if not uploaded_file:\n                return JsonResponse({'error': 'No file uploaded'}, status=400)\n\n            # Ensure it's a text file\n            if not uploaded_file.name.endswith('.txt'):\n                return JsonResponse({'error': 'Only .txt files are supported'}, status=400)\n\n            # Read file content\n            file_content = uploaded_file.read().decode('utf-8')\n\n            # Find all trained models"}, {"index": 175, "path": "ML/training_model/views.py", "chunk": "          file_content = uploaded_file.read().decode('utf-8')\n\n            # Find all trained models\n            models_dir = os.path.join(settings.BASE_DIR, 'models')\n            model_predictions = []\n\n            # Iterate through all model directories\n            if os.path.exists(models_dir):\n                for model_folder in os.listdir(models_dir):\n                    full_model_path = os.path.join(models_dir, model_folder)\n                    \n                    # Check if it's a valid"}, {"index": 176, "path": "ML/training_model/views.py", "chunk": "path.join(models_dir, model_folder)\n                    \n                    # Check if it's a valid model directory\n                    if os.path.isdir(full_model_path) and 'label_mapping.json' in os.listdir(full_model_path):\n                        try:\n                            # Load tokenizer and model\n                            tokenizer = BertTokenizer.from_pretrained(full_model_path)\n                            model = BertForSequenceClassification.from_pretrained(full_model_path)\n  "}, {"index": 177, "path": "ML/training_model/views.py", "chunk": "                           model = BertForSequenceClassification.from_pretrained(full_model_path)\n                            model.eval()\n\n                            # Load label mapping\n                            with open(os.path.join(full_model_path, 'label_mapping.json'), 'r') as f:\n                                label_mapping = json.load(f)\n\n                            # Tokenize input\n                            inputs = tokenizer(\n                                file_content, \n       "}, {"index": 178, "path": "ML/training_model/views.py", "chunk": "                          inputs = tokenizer(\n                                file_content, \n                                return_tensors=\"pt\", \n                                truncation=True, \n                                padding=True, \n                                max_length=512\n                            )\n                            \n                            # Predict\n                            with torch.no_grad():\n                                outputs = model(**inputs)\n    "}, {"index": 179, "path": "ML/training_model/views.py", "chunk": "                with torch.no_grad():\n                                outputs = model(**inputs)\n                                logits = outputs.logits\n                            \n                            predicted_class_id = torch.argmax(logits, dim=1).item()\n                            \n                            # Reverse lookup category name from ID\n                            reverse_mapping = {v: k for k, v in label_mapping.items()}\n                            predicted_category = rev"}, {"index": 180, "path": "ML/training_model/views.py", "chunk": "ping = {v: k for k, v in label_mapping.items()}\n                            predicted_category = reverse_mapping[predicted_class_id]\n\n                            model_predictions.append({\n                                'model': model_folder,\n                                'predicted_category': predicted_category\n                            })\n\n                        except Exception as model_error:\n                            # Log the error but continue with other models\n                   "}, {"index": 181, "path": "ML/training_model/views.py", "chunk": "rror:\n                            # Log the error but continue with other models\n                            print(f\"Error processing model {model_folder}: {str(model_error)}\")\n                            continue\n\n            # If no models found\n            if not model_predictions:\n                return JsonResponse({\n                    'error': 'No trained models found. Please train a model first.'\n                }, status=400)\n\n            # Prepare response\n            return JsonRespon"}, {"index": 182, "path": "ML/training_model/views.py", "chunk": "first.'\n                }, status=400)\n\n            # Prepare response\n            return JsonResponse({\n                'message': 'Document category predicted successfully',\n                'filename': uploaded_file.name,\n                'predictions': model_predictions\n            })\n\n        except ValueError as ve:\n            # Specific error if model is not trained\n            return JsonResponse({'error': str(ve)}, status=400)\n        except Exception as e:\n            return JsonRespons"}, {"index": 183, "path": "ML/training_model/views.py", "chunk": "sponse({'error': str(ve)}, status=400)\n        except Exception as e:\n            return JsonResponse({'error': str(e)}, status=500)\n    \n    return JsonResponse({'error': 'Invalid request method'}, status=405)\n\n\n\ndef extract_text_from_file(uploaded_file):\n    \"\"\"\n    Extract text from various file types using built-in libraries\n    \"\"\"\n    file_extension = os.path.splitext(uploaded_file.name)[1].lower()\n\n    try:\n        if file_extension == '.txt':\n            return uploaded_file.read().decod"}, {"index": 184, "path": "ML/training_model/views.py", "chunk": "lower()\n\n    try:\n        if file_extension == '.txt':\n            return uploaded_file.read().decode('utf-8')\n        \n        elif file_extension == '.pdf':\n            pdf_reader = PyPDF2.PdfReader(uploaded_file)\n            text = ''\n            for page in pdf_reader.pages:\n                text += page.extract_text() + '\\n'\n            return text\n        \n        elif file_extension in ['.docx', '.doc']:\n            doc = docx.Document(uploaded_file)\n            return '\\n'.join([paragraph"}, {"index": 185, "path": "ML/training_model/views.py", "chunk": "cx', '.doc']:\n            doc = docx.Document(uploaded_file)\n            return '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n        \n        elif file_extension == '.csv':\n            df = pd.read_csv(uploaded_file)\n            return df.to_string()\n        \n        elif file_extension == '.json':\n            return uploaded_file.read().decode('utf-8')\n        \n        else:\n            raise ValueError(f\"Unsupported file type: {file_extension}\")\n    \n    except Exception as e:\n "}, {"index": 186, "path": "ML/training_model/views.py", "chunk": "      raise ValueError(f\"Unsupported file type: {file_extension}\")\n    \n    except Exception as e:\n        raise ValueError(f\"Error extracting text: {str(e)}\")\n@csrf_exempt\ndef comprehensive_document_analysis_view(request):\n    \"\"\"\n    Comprehensive document analysis using Gemini with structured JSON response\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            # Get uploaded file\n            uploaded_file = request.FILES.get('file')\n            if not uploaded_file:\n               "}, {"index": 187, "path": "ML/training_model/views.py", "chunk": "         uploaded_file = request.FILES.get('file')\n            if not uploaded_file:\n                return JsonResponse({'error': 'No file uploaded'}, status=400)\n\n            # Extract text\n            document_text = extract_text_from_file(uploaded_file)\n\n            # Truncate text if too long (Gemini has token limits)\n            MAX_TOKENS = 10000\n            document_text = document_text[:MAX_TOKENS]\n\n            # Initialize Gemini model\n            api_key = os.environ.get('GOOGLE_API_K"}, {"index": 188, "path": "ML/training_model/views.py", "chunk": "AX_TOKENS]\n\n            # Initialize Gemini model\n            api_key = os.environ.get('GOOGLE_API_KEY')\n            if not api_key:\n                return JsonResponse({'error': 'Google API key not configured'}, status=500)\n\n            llm = ChatGoogleGenerativeAI(\n                model=\"gemini-pro\",\n                temperature=0.3,\n                max_tokens=2048,\n                api_key=api_key\n            )\n\n            # Comprehensive Analysis Prompt\n            comprehensive_prompt = Prom"}, {"index": 189, "path": "ML/training_model/views.py", "chunk": "y\n            )\n\n            # Comprehensive Analysis Prompt\n            comprehensive_prompt = PromptTemplate(\n                input_variables=[\"document_text\"],\n                template=\"\"\"Perform a comprehensive multi-dimensional analysis of the following document, \n                returning a STRICTLY STRUCTURED JSON response with the following keys:\n\n1. document_overview: \n   - type: string (document classification)\n   - purpose: string (primary purpose)\n   - key_themes: list of strings\n\n2."}, {"index": 190, "path": "ML/training_model/views.py", "chunk": "document classification)\n   - purpose: string (primary purpose)\n   - key_themes: list of strings\n\n2. content_structure:\n   - major_sections: list of strings\n   - writing_style: string\n   - tone: string\n   - complexity: string (low/medium/high)\n\n3. key_insights:\n   - top_points: list of strings\n   - critical_takeaways: list of strings\n   - potential_implications: list of strings\n\n4. linguistic_analysis:\n   - vocabulary_complexity: string (basic/advanced/technical)\n   - sentence_structure: string\n"}, {"index": 191, "path": "ML/training_model/views.py", "chunk": "ysis:\n   - vocabulary_complexity: string (basic/advanced/technical)\n   - sentence_structure: string\n   - readability_score: number (0-100)\n\n5. contextual_classification:\n   - suggested_domain: string\n   - target_audience: string\n   - professional_context: string\n\n6. sentiment_analysis:\n   - overall_sentiment: string (positive/negative/neutral)\n   - emotional_undertones: list of strings\n   - sentiment_ratio: number (-1 to 1)\n\n7. potential_use_cases:\n   - recommended_applications: list of strings\n"}, {"index": 192, "path": "ML/training_model/views.py", "chunk": "ent_ratio: number (-1 to 1)\n\n7. potential_use_cases:\n   - recommended_applications: list of strings\n   - relevant_industries: list of strings\n   - suggested_actions: list of strings\n\nAnalyze the document: {document_text}\n\nReturn ONLY a valid JSON response with these exact keys and corresponding structured data.\"\"\"\n            )\n\n            # Create analysis chain\n            analysis_chain = LLMChain(llm=llm, prompt=comprehensive_prompt)\n\n            # Perform analysis\n            analysis_resu"}, {"index": 193, "path": "ML/training_model/views.py", "chunk": "hain(llm=llm, prompt=comprehensive_prompt)\n\n            # Perform analysis\n            analysis_result = analysis_chain.run(document_text)\n\n            # Enhanced JSON parsing with multiple fallback strategies\n            def parse_json_safely(json_str):\n                # Remove any text before and after JSON\n                import re\n                json_match = re.search(r'\\{.*\\}', json_str, re.DOTALL)\n                if json_match:\n                    json_str = json_match.group(0)\n          "}, {"index": 194, "path": "ML/training_model/views.py", "chunk": "DOTALL)\n                if json_match:\n                    json_str = json_match.group(0)\n                \n                # Try parsing with multiple approaches\n                try:\n                    # First, standard parsing\n                    return json.loads(json_str)\n                except json.JSONDecodeError:\n                    try:\n                        # Try removing trailing/leading whitespace\n                        return json.loads(json_str.strip())\n                    except"}, {"index": 195, "path": "ML/training_model/views.py", "chunk": "ng whitespace\n                        return json.loads(json_str.strip())\n                    except:\n                        try:\n                            # Use ast for more lenient parsing\n                            import ast\n                            return ast.literal_eval(json_str)\n                        except:\n                            # Final fallback to predefined structure\n                            return {\n                                \"document_overview\": {\n            "}, {"index": 196, "path": "ML/training_model/views.py", "chunk": "                        return {\n                                \"document_overview\": {\n                                    \"type\": \"Unable to analyze\",\n                                    \"purpose\": \"Analysis failed\",\n                                    \"key_themes\": [\"N/A\"]\n                                },\n                                \"content_structure\": {\n                                    \"major_sections\": [\"Unable to determine\"],\n                                    \"writing_style\": \""}, {"index": 197, "path": "ML/training_model/views.py", "chunk": "   \"major_sections\": [\"Unable to determine\"],\n                                    \"writing_style\": \"Unknown\",\n                                    \"tone\": \"Neutral\",\n                                    \"complexity\": \"Medium\"\n                                },\n                                \"key_insights\": {\n                                    \"top_points\": [\"Analysis could not be completed\"],\n                                    \"critical_takeaways\": [\"Please review document manually\"],\n         "}, {"index": 198, "path": "ML/training_model/views.py", "chunk": "                                \"critical_takeaways\": [\"Please review document manually\"],\n                                    \"potential_implications\": [\"No implications determined\"]\n                                },\n                                \"linguistic_analysis\": {\n                                    \"vocabulary_complexity\": \"Unknown\",\n                                    \"sentence_structure\": \"Unable to assess\",\n                                    \"readability_score\": 0\n               "}, {"index": 199, "path": "ML/training_model/views.py", "chunk": "ure\": \"Unable to assess\",\n                                    \"readability_score\": 0\n                                },\n                                \"contextual_classification\": {\n                                    \"suggested_domain\": \"Unclassified\",\n                                    \"target_audience\": \"General\",\n                                    \"professional_context\": \"Not specified\"\n                                },\n                                \"sentiment_analysis\": {\n            "}, {"index": 200, "path": "ML/training_model/views.py", "chunk": "                             },\n                                \"sentiment_analysis\": {\n                                    \"overall_sentiment\": \"Neutral\",\n                                    \"emotional_undertones\": [\"N/A\"],\n                                    \"sentiment_ratio\": 0\n                                },\n                                \"potential_use_cases\": {\n                                    \"recommended_applications\": [\"Manual review recommended\"],\n                               "}, {"index": 201, "path": "ML/training_model/views.py", "chunk": "          \"recommended_applications\": [\"Manual review recommended\"],\n                                    \"relevant_industries\": [\"Not determined\"],\n                                    \"suggested_actions\": [\"Consult domain expert\"]\n                                }\n                            }\n\n            # Parse the analysis result\n            parsed_analysis = parse_json_safely(analysis_result)\n            print(\"analysis is:\",parsed_analysis)\n            # Prepare response\n            return"}, {"index": 202, "path": "ML/training_model/views.py", "chunk": "\n            print(\"analysis is:\",parsed_analysis)\n            # Prepare response\n            return JsonResponse({\n                'message': 'Document analysis completed successfully',\n                'filename': uploaded_file.name,\n                'analysis': parsed_analysis,\n                'file_details': {\n                    'original_name': uploaded_file.name,\n                    'text_length': len(document_text)\n                }\n            })\n\n        except ValueError as ve:\n        "}, {"index": 203, "path": "ML/training_model/views.py", "chunk": "gth': len(document_text)\n                }\n            })\n\n        except ValueError as ve:\n            return JsonResponse({'error': str(ve)}, status=400)\n        except Exception as e:\n            return JsonResponse({'error': str(e)}, status=500)\n    \n    return JsonResponse({'error': 'Invalid request method'}, status=405)"}, {"index": 204, "path": "README.md", "chunk": "# \ud83e\udde0 Machine Learning Evolution: Training the Brain of ClassifyMe.ai\n\nClassifyMe.ai\u2019s success hinges on a robust, multi-stage machine learning pipeline. This pipeline has allowed the system to not only classify Documents accurately but to also evolve over time, learning from its mistakes and improving with every interaction. Below is the detailed journey of fine-tuning and adapting a pre-trained model to handle the complex task of Document classification.\n![WhatsApp Image 2024-12-01 at 21 33 44_2"}, {"index": 205, "path": "README.md", "chunk": "del to handle the complex task of Document classification.\n![WhatsApp Image 2024-12-01 at 21 33 44_2bcf287f](https://github.com/user-attachments/assets/8800d0b3-ec80-4dab-9c18-22d483e66bcd)\n![WhatsApp Image 2024-12-01 at 21 34 20_ce3136e5](https://github.com/user-attachments/assets/a140487d-d1db-4299-917a-fea0d9d975c5)\n---\n![WhatsApp Image 2024-12-05 at 13 48 14_1126fd71](https://github.com/user-attachments/assets/39fbdceb-9bb7-4900-9719-83095589d7b6)\n\n![WhatsApp Image 2024-12-05 at 13 46 57_b0b"}, {"index": 206, "path": "README.md", "chunk": "ttachments/assets/39fbdceb-9bb7-4900-9719-83095589d7b6)\n\n![WhatsApp Image 2024-12-05 at 13 46 57_b0baf676](https://github.com/user-attachments/assets/1e18821b-9358-43a0-aba3-5ec2a8228e86)\n\n![WhatsApp Image 2024-12-05 at 13 45 54_0e53d737](https://github.com/user-attachments/assets/046c275a-961e-486f-83c3-ed93d27fdb1a)\n![WhatsApp Image 2024-12-05 at 13 46 01_cd1b5f3b](https://github.com/user-attachments/assets/fd74c61e-607c-4b8b-b77d-f9e4b49af0fa)\n![WhatsApp Image 2024-12-05 at 13 46 13_d30ab328]"}, {"index": 207, "path": "README.md", "chunk": "ments/assets/fd74c61e-607c-4b8b-b77d-f9e4b49af0fa)\n![WhatsApp Image 2024-12-05 at 13 46 13_d30ab328](https://github.com/user-attachments/assets/4a597247-f8be-4910-add3-2cad7ee517fd)\n\n\n![WhatsApp Image 2024-12-01 at 21 35 44_21e83b68](https://github.com/user-attachments/assets/27734ed3-f6ed-4001-8adb-6ff120452c64)\n\n## \ud83d\udd04 The Fine-Tuning Journey: From Simplicity to Precision\n\nWhen we began this project, our first goal was to find a model that could understand and process the varying structures of D"}, {"index": 208, "path": "README.md", "chunk": "ct, our first goal was to find a model that could understand and process the varying structures of Documents. Early on, we realized that fine-tuning an existing pre-trained model was the key to achieving both accuracy and efficiency. The backbone of our solution was **BERT** \ud83e\uddd1\u200d\ud83d\udcbb\u2014a transformer-based language model that has proven to excel at contextual understanding in NLP tasks.\n\n### **Why Fine-Tuning?** \ud83e\udd14\n\nFine-tuning refers to the process of taking a pre-trained model (like BERT) and training "}, {"index": 209, "path": "README.md", "chunk": "ning?** \ud83e\udd14\n\nFine-tuning refers to the process of taking a pre-trained model (like BERT) and training it further on a specific dataset\u2014in our case, a collection of Documents. The purpose of fine-tuning is to adapt the pre-trained model\u2019s general language understanding to a more specialized task, such as Document classification. \n\nFine-tuning allows the model to:\n- **Adapt to Specific Domain** \ud83d\udd27: Document content varies widely from general text. Fine-tuning allows the model to learn domain-specific"}, {"index": 210, "path": "README.md", "chunk": "ument content varies widely from general text. Fine-tuning allows the model to learn domain-specific terms, context, and structure that are unique to Documents.\n- **Boost Performance** \ud83d\udcc8: Since the base BERT model is already trained on vast amounts of data, fine-tuning on our dataset results in faster learning and higher accuracy.\n- **Leverage Pre-Trained Knowledge** \ud83e\udde0: By starting with a model that has already learned about language and context, fine-tuning ensures that we don't have to start f"}, {"index": 211, "path": "README.md", "chunk": "at has already learned about language and context, fine-tuning ensures that we don't have to start from scratch, saving time and computational resources.\n\n---\n\n## **The Initial Approach: Trying Multiple Models** \ud83e\uddea\n\nBefore landing on BERT, we explored several classification models to see which one could best handle the nuances of Document data.\n\n### **1. Logistic Regression** \ud83d\udca1\n\nWe initially tried a simple **Logistic Regression** model, using basic feature extraction methods like **TF-IDF** to re"}, {"index": 212, "path": "README.md", "chunk": "a simple **Logistic Regression** model, using basic feature extraction methods like **TF-IDF** to represent the Documents. While this model was quick to implement, the results were underwhelming. The accuracy hovered around **65%**, and it struggled to generalize across different types of Documents. The simplicity of logistic regression couldn't capture the complexity and context of Document language.\n\n### **2. Naive Bayes** \ud83e\uddd1\u200d\ud83c\udfeb\n\nNext, we experimented with **Naive Bayes**, another classic model "}, {"index": 213, "path": "README.md", "chunk": "age.\n\n### **2. Naive Bayes** \ud83e\uddd1\u200d\ud83c\udfeb\n\nNext, we experimented with **Naive Bayes**, another classic model for text classification. Like Logistic Regression, it performed better than random chance but still left much to be desired. With an accuracy of **70%**, it couldn't handle nuances like the relationship between various Document sections (e.g., skills and job roles).\n\n### **3. Random Forests** \ud83c\udf33\n\nWe also tried **Random Forests**, which offered improved accuracy due to the ensemble method\u2019s ability "}, {"index": 214, "path": "README.md", "chunk": "also tried **Random Forests**, which offered improved accuracy due to the ensemble method\u2019s ability to handle complex features. However, the accuracy was still limited to **75%**, and the model struggled with understanding the hierarchical structure of Documents (e.g., sections like \"Education,\" \"Experience,\" and \"Skills\").\n\n### **4. Support Vector Machines (SVM)** \ud83d\udcbb\n\nAfter random forests, we tried **SVMs** with a **linear kernel**. While this model performed better than previous attempts, it st"}, {"index": 215, "path": "README.md", "chunk": "d **SVMs** with a **linear kernel**. While this model performed better than previous attempts, it still did not reach the accuracy levels we were aiming for. The classification score maxed out at **78%**, and the model wasn\u2019t scalable for more granular classification.\n\n---\n![image](https://github.com/user-attachments/assets/7f2223a7-75c3-421d-8ecb-2c071a5652a9)\n\n## **Switching to BERT: A Game-Changer** \ud83c\udfaf\n\nAfter several unsuccessful attempts with traditional machine learning models, we realized t"}, {"index": 216, "path": "README.md", "chunk": "ger** \ud83c\udfaf\n\nAfter several unsuccessful attempts with traditional machine learning models, we realized that we needed something that could handle the complexity and contextual nature of Documents. That\u2019s when we pivoted to **BERT**, a pre-trained transformer model that has revolutionized NLP tasks. Unlike traditional models, BERT understands context by processing the entire sentence or paragraph in one go rather than just individual words.\n\n### **Why BERT?** \ud83d\udcac\n\n- **Contextual Understanding** \ud83e\udd13: BERT"}, {"index": 217, "path": "README.md", "chunk": "e go rather than just individual words.\n\n### **Why BERT?** \ud83d\udcac\n\n- **Contextual Understanding** \ud83e\udd13: BERT excels at understanding the relationships between words in a sentence, which is crucial for interpreting Documents where context is key (e.g., distinguishing between \"Python Developer\" and \"Data Scientist\").\n- **Bidirectional Attention** \ud83d\udd04: BERT reads the text in both directions (left-to-right and right-to-left), which makes it more effective at capturing context in long and complex sentences\u2014com"}, {"index": 218, "path": "README.md", "chunk": "right-to-left), which makes it more effective at capturing context in long and complex sentences\u2014common in Documents.\n- **Pre-trained Knowledge** \ud83e\udde0: BERT is pre-trained on vast datasets, meaning it already has an understanding of general language patterns, which we could fine-tune on our Document dataset for specific needs.\n\n![Screenshot 2024-12-05 140303](https://github.com/user-attachments/assets/dcdc8434-3463-4cb2-91c2-f5a11b7ee4d3)\n\n# Fine-Tuning BERT: A Dynamic, User-Driven Approach \ud83d\udee0\ufe0f\n\nWit"}, {"index": 219, "path": "README.md", "chunk": "s/dcdc8434-3463-4cb2-91c2-f5a11b7ee4d3)\n\n# Fine-Tuning BERT: A Dynamic, User-Driven Approach \ud83d\udee0\ufe0f\n\nWith BERT as the backbone, we have evolved our fine-tuning process to be more dynamic and user-driven. The model is now capable of adapting to **any number of classes** based on the dataset provided by the user, making it flexible for different classification tasks.\n\n## **Stage 1: User-Uploaded Dataset** \ud83d\udce5  \nIn this iteration, the user can upload their own dataset, structured in a **ZIP file** contai"}, {"index": 220, "path": "README.md", "chunk": "** \ud83d\udce5  \nIn this iteration, the user can upload their own dataset, structured in a **ZIP file** containing text documents categorized into any number of classes. The dataset is processed using BERT\u2019s pre-trained tokenizer to convert the text into a format suitable for the model. The model begins learning to classify documents based on the features present in the user\u2019s dataset.\n\n### Result:\n- **Accuracy**: Depends on dataset quality and size \ud83d\udcca  \n- **Precision**: User-defined \ud83d\udd0d  \n- **Recall**: User"}, {"index": 221, "path": "README.md", "chunk": "racy**: Depends on dataset quality and size \ud83d\udcca  \n- **Precision**: User-defined \ud83d\udd0d  \n- **Recall**: User-defined \ud83d\udd01\n\n## **Stage 2: Continuous Learning & Expansion** \ud83d\udcda  \nAs the user adds more data or new categories, the model continues to learn and refine its understanding. The system adapts to the new number of classes, ensuring that the model doesn\u2019t need to be retrained from scratch. This continuous learning process enhances the model\u2019s ability to classify increasingly diverse and complex documents"}, {"index": 222, "path": "README.md", "chunk": "learning process enhances the model\u2019s ability to classify increasingly diverse and complex documents.\n\n### Result:\n- **Accuracy**: Improves over time with more data \ud83d\udcca  \n- **Precision**: Increases with more specific categories \ud83d\udd0d  \n- **Recall**: Higher recall as model adapts \ud83d\udd01\n\n## **Stage 3: Dynamic Category Handling** \ud83d\udd0d  \nThe model can now handle **dynamic categorization** where the number of categories is not fixed. As the user adds new document types, the model learns to classify them appropria"}, {"index": 223, "path": "README.md", "chunk": "ories is not fixed. As the user adds new document types, the model learns to classify them appropriately without losing its ability to handle previous classes. This flexibility ensures that the model remains effective as the dataset evolves.\n\n### Result:\n- **Accuracy**: Continually improves \ud83d\udcca  \n- **Precision**: Tailored to evolving categories \ud83d\udd0d  \n- **Recall**: Optimized with incremental learning \ud83d\udd01\n\n## **Stage 4: Adaptive Specialization** \ud83c\udf93  \nAs more specialized categories are introduced, the mod"}, {"index": 224, "path": "README.md", "chunk": "\n\n## **Stage 4: Adaptive Specialization** \ud83c\udf93  \nAs more specialized categories are introduced, the model can differentiate between nuanced document features. Whether it\u2019s distinguishing between roles in the same domain or handling documents with intricate structures, BERT can adapt its understanding based on user input.\n\n### Result:\n- **Accuracy**: Improves with fine-tuned categories \ud83d\udcca  \n- **Precision**: Reaches new heights \ud83d\udd0d  \n- **Recall**: Focuses on niche distinctions \ud83d\udd01\n\n## **Stage 5: Ultimate "}, {"index": 225, "path": "README.md", "chunk": "on**: Reaches new heights \ud83d\udd0d  \n- **Recall**: Focuses on niche distinctions \ud83d\udd01\n\n## **Stage 5: Ultimate Precision with Custom Categories** \ud83c\udfaf  \nWith the final stage, the model is capable of handling **highly specialized and unique categories** based on the user\u2019s data. The model will also take into account **patterns and trends** such as career progression and skills evolution, providing insights tailored to the user\u2019s needs.\n\n### Result:\n- **Accuracy**: Highly precise for custom data \ud83d\udcca  \n- **Precisi"}, {"index": 226, "path": "README.md", "chunk": "red to the user\u2019s needs.\n\n### Result:\n- **Accuracy**: Highly precise for custom data \ud83d\udcca  \n- **Precision**: Excellent due to fine-tuning \ud83d\udd0d  \n- **Recall**: Near-perfect as model adapts \ud83d\udd01  \n- **F1 Score**: Optimized for each dataset \ud83d\udcaf\n\n---\n![image](https://github.com/user-attachments/assets/3414fcf7-474b-48cc-b748-7f3ebb1fafb5)\n\n## **Key Advantages of the User-Driven Fine-Tuning Model**:\n- **Dynamic Class Handling**: The model adapts to an unlimited number of classes, making it versatile for various"}, {"index": 227, "path": "README.md", "chunk": "lass Handling**: The model adapts to an unlimited number of classes, making it versatile for various domains.\n- **Continuous Learning**: Allows for retraining with new data without starting from scratch.\n- **Custom Adaptability**: Tailors to the user\u2019s specific dataset and task requirements, improving accuracy and precision over time.\n- **Real-Time Flexibility**: Users can upload new datasets and expand the classification capabilities at any time.\n\n\n## **Performance Metrics: Accuracy Meets Innov"}, {"index": 228, "path": "README.md", "chunk": "expand the classification capabilities at any time.\n\n\n## **Performance Metrics: Accuracy Meets Innovation** \ud83d\udcca\n\nThrough each iteration, we saw incremental improvements in both classification accuracy and performance metrics. These weren\u2019t just numbers\u2014they were tangible results that reflected the system\u2019s growing ability to understand and categorize Documents.\n\n---\n![image](https://github.com/user-attachments/assets/d38f791e-31ab-42c0-a8b0-b5cc7aad7747)\n\n\n## **Why This Approach is Better** \ud83c\udfc6\n\nThe"}, {"index": 229, "path": "README.md", "chunk": "attachments/assets/d38f791e-31ab-42c0-a8b0-b5cc7aad7747)\n\n\n## **Why This Approach is Better** \ud83c\udfc6\n\nThe advantage of using **BERT** for fine-tuning over traditional models lies in its deep contextual understanding. The iterative process allowed us to:\n- **Handle Complex Data** \ud83e\udde9: Documents come in many formats and structures. BERT, fine-tuned over multiple iterations, was able to process these variations effectively.\n- **Achieve High Accuracy** \ud83c\udfaf: Starting from a baseline accuracy of 80%, we achiev"}, {"index": 230, "path": "README.md", "chunk": "ions effectively.\n- **Achieve High Accuracy** \ud83c\udfaf: Starting from a baseline accuracy of 80%, we achieved 92.5% accuracy through continuous fine-tuning. This marked a clear improvement over traditional models, which topped out at around 75%.\n- **Scalability** \ud83c\udf31: As we moved from broad categories to more granular classifications, the model demonstrated an ability to scale, making it suitable for diverse industries and job roles.\n\n---\n\n\n## **Key Features of the Model Training Process**:\n\n- **Dynamic "}, {"index": 231, "path": "README.md", "chunk": "se industries and job roles.\n\n---\n\n\n## **Key Features of the Model Training Process**:\n\n- **Dynamic Learning** \ud83d\udd04: At each stage, the model adapts to more granular data and refines its understanding of Documents.\n- **Preprocessing & Tokenization** \ud83d\udcd1: Using BERT\u2019s tokenizer, we preprocessed thousands of Documents, converting them into a format that maintained the structure and meaning of the content.\n- **Model Reusability** \ud83d\udd01: After each iteration, we saved the state of the model, reloading and ad"}, {"index": 232, "path": "README.md", "chunk": ".\n- **Model Reusability** \ud83d\udd01: After each iteration, we saved the state of the model, reloading and adapting it for the next phase, ensuring we retained all learning from previous stages.\n\n---\n\n\n## **Expanding the Model\u2019s Potential** \ud83d\ude80\n\nFine-tuning isn\u2019t the end of the road\u2014it\u2019s just the beginning. The model can be expanded by:\n- **Adding More Categories** \u2795: Continuously expanding the number of job roles and classifications to capture an even wider variety of Documents.\n- **Continuous Training** "}, {"index": 233, "path": "README.md", "chunk": " roles and classifications to capture an even wider variety of Documents.\n- **Continuous Training** \ud83d\udd04: As new Documents are processed, the model can be re-trained to stay current with industry trends and job market changes.\n- **Incorporating Multi-Modal Data** \ud83d\uddbc\ufe0f: Future iterations can integrate non-text data, such as job-related certifications and online portfolios, to provide a holistic view of each candidate.\n- **IPFS Based Encryption Securty**\n---\n\n\nBy leveraging **BERT\u2019s advanced capabiliti"}, {"index": 234, "path": "README.md", "chunk": "each candidate.\n- **IPFS Based Encryption Securty**\n---\n\n\nBy leveraging **BERT\u2019s advanced capabilities** and our detailed fine-tuning process, **ClassifyMe.ai** has evolved into a powerful, cutting-edge tool that continuously learns and adapts to provide the most accurate Document classification possible.\n\n\n# \ud83c\udf10 Web Platform: The User Interface That Brings AI to Life\n\nOnce the model was ready, it was time to bring it to life through a sleek, user-friendly web platform. We wanted **ClassifyMe.ai**"}, {"index": 235, "path": "README.md", "chunk": "as time to bring it to life through a sleek, user-friendly web platform. We wanted **ClassifyMe.ai** to be more than just functional; we wanted it to be engaging, intuitive, and enjoyable to use.\n\n\n---\n\n\n## \ud83d\udc41\ufe0f\u200d\ud83d\udde8\ufe0f Stunning User Interface (UI): A Platform that Pleases the Eye\n\nClassifyMe.ai isn't just powerful under the hood\u2014it also offers an intuitive, visually appealing interface. With **React.js** and **Tailwind CSS**, the design is sleek, fast, and responsive, ensuring a smooth user experience"}, {"index": 236, "path": "README.md", "chunk": "* and **Tailwind CSS**, the design is sleek, fast, and responsive, ensuring a smooth user experience across devices.\n\n- **Seamless Upload**: Upload your Documents in PDF or DOCX format effortlessly. \ud83d\udce4\n- **Instant Classification**: As soon as a Document is uploaded, it\u2019s automatically classified into one of 96 categories. \u26a1\n- **Interactive Dashboard**: Users can explore the results with real-time visualizations, gaining deeper insights into the classification process. \ud83d\udcca\n\n---\n\n## \ud83c\udfa8 UI Components a"}, {"index": 237, "path": "README.md", "chunk": "isualizations, gaining deeper insights into the classification process. \ud83d\udcca\n\n---\n\n## \ud83c\udfa8 UI Components and Features:\n\n- **Drag-and-Drop Interface**: Upload Documents with ease using a simple drag-and-drop area, making the entire process effortless. \ud83d\uddb1\ufe0f\n- **AI-Powered Analysis**: Instantly view detailed insights into the candidate\u2019s skills, career trajectory, and recommended roles. \ud83e\udd16\n- **Real-time Confidence Scoring**: Track how confident the system is with each classification, fostering transparency "}, {"index": 238, "path": "README.md", "chunk": "dence Scoring**: Track how confident the system is with each classification, fostering transparency in the AI decision-making process. \ud83d\udcc8\n- **Iteration-Based Visualization**: View how classifications evolve over time\u2014each step is clearly marked, offering users transparency into how the model improves with each interaction. \ud83d\udd04\n\n---\n\n\n## \ud83d\udd27 Technical Architecture: Building the Backbone\n\n### **Frontend**:\n- **React.js** for a dynamic and responsive user experience. \u269b\ufe0f\n- **Redux** for seamless state ma"}, {"index": 239, "path": "README.md", "chunk": "*:\n- **React.js** for a dynamic and responsive user experience. \u269b\ufe0f\n- **Redux** for seamless state management across the platform. \ud83d\udd04\n- **Tailwind CSS** ensures the platform looks as good as it functions, with modern, customizable designs. \ud83d\udd8c\ufe0f\n\n### **Backend**:\n- **Django & Django REST Framework** for robust backend management and APIs. \ud83d\udda5\ufe0f\n---\n\n\n\n## \ud83d\udee0\ufe0f How ClassifyMe.ai Works: Step-by-Step\n\n1. **Upload Your Document**: Simply drag-and-drop your PDF or DOCX file onto the platform. \ud83d\udce4\n2. **Instant Cla"}, {"index": 240, "path": "README.md", "chunk": "ad Your Document**: Simply drag-and-drop your PDF or DOCX file onto the platform. \ud83d\udce4\n2. **Instant Classification**: The AI-powered system immediately classifies the Document into one of 96 categories based on its content, such as \"Software Engineer\", \"Data Scientist\", or even more niche areas. \ud83d\udccb\n3. **Visual Insights**: Watch as the platform generates a real-time classification confidence score, showing how sure the system is about its predictions. \ud83d\udcca\n4. **Advanced Analysis**: Dive deeper into the "}, {"index": 241, "path": "README.md", "chunk": "wing how sure the system is about its predictions. \ud83d\udcca\n4. **Advanced Analysis**: Dive deeper into the AI-powered skill extraction and career trajectory mapping that helps both job seekers and recruiters gain valuable insights. \ud83d\udca1\n\n---\n\n## \ud83c\udf08 Why ClassifyMe.ai is a Game-Changer?\n\n- **Continuous Learning**: The system is designed to improve over time. As it processes more Documents, it fine-tunes its predictions, making the experience better for every user. \ud83d\udcda\n- **Transparent AI**: You\u2019re never left in"}, {"index": 242, "path": "README.md", "chunk": "edictions, making the experience better for every user. \ud83d\udcda\n- **Transparent AI**: You\u2019re never left in the dark about how the AI is making decisions. Each classification step is visualized, letting you see the AI's reasoning in real-time. \ud83d\udd0d\n- **Comprehensive Insights**: Beyond simply categorizing Documents, **ClassifyMe.ai** provides actionable insights like potential job role recommendations and skill assessments, helping you make more informed decisions. \ud83d\udcdd\n\n---\n\n## \ud83d\ude80 Join Us on This Journey!\n\nCl"}, {"index": 243, "path": "README.md", "chunk": "ill assessments, helping you make more informed decisions. \ud83d\udcdd\n\n---\n\n## \ud83d\ude80 Join Us on This Journey!\n\nClassifyMe.ai isn't just an AI tool\u2014it\u2019s a transformation in how professionals engage with Documents. Whether you're a job seeker, recruiter, or developer, **ClassifyMe.ai** offers an unmatched level of intelligence, transparency, and ease of use. \ud83c\udf1f\n\n\n\n"}, {"index": 244, "path": "client/README.md", "chunk": "# React + Vite\n\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\n\nCurrently, two official plugins are available:\n\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n"}, {"index": 245, "path": "client/README.md", "chunk": "-swc) uses [SWC](https://swc.rs/) for Fast Refresh\n"}, {"index": 246, "path": "client/components.json", "chunk": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": false,\n  \"tsx\": false,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"src/index.css\",\n    \"baseColor\": \"zinc\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}"}, {"index": 247, "path": "client/components.json", "chunk": "/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}"}, {"index": 248, "path": "client/eslint.config.js", "chunk": "import js from '@eslint/js'\nimport globals from 'globals'\nimport react from 'eslint-plugin-react'\nimport reactHooks from 'eslint-plugin-react-hooks'\nimport reactRefresh from 'eslint-plugin-react-refresh'\n\nexport default [\n  { ignores: ['dist'] },\n  {\n    files: ['**/*.{js,jsx}'],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n      parserOptions: {\n        ecmaVersion: 'latest',\n        ecmaFeatures: { jsx: true },\n        sourceType: 'module',\n      },\n    },\n  "}, {"index": 249, "path": "client/eslint.config.js", "chunk": "ion: 'latest',\n        ecmaFeatures: { jsx: true },\n        sourceType: 'module',\n      },\n    },\n    settings: { react: { version: '18.3' } },\n    plugins: {\n      react,\n      'react-hooks': reactHooks,\n      'react-refresh': reactRefresh,\n    },\n    rules: {\n      ...js.configs.recommended.rules,\n      ...react.configs.recommended.rules,\n      ...react.configs['jsx-runtime'].rules,\n      ...reactHooks.configs.recommended.rules,\n      'react/jsx-no-target-blank': 'off',\n      'react-refresh/on"}, {"index": 250, "path": "client/eslint.config.js", "chunk": "ctHooks.configs.recommended.rules,\n      'react/jsx-no-target-blank': 'off',\n      'react-refresh/only-export-components': [\n        'warn',\n        { allowConstantExport: true },\n      ],\n    },\n  },\n]\n"}, {"index": 251, "path": "client/index.html", "chunk": "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Vite + React</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n  </body>\n</html>\n"}, {"index": 252, "path": "client/jsconfig.json", "chunk": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"./src/*\"\n      ]\n    }\n  }\n}"}, {"index": 253, "path": "client/package.json", "chunk": "{\n  \"name\": \"client\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"lint\": \"eslint .\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@radix-ui/react-dialog\": \"^1.1.2\",\n    \"@radix-ui/react-slot\": \"^1.1.0\",\n    \"autoprefixer\": \"^10.4.20\",\n    \"axios\": \"^1.7.8\",\n    \"chart.js\": \"^4.4.6\",\n    \"chartjs-plugin-datalabels\": \"^2.2.0\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"framer"}, {"index": 254, "path": "client/package.json", "chunk": "n-datalabels\": \"^2.2.0\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"framer-motion\": \"^11.12.0\",\n    \"lucide-react\": \"^0.462.0\",\n    \"postcss\": \"^8.4.49\",\n    \"react\": \"^18.3.1\",\n    \"react-chartjs-2\": \"^5.2.0\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-router-dom\": \"^7.0.1\",\n    \"tailwind-merge\": \"^2.5.5\",\n    \"tailwind-scrollbar\": \"^3.1.0\",\n    \"tailwindcss\": \"^3.4.15\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"three\": \"^0.171.0\",\n    \"vaul\": \"^1.1.1\"\n  },\n  \"devDependenc"}, {"index": 255, "path": "client/package.json", "chunk": " \"tailwindcss-animate\": \"^1.0.7\",\n    \"three\": \"^0.171.0\",\n    \"vaul\": \"^1.1.1\"\n  },\n  \"devDependencies\": {\n    \"@eslint/js\": \"^9.15.0\",\n    \"@types/node\": \"^22.10.1\",\n    \"@types/react\": \"^18.3.12\",\n    \"@types/react-dom\": \"^18.3.1\",\n    \"@vitejs/plugin-react\": \"^4.3.4\",\n    \"eslint\": \"^9.15.0\",\n    \"eslint-plugin-react\": \"^7.37.2\",\n    \"eslint-plugin-react-hooks\": \"^5.0.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.14\",\n    \"globals\": \"^15.12.0\",\n    \"vite\": \"^6.0.1\"\n  },\n  \"packageManager\": \"y"}, {"index": 256, "path": "client/package.json", "chunk": "act-refresh\": \"^0.4.14\",\n    \"globals\": \"^15.12.0\",\n    \"vite\": \"^6.0.1\"\n  },\n  \"packageManager\": \"yarn@1.22.22\"\n}\n"}, {"index": 257, "path": "client/postcss.config.js", "chunk": "export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n"}, {"index": 258, "path": "client/src/App.jsx", "chunk": "import { Routes, Route } from 'react-router-dom';\nimport Dashboard from \"./pages/DashboardPage\";\nimport LandingPage from \"./pages/LandingPage\";\nimport TrainingPage from './pages/TrainingPage';\nimport DetailedAnalysis from './pages/DetailedAnalysis/index';\nimport AnalyticsPage from './pages/AnalyticsPage';\n\nfunction App() {\n  return (\n      <Routes>\n        <Route path=\"/\" element={<LandingPage />} />\n        <Route path=\"/train\" element={<TrainingPage />} />\n        <Route path=\"/dashboard\" elem"}, {"index": 259, "path": "client/src/App.jsx", "chunk": " />\n        <Route path=\"/train\" element={<TrainingPage />} />\n        <Route path=\"/dashboard\" element={<Dashboard />} />  \n        <Route path=\"/analytics\" element={<AnalyticsPage />} />  \n        <Route path=\"/moreanalysis/:uploadId\" element={<DetailedAnalysis />} />\n      </Routes>\n  )\n}\n\nexport default App"}, {"index": 260, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Cpu, Server, Brain, Database } from 'lucide-react';\n\nconst CheckMarkIcon = () => (\n  <motion.svg\n    viewBox=\"0 0 24 24\"\n    className=\"w-5 h-5\"\n    initial=\"hidden\"\n    animate=\"visible\"\n  >\n    <motion.path\n      d=\"M4 12.6111L8.92308 17.5L20 6.5\"\n      fill=\"transparent\"\n      strokeWidth=\"2\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n"}, {"index": 261, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "trokeWidth=\"2\"\n      stroke=\"currentColor\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      variants={{\n        hidden: { pathLength: 0 },\n        visible: { \n          pathLength: 1,\n          transition: { duration: 0.3, ease: \"easeOut\" }\n        }\n      }}\n    />\n  </motion.svg>\n);\n\nconst DocumentProcessingLoader = ({ isLoading, modelResults, error }) => {\n  const [currentStage, setCurrentStage] = useState(0);\n\n  // Remove the timer-based effects and only use modelResults\n  useE"}, {"index": 262, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "etCurrentStage] = useState(0);\n\n  // Remove the timer-based effects and only use modelResults\n  useEffect(() => {\n    if (isLoading && modelResults?.modelResponses) {\n      setCurrentStage(modelResults.modelResponses.length - 1);\n    }\n  }, [isLoading, modelResults]);\n\n  const modelStages = [\n    { \n      name: \"Initial Parsing\", \n      icon: <Cpu className=\"w-12 h-12 text-blue-500\" />,\n      color: \"bg-blue-100\",\n      description: \"Extracting document structure\"\n    },\n    { \n      name: \"Feat"}, {"index": 263, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "r: \"bg-blue-100\",\n      description: \"Extracting document structure\"\n    },\n    { \n      name: \"Feature Extraction\", \n      icon: <Server className=\"w-12 h-12 text-green-500\" />,\n      color: \"bg-green-100\",\n      description: \"Identifying key information\"\n    },\n    { \n      name: \"AI Classification\", \n      icon: <Brain className=\"w-12 h-12 text-purple-500\" />,\n      color: \"bg-purple-100\",\n      description: \"Deep learning analysis\"\n    },\n    { \n      name: \"Final Validation\", \n      icon: <"}, {"index": 264, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "  description: \"Deep learning analysis\"\n    },\n    { \n      name: \"Final Validation\", \n      icon: <Database className=\"w-12 h-12 text-red-500\" />,\n      color: \"bg-red-100\",\n      description: \"Cross-referencing results\"\n    }\n  ];\n\n  if (!isLoading) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-[100] flex items-center justify-center bg-black/20 backdrop-blur-sm p-3\">\n      <motion.div \n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n      "}, {"index": 265, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": ".div \n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        className=\"bg-white shadow-xl rounded-xl p-4 w-full max-w-3xl max-h-[90vh] overflow-y-auto\"\n      >\n        {/* Header */}\n        <div className=\"text-center mb-4\">\n          <h2 className={`text-xl font-bold bg-gradient-to-r ${\n            error ? 'from-red-600 to-red-500' : 'from-blue-600 to-indigo-600'\n          } text-transparent bg-clip-text`}>\n            {error ? 'Processing Error' : 'Pr"}, {"index": 266, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "digo-600'\n          } text-transparent bg-clip-text`}>\n            {error ? 'Processing Error' : 'Processing Document'}\n          </h2>\n          <p className=\"text-sm text-gray-500\">\n            {error ? 'An error occurred during processing' : 'AI-powered analysis in progress'}\n          </p>\n        </div>\n\n        {error ? (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"bg-red-50 border border-red-200 rounde"}, {"index": 267, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "        animate={{ opacity: 1, y: 0 }}\n            className=\"bg-red-50 border border-red-200 rounded-lg p-4 text-center\"\n          >\n            <div className=\"text-red-600 text-xl mb-2\">\u26a0\ufe0f</div>\n            <p className=\"text-sm text-red-700 font-medium mb-2\">{error}</p>\n            <p className=\"text-xs text-red-500\">\n              Please try again or contact support if the issue persists.\n            </p>\n          </motion.div>\n        ) : (\n          <div className=\"grid md:grid-cols-2 ga"}, {"index": 268, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "         </p>\n          </motion.div>\n        ) : (\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            {/* Processing Stages */}\n            <div className=\"space-y-2\">\n              {modelStages.map((stage, index) => (\n                <motion.div\n                  key={stage.name}\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ \n                    opacity: index <= currentStage ? 1 : 0.5, \n                    x: 0,\n                    scale: index"}, {"index": 269, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "pacity: index <= currentStage ? 1 : 0.5, \n                    x: 0,\n                    scale: index === currentStage ? 1.02 : 1\n                  }}\n                  className={`flex items-center gap-3 p-2 rounded-lg ${stage.color} ${\n                    index === currentStage ? 'ring-2 ring-blue-300' : ''\n                  }`}\n                >\n                  <div className={`p-2 rounded-full ${stage.color}`}>\n                    {React.cloneElement(stage.icon, {\n                      clas"}, {"index": 270, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "l ${stage.color}`}>\n                    {React.cloneElement(stage.icon, {\n                      className: `w-6 h-6 ${stage.icon.props.className.split(' ').pop()}`\n                    })}\n                  </div>\n                  <div className=\"min-w-0 flex-1\">\n                    <h3 className=\"font-medium text-sm truncate\">{stage.name}</h3>\n                    <p className=\"text-xs text-gray-600\">{stage.description}</p>\n                  </div>\n                  {index <= currentStage && (\n "}, {"index": 271, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "00\">{stage.description}</p>\n                  </div>\n                  {index <= currentStage && (\n                    <motion.div\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      className=\"relative\"\n                    >\n                      <motion.div\n                        className=\"absolute inset-0 bg-green-400 rounded-full\"\n                        animate={{\n                          scale: [1, 1.5, 1],\n                    "}, {"index": 272, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "                       animate={{\n                          scale: [1, 1.5, 1],\n                          opacity: [0.2, 0.1, 0]\n                        }}\n                        transition={{\n                          duration: 1,\n                          repeat: Infinity,\n                          repeatType: \"loop\"\n                        }}\n                      />\n                      <div className=\"relative z-10 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center text-wh"}, {"index": 273, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": " className=\"relative z-10 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center text-white\">\n                        <CheckMarkIcon />\n                      </div>\n                    </motion.div>\n                  )}\n                </motion.div>\n              ))}\n            </div>\n\n            {/* Results Preview */}\n            {modelResults?.modelResponses && (\n              <div className=\"bg-gray-50 rounded-lg p-3 space-y-2\">\n                <h3 className=\"text-sm font-bold "}, {"index": 274, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "v className=\"bg-gray-50 rounded-lg p-3 space-y-2\">\n                <h3 className=\"text-sm font-bold text-gray-800\">Results</h3>\n                <div className=\"space-y-2\">\n                  {modelResults.modelResponses.map((result, index) => (\n                    <motion.div\n                      key={`model${index + 1}`}\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      className=\"bg-white rounded-lg p-2 shadow-sm text-sm\"\n      "}, {"index": 275, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "={{ opacity: 1 }}\n                      className=\"bg-white rounded-lg p-2 shadow-sm text-sm\"\n                    >\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"font-medium\">Model {index + 1}</span>\n                        <span className=\"text-xs text-blue-600\">{result.confidence}%</span>\n                      </div>\n                      <p className=\"text-xs text-gray-600 mt-1\">Category: {result.category}</p>\n              "}, {"index": 276, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "            <p className=\"text-xs text-gray-600 mt-1\">Category: {result.category}</p>\n                    </motion.div>\n                  ))}\n                  \n                  {modelResults.finalClassification && (\n                    <motion.div\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      className=\"bg-blue-100 rounded-lg p-2 mt-2\"\n                    >\n                      <p className=\"text-sm font-medium text-blue-80"}, {"index": 277, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "p-2 mt-2\"\n                    >\n                      <p className=\"text-sm font-medium text-blue-800\">{modelResults.finalClassification}</p>\n                      <p className=\"text-xs text-blue-600 mt-1\">\n                        Overall Confidence: {modelResults.overallConfidence}%\n                      </p>\n                    </motion.div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\nexport"}, {"index": 278, "path": "client/src/components/DocumentProcessingLoader.jsx", "chunk": "    </div>\n            )}\n          </div>\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\nexport default DocumentProcessingLoader;"}, {"index": 279, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Drawer, DrawerClose, DrawerContent, DrawerDescription, DrawerFooter, DrawerHeader, DrawerTitle, DrawerTrigger } from \"@/components/ui/drawer\";\nimport { Info } from 'lucide-react';\nimport { CLASSIFICATION_DATA, CATEGORY_DETAILS } from '@/constants/dashboardData';\n\nconst Classifications = () => {\n "}, {"index": 280, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "CATION_DATA, CATEGORY_DETAILS } from '@/constants/dashboardData';\n\nconst Classifications = () => {\n  const getCategoryDetails = (category) => CATEGORY_DETAILS[category] || {\n    totalPDFs: 0,\n    averageConfidence: 0,\n    commonKeywords: [],\n    documentTypes: \"N/A\",\n    description: \"No detailed information available.\",\n    typicalContent: []\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Classifications</CardTitle>\n        <CardDescription>View document classification catego"}, {"index": 281, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": " <CardTitle>Classifications</CardTitle>\n        <CardDescription>View document classification categories</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {CLASSIFICATION_DATA.map((item) => (\n            <Drawer key={item.category}>\n              <div className=\"bg-white border rounded-lg p-4 flex items-center justify-between hover:shadow-md transition-shadow\">\n                <div className=\"flex it"}, {"index": 282, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "s-center justify-between hover:shadow-md transition-shadow\">\n                <div className=\"flex items-center space-x-4\">\n                  <span className=\"text-2xl\">{item.icon}</span>\n                  <div>\n                    <p className=\"font-medium\">{item.category}</p>\n                    <p className=\"text-sm text-gray-500\">{item.count} PDFs trained</p>\n                  </div>\n                </div>\n                <DrawerTrigger asChild>\n                  <button className=\"text-blue-"}, {"index": 283, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "      </div>\n                <DrawerTrigger asChild>\n                  <button className=\"text-blue-600 hover:bg-blue-50 p-2 rounded-full\">\n                    <Info className=\"h-5 w-5\" />\n                  </button>\n                </DrawerTrigger>\n              </div>\n              <DrawerContent>\n                {(() => {\n                  const details = getCategoryDetails(item.category);\n                  return (\n                    <>\n                      <DrawerHeader>\n                 "}, {"index": 284, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "              return (\n                    <>\n                      <DrawerHeader>\n                        <DrawerTitle>{item.category} Classification</DrawerTitle>\n                        <DrawerDescription>\n                          Detailed insights into {item.category} document classification\n                        </DrawerDescription>\n                      </DrawerHeader>\n                      <div className=\"grid md:grid-cols-2 gap-6 p-6\">\n                        <div>\n                   "}, {"index": 285, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "   <div className=\"grid md:grid-cols-2 gap-6 p-6\">\n                        <div>\n                          <h3 className=\"text-lg font-semibold mb-4\">Training Metrics</h3>\n                          <div className=\"space-y-4\">\n                            <div className=\"bg-gray-50 p-4 rounded-lg\">\n                              <p className=\"text-sm text-gray-600\">Total PDFs Analyzed</p>\n                              <p className=\"text-2xl font-bold text-blue-600\">{details.totalPDFs}</p>\n         "}, {"index": 286, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "                   <p className=\"text-2xl font-bold text-blue-600\">{details.totalPDFs}</p>\n                            </div>\n                            <div className=\"bg-gray-50 p-4 rounded-lg\">\n                              <p className=\"text-sm text-gray-600\">Average Classification Confidence</p>\n                              <p className=\"text-2xl font-bold text-green-600\">{details.averageConfidence}%</p>\n                            </div>\n                          </div>\n                 "}, {"index": 287, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "nfidence}%</p>\n                            </div>\n                          </div>\n                        </div>\n                        <div>\n                          <h3 className=\"text-lg font-semibold mb-4\">Category Insights</h3>\n                          <div className=\"space-y-4\">\n                            <div className=\"bg-gray-50 p-4 rounded-lg\">\n                              <p className=\"text-sm text-gray-600\">Common Keywords</p>\n                              <div className=\"flex "}, {"index": 288, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "Name=\"text-sm text-gray-600\">Common Keywords</p>\n                              <div className=\"flex flex-wrap gap-2 mt-2\">\n                                {details.commonKeywords?.map(keyword => (\n                                  <Badge key={keyword} variant=\"secondary\">{keyword}</Badge>\n                                )) || details.topSkills?.map(skill => (\n                                  <Badge key={skill} variant=\"secondary\">{skill}</Badge>\n                                ))}\n             "}, {"index": 289, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "ge key={skill} variant=\"secondary\">{skill}</Badge>\n                                ))}\n                              </div>\n                            </div>\n                            <div className=\"bg-gray-50 p-4 rounded-lg\">\n                              <p className=\"text-sm text-gray-600\">Document Types</p>\n                              <p className=\"text-xl font-bold\">{details.documentTypes || details.averageExperience}</p>\n                            </div>\n                          </"}, {"index": 290, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "es || details.averageExperience}</p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"md:col-span-2\">\n                          <div className=\"bg-gray-50 p-4 rounded-lg\">\n                            <h3 className=\"text-lg font-semibold mb-2\">Category Description</h3>\n                            <p>{details.description}</p>\n                          </div>\n                          <div className=\"bg-gray-5"}, {"index": 291, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "escription}</p>\n                          </div>\n                          <div className=\"bg-gray-50 p-4 rounded-lg mt-4\">\n                            <h3 className=\"text-lg font-semibold mb-2\">Typical Content</h3>\n                            <ul className=\"list-disc list-inside\">\n                              {(details.typicalContent || details.keyResponsibilities)?.map((item, index) => (\n                                <li key={index} className=\"text-sm\">{item}</li>\n                          "}, {"index": 292, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "                          <li key={index} className=\"text-sm\">{item}</li>\n                              ))}\n                            </ul>\n                          </div>\n                        </div>\n                      </div>\n                      <DrawerFooter>\n                        <DrawerClose asChild>\n                          <Button variant=\"outline\">Close</Button>\n                        </DrawerClose>\n                      </DrawerFooter>\n                    </>\n              "}, {"index": 293, "path": "client/src/components/dashboard/Classifications.jsx", "chunk": "         </DrawerClose>\n                      </DrawerFooter>\n                    </>\n                  );\n                })()}\n              </DrawerContent>\n            </Drawer>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Classifications;"}, {"index": 294, "path": "client/src/components/dashboard/Navbar.jsx", "chunk": "import { useState } from 'react';\nimport { Bell, Search, Settings, User, Menu, X } from 'lucide-react';\nimport { NOTIFICATIONS } from '@/constants/dashboardData';\n\nconst Navbar = ({ setActiveTab }) => {\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [showMobileMenu, setShowMobileMenu] = useState(false);\n\n  return (\n    <nav className=\"bg-white shadow-lg px-4 sm:px-6 py-4 sticky top-0 z-50\">\n      <div className=\"flex items-center justify-between\">\n        <div class"}, {"index": 295, "path": "client/src/components/dashboard/Navbar.jsx", "chunk": "y-4 sticky top-0 z-50\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center justify-between w-full sm:w-auto\">\n            <h1 \n              className=\"text-xl sm:text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 text-transparent bg-clip-text cursor-pointer\"\n              onClick={() => setActiveTab('dashboard')}\n            >\n              ClassifyMe.ai\n            </h1>\n      "}, {"index": 296, "path": "client/src/components/dashboard/Navbar.jsx", "chunk": "{() => setActiveTab('dashboard')}\n            >\n              ClassifyMe.ai\n            </h1>\n            <button \n              className=\"sm:hidden p-2 hover:bg-gray-100 rounded-lg\"\n              onClick={() => setShowMobileMenu(!showMobileMenu)}\n            >\n              {showMobileMenu ? <X className=\"h-6 w-6\" /> : <Menu className=\"h-6 w-6\" />}\n            </button>\n          </div>\n          <div className=\"hidden sm:block relative\">\n            <Search className=\"absolute left-3 top-1/2 "}, {"index": 297, "path": "client/src/components/dashboard/Navbar.jsx", "chunk": "  <div className=\"hidden sm:block relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search documents...\"\n              className=\"pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 w-64 bg-gray-50\"\n            />\n          </div>\n        </div>\n\n        {/* Desktop Navigation */}\n        <div className=\"hidden sm:flex item"}, {"index": 298, "path": "client/src/components/dashboard/Navbar.jsx", "chunk": "/div>\n        </div>\n\n        {/* Desktop Navigation */}\n        <div className=\"hidden sm:flex items-center space-x-4\">\n          <div className=\"relative\">\n            <button \n              className=\"p-2 rounded-full hover:bg-gray-100 relative\"\n              onClick={() => setShowNotifications(!showNotifications)}\n            >\n              <Bell className=\"h-5 w-5 text-gray-600\" />\n              <span className=\"absolute top-0 right-0 h-2 w-2 bg-red-500 rounded-full\"></span>\n            </"}, {"index": 299, "path": "client/src/components/dashboard/Navbar.jsx", "chunk": "     <span className=\"absolute top-0 right-0 h-2 w-2 bg-red-500 rounded-full\"></span>\n            </button>\n            {showNotifications && (\n              <div className=\"absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg p-4 z-50\">\n                <h3 className=\"font-semibold mb-2\">Notifications</h3>\n                <div className=\"space-y-2\">\n                  {NOTIFICATIONS.map(notification => (\n                    <div \n                      key={notification.id} \n                  "}, {"index": 300, "path": "client/src/components/dashboard/Navbar.jsx", "chunk": "ation => (\n                    <div \n                      key={notification.id} \n                      className=\"p-2 hover:bg-gray-50 rounded-lg cursor-pointer transition-colors\"\n                    >\n                      <p className=\"text-sm font-medium\">{notification.message}</p>\n                      <p className=\"text-xs text-gray-500\">{notification.time}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n     "}, {"index": 301, "path": "client/src/components/dashboard/Navbar.jsx", "chunk": "               ))}\n                </div>\n              </div>\n            )}\n          </div>\n          <button \n            className=\"p-2 rounded-full hover:bg-gray-100\"\n            onClick={() => setActiveTab('settings')}\n          >\n            <Settings className=\"h-5 w-5 text-gray-600\" />\n          </button>\n          <button className=\"flex items-center space-x-2 bg-gray-100 rounded-full px-3 py-1 hover:bg-gray-200\">\n            <div className=\"h-8 w-8 rounded-full bg-gradient-to-r from-"}, {"index": 302, "path": "client/src/components/dashboard/Navbar.jsx", "chunk": "x-3 py-1 hover:bg-gray-200\">\n            <div className=\"h-8 w-8 rounded-full bg-gradient-to-r from-blue-500 to-indigo-500 flex items-center justify-center\">\n              <User className=\"h-5 w-5 text-white\" />\n            </div>\n            <span className=\"text-sm font-medium\"></span>\n          </button>\n        </div>\n      </div>\n\n      {/* Mobile Menu */}\n      {showMobileMenu && (\n        <div className=\"sm:hidden mt-4 space-y-4\">\n          <div className=\"relative\">\n            <Search c"}, {"index": 303, "path": "client/src/components/dashboard/Navbar.jsx", "chunk": "div className=\"sm:hidden mt-4 space-y-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search documents...\"\n              className=\"w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50\"\n            />\n          </div>\n          <div className=\"flex items-center justify-betwee"}, {"index": 304, "path": "client/src/components/dashboard/Navbar.jsx", "chunk": "-gray-50\"\n            />\n          </div>\n          <div className=\"flex items-center justify-between p-2 hover:bg-gray-50 rounded-lg\">\n            <span>Notifications</span>\n            <Bell className=\"h-5 w-5 text-gray-600\" />\n          </div>\n          <div className=\"flex items-center justify-between p-2 hover:bg-gray-50 rounded-lg\" onClick={() => setActiveTab('settings')}>\n            <span>Settings</span>\n            <Settings className=\"h-5 w-5 text-gray-600\" />\n          </div>\n        "}, {"index": 305, "path": "client/src/components/dashboard/Navbar.jsx", "chunk": "Settings</span>\n            <Settings className=\"h-5 w-5 text-gray-600\" />\n          </div>\n          <div className=\"flex items-center justify-between p-2 hover:bg-gray-50 rounded-lg\">\n            <span>Profile</span>\n            <User className=\"h-5 w-5 text-gray-600\" />\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n};\n\nexport default Navbar;"}, {"index": 306, "path": "client/src/components/dashboard/Notifications.jsx", "chunk": "import { Card, CardHeader, CardTitle, CardDescription, CardContent } from \"@/components/ui/card\";\nimport { Bell } from 'lucide-react';\n\nconst Notifications = ({ notifications }) => {\n  return (\n    <Card className=\"h-full\">\n      <CardHeader className=\"space-y-1\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-lg sm:text-xl\">Notifications</CardTitle>\n            <CardDescription className=\"hidden sm:block\">Recent system updates "}, {"index": 307, "path": "client/src/components/dashboard/Notifications.jsx", "chunk": "ications</CardTitle>\n            <CardDescription className=\"hidden sm:block\">Recent system updates and alerts</CardDescription>\n          </div>\n          <Bell className=\"h-5 w-5 text-gray-500\" />\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-3 sm:space-y-4\">\n          {notifications.map(notification => (\n            <div \n              key={notification.id} \n              className=\"flex items-start sm:items-center space-x-3 p-2 sm:p-3 bg-gray-50 round"}, {"index": 308, "path": "client/src/components/dashboard/Notifications.jsx", "chunk": "id} \n              className=\"flex items-start sm:items-center space-x-3 p-2 sm:p-3 bg-gray-50 rounded-lg hover:bg-gray-100 cursor-pointer transition-all\"\n            >\n              <div className={`h-2 w-2 mt-2 sm:mt-0 rounded-full flex-shrink-0 ${\n                notification.type === 'success' ? 'bg-green-500' :\n                notification.type === 'warning' ? 'bg-yellow-500' :\n                'bg-blue-500'\n              }`} />\n              <div className=\"flex-1 min-w-0\">\n                "}, {"index": 309, "path": "client/src/components/dashboard/Notifications.jsx", "chunk": "  'bg-blue-500'\n              }`} />\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium truncate\">{notification.message}</p>\n                <p className=\"text-xs text-gray-500\">{notification.time}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Notifications;"}, {"index": 310, "path": "client/src/components/dashboard/QuickActions.jsx", "chunk": "import { Upload, FileText, BarChart, Settings } from 'lucide-react';\n\nconst QuickActions = ({ setActiveTab, handleUploadClick }) => {\n  return (\n    <div className=\"mb-6 sm:mb-8 px-4 sm:px-0\">\n      <h2 className=\"text-lg sm:text-xl font-semibold mb-3 sm:mb-4\">Quick Actions</h2>\n      <div className=\"grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n        <button \n          onClick={handleUploadClick}\n          className=\"bg-gradient-to-r from-blue-500 to-indigo-500 p-3 sm:p-4 ro"}, {"index": 311, "path": "client/src/components/dashboard/QuickActions.jsx", "chunk": "={handleUploadClick}\n          className=\"bg-gradient-to-r from-blue-500 to-indigo-500 p-3 sm:p-4 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex flex-col sm:flex-row items-center sm:space-x-3 text-white\"\n        >\n          <div className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-lg bg-white/20 flex items-center justify-center mb-2 sm:mb-0\">\n            <Upload className=\"h-4 w-4 sm:h-5 sm:w-5 text-white\" />\n          </div>\n          <span className=\"text-sm sm:text-base font-medi"}, {"index": 312, "path": "client/src/components/dashboard/QuickActions.jsx", "chunk": "h-5 sm:w-5 text-white\" />\n          </div>\n          <span className=\"text-sm sm:text-base font-medium text-center sm:text-left\">Upload Document</span>\n        </button>\n        <button \n          onClick={() => setActiveTab('classifications')}\n          className=\"bg-white p-3 sm:p-4 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex flex-col sm:flex-row items-center sm:space-x-3 hover:bg-gray-50\"\n        >\n          <div className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-lg bg-green"}, {"index": 313, "path": "client/src/components/dashboard/QuickActions.jsx", "chunk": "-3 hover:bg-gray-50\"\n        >\n          <div className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-lg bg-green-100 flex items-center justify-center mb-2 sm:mb-0\">\n            <FileText className=\"h-4 w-4 sm:h-5 sm:w-5 text-green-600\" />\n          </div>\n          <span className=\"text-sm sm:text-base font-medium text-center sm:text-left\">Classifications</span>\n        </button>\n        <button \n          onClick={() => setActiveTab('analytics')}\n          className=\"bg-white p-3 sm:p-4 rounded-lg shadow-m"}, {"index": 314, "path": "client/src/components/dashboard/QuickActions.jsx", "chunk": "Click={() => setActiveTab('analytics')}\n          className=\"bg-white p-3 sm:p-4 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex flex-col sm:flex-row items-center sm:space-x-3 hover:bg-gray-50\"\n        >\n          <div className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-lg bg-purple-100 flex items-center justify-center mb-2 sm:mb-0\">\n            <BarChart className=\"h-4 w-4 sm:h-5 sm:w-5 text-purple-600\" />\n          </div>\n          <span className=\"text-sm sm:text-base font-medium"}, {"index": 315, "path": "client/src/components/dashboard/QuickActions.jsx", "chunk": "w-5 text-purple-600\" />\n          </div>\n          <span className=\"text-sm sm:text-base font-medium text-center sm:text-left\">Analytics</span>\n        </button>\n        <button \n          onClick={() => setActiveTab('settings')}\n          className=\"bg-white p-3 sm:p-4 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 flex flex-col sm:flex-row items-center sm:space-x-3 hover:bg-gray-50\"\n        >\n          <div className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-lg bg-orange-100 flex item"}, {"index": 316, "path": "client/src/components/dashboard/QuickActions.jsx", "chunk": "y-50\"\n        >\n          <div className=\"h-8 w-8 sm:h-10 sm:w-10 rounded-lg bg-orange-100 flex items-center justify-center mb-2 sm:mb-0\">\n            <Settings className=\"h-4 w-4 sm:h-5 sm:w-5 text-orange-600\" />\n          </div>\n          <span className=\"text-sm sm:text-base font-medium text-center sm:text-left\">Settings</span>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default QuickActions;"}, {"index": 317, "path": "client/src/components/dashboard/QuickActions.jsx", "chunk": "uickActions;"}, {"index": 318, "path": "client/src/components/dashboard/RecentUploads.jsx", "chunk": "import { Card, CardHeader, CardTitle, CardContent, CardDescription } from \"@/components/ui/card\";\nimport { FileText, ChevronRight } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\n\nconst RecentUploads = ({ uploads, selectedUpload, onUploadSelect, uploadedFiles }) => {\n  const navigate = useNavigate();\n\n  const handleUploadClick = (upload) => {\n    onUploadSelect(upload);\n    if (uploadedFiles.has(upload.id)) {\n      navigate(`/moreanalysis/${upload.id}`);\n    }\n  };\n\n  retur"}, {"index": 319, "path": "client/src/components/dashboard/RecentUploads.jsx", "chunk": "f (uploadedFiles.has(upload.id)) {\n      navigate(`/moreanalysis/${upload.id}`);\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Recent Uploads</CardTitle>\n        <CardDescription>Latest documents processed by the system</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {uploads.map(upload => (\n            <div \n              key={upload.id} \n              className={`\n                flex items-center justify-between"}, {"index": 320, "path": "client/src/components/dashboard/RecentUploads.jsx", "chunk": "       key={upload.id} \n              className={`\n                flex items-center justify-between p-4 rounded-lg cursor-pointer\n                transition-all duration-200\n                ${selectedUpload?.id === upload.id ? 'bg-blue-50 ring-2 ring-blue-500' : 'bg-gray-50 hover:bg-gray-100'}\n              `}\n              onClick={() => handleUploadClick(upload)}\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"h-10 w-10 rounded-lg bg-b"}, {"index": 321, "path": "client/src/components/dashboard/RecentUploads.jsx", "chunk": "v className=\"flex items-center space-x-4\">\n                <div className=\"h-10 w-10 rounded-lg bg-blue-100 flex items-center justify-center\">\n                  <FileText className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"font-medium\">{upload.name}</p>\n                  <p className=\"text-sm text-gray-500\">{upload.status}</p>\n                  {selectedUpload?.id === upload.id && (\n                    <div className=\"mt-2 space-y-1\">"}, {"index": 322, "path": "client/src/components/dashboard/RecentUploads.jsx", "chunk": "         {selectedUpload?.id === upload.id && (\n                    <div className=\"mt-2 space-y-1\">\n                      <p className=\"text-sm\"><span className=\"font-medium\">Confidence:</span> {upload.confidence}%</p>\n                      <p className=\"text-sm\"><span className=\"font-medium\">Key Skills:</span> {upload.skills.join(\", \")}</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n   "}, {"index": 323, "path": "client/src/components/dashboard/RecentUploads.jsx", "chunk": "         </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-gray-500\">{upload.time}</span>\n                <ChevronRight className={`h-5 w-5 text-gray-400 transition-transform ${selectedUpload?.id === upload.id ? 'rotate-90' : ''}`} />\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default RecentUploads;"}, {"index": 324, "path": "client/src/components/dashboard/RecentUploads.jsx", "chunk": "Content>\n    </Card>\n  );\n};\n\nexport default RecentUploads;"}, {"index": 325, "path": "client/src/components/dashboard/StatsGrid.jsx", "chunk": "import { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport * as LucideIcons from 'lucide-react';\nimport { STATS_CARDS } from '@/constants/dashboardData';\n\nconst StatsGrid = () => {\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4 mb-6 sm:mb-8\">\n      {STATS_CARDS.map((card, index) => {\n        const Icon = LucideIcons[card.icon];\n        return (\n          <Card key={index} className=\"hover:shadow-lg transition-shadow curso"}, {"index": 326, "path": "client/src/components/dashboard/StatsGrid.jsx", "chunk": "on];\n        return (\n          <Card key={index} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-xs sm:text-sm font-medium truncate pr-2\">{card.title}</CardTitle>\n              <Icon className={`h-4 w-4 sm:h-5 sm:w-5 ${card.color} flex-shrink-0`} />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-lg sm:text-2"}, {"index": 327, "path": "client/src/components/dashboard/StatsGrid.jsx", "chunk": "\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-lg sm:text-2xl font-bold\">{card.value}</div>\n              <div className=\"flex flex-wrap items-center gap-1 sm:gap-2 mt-1\">\n                <span className={`text-[10px] sm:text-xs ${\n                  card.change.type === \"increase\" ? \"text-green-500\" : \n                  card.change.type === \"decrease\" ? \"text-red-500\" : \n                  \"text-blue-500\"\n                } whitespace-nowrap`}>\n            "}, {"index": 328, "path": "client/src/components/dashboard/StatsGrid.jsx", "chunk": "xt-red-500\" : \n                  \"text-blue-500\"\n                } whitespace-nowrap`}>\n                  {card.change.type === \"increase\" ? \"\u2191\" : \n                   card.change.type === \"decrease\" ? \"\u2193\" : \"\"} \n                  {card.change.value}\n                </span>\n                <span className=\"text-[10px] sm:text-xs text-gray-500 whitespace-nowrap\">\n                  {card.change.type === \"new\" ? \"new categories\" : \"from last month\"}\n                </span>\n              </div>\n     "}, {"index": 329, "path": "client/src/components/dashboard/StatsGrid.jsx", "chunk": "=== \"new\" ? \"new categories\" : \"from last month\"}\n                </span>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default StatsGrid;"}, {"index": 330, "path": "client/src/components/ui/badge.jsx", "chunk": "import * as React from \"react\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transpare"}, {"index": 331, "path": "client/src/components/ui/badge.jsx", "chunk": "primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  ...props\n}) {\n  return (<div className={cn(badgeVariants"}, {"index": 332, "path": "client/src/components/ui/badge.jsx", "chunk": "\nfunction Badge({\n  className,\n  variant,\n  ...props\n}) {\n  return (<div className={cn(badgeVariants({ variant }), className)} {...props} />);\n}\n\nexport { Badge, badgeVariants }\n"}, {"index": 333, "path": "client/src/components/ui/button.jsx", "chunk": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-non"}, {"index": 334, "path": "client/src/components/ui/button.jsx", "chunk": "us-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary"}, {"index": 335, "path": "client/src/components/ui/button.jsx", "chunk": "background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n"}, {"index": 336, "path": "client/src/components/ui/button.jsx", "chunk": " px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n  return (\n    (<Comp\n      className={cn(buttonVariants({ variant, size, className }))}\n      ref={ref}\n      {...props} />)\n  );\n})\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"}, {"index": 337, "path": "client/src/components/ui/button.jsx", "chunk": "/>)\n  );\n})\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"}, {"index": 338, "path": "client/src/components/ui/card.jsx", "chunk": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"rounded-lg border bg-card text-card-foreground shadow-sm\", className)}\n    {...props} />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props} />\n))\nCardHeader.displayName = \"CardHe"}, {"index": 339, "path": "client/src/components/ui/card.jsx", "chunk": "n(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-2xl font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)"}, {"index": 340, "path": "client/src/components/ui/card.jsx", "chunk": "rops }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", c"}, {"index": 341, "path": "client/src/components/ui/card.jsx", "chunk": "ssName, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"}, {"index": 342, "path": "client/src/components/ui/drawer.jsx", "chunk": "import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}) => (\n  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef(({ className, ...props },"}, {"index": 343, "path": "client/src/components/ui/drawer.jsx", "chunk": "rawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props} />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        "}, {"index": 344, "path": "client/src/components/ui/drawer.jsx", "chunk": "al>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}>\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    c"}, {"index": 345, "path": "client/src/components/ui/drawer.jsx", "chunk": ".displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props} />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}) => (\n  <div className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)} {...props} />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPr"}, {"index": 346, "path": "client/src/components/ui/drawer.jsx", "chunk": "\"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))"}, {"index": 347, "path": "client/src/components/ui/drawer.jsx", "chunk": "on\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n"}, {"index": 348, "path": "client/src/constants/dashboardData.js", "chunk": "export const NOTIFICATIONS = [\n  { id: 1, message: \"New document classification available\", time: \"2 min ago\", type: \"success\" },\n  { id: 2, message: \"Document processed successfully\", time: \"1 hour ago\", type: \"info\" },\n  { id: 3, message: \"System update scheduled\", time: \"2 hours ago\", type: \"warning\" },\n  { id: 4, message: \"New feature: Batch processing\", time: \"1 day ago\", type: \"info\" },\n];\n\nexport const RECENT_UPLOADS = [\n  {\n    id: 1,\n    name: \"quantum_computing_research.pdf\",\n    statu"}, {"index": 349, "path": "client/src/constants/dashboardData.js", "chunk": "export const RECENT_UPLOADS = [\n  {\n    id: 1,\n    name: \"quantum_computing_research.pdf\",\n    status: \"Classified as: Technologies\",\n    time: \"Just now\",\n    confidence: 98.2,\n    keywords: [\"Quantum\", \"Computing\", \"Research\"],\n  },\n  {\n    id: 2,\n    name: \"deep_learning_study.pdf\",\n    status: \"Classified as: AI\",\n    time: \"5 min ago\",\n    confidence: 96.7,\n    keywords: [\"Neural Networks\", \"Deep Learning\", \"AI Models\"],\n  },\n  {\n    id: 3,\n    name: \"space_mission_report.pdf\",\n    status: "}, {"index": 350, "path": "client/src/constants/dashboardData.js", "chunk": "Deep Learning\", \"AI Models\"],\n  },\n  {\n    id: 3,\n    name: \"space_mission_report.pdf\",\n    status: \"Classified as: Space-Exploration\",\n    time: \"1 hour ago\",\n    confidence: 97.1,\n    keywords: [\"Space Mission\", \"Satellites\", \"Exploration\"],\n  },\n];\n\nexport const STATS_CARDS = [\n  {\n    title: \"Total Documents\",\n    icon: \"Upload\",\n    value: \"1,234\",\n    change: { value: \"12%\", type: \"increase\" },\n    color: \"text-blue-600\",\n  },\n  {\n    title: \"Active Users\",\n    icon: \"Users\",\n    value: \"8"}, {"index": 351, "path": "client/src/constants/dashboardData.js", "chunk": " },\n    color: \"text-blue-600\",\n  },\n  {\n    title: \"Active Users\",\n    icon: \"Users\",\n    value: \"892\",\n    change: { value: \"8%\", type: \"increase\" },\n    color: \"text-green-600\",\n  },\n  {\n    title: \"Categories\",\n    icon: \"Briefcase\",\n    value: \"40\",\n    change: { value: \"+20\", type: \"new\" },\n    color: \"text-purple-600\",\n  },\n  {\n    title: \"Accuracy Rate\",\n    icon: \"PieChart\",\n    value: \"98.5%\",\n    change: { value: \"2.3%\", type: \"increase\" },\n    color: \"text-orange-600\",\n  },\n];\n\nexpor"}, {"index": 352, "path": "client/src/constants/dashboardData.js", "chunk": "8.5%\",\n    change: { value: \"2.3%\", type: \"increase\" },\n    color: \"text-orange-600\",\n  },\n];\n\nexport const PROCESSING_RESULTS = {\n  model1: {\n    confidence: 92.3,\n    classification: \"Technical Documentation\",\n    keywords: [\"JavaScript\", \"React\", \"Node.js\"],\n  },\n  model2: {\n    confidence: 94.1,\n    classification: \"Full Stack Developer\",\n    skills: [\"Python\", \"Docker\", \"AWS\"],\n  },\n  model3: {\n    confidence: 93.7,\n    classification: \"DevOps Engineer\",\n    skills: [\"Kubernetes\", \"CI/CD\", "}, {"index": 353, "path": "client/src/constants/dashboardData.js", "chunk": " {\n    confidence: 93.7,\n    classification: \"DevOps Engineer\",\n    skills: [\"Kubernetes\", \"CI/CD\", \"Cloud Computing\"],\n  },\n  model4: {\n    confidence: 95.5,\n    classification: \"Cloud Architect\",\n    skills: [\"Cloud Strategy\", \"Enterprise Architecture\", \"Security\"],\n  },\n  overallConfidence: 94.4,\n  finalClassification: \"Technical Documentation\",\n};\n\nexport const CLASSIFICATION_DATA = [\n  { category: \"Technologies\", count: 150, icon: \"\ud83d\udcbb\" },\n  { category: \"AI\", count: 145, icon: \"\ud83e\udd16\" },\n  { cate"}, {"index": 354, "path": "client/src/constants/dashboardData.js", "chunk": "gory: \"Technologies\", count: 150, icon: \"\ud83d\udcbb\" },\n  { category: \"AI\", count: 145, icon: \"\ud83e\udd16\" },\n  { category: \"Healthcare\", count: 140, icon: \"\ud83c\udfe5\" },\n  { category: \"Space-Exploration\", count: 135, icon: \"\ud83d\ude80\" },\n  { category: \"Business\", count: 130, icon: \"\ud83d\udcbc\" },\n  { category: \"Entertainment\", count: 128, icon: \"\ud83c\udfac\" },\n  { category: \"Sports\", count: 125, icon: \"\u26bd\" },\n  { category: \"History\", count: 120, icon: \"\ud83d\udcdc\" },\n  { category: \"Food\", count: 118, icon: \"\ud83c\udf73\" },\n  { category: \"Politics\", count: 115, icon"}, {"index": 355, "path": "client/src/constants/dashboardData.js", "chunk": "on: \"\ud83d\udcdc\" },\n  { category: \"Food\", count: 118, icon: \"\ud83c\udf73\" },\n  { category: \"Politics\", count: 115, icon: \"\ud83c\udfdb\ufe0f\" },\n  { category: \"Graphics\", count: 112, icon: \"\ud83c\udfa8\" },\n  { category: \"Blockchain\", count: 110, icon: \"\ud83d\udd17\" },\n  { category: \"IoT\", count: 108, icon: \"\ud83d\udcf1\" },\n  { category: \"Astronomy\", count: 105, icon: \"\ud83d\udd2d\" },\n  { category: \"Music\", count: 102, icon: \"\ud83c\udfb5\" }\n];\n\nexport const CATEGORY_DETAILS = {\n  \"Technologies\": {\n    totalPDFs: 150,\n    averageConfidence: 96.5,\n    commonKeywords: [\"Innovation\","}, {"index": 356, "path": "client/src/constants/dashboardData.js", "chunk": "Technologies\": {\n    totalPDFs: 150,\n    averageConfidence: 96.5,\n    commonKeywords: [\"Innovation\", \"Digital\", \"Software\"],\n    documentTypes: \"8-12 types\",\n    description: \"Documents covering various technological advances and implementations.\",\n    typicalContent: [\"Technical specifications\", \"Research papers\", \"Implementation guides\"]\n  },\n  \"Space\": {\n    totalPDFs: 135,\n    averageConfidence: 94.8,\n    commonKeywords: [\"Space Missions\", \"Satellites\", \"Exploration\"],\n    documentTypes: \"6-"}, {"index": 357, "path": "client/src/constants/dashboardData.js", "chunk": "e: 94.8,\n    commonKeywords: [\"Space Missions\", \"Satellites\", \"Exploration\"],\n    documentTypes: \"6-8 types\",\n    description: \"Documentation related to space exploration and research.\",\n    typicalContent: [\"Mission reports\", \"Research findings\", \"Space technology\"]\n  },\n  \"Medical\": {\n    totalPDFs: 140,\n    averageConfidence: 95.2,\n    commonKeywords: [\"Healthcare\", \"Treatment\", \"Clinical\"],\n    documentTypes: \"7-9 types\",\n    description: \"Medical research and healthcare documentation.\",\n   "}, {"index": 358, "path": "client/src/constants/dashboardData.js", "chunk": "  documentTypes: \"7-9 types\",\n    description: \"Medical research and healthcare documentation.\",\n    typicalContent: [\"Clinical studies\", \"Medical protocols\", \"Treatment guidelines\"]\n  },\n  \"Sport\": {\n    totalPDFs: 125,\n    averageConfidence: 93.5,\n    commonKeywords: [\"Athletics\", \"Competition\", \"Training\"],\n    documentTypes: \"5-7 types\",\n    description: \"Sports-related documentation and analysis.\",\n    typicalContent: [\"Training programs\", \"Competition reports\", \"Sports science\"]\n  },\n  \"En"}, {"index": 359, "path": "client/src/constants/dashboardData.js", "chunk": "sis.\",\n    typicalContent: [\"Training programs\", \"Competition reports\", \"Sports science\"]\n  },\n  \"Entertainment\": {\n    totalPDFs: 128,\n    averageConfidence: 92.8,\n    commonKeywords: [\"Media\", \"Performance\", \"Production\"],\n    documentTypes: \"6-8 types\",\n    description: \"Entertainment industry documentation.\",\n    typicalContent: [\"Production scripts\", \"Media analysis\", \"Industry reports\"]\n  },\n  \"Historical\": {\n    totalPDFs: 120,\n    averageConfidence: 91.5,\n    commonKeywords: [\"History\", "}, {"index": 360, "path": "client/src/constants/dashboardData.js", "chunk": "\n  \"Historical\": {\n    totalPDFs: 120,\n    averageConfidence: 91.5,\n    commonKeywords: [\"History\", \"Archives\", \"Documentation\"],\n    documentTypes: \"5-7 types\",\n    description: \"Historical documents and research papers.\",\n    typicalContent: [\"Historical records\", \"Research papers\", \"Archive materials\"]\n  },\n  \"Food\": {\n    totalPDFs: 118,\n    averageConfidence: 93.2,\n    commonKeywords: [\"Cuisine\", \"Nutrition\", \"Recipes\"],\n    documentTypes: \"4-6 types\",\n    description: \"Food and culinary do"}, {"index": 361, "path": "client/src/constants/dashboardData.js", "chunk": "ne\", \"Nutrition\", \"Recipes\"],\n    documentTypes: \"4-6 types\",\n    description: \"Food and culinary documentation.\",\n    typicalContent: [\"Recipe collections\", \"Nutritional guides\", \"Food research\"]\n  },\n  \"Politics\": {\n    totalPDFs: 115,\n    averageConfidence: 90.8,\n    commonKeywords: [\"Government\", \"Policy\", \"Analysis\"],\n    documentTypes: \"6-8 types\",\n    description: \"Political analysis and policy documentation.\",\n    typicalContent: [\"Policy papers\", \"Political analysis\", \"Government docume"}, {"index": 362, "path": "client/src/constants/dashboardData.js", "chunk": "licy documentation.\",\n    typicalContent: [\"Policy papers\", \"Political analysis\", \"Government documents\"]\n  },\n  \"Business\": {\n    totalPDFs: 130,\n    averageConfidence: 94.5,\n    commonKeywords: [\"Strategy\", \"Management\", \"Finance\"],\n    documentTypes: \"7-9 types\",\n    description: \"Business and corporate documentation.\",\n    typicalContent: [\"Business plans\", \"Corporate strategies\", \"Market analysis\"]\n  },\n  \"Graphics\": {\n    totalPDFs: 112,\n    averageConfidence: 92.7,\n    commonKeywords: [\"D"}, {"index": 363, "path": "client/src/constants/dashboardData.js", "chunk": "ysis\"]\n  },\n  \"Graphics\": {\n    totalPDFs: 112,\n    averageConfidence: 92.7,\n    commonKeywords: [\"Design\", \"Visual\", \"Creative\"],\n    documentTypes: \"5-7 types\",\n    description: \"Graphic design and visual arts documentation.\",\n    typicalContent: [\"Design specs\", \"Visual guidelines\", \"Creative briefs\"]\n  },\n  \"AI\": {\n    totalPDFs: 145,\n    averageConfidence: 95.8,\n    commonKeywords: [\"Machine Learning\", \"Neural Networks\", \"Deep Learning\"],\n    documentTypes: \"6-8 types\",\n    description: \"Ar"}, {"index": 364, "path": "client/src/constants/dashboardData.js", "chunk": "Learning\", \"Neural Networks\", \"Deep Learning\"],\n    documentTypes: \"6-8 types\",\n    description: \"Artificial Intelligence documentation and research.\",\n    typicalContent: [\"AI research\", \"ML models\", \"Algorithm documentation\"]\n  },\n  \"IoT\": {\n    totalPDFs: 108,\n    averageConfidence: 93.4,\n    commonKeywords: [\"Connected Devices\", \"Sensors\", \"Smart Systems\"],\n    documentTypes: \"5-7 types\",\n    description: \"Internet of Things technology documentation.\",\n    typicalContent: [\"IoT specification"}, {"index": 365, "path": "client/src/constants/dashboardData.js", "chunk": "description: \"Internet of Things technology documentation.\",\n    typicalContent: [\"IoT specifications\", \"Device protocols\", \"System architecture\"]\n  },\n  \"Blockchain\": {\n    totalPDFs: 110,\n    averageConfidence: 94.1,\n    commonKeywords: [\"Cryptocurrency\", \"DLT\", \"Smart Contracts\"],\n    documentTypes: \"5-7 types\",\n    description: \"Blockchain technology and cryptocurrency documentation.\",\n    typicalContent: [\"Technical whitepapers\", \"Protocol documentation\", \"Implementation guides\"]\n  },\n  \"As"}, {"index": 366, "path": "client/src/constants/dashboardData.js", "chunk": "icalContent: [\"Technical whitepapers\", \"Protocol documentation\", \"Implementation guides\"]\n  },\n  \"Astronomy\": {\n    totalPDFs: 105,\n    averageConfidence: 92.9,\n    commonKeywords: [\"Celestial\", \"Observatory\", \"Stars\"],\n    documentTypes: \"4-6 types\",\n    description: \"Astronomical research and observation documentation.\",\n    typicalContent: [\"Research papers\", \"Observation data\", \"Astronomical studies\"]\n  },\n  \"Music\": {\n    totalPDFs: 102,\n    averageConfidence: 91.2,\n    commonKeywords: [\"Co"}, {"index": 367, "path": "client/src/constants/dashboardData.js", "chunk": "tudies\"]\n  },\n  \"Music\": {\n    totalPDFs: 102,\n    averageConfidence: 91.2,\n    commonKeywords: [\"Composition\", \"Performance\", \"Theory\"],\n    documentTypes: \"4-6 types\",\n    description: \"Musical documentation and analysis.\",\n    typicalContent: [\"Sheet music\", \"Music theory\", \"Performance analysis\"]\n  }\n};\n"}, {"index": 368, "path": "client/src/index.css", "chunk": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 240 10% 3.9%;\n    --card: 0 0% 100%;\n    --card-foreground: 240 10% 3.9%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 240 10% 3.9%;\n    --primary: 240 5.9% 10%;\n    --primary-foreground: 0 0% 98%;\n    --secondary: 240 4.8% 95.9%;\n    --secondary-foreground: 240 5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8"}, {"index": 369, "path": "client/src/index.css", "chunk": "5.9% 10%;\n    --muted: 240 4.8% 95.9%;\n    --muted-foreground: 240 3.8% 46.1%;\n    --accent: 240 4.8% 95.9%;\n    --accent-foreground: 240 5.9% 10%;\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 5.9% 90%;\n    --input: 240 5.9% 90%;\n    --ring: 240 10% 3.9%;\n    --chart-1: 12 76% 61%;\n    --chart-2: 173 58% 39%;\n    --chart-3: 197 37% 24%;\n    --chart-4: 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem\n  }\n  .dark {\n    --background: 240 10%"}, {"index": 370, "path": "client/src/index.css", "chunk": " 43 74% 66%;\n    --chart-5: 27 87% 67%;\n    --radius: 0.5rem\n  }\n  .dark {\n    --background: 240 10% 3.9%;\n    --foreground: 0 0% 98%;\n    --card: 240 10% 3.9%;\n    --card-foreground: 0 0% 98%;\n    --popover: 240 10% 3.9%;\n    --popover-foreground: 0 0% 98%;\n    --primary: 0 0% 98%;\n    --primary-foreground: 240 5.9% 10%;\n    --secondary: 240 3.7% 15.9%;\n    --secondary-foreground: 0 0% 98%;\n    --muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --ac"}, {"index": 371, "path": "client/src/index.css", "chunk": "-muted: 240 3.7% 15.9%;\n    --muted-foreground: 240 5% 64.9%;\n    --accent: 240 3.7% 15.9%;\n    --accent-foreground: 0 0% 98%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 240 3.7% 15.9%;\n    --input: 240 3.7% 15.9%;\n    --ring: 240 4.9% 83.9%;\n    --chart-1: 220 70% 50%;\n    --chart-2: 160 60% 45%;\n    --chart-3: 30 80% 55%;\n    --chart-4: 280 65% 60%;\n    --chart-5: 340 75% 55%\n  }\n}\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @appl"}, {"index": 372, "path": "client/src/index.css", "chunk": "   --chart-5: 340 75% 55%\n  }\n}\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}"}, {"index": 373, "path": "client/src/lib/utils.js", "chunk": "import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n"}, {"index": 374, "path": "client/src/main.jsx", "chunk": "import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css'\nimport App from './App.jsx'\n\ncreateRoot(document.getElementById('root')).render(\n  <StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </StrictMode>,\n)"}, {"index": 375, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": "import { useState } from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\n\nChartJS.register(ArcElement, Tooltip, Legend, ChartDataLabels);\n\nconst AnalyticsPage = () => {\n    const [isLoading, setIsLoading] = useState(true);\n    const rawData = [120, 120, 118, 118, 118, 118, 118, 117, 117, 116, 115, 115,\n        115, 112, 111, 110, 107, 103, 102, 97, 96, 63, 36, 22];\n "}, {"index": 376, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": "118, 118, 117, 117, 116, 115, 115,\n        115, 112, 111, 110, 107, 103, 102, 97, 96, 63, 36, 22];\n    \n    const total = rawData.reduce((acc, curr) => acc + curr, 0);\n    \n    const data = {\n        labels: [\n            'IT', 'Business Dev', 'Advocate', 'Chef', 'Engineering', \n            'Accountant', 'Finance', 'Fitness', 'Aviation', 'Sales', \n            'Banking', 'Healthcare', 'Consultant', 'Construction',\n            'PR', 'HR', 'Designer', 'Arts', 'Teacher', 'Apparel',\n            'Digi"}, {"index": 377, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": " 'Construction',\n            'PR', 'HR', 'Designer', 'Arts', 'Teacher', 'Apparel',\n            'Digital Media', 'Agriculture', 'Automobile', 'BPO'\n        ],\n        datasets: [{\n            data: rawData,\n            backgroundColor: [\n                '#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231',\n                '#911eb4', '#42d4f4', '#f032e6', '#bfef45', '#fabed4',\n                '#469990', '#dcbeff', '#9A6324', '#fffac8', '#800000',\n                '#aaffc3', '#808000', '#ffd8b1', '"}, {"index": 378, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": "990', '#dcbeff', '#9A6324', '#fffac8', '#800000',\n                '#aaffc3', '#808000', '#ffd8b1', '#000075', '#a9a9a9',\n                '#000000', '#ffffff', '#800080', '#e6beff',\n            ],\n            borderWidth: 2,\n            borderColor: '#ffffff',\n        }]\n    };\n\n    const options = {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n            datalabels: {\n                color: '#fff',\n                font: {\n                    weight: 'bold',\n "}, {"index": 379, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": "bels: {\n                color: '#fff',\n                font: {\n                    weight: 'bold',\n                    size: 12\n                },\n                formatter: (value) => {\n                    const percentage = ((value / total) * 100).toFixed(1);\n                    return `${percentage}%`;\n                }\n            },\n            legend: {\n                position: 'right',\n                labels: {\n                    padding: 20,\n                    font: {\n                "}, {"index": 380, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": "             labels: {\n                    padding: 20,\n                    font: {\n                        size: 12\n                    }\n                }\n            },\n            tooltip: {\n                callbacks: {\n                    label: (context) => {\n                        const value = context.raw;\n                        const percentage = ((value / total) * 100).toFixed(1);\n                        return `${context.label}: ${value} (${percentage}%)`;\n                    }\n    "}, {"index": 381, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": "                    return `${context.label}: ${value} (${percentage}%)`;\n                    }\n                }\n            }\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n            {/* Header Section */}\n            <div className=\"max-w-7xl mx-auto text-center mb-12\">\n                <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Analytics Dashboard</h1>\n                <p className=\"text-lg text-gray-600\">Comprehensive a"}, {"index": 382, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": " mb-4\">Analytics Dashboard</h1>\n                <p className=\"text-lg text-gray-600\">Comprehensive analysis of professional distribution and model performance</p>\n            </div>\n\n            {/* Model Performance Section */}\n            <section className=\"max-w-7xl mx-auto mb-16\">\n                <h2 className=\"text-2xl font-semibold text-gray-800 mb-6 px-4\">Model Performance Metrics</h2>\n                <div className='relative'>\n                    {isLoading && (\n                        "}, {"index": 383, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": "             <div className='relative'>\n                    {isLoading && (\n                        <div className=\"absolute inset-0 flex items-center justify-center bg-gray-50/80 backdrop-blur-sm rounded-xl z-10\">\n                            <div className=\"animate-spin rounded-full h-16 w-16 border-4 border-blue-500 border-t-transparent\"></div>\n                        </div>\n                    )}\n                    <div className=\"bg-white p-4 rounded-xl shadow-lg\">\n                        <"}, {"index": 384, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": ")}\n                    <div className=\"bg-white p-4 rounded-xl shadow-lg\">\n                        <iframe \n                            title=\"Wandb Report\"\n                            src=\"https://wandb.ai/vvinayakkk-sardar-patel-institute-of-technology/huggingface/reports/Untitled-Report--VmlldzoxMDQwOTQ5MA?accessToken=jlnvsord7v1pnxz5efh4492zmhahs7u8rfofyvdpstiu7xjdfr5jayy7lsozefej\"\n                            onLoad={() => setIsLoading(false)}\n                            className=\"w-full tr"}, {"index": 385, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": "                 onLoad={() => setIsLoading(false)}\n                            className=\"w-full transition-all duration-300 rounded-lg\"\n                            style={{\n                                height: 'calc(90vh - 200px)',\n                                minHeight: '600px',\n                                border: '2px solid #e5e7eb',\n                            }}\n                        />\n                    </div>\n                </div>\n            </section>\n\n            {/* Di"}, {"index": 386, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": "     />\n                    </div>\n                </div>\n            </section>\n\n            {/* Distribution Chart Section */}\n            <section className=\"max-w-7xl mx-auto\">\n                <h2 className=\"text-2xl font-semibold text-gray-800 mb-6 px-4\">Professional Distribution</h2>\n                <div className='bg-white rounded-xl shadow-lg p-6'>\n                    <div className='h-[600px] md:h-[700px] w-full'>\n                        <Pie \n                            data={data} \n  "}, {"index": 387, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": "0px] md:h-[700px] w-full'>\n                        <Pie \n                            data={data} \n                            options={{\n                                ...options,\n                                plugins: {\n                                    ...options.plugins,\n                                    legend: {\n                                        ...options.plugins.legend,\n                                        position: window.innerWidth < 768 ? 'bottom' : 'right',\n           "}, {"index": 388, "path": "client/src/pages/AnalyticsPage.jsx", "chunk": "                                 position: window.innerWidth < 768 ? 'bottom' : 'right',\n                                    }\n                                }\n                            }} \n                        />\n                    </div>\n                </div>\n            </section>\n        </div>\n    );\n};\n\nexport default AnalyticsPage;"}, {"index": 389, "path": "client/src/pages/DashboardPage.jsx", "chunk": "import { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport Classifications from '@/components/dashboard/Classifications';\nimport Navbar from '@/components/dashboard/Navbar';\nimport Notifications from '@/components/dashboard/Notifications';\nimport QuickActions from '@/components/dashboard/QuickActions';\nimport RecentUploads from '@/components/dashboard/RecentUploads';\nimport DocumentProcessingLoader from '@/components"}, {"index": 390, "path": "client/src/pages/DashboardPage.jsx", "chunk": "oads from '@/components/dashboard/RecentUploads';\nimport DocumentProcessingLoader from '@/components/DocumentProcessingLoader';\nimport StatsGrid from '@/components/dashboard/StatsGrid';\nimport { NOTIFICATIONS, RECENT_UPLOADS, PROCESSING_RESULTS } from '@/constants/dashboardData';\nimport AnalyticsPage from '@/pages/AnalyticsPage';\n\nconst SERVER_URL = import.meta.env.VITE_SERVER_URL;\n\nconst Dashboard = () => {\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [isProcessing, setIsP"}, {"index": 391, "path": "client/src/pages/DashboardPage.jsx", "chunk": "d = () => {\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [showResults, setShowResults] = useState(false);  // Add this new state\n  const [processingResults, setProcessingResults] = useState(PROCESSING_RESULTS);\n  const [recentUploads, setRecentUploads] = useState(RECENT_UPLOADS);\n  const [selectedUpload, setSelectedUpload] = useState(null);\n  const [error, setError] = useState(null);\n  const [uploadedFiles, setUploa"}, {"index": 392, "path": "client/src/pages/DashboardPage.jsx", "chunk": "load] = useState(null);\n  const [error, setError] = useState(null);\n  const [uploadedFiles, setUploadedFiles] = useState(new Map());\n\n  const processDocumentWithModel = async (file, modelNumber) => {\n    const formData = new FormData();\n    formData.append('resume', file);\n\n    try {\n      const response = await fetch(`${SERVER_URL}/api/upload-resume${modelNumber}/`, {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) {\n        throw new Error(`Model ${modelNumber"}, {"index": 393, "path": "client/src/pages/DashboardPage.jsx", "chunk": "    body: formData\n      });\n\n      if (!response.ok) {\n        throw new Error(`Model ${modelNumber} failed: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      if (data.status === 'failed') {\n        throw new Error(`Model ${modelNumber} processing failed`);\n      }\n      console.log(`Model ${modelNumber} processed successfully`);\n      console.log(data);\n      return data;\n    } catch (error) {\n      setError(`Model ${modelNumber}: ${error.message}`);\n      retu"}, {"index": 394, "path": "client/src/pages/DashboardPage.jsx", "chunk": "urn data;\n    } catch (error) {\n      setError(`Model ${modelNumber}: ${error.message}`);\n      return null;\n    }\n  };\n\n  const handleUploadClick = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.pdf';\n\n    input.onchange = async (e) => {\n      const file = e.target.files?.[0];\n      if (!file) return;\n\n      // Validate file size (e.g., max 10MB)\n      if (file.size > 10 * 1024 * 1024) {\n        setError(\"File size exceeds 10MB limit\");\n"}, {"index": 395, "path": "client/src/pages/DashboardPage.jsx", "chunk": "x 10MB)\n      if (file.size > 10 * 1024 * 1024) {\n        setError(\"File size exceeds 10MB limit\");\n        return;\n      }\n\n      // Validate file type\n      if (!file.type.includes('pdf')) {\n        setError(\"Only PDF files are allowed\");\n        return;\n      }\n\n      setError(null);\n      setIsProcessing(true);\n      setShowResults(false);\n      const results = {\n        modelResponses: [],\n        finalClassification: '',\n        overallConfidence: 0\n      };\n\n      try {\n        // Process"}, {"index": 396, "path": "client/src/pages/DashboardPage.jsx", "chunk": "      finalClassification: '',\n        overallConfidence: 0\n      };\n\n      try {\n        // Process with all models\n        for (let i = 1; i <= 5; i++) {\n          const response = await processDocumentWithModel(file, i);\n          if (!response) {\n            throw new Error(`Processing failed at model ${i}`);\n          }\n\n          results.modelResponses.push({\n            model: i,\n            category: response.category,\n            confidence: Math.floor(Math.random() * 15) + 85 // Simula"}, {"index": 397, "path": "client/src/pages/DashboardPage.jsx", "chunk": "  category: response.category,\n            confidence: Math.floor(Math.random() * 15) + 85 // Simulated confidence 85-100%\n          });\n        }\n\n        if (results.modelResponses.length === 0) {\n          throw new Error(\"No model responses received\");\n        }\n\n        // Calculate final classification (most common category)\n        const categories = results.modelResponses.map(r => r.category);\n        const mostCommon = categories.sort((a, b) =>\n          categories.filter(v => v === a)."}, {"index": 398, "path": "client/src/pages/DashboardPage.jsx", "chunk": "ry);\n        const mostCommon = categories.sort((a, b) =>\n          categories.filter(v => v === a).length - categories.filter(v => v === b).length\n        ).pop();\n\n        results.finalClassification = mostCommon;\n        results.overallConfidence = Math.floor(\n          results.modelResponses.reduce((acc, curr) => acc + curr.confidence, 0) / 5\n        );\n\n        // Update uploads list\n        const newUpload = {\n          id: Date.now(),\n          name: file.name,\n          status: `Classifi"}, {"index": 399, "path": "client/src/pages/DashboardPage.jsx", "chunk": "const newUpload = {\n          id: Date.now(),\n          name: file.name,\n          status: `Classified as: ${results.finalClassification}`,\n          time: \"Just now\",\n          confidence: results.overallConfidence,\n          skills: [\"JavaScript\", \"React\", \"Node.js\"]\n        };\n        \n        // Store the file in the Map\n        const updatedMap = new Map(uploadedFiles).set(newUpload.id, file);\n        setUploadedFiles(updatedMap);\n        window.uploadedFiles = updatedMap;\n        \n        "}, {"index": 400, "path": "client/src/pages/DashboardPage.jsx", "chunk": ";\n        setUploadedFiles(updatedMap);\n        window.uploadedFiles = updatedMap;\n        \n        setRecentUploads(prev => [newUpload, ...prev]);\n        setProcessingResults(results);\n        setShowResults(true);  // Set this to true after successful processing\n      } catch (error) {\n        setError(error.message);\n        setProcessingResults(null);\n      } finally {\n        setTimeout(() => {\n          setIsProcessing(false);\n          // Keep showing results for 4 more seconds\n         "}, {"index": 401, "path": "client/src/pages/DashboardPage.jsx", "chunk": "> {\n          setIsProcessing(false);\n          // Keep showing results for 4 more seconds\n          setTimeout(() => {\n            setShowResults(false);\n          }, 4000);\n          // Clear error after 5 seconds if there is one\n          if (error) {\n            setTimeout(() => setError(null), 5000);\n          }\n        }, 1000);\n      }\n    };\n    input.click();\n  };\n\n  const handleUploadSelect = (upload) => {\n    setSelectedUpload(selectedUpload?.id === upload.id ? null : upload);\n  };\n\n "}, {"index": 402, "path": "client/src/pages/DashboardPage.jsx", "chunk": "ect = (upload) => {\n    setSelectedUpload(selectedUpload?.id === upload.id ? null : upload);\n  };\n\n  const renderAnalytics = () => (\n    <div>\n      <AnalyticsPage />\n    </div>\n  );\n\n  const renderSettings = () => (\n    <Card>\n      <CardHeader>\n        <CardTitle>System Settings</CardTitle>\n        <CardDescription>Configure your preferences</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <h3 classN"}, {"index": 403, "path": "client/src/pages/DashboardPage.jsx", "chunk": "nt>\n        <div className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <h3 className=\"font-medium\">Notification Preferences</h3>\n            <div className=\"space-y-2\">\n              {['Email Notifications', 'Push Notifications', 'Weekly Reports'].map((setting) => (\n                <div key={setting} className=\"flex items-center justify-between p-2\">\n                  <span>{setting}</span>\n                  <button className=\"w-12 h-6 bg-blue-600 rounded-full relative\">\n     "}, {"index": 404, "path": "client/src/pages/DashboardPage.jsx", "chunk": "ting}</span>\n                  <button className=\"w-12 h-6 bg-blue-600 rounded-full relative\">\n                    <span className=\"absolute right-1 top-1 w-4 h-4 bg-white rounded-full\"></span>\n                  </button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  const renderContent = () => {\n    switch (activeTab) {\n      case 'classifications':\n        return <Classifications />;\n      case 'analytics':\n"}, {"index": 405, "path": "client/src/pages/DashboardPage.jsx", "chunk": "iveTab) {\n      case 'classifications':\n        return <Classifications />;\n      case 'analytics':\n        return renderAnalytics();\n      case 'settings':\n        return renderSettings();\n      default:\n        return (\n          <>\n            <StatsGrid />\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2\">\n                <RecentUploads\n                  uploads={recentUploads}\n                  selectedUpload={selectedUpload}\n  "}, {"index": 406, "path": "client/src/pages/DashboardPage.jsx", "chunk": "loads\n                  uploads={recentUploads}\n                  selectedUpload={selectedUpload}\n                  onUploadSelect={handleUploadSelect}\n                  uploadedFiles={uploadedFiles}\n                />\n              </div>\n              <div>\n                <Notifications notifications={NOTIFICATIONS} />\n              </div>\n            </div>\n          </>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100\">\n      <Doc"}, {"index": 407, "path": "client/src/pages/DashboardPage.jsx", "chunk": "\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100\">\n      <DocumentProcessingLoader\n        isLoading={isProcessing || showResults}\n        modelResults={processingResults}\n        error={error}\n      />\n      <Navbar setActiveTab={setActiveTab} />\n\n      <div className=\"p-6 max-w-7xl mx-auto\">\n        <QuickActions setActiveTab={setActiveTab} handleUploadClick={handleUploadClick} />\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default D"}, {"index": 408, "path": "client/src/pages/DashboardPage.jsx", "chunk": "k={handleUploadClick} />\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"}, {"index": 409, "path": "client/src/pages/DetailedAnalysis/components/LoadingSpinner.jsx", "chunk": "\nimport React from 'react';\nimport { Loader2 } from 'lucide-react';\n\nconst processingSteps = [\n  \"Extracting document text\",\n  \"Parsing document structure\",\n  \"Identifying key information sections\",\n  \"Generating comprehensive report\"\n];\n\nconst LoadingSpinner = ({ loadingStep }) => (\n  <div className=\"fixed inset-0 z-50 flex flex-col items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 p-6\">\n    <div className=\"animate-pulse mb-8\">\n      <Loader2 className=\"w-24 h-24 text-blu"}, {"index": 410, "path": "client/src/pages/DetailedAnalysis/components/LoadingSpinner.jsx", "chunk": "digo-100 p-6\">\n    <div className=\"animate-pulse mb-8\">\n      <Loader2 className=\"w-24 h-24 text-blue-500 animate-spin\" />\n    </div>\n    <div className=\"text-center max-w-md\">\n      <h2 className=\"text-3xl font-bold text-gray-800 mb-6 tracking-tight\">Analyzing Document</h2>\n      <div className=\"text-xl text-gray-600 mb-6 min-h-[50px]\">\n        {processingSteps[loadingStep]}\n      </div>\n      <div className=\"flex justify-center space-x-2\">\n        {processingSteps.map((_, index) => (\n         "}, {"index": 411, "path": "client/src/pages/DetailedAnalysis/components/LoadingSpinner.jsx", "chunk": "iv className=\"flex justify-center space-x-2\">\n        {processingSteps.map((_, index) => (\n          <div \n            key={index} \n            className={`h-2 rounded-full transition-all duration-300 ${\n              index === loadingStep \n                ? 'bg-blue-600 w-6' \n                : 'bg-gray-300 w-2'\n            }`}\n          ></div>\n        ))}\n      </div>\n    </div>\n  </div>\n);\n\nexport default LoadingSpinner;\nexport { processingSteps };"}, {"index": 412, "path": "client/src/pages/DetailedAnalysis/components/LoadingSpinner.jsx", "chunk": "ort default LoadingSpinner;\nexport { processingSteps };"}, {"index": 413, "path": "client/src/pages/DetailedAnalysis/components/Section.jsx", "chunk": "import React from 'react';\n\nexport const SubCard = ({ title, children }) => (\n  <div className=\"bg-gray-50/80 rounded-xl p-4 backdrop-blur-sm\">\n    <h3 className=\"font-semibold mb-3 text-gray-800\">{title}</h3>\n    {children}\n  </div>\n);\n\nconst Section = ({ title, icon, children, className = \"\" }) => (\n  <div className={`bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl p-6 mb-6 border border-gray-200/50 hover:shadow-3xl transition-all duration-300 ${className}`}>\n    <div className=\"flex items"}, {"index": 414, "path": "client/src/pages/DetailedAnalysis/components/Section.jsx", "chunk": "y-200/50 hover:shadow-3xl transition-all duration-300 ${className}`}>\n    <div className=\"flex items-center mb-6 space-x-4\">\n      <div className=\"p-3 rounded-xl bg-gradient-to-br from-gray-50 to-gray-100 shadow-md\">{icon}</div>\n      <h2 className=\"text-2xl font-semibold text-gray-800 tracking-tight\">{title}</h2>\n    </div>\n    <div className=\"grid grid-cols-1 gap-4\">\n      {children}\n    </div>\n  </div>\n);\n\nexport default Section;"}, {"index": 415, "path": "client/src/pages/DetailedAnalysis/components/Section.jsx", "chunk": "  </div>\n);\n\nexport default Section;"}, {"index": 416, "path": "client/src/pages/DetailedAnalysis/components/UIComponents.jsx", "chunk": "\nimport React from 'react';\n\nexport const Tag = ({ children }) => (\n  <span className=\"inline-block px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-700 m-1\">\n    {children}\n  </span>\n);\n\nexport const ContactItem = ({ icon, children }) => (\n  <div className=\"flex items-center space-x-3 text-gray-700\">\n    {icon}\n    <span className=\"text-base\">{children}</span>\n  </div>\n);\n\nexport const ProgressBar = ({ value, max = 100 }) => (\n  <div className=\"w-full bg-gray-200 rounded-full h-"}, {"index": 417, "path": "client/src/pages/DetailedAnalysis/components/UIComponents.jsx", "chunk": "const ProgressBar = ({ value, max = 100 }) => (\n  <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n    <div \n      className=\"bg-blue-600 h-2.5 rounded-full transition-all duration-300\"\n      style={{ width: `${(value/max) * 100}%` }}\n    ></div>\n  </div>\n);"}, {"index": 418, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "import { useEffect, useState } from 'react';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport { ArrowLeft, User, FileText, BookOpen, LineChart, Brain, Target, Languages, MessageSquare, Mail, Phone } from 'lucide-react';\nimport Section, { SubCard } from './components/Section';\nimport LoadingSpinner, { processingSteps } from './components/LoadingSpinner';\nimport { Tag, ContactItem, ProgressBar } from './components/UIComponents';\n\nconst SERVER_URL = import.meta.env.VITE_SERVE"}, {"index": 419, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "Item, ProgressBar } from './components/UIComponents';\n\nconst SERVER_URL = import.meta.env.VITE_SERVER_URL;\n\nconst DetailedAnalysis = () => {\n  const { uploadId } = useParams();\n  const navigate = useNavigate();\n  const [analysis, setAnalysis] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [loadingStep, setLoadingStep] = useState(0);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const stepInterval = loading ? setInterval(() => {\n      setLoadingSt"}, {"index": 420, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "ull);\n\n  useEffect(() => {\n    const stepInterval = loading ? setInterval(() => {\n      setLoadingStep((prev) => {\n        if (prev < processingSteps.length - 1) {\n          return prev + 1;\n        } else {\n          clearInterval(stepInterval);\n          return prev;\n        }\n      });\n    }, 1500) : null;\n\n    return () => {\n      if (stepInterval) clearInterval(stepInterval);\n    };\n  }, [loading]);\n\n  useEffect(() => {\n    const performAnalysis = async () => {\n      try {\n        const fil"}, {"index": 421, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "ding]);\n\n  useEffect(() => {\n    const performAnalysis = async () => {\n      try {\n        const file = window.uploadedFiles?.get(Number(uploadId));\n        if (!file) {\n          throw new Error('File not found');\n        }\n\n        const formData = new FormData();\n        formData.append('file', file);\n\n        const analysisResponse = await fetch(`${SERVER_URL}/api/analyze/`, {\n          method: 'POST',\n          body: formData\n        });\n\n        if (!analysisResponse.ok) {\n          throw "}, {"index": 422, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": ": 'POST',\n          body: formData\n        });\n\n        if (!analysisResponse.ok) {\n          throw new Error('Analysis failed');\n        }\n\n        const analysisData = await analysisResponse.json();\n        console.log(analysisData);\n        \n        setAnalysis(analysisData.analysis);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    performAnalysis();\n  }, [uploadId]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient"}, {"index": 423, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": ";\n\n    performAnalysis();\n  }, [uploadId]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-6\">\n      {loading && <LoadingSpinner loadingStep={loadingStep} />}\n      \n      <div className=\"max-w-5xl mx-auto\">\n        <button \n          onClick={() => navigate('/dashboard')}\n          className=\"flex items-center space-x-2 mb-6 text-gray-600 hover:text-gray-900 transition-colors\"\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n          <span>Back t"}, {"index": 424, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "-900 transition-colors\"\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n          <span>Back to Dashboard</span>\n        </button>\n\n        {error && (\n          <div className=\"bg-red-50 text-red-600 p-4 rounded-xl border border-red-100 shadow-md\">\n            {error}\n          </div>\n        )}\n\n        {analysis && (\n          <div className=\"space-y-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <Section \n                title=\"Personal Informatio"}, {"index": 425, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "rid-cols-1 md:grid-cols-2 gap-8\">\n              <Section \n                title=\"Personal Information\" \n                icon={<User className=\"w-6 h-6 text-blue-500\" />}\n                className=\"md:col-span-2\"\n              >\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <ContactItem icon={<User className=\"w-5 h-5 text-gray-500\" />}>\n                    {analysis?.personal_info?.full_name || 'N/A'}\n                  </ContactItem>\n                  <"}, {"index": 426, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "  {analysis?.personal_info?.full_name || 'N/A'}\n                  </ContactItem>\n                  <ContactItem icon={<Mail className=\"w-5 h-5 text-gray-500\" />}>\n                    {analysis?.personal_info?.email || 'N/A'}\n                  </ContactItem>\n                  <ContactItem icon={<Phone className=\"w-5 h-5 text-gray-500\" />}>\n                    {analysis?.personal_info?.phone || 'N/A'}\n                  </ContactItem>\n                  {analysis?.personal_info?.linkedin && (\n      "}, {"index": 427, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "'}\n                  </ContactItem>\n                  {analysis?.personal_info?.linkedin && (\n                    <ContactItem icon={<Link className=\"w-5 h-5 text-gray-500\" />}>\n                      {analysis.personal_info.linkedin}\n                    </ContactItem>\n                  )}\n                </div>\n              </Section>\n\n              <Section \n                title=\"Document Overview\" \n                icon={<FileText className=\"w-6 h-6 text-blue-500\" />}\n                classNam"}, {"index": 428, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "iew\" \n                icon={<FileText className=\"w-6 h-6 text-blue-500\" />}\n                className=\"md:col-span-2\"\n              >\n                <SubCard title=\"Document Details\">\n                  <div className=\"space-y-2\">\n                    <p className=\"text-gray-700\">Type: {analysis?.document_overview?.type}</p>\n                    <p className=\"text-gray-700\">Purpose: {analysis?.document_overview?.purpose}</p>\n                  </div>\n                </SubCard>\n                <SubC"}, {"index": 429, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "ent_overview?.purpose}</p>\n                  </div>\n                </SubCard>\n                <SubCard title=\"Major Sections\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    {analysis?.content_structure?.major_sections?.map((section, idx) => (\n                      <Tag key={idx}>{section}</Tag>\n                    ))}\n                  </div>\n                </SubCard>\n                <SubCard title=\"Key Themes\">\n                  <div className=\"flex flex-wrap ga"}, {"index": 430, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "rd>\n                <SubCard title=\"Key Themes\">\n                  <div className=\"flex flex-wrap gap-2\">\n                    {analysis?.document_overview?.key_themes?.map((theme, idx) => (\n                      <Tag key={idx}>{theme}</Tag>\n                    ))}\n                  </div>\n                </SubCard>\n              </Section>\n\n              <Section \n                title=\"Linguistic Analysis\" \n                icon={<Languages className=\"w-6 h-6 text-indigo-500\" />}\n              >"}, {"index": 431, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": " Analysis\" \n                icon={<Languages className=\"w-6 h-6 text-indigo-500\" />}\n              >\n                <SubCard title=\"Readability\">\n                  <div className=\"flex justify-between mb-2\">\n                    <span>Score</span>\n                    <span>{analysis?.linguistic_analysis?.readability_score}/100</span>\n                  </div>\n                  <ProgressBar value={analysis?.linguistic_analysis?.readability_score} />\n                </SubCard>\n                <SubC"}, {"index": 432, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "nalysis?.linguistic_analysis?.readability_score} />\n                </SubCard>\n                <SubCard title=\"Language Metrics\">\n                  <div className=\"space-y-2\">\n                    <p className=\"text-gray-700\">Vocabulary: {analysis?.linguistic_analysis?.vocabulary_complexity}</p>\n                    <p className=\"text-gray-700\">Structure: {analysis?.linguistic_analysis?.sentence_structure}</p>\n                  </div>\n                </SubCard>\n              </Section>\n\n          "}, {"index": 433, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "ucture}</p>\n                  </div>\n                </SubCard>\n              </Section>\n\n              <Section \n                title=\"Sentiment Analysis\" \n                icon={<MessageSquare className=\"w-6 h-6 text-green-500\" />}\n              >\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between mb-2\">\n                      <h3 className=\"font-semibold\">Sentiment Score</h3>\n                      <span>{(analysis?.senti"}, {"index": 434, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "    <h3 className=\"font-semibold\">Sentiment Score</h3>\n                      <span>{(analysis?.sentiment_analysis?.sentiment_ratio * 100).toFixed(0)}%</span>\n                    </div>\n                    <ProgressBar value={analysis?.sentiment_analysis?.sentiment_ratio * 100} />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Emotional Undertones</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {analysi"}, {"index": 435, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "tones</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {analysis?.sentiment_analysis?.emotional_undertones?.map((emotion, idx) => (\n                        <Tag key={idx}>{emotion}</Tag>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </Section>\n\n              <Section \n                title=\"Key Insights\" \n                icon={<Brain className=\"w-6 h-6 text-purple-500\" />}\n              >\n  "}, {"index": 436, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "y Insights\" \n                icon={<Brain className=\"w-6 h-6 text-purple-500\" />}\n              >\n                <SubCard title=\"Top Points\">\n                  <ul className=\"list-disc list-inside space-y-2\">\n                    {analysis?.key_insights?.top_points?.map((point, idx) => (\n                      <li key={idx} className=\"text-gray-700\">{point}</li>\n                    )) || <li className=\"text-gray-500\">No insights available</li>}\n                  </ul>\n                </SubCard>\n "}, {"index": 437, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "ame=\"text-gray-500\">No insights available</li>}\n                  </ul>\n                </SubCard>\n              </Section>\n\n              <Section \n                title=\"Critical Takeaways\" \n                icon={<Target className=\"w-6 h-6 text-yellow-500\" />}\n              >\n                <ul className=\"list-disc list-inside space-y-2\">\n                  {analysis?.key_insights?.critical_takeaways?.map((takeaway, idx) => (\n                    <li key={idx} className=\"text-gray-700\">{takeawa"}, {"index": 438, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "aways?.map((takeaway, idx) => (\n                    <li key={idx} className=\"text-gray-700\">{takeaway}</li>\n                  )) || <li className=\"text-gray-500\">No takeaways available</li>}\n                </ul>\n              </Section>\n\n              <Section \n                title=\"Potential Implications\" \n                icon={<LineChart className=\"w-6 h-6 text-red-500\" />}\n              >\n                <ul className=\"list-disc list-inside space-y-2\">\n                  {analysis?.key_insig"}, {"index": 439, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "             <ul className=\"list-disc list-inside space-y-2\">\n                  {analysis?.key_insights?.potential_implications?.map((implication, idx) => (\n                    <li key={idx} className=\"text-gray-700\">{implication}</li>\n                  )) || <li className=\"text-gray-500\">No implications available</li>}\n                </ul>\n              </Section>\n\n              <Section \n                title=\"Content Analysis\" \n                icon={<BookOpen className=\"w-6 h-6 text-green-50"}, {"index": 440, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "          title=\"Content Analysis\" \n                icon={<BookOpen className=\"w-6 h-6 text-green-500\" />}\n              >\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Writing Style</h3>\n                    <p className=\"text-gray-700\">{analysis?.content_structure?.writing_style || 'Not available'}</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-s"}, {"index": 441, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "ble'}</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Complexity</h3>\n                    <p className=\"text-gray-700\">{analysis?.content_structure?.complexity || 'Not available'}</p>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Tone</h3>\n                    <p className=\"text-gray-700\">{analysis?.content_structure?.tone || 'Not available'}</p>\n                  </div>\n         "}, {"index": 442, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "y-700\">{analysis?.content_structure?.tone || 'Not available'}</p>\n                  </div>\n                </div>\n              </Section>\n\n              <Section \n                title=\"Potential Use Cases\" \n                icon={<Target className=\"w-6 h-6 text-orange-500\" />}\n              >\n                <div className=\"space-y-4\">\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Relevant Industries</h3>\n                    <div className=\"flex flex-wrap gap-2\""}, {"index": 443, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "nt-semibold mb-2\">Relevant Industries</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {analysis?.potential_use_cases?.relevant_industries?.map((industry, idx) => (\n                        <Tag key={idx}>{industry}</Tag>\n                      )) || <span className=\"text-gray-500\">No industries listed</span>}\n                    </div>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Suggested Actions</h3>"}, {"index": 444, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "                 <div>\n                    <h3 className=\"font-semibold mb-2\">Suggested Actions</h3>\n                    <ul className=\"list-disc list-inside space-y-2\">\n                      {analysis?.potential_use_cases?.suggested_actions?.map((action, idx) => (\n                        <li key={idx} className=\"text-gray-700\">{action}</li>\n                      )) || <li className=\"text-gray-500\">No actions suggested</li>}\n                    </ul>\n                  </div>\n                  <d"}, {"index": 445, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "\">No actions suggested</li>}\n                    </ul>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold mb-2\">Recommended Applications</h3>\n                    <ul className=\"list-disc list-inside space-y-2\">\n                      {analysis?.potential_use_cases?.recommended_applications?.map((application, idx) => (\n                        <li key={idx} className=\"text-gray-700\">{application}</li>\n                      )) || <li className=\"text-gra"}, {"index": 446, "path": "client/src/pages/DetailedAnalysis/index.jsx", "chunk": "dx} className=\"text-gray-700\">{application}</li>\n                      )) || <li className=\"text-gray-500\">No applications recommended</li>}\n                    </ul>\n                  </div>\n                </div>\n              </Section>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DetailedAnalysis;"}, {"index": 447, "path": "client/src/pages/TrainingPage.jsx", "chunk": "import { useState } from 'react';\n\nconst TrainingPage = () => {\n  const [classes, setClasses] = useState([]);\n  const [predictedFiles, setPredictedFiles] = useState([]);\n  const [csvFile, setCSVFile] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [downloadCSVEnabled, setDownloadCSVEnabled] = useState(false);\n  const [currentStage, setCurrentStage] = useState(-1);\n  const [isTrainingComplete, setIsTrainingComplete] = useState(false);\n  const [predictionFile, setPre"}, {"index": 448, "path": "client/src/pages/TrainingPage.jsx", "chunk": "const [isTrainingComplete, setIsTrainingComplete] = useState(false);\n  const [predictionFile, setPredictionFile] = useState(null);\n  const [isPredicting, setIsPredicting] = useState(false);\n  const [showPredictionDownload, setShowPredictionDownload] = useState(false);\n\n\n\n\n  const handleCSVFileChange = (event) => {\n    setCSVFile(event.target.files[0]);\n  };\n\n  const handleStart = async () => {\n    if (!csvFile) return;\n    setIsLoading(true);\n\n    try {\n      const nextStage = currentStage + 1;\n"}, {"index": 449, "path": "client/src/pages/TrainingPage.jsx", "chunk": " if (!csvFile) return;\n    setIsLoading(true);\n\n    try {\n      const nextStage = currentStage + 1;\n      if (nextStage < stageClasses.length) {\n        setCurrentStage(nextStage);\n        await new Promise((resolve) => setTimeout(resolve, 5000));\n        setClasses(prev => [...prev, ...stageClasses[nextStage]]);\n        setPredictedFiles(stagePredictedFiles[nextStage]); // Set stage-specific files\n        setDownloadCSVEnabled(true);\n        setIsTrainingComplete(true);\n      }\n    } catch (err"}, {"index": 450, "path": "client/src/pages/TrainingPage.jsx", "chunk": "s\n        setDownloadCSVEnabled(true);\n        setIsTrainingComplete(true);\n      }\n    } catch (error) {\n      console.error('Error training model:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleAddClass = () => {\n    setClasses([...classes, `Class ${classes.length + 1}`]);\n  };\n\n  const handleRemoveClass = (index) => {\n    setClasses(classes.filter((_, i) => i !== index));\n  };\n\n  const handleClassNameChange = (index, newName) => {\n    const newClasses = [...cla"}, {"index": 451, "path": "client/src/pages/TrainingPage.jsx", "chunk": " index));\n  };\n\n  const handleClassNameChange = (index, newName) => {\n    const newClasses = [...classes];\n    newClasses[index] = newName;\n    setClasses(newClasses);\n  };\n\n  const handlePredictionFileChange = (event) => {\n    setPredictionFile(event.target.files[0]);\n  };\n\n  const handleStartPrediction = async () => {\n    if (!predictionFile) return;\n    setIsPredicting(true);\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n      setShowPredictionDownload(true);\n    "}, {"index": 452, "path": "client/src/pages/TrainingPage.jsx", "chunk": "ait new Promise((resolve) => setTimeout(resolve, 5000));\n      setShowPredictionDownload(true);\n    } finally {\n      setIsPredicting(false);\n    }\n  };\n\n  const handleRetrain = () => {\n    setIsTrainingComplete(false);\n    setCSVFile(null);\n    setPredictionFile(null);\n    setShowPredictionDownload(false);\n    setDownloadCSVEnabled(false);\n    setClasses([])\n  };\n\n  const handleClassChange = (fileIndex, newClass) => {\n    const newPredictedFiles = [...predictedFiles];\n    newPredictedFiles[file"}, {"index": 453, "path": "client/src/pages/TrainingPage.jsx", "chunk": "eIndex, newClass) => {\n    const newPredictedFiles = [...predictedFiles];\n    newPredictedFiles[fileIndex].predictedClass = newClass;\n    setPredictedFiles(newPredictedFiles);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-900\">\n      {/* Sidebar */}\n      <div className=\"w-72 bg-gray-800 shadow-xl flex flex-col\">\n        <div className=\"p-5 border-b border-gray-700\">\n          <h2 className=\"text-xl text-white font-bold\">Model Configuration</h2>\n          <p className=\"text-sm text-"}, {"index": 454, "path": "client/src/pages/TrainingPage.jsx", "chunk": "ssName=\"text-xl text-white font-bold\">Model Configuration</h2>\n          <p className=\"text-sm text-gray-400 mt-1\">Define your classification classes</p>\n        </div>\n        <div className=\"p-4 flex-1 overflow-y-auto scrollbar-thin scrollbar-track-gray-700/30 scrollbar-thumb-gray-600 hover:scrollbar-thumb-gray-500\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h3 className=\"text-white font-bold\">Classes</h3>\n              <p className=\"te"}, {"index": 455, "path": "client/src/pages/TrainingPage.jsx", "chunk": "<div>\n              <h3 className=\"text-white font-bold\">Classes</h3>\n              <p className=\"text-xs text-gray-400 mt-1\">{classes.length} classes defined</p>\n            </div>\n            <button\n              onClick={handleAddClass}\n              className=\"text-sm bg-blue-500/20 text-blue-400 hover:bg-blue-500/30 px-3 py-1.5 rounded-full font-medium transition-all\"\n            >\n              + Add Class\n            </button>\n          </div>\n          <ul className=\"space-y-3\">\n       "}, {"index": 456, "path": "client/src/pages/TrainingPage.jsx", "chunk": "     + Add Class\n            </button>\n          </div>\n          <ul className=\"space-y-3\">\n            {classes.map((cls, index) => (\n              <li key={index} className=\"flex items-center gap-2 group\">\n                <input\n                  type=\"text\"\n                  value={cls}\n                  onChange={(e) => handleClassNameChange(index, e.target.value)}\n                  className=\"bg-gray-700/50 text-white px-3 py-2 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-b"}, {"index": 457, "path": "client/src/pages/TrainingPage.jsx", "chunk": "=\"bg-gray-700/50 text-white px-3 py-2 rounded-lg w-full focus:outline-none focus:ring-2 focus:ring-blue-500/50 transition-all\"\n                  placeholder=\"Enter class name\"\n                />\n                <button\n                  onClick={() => handleRemoveClass(index)}\n                  className=\"text-gray-500 hover:text-red-400 opacity-0 group-hover:opacity-100 transition-all p-1\"\n                >\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 "}, {"index": 458, "path": "client/src/pages/TrainingPage.jsx", "chunk": "          >\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                  </svg>\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div c"}, {"index": 459, "path": "client/src/pages/TrainingPage.jsx", "chunk": "            ))}\n          </ul>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto scrollbar-thin scrollbar-track-gray-900 scrollbar-thumb-gray-700 hover:scrollbar-thumb-gray-600\">\n        <div className=\"p-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold text-white mb-2\">\n              {isTrainingComplete ? 'Make Predictions' : 'Train Your Model'}\n            </h1>\n            <p className=\"text-gray-400\">\n       "}, {"index": 460, "path": "client/src/pages/TrainingPage.jsx", "chunk": "edictions' : 'Train Your Model'}\n            </h1>\n            <p className=\"text-gray-400\">\n              {isTrainingComplete\n                ? 'Upload documents to classify them using your trained model'\n                : 'Upload your dataset and start training the classification model'}\n            </p>\n          </div>\n\n          <div className=\"max-w-2xl mx-auto\">\n            <div className=\"bg-gray-800/50 rounded-xl p-8 backdrop-blur-sm shadow-xl border border-gray-700/50\">\n              {"}, {"index": 461, "path": "client/src/pages/TrainingPage.jsx", "chunk": "bg-gray-800/50 rounded-xl p-8 backdrop-blur-sm shadow-xl border border-gray-700/50\">\n              {!isTrainingComplete ? (\n                <div className=\"flex flex-col gap-6\">\n                  <div className=\"flex items-center justify-center w-full\">\n                    <label\n                      htmlFor=\"csv-file\"\n                      className=\"flex flex-col items-center justify-center w-full h-40 border-2 border-gray-600 border-dashed rounded-xl cursor-pointer bg-gray-700/30 hover:bg-gr"}, {"index": 462, "path": "client/src/pages/TrainingPage.jsx", "chunk": "ull h-40 border-2 border-gray-600 border-dashed rounded-xl cursor-pointer bg-gray-700/30 hover:bg-gray-700/50 transition-all\"\n                    >\n                      <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                        <svg className=\"w-8 h-8 mb-4 text-gray-400\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 16\">\n                          <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" stroke"}, {"index": 463, "path": "client/src/pages/TrainingPage.jsx", "chunk": "                     <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2\" />\n                        </svg>\n                        <p className=\"mb-2 text-sm text-gray-400\">\n                          <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                        </p>\n            "}, {"index": 464, "path": "client/src/pages/TrainingPage.jsx", "chunk": "me=\"font-semibold\">Click to upload</span> or drag and drop\n                        </p>\n                        <p className=\"text-xs text-gray-400\">Any file</p>\n                        <p className=\"text-xs text-gray-400\">Please Organize your classes into Folders</p>\n                        {csvFile && (\n                          <p className=\"mt-2 text-sm text-green-400\">Selected: {csvFile.name}</p>\n                        )}\n                      </div>\n                      <input\n          "}, {"index": 465, "path": "client/src/pages/TrainingPage.jsx", "chunk": "</p>\n                        )}\n                      </div>\n                      <input\n                        id=\"csv-file\"\n                        type=\"file\"\n                        accept=\"*\"\n                        onChange={handleCSVFileChange}\n                        className=\"hidden\"\n                      />\n                    </label>\n                  </div>\n                  <button\n                    onClick={handleStart}\n                    disabled={!csvFile}\n                "}, {"index": 466, "path": "client/src/pages/TrainingPage.jsx", "chunk": "n\n                    onClick={handleStart}\n                    disabled={!csvFile}\n                    className={`w-full bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-3 rounded-lg font-medium shadow-lg hover:from-blue-600 hover:to-blue-700 transition-all ${!csvFile ? 'opacity-50 cursor-not-allowed' : 'hover:scale-[1.02]'\n                      }`}\n                  >\n                    {isLoading ? 'Training in Progress...' : 'Start Training'}\n                  </button>\n      "}, {"index": 467, "path": "client/src/pages/TrainingPage.jsx", "chunk": "       {isLoading ? 'Training in Progress...' : 'Start Training'}\n                  </button>\n                </div>\n              ) : (\n                <div className=\"flex flex-col gap-6\">\n                  <div className=\"p-4 bg-green-500/10 rounded-lg border border-green-500/20 mb-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-green-400 font-medium\">Model Successfully Trained!</h3>\n          "}, {"index": 468, "path": "client/src/pages/TrainingPage.jsx", "chunk": "              <h3 className=\"text-green-400 font-medium\">Model Successfully Trained!</h3>\n                        <p className=\"text-sm text-green-300/70\">You can start your predictions</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-center w-full\">\n                    <label\n                      htmlFor=\"prediction-file\"\n                      className=\"flex flex-col items-center justify-center w-"}, {"index": 469, "path": "client/src/pages/TrainingPage.jsx", "chunk": "lFor=\"prediction-file\"\n                      className=\"flex flex-col items-center justify-center w-full h-40 border-2 border-gray-600 border-dashed rounded-xl cursor-pointer bg-gray-700/30 hover:bg-gray-700/50 transition-all\"\n                    >\n                      <div className=\"flex flex-col items-center justify-center pt-5 pb-6\">\n                        <svg className=\"w-8 h-8 mb-4 text-gray-400\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 16\">\n    "}, {"index": 470, "path": "client/src/pages/TrainingPage.jsx", "chunk": "ray-400\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 20 16\">\n                          <path stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2\" />\n                        </svg>\n                        <p className=\"mb-2 text-sm text-gray-400\">\n                          <span classN"}, {"index": 471, "path": "client/src/pages/TrainingPage.jsx", "chunk": "                   <p className=\"mb-2 text-sm text-gray-400\">\n                          <span className=\"font-semibold\">Click to upload</span> or drag and drop\n                        </p>\n                        <p className=\"text-xs text-gray-400\">ZIP files only</p>\n                        {predictionFile && (\n                          <p className=\"mt-2 text-sm text-green-400\">Selected: {predictionFile.name}</p>\n                        )}\n                      </div>\n                      <in"}, {"index": 472, "path": "client/src/pages/TrainingPage.jsx", "chunk": "tionFile.name}</p>\n                        )}\n                      </div>\n                      <input\n                        id=\"prediction-file\"\n                        type=\"file\"\n                        accept=\".zip\"\n                        onChange={handlePredictionFileChange}\n                        className=\"hidden\"\n                      />\n                    </label>\n                  </div>\n\n                  <button\n                    onClick={handleStartPrediction}\n              "}, {"index": 473, "path": "client/src/pages/TrainingPage.jsx", "chunk": "</div>\n\n                  <button\n                    onClick={handleStartPrediction}\n                    disabled={!predictionFile || isPredicting}\n                    className={`w-full bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-3 rounded-lg font-medium shadow-lg hover:from-blue-600 hover:to-blue-700 transition-all ${!predictionFile || isPredicting ? 'opacity-50 cursor-not-allowed' : 'hover:scale-[1.02]'}`}\n                  >\n                    {isPredicting ? 'Processing."}, {"index": 474, "path": "client/src/pages/TrainingPage.jsx", "chunk": "owed' : 'hover:scale-[1.02]'}`}\n                  >\n                    {isPredicting ? 'Processing...' : 'Start Prediction'}\n                  </button>\n\n                  {showPredictionDownload && (\n                    <div className=\"mt-4 space-y-4\">\n                      <div className=\"p-4 bg-green-500/10 rounded-lg border border-green-500/20\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h3 classNa"}, {"index": 475, "path": "client/src/pages/TrainingPage.jsx", "chunk": "ems-center justify-between\">\n                          <div>\n                            <h3 className=\"text-green-400 font-medium\">Prediction Complete!</h3>\n                            <p className=\"text-sm text-green-300/70\">Review and adjust predictions if needed</p>\n                          </div>\n                          <button className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg transition-all hover:scale-[1.02]\">\n                            Download Results\n      "}, {"index": 476, "path": "client/src/pages/TrainingPage.jsx", "chunk": "2 rounded-lg transition-all hover:scale-[1.02]\">\n                            Download Results\n                          </button>\n                        </div>\n                      </div>\n\n                      {/* Predicted Files List */}\n                      <div className=\"bg-gray-700/30 rounded-lg p-4\">\n                        <div className=\"flex justify-between items-center mb-4\">\n                          <h3 className=\"text-white font-medium\">Predicted Files</h3>\n                     "}, {"index": 477, "path": "client/src/pages/TrainingPage.jsx", "chunk": "                   <h3 className=\"text-white font-medium\">Predicted Files</h3>\n                          <div className=\"text-sm bg-blue-500/20 text-blue-400 hover:bg-blue-500/30 px-3 py-1.5 rounded-full font-medium transition-all\">\n                            Download Results CSV to edit more files\n                          </div>\n                        </div>\n                        <div className=\"space-y-3\">\n                          {predictedFiles.map((file, index) => (\n                  "}, {"index": 478, "path": "client/src/pages/TrainingPage.jsx", "chunk": "ame=\"space-y-3\">\n                          {predictedFiles.map((file, index) => (\n                            <div key={index} className=\"flex items-center justify-between bg-gray-800/50 p-3 rounded-lg\">\n                              <span className=\"text-gray-300\">{file.name}</span>\n                              <div className=\"flex items-center gap-4\">\n                                <select\n                                  onChange={(e) => handleClassChange(index, e.target.value)}\n          "}, {"index": 479, "path": "client/src/pages/TrainingPage.jsx", "chunk": "                               onChange={(e) => handleClassChange(index, e.target.value)}\n                                  className=\"bg-gray-700 text-white px-3 py-1 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500/50\"\n                                  value={file.predictedClass}\n                                >\n                                  {classes.map((cls) => (\n                                    <option key={cls} value={cls}>\n                                    "}, {"index": 480, "path": "client/src/pages/TrainingPage.jsx", "chunk": "                                 <option key={cls} value={cls}>\n                                      {cls}\n                                    </option>\n                                  ))}\n                                </select>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-4\">\n                        <button\n                    "}, {"index": 481, "path": "client/src/pages/TrainingPage.jsx", "chunk": "                   <div className=\"flex gap-4\">\n                        <button\n                          onClick={handleRetrain}\n                          className=\"flex-1 bg-gradient-to-r from-purple-500 to-purple-600 text-white px-6 py-3 rounded-lg font-medium shadow-lg hover:from-purple-600 hover:to-purple-700 transition-all hover:scale-[1.02]\"\n                        >\n                          Retrain\n                        </button>\n                      </div>\n                    </div"}, {"index": 482, "path": "client/src/pages/TrainingPage.jsx", "chunk": "    Retrain\n                        </button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Fixed Dashboard Button */}\n      <button\n        onClick={() => window.location.href = '/dashboard'}\n        className=\"fixed bottom-8 right-8 bg-gradient-to-r from-indigo-500 to-indigo-600 text-white px-6 py-3 rounded-lg font-medium shadow-lg hover:from-indigo-"}, {"index": 483, "path": "client/src/pages/TrainingPage.jsx", "chunk": "om-indigo-500 to-indigo-600 text-white px-6 py-3 rounded-lg font-medium shadow-lg hover:from-indigo-600 hover:to-indigo-700 transition-all hover:scale-[1.02] z-50\"\n      >\n        Proceed to Dashboard\n      </button>\n    </div>\n  );\n};\n\nexport default TrainingPage;"}, {"index": 484, "path": "client/src/pages/landingPage.jsx", "chunk": "import { useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport * as THREE from 'three';\nimport { Upload, FileText, BriefcaseIcon, Shield, Layers, Cpu, Server, Brain, Database, ArrowRight, FileUp, Search, CheckCircle, RefreshCw, FolderOpen, Link2 } from 'lucide-react';\n\nconst LandingPage = () => {\n  const mountRef = useRef(null);\n  const navigate = useNavigate();\n  const [selectedStep, setSelectedStep] = useState"}, {"index": 485, "path": "client/src/pages/landingPage.jsx", "chunk": "= useRef(null);\n  const navigate = useNavigate();\n  const [selectedStep, setSelectedStep] = useState(0);\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    // Three.js background animation setup\n    const currentMount = mountRef.current;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ alpha: true });\n\n    renderer.setSize(window.innerWidt"}, {"index": 486, "path": "client/src/pages/landingPage.jsx", "chunk": "   const renderer = new THREE.WebGLRenderer({ alpha: true });\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    currentMount.appendChild(renderer.domElement);\n\n    // Create animated particles\n    const geometry = new THREE.BufferGeometry();\n    const particles = 2000;\n    const positions = new Float32Array(particles * 3);\n\n    for (let i = 0; i < particles * 3; i += 3) {\n      positions[i] = (Math.random() - 0.5) * 10;\n      positions[i + 1] = (Math.random() - 0.5) * 10;\n      p"}, {"index": 487, "path": "client/src/pages/landingPage.jsx", "chunk": "itions[i] = (Math.random() - 0.5) * 10;\n      positions[i + 1] = (Math.random() - 0.5) * 10;\n      positions[i + 2] = (Math.random() - 0.5) * 10;\n    }\n\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    const material = new THREE.PointsMaterial({\n      size: 0.02,\n      color: '#4F46E5'\n    });\n\n    const points = new THREE.Points(geometry, material);\n    scene.add(points);\n    camera.position.z = 5;\n\n    // Animation loop\n    const animate = () => {\n      reque"}, {"index": 488, "path": "client/src/pages/landingPage.jsx", "chunk": "d(points);\n    camera.position.z = 5;\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      points.rotation.x += 0.001;\n      points.rotation.y += 0.001;\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEve"}, {"index": 489, "path": "client/src/pages/landingPage.jsx", "chunk": "onMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      currentMount.removeChild(renderer.domElement);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (selectedStep > 0) {\n      const targetProgress = (selectedStep / (steps.length - 1)) * 100;\n      const duration = 1000; // 1 second animation\n      const startTime = Date.now();\n      co"}, {"index": 490, "path": "client/src/pages/landingPage.jsx", "chunk": "100;\n      const duration = 1000; // 1 second animation\n      const startTime = Date.now();\n      const startProgress = progress;\n\n      const animate = () => {\n        const currentTime = Date.now();\n        const elapsed = currentTime - startTime;\n        \n        if (elapsed < duration) {\n          const newProgress = startProgress + ((targetProgress - startProgress) * elapsed) / duration;\n          setProgress(newProgress);\n          requestAnimationFrame(animate);\n        } else {\n         "}, {"index": 491, "path": "client/src/pages/landingPage.jsx", "chunk": "      setProgress(newProgress);\n          requestAnimationFrame(animate);\n        } else {\n          setProgress(targetProgress);\n        }\n      };\n\n      requestAnimationFrame(animate);\n    }\n  }, [selectedStep]);\n\n  const handleGetStarted = () => {\n    navigate('/train');\n  };\n\n  const steps = [\n    {\n      title: \"Upload\",\n      icon: <FileUp className=\"w-8 h-8 \" />,\n      color: \"from-blue-600 to-blue-600\",\n      description: \"Securely upload your documents through our intuitive drag-and-dr"}, {"index": 492, "path": "client/src/pages/landingPage.jsx", "chunk": "0 to-blue-600\",\n      description: \"Securely upload your documents through our intuitive drag-and-drop interface.\",\n      details: \"Our system accepts various document formats including PDFs, Word documents, and plain text files.\",\n    },\n    {\n      title: \"Parse\",\n      icon: <Search className=\"w-8 h-8\" />,\n      color: \"from-purple-500 to-purple-600\",\n      description: \"Advanced parsing algorithms extract relevant information from your documents.\",\n      details: \"Our AI system analyzes docu"}, {"index": 493, "path": "client/src/pages/landingPage.jsx", "chunk": "thms extract relevant information from your documents.\",\n      details: \"Our AI system analyzes document structure, content, and metadata for comprehensive understanding.\",\n    },\n    {\n      title: \"Analyze\",\n      icon: <Brain className=\"w-8 h-8\" />,\n      color: \"from-green-500 to-green-600\",\n      description: \"Deep learning models process and analyze the extracted content.\",\n      details: \"Multiple AI models work together to understand context, terminology, and document patterns.\",\n    },\n"}, {"index": 494, "path": "client/src/pages/landingPage.jsx", "chunk": "ultiple AI models work together to understand context, terminology, and document patterns.\",\n    },\n    {\n      title: \"Refine\",\n      icon: <RefreshCw className=\"w-8 h-8\" />,\n      color: \"from-red-500 to-red-600\",\n      description: \"Results are refined through iterative processing and validation.\",\n      details: \"Advanced algorithms continuously improve classification accuracy through machine learning.\",\n    },\n    {\n      title: \"Classify\",\n      icon: <CheckCircle className=\"w-8 h-8\" />,\n "}, {"index": 495, "path": "client/src/pages/landingPage.jsx", "chunk": "learning.\",\n    },\n    {\n      title: \"Classify\",\n      icon: <CheckCircle className=\"w-8 h-8\" />,\n      color: \"from-yellow-500 to-yellow-600\",\n      description: \"Documents are automatically categorized based on content analysis.\",\n      details: \"Our classification system uses both pre-defined categories and dynamic learning for accuracy.\",\n    }\n  ];\n\n  return (\n    <div className=\"relative min-h-screen bg-gradient-to-b from-gray-900 via-gray-800 to-gray-900 overflow-hidden\">\n      <div ref="}, {"index": 496, "path": "client/src/pages/landingPage.jsx", "chunk": "n-h-screen bg-gradient-to-b from-gray-900 via-gray-800 to-gray-900 overflow-hidden\">\n      <div ref={mountRef} className=\"absolute inset-0 opacity-50\" />\n\n      <div className=\"relative z-10\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-4 md:py-8\">\n          {/* Responsive Navigation */}\n          <nav className=\"flex flex-col sm:flex-row justify-between items-center mb-8 md:mb-16\">\n            <div className=\"text-2xl sm:text-3xl font-bold bg-gradient-to-r from-blue-400 to"}, {"index": 497, "path": "client/src/pages/landingPage.jsx", "chunk": "mb-16\">\n            <div className=\"text-2xl sm:text-3xl font-bold bg-gradient-to-r from-blue-400 to-indigo-500 bg-clip-text text-transparent mb-4 sm:mb-0\">\n              ClassifyMe.ai\n            </div>\n            <div className=\"flex flex-wrap justify-center gap-4 sm:gap-8 text-sm sm:text-base\">\n              <a href=\"#features\" className=\"text-gray-300 hover:text-white transition\">Features</a>\n              <a href=\"#how-it-works\" className=\"text-gray-300 hover:text-white transition\">How It "}, {"index": 498, "path": "client/src/pages/landingPage.jsx", "chunk": "\n              <a href=\"#how-it-works\" className=\"text-gray-300 hover:text-white transition\">How It Works</a>\n            </div>\n          </nav>\n\n          {/* Responsive Header */}\n          <header className=\"text-center mb-12 md:mb-16 px-4\">\n            <h1 className=\"text-3xl sm:text-4xl md:text-6xl font-bold text-white mb-4 leading-tight\">\n              Revolutionize Your Document Management with AI\n            </h1>\n            <p className=\"text-base sm:text-lg md:text-xl text-gray-300 m"}, {"index": 499, "path": "client/src/pages/landingPage.jsx", "chunk": " with AI\n            </h1>\n            <p className=\"text-base sm:text-lg md:text-xl text-gray-300 mb-8 md:mb-12 leading-relaxed max-w-3xl mx-auto\">\n              Effortlessly classify, refine, and organize your documents with a self-improving AI system.\n            </p>\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={handleGetStarted}\n              className=\"bg-gradient-to-r from-blue-500 to-indigo-600 text-w"}, {"index": 500, "path": "client/src/pages/landingPage.jsx", "chunk": "lick={handleGetStarted}\n              className=\"bg-gradient-to-r from-blue-500 to-indigo-600 text-white px-6 sm:px-8 py-3 sm:py-4 rounded-lg text-base sm:text-lg font-semibold hover:from-blue-600 hover:to-indigo-700 transition-all duration-300 shadow-lg hover:shadow-xl w-full sm:w-auto\"\n            >\n              Get Started Now\n            </motion.button>\n          </header>\n\n          {/* Responsive Features Section */}\n          <section id=\"features\" className=\"mb-12 md:mb-16 px-4\">\n     "}, {"index": 501, "path": "client/src/pages/landingPage.jsx", "chunk": "ponsive Features Section */}\n          <section id=\"features\" className=\"mb-12 md:mb-16 px-4\">\n            <h2 className=\"text-2xl sm:text-3xl font-bold text-white text-center mb-8 md:mb-12\">Key Features</h2>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:ga  p-8\">\n              {[\n                {\n                  icon: <Cpu className=\"w-12 h-12 text-blue-400\" />,\n                  title: \"AI-Powered Classification\",\n                  description: \"Advance"}, {"index": 502, "path": "client/src/pages/landingPage.jsx", "chunk": "0\" />,\n                  title: \"AI-Powered Classification\",\n                  description: \"Advanced AI analyzes your documents for precise classification.\"\n                },\n                {\n                  icon: <Brain className=\"w-12 h-12 text-purple-400\" />,\n                  title: \"Iterative Learning\",\n                  description: \"Our AI improves with every document it processes.\"\n                },\n                {\n                  icon: <Shield className=\"w-12 h-12 text-green-4"}, {"index": 503, "path": "client/src/pages/landingPage.jsx", "chunk": "              },\n                {\n                  icon: <Shield className=\"w-12 h-12 text-green-400\" />,\n                  title: \"Secure Handling\",\n                  description: \"Your documents are handled with the utmost security and privacy.\"\n                },\n                {\n                  icon: <Layers className=\"w-12 h-12 text-yellow-400\" />,\n                  title: \"Integration\",\n                  description: \"Seamlessly integrate with your internal repositories.\"\n            "}, {"index": 504, "path": "client/src/pages/landingPage.jsx", "chunk": "\n                  description: \"Seamlessly integrate with your internal repositories.\"\n                }\n              ].map((feature, index) => (\n                <motion.div\n                  key={feature.title}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.8, delay: 0.4 + index * 0.2 }}\n                  className=\"bg-gray-800/50 backdrop-blur-sm p-8 rounded-xl hover:bg-gray-800/60 transition-all "}, {"index": 505, "path": "client/src/pages/landingPage.jsx", "chunk": "      className=\"bg-gray-800/50 backdrop-blur-sm p-8 rounded-xl hover:bg-gray-800/60 transition-all duration-300 border border-gray-700/50\"\n                >\n                  <div className=\"mb-6\">{feature.icon}</div>\n                  <h3 className=\"text-xl font-semibold text-white mb-3\">{feature.title}</h3>\n                  <p className=\"text-gray-400 leading-relaxed\">{feature.description}</p>\n                </motion.div>\n              ))}\n            </div>\n          </section>\n\n          "}, {"index": 506, "path": "client/src/pages/landingPage.jsx", "chunk": "\n                </motion.div>\n              ))}\n            </div>\n          </section>\n\n          {/* Responsive How It Works Section */}\n          <section id=\"how-it-works\" className=\"mb-12 md:mb-24 px-4\">\n            <h2 className=\"text-2xl sm:text-4xl font-bold text-center mb-8 md:mb-16 bg-gradient-to-r from-blue-400 to-indigo-500 bg-clip-text text-transparent\">\n              How It Works\n            </h2>\n            <div className=\"relative max-w-7xl mx-auto\">\n              {/* Mobile Ti"}, {"index": 507, "path": "client/src/pages/landingPage.jsx", "chunk": "          </h2>\n            <div className=\"relative max-w-7xl mx-auto\">\n              {/* Mobile Timeline */}\n              <div className=\"md:hidden space-y-8\">\n                {steps.map((step, index) => (\n                  <motion.div\n                    key={step.title}\n                    initial={{ opacity: 0, x: -20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ duration: 0.5, delay: index * 0.1 }}\n                    className=\"flex items-start s"}, {"index": 508, "path": "client/src/pages/landingPage.jsx", "chunk": "transition={{ duration: 0.5, delay: index * 0.1 }}\n                    className=\"flex items-start space-x-4\"\n                  >\n                    <motion.button\n                      onClick={() => setSelectedStep(index)}\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                      className={`flex-shrink-0 w-16 h-16 rounded-xl bg-gradient-to-r ${step.color} \n                        flex items-center justify-center\n                "}, {"index": 509, "path": "client/src/pages/landingPage.jsx", "chunk": "adient-to-r ${step.color} \n                        flex items-center justify-center\n                        ${selectedStep === index ? 'ring-2 ring-white shadow-lg' : ''}`}\n                    >\n                      <div className=\"text-white opacity-100\">{step.icon}</div>\n                    </motion.button>\n                    <div className=\"flex-grow\">\n                      <h3 className=\"text-lg font-semibold text-white mb-2\">{step.title}</h3>\n                      {selectedStep === index "}, {"index": 510, "path": "client/src/pages/landingPage.jsx", "chunk": "t-lg font-semibold text-white mb-2\">{step.title}</h3>\n                      {selectedStep === index && (\n                        <motion.div\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          className=\"text-sm text-gray-300\"\n                        >\n                          <p>{step.description}</p>\n                        </motion.div>\n                      )}\n                    </div>\n                "}, {"index": 511, "path": "client/src/pages/landingPage.jsx", "chunk": "                  </motion.div>\n                      )}\n                    </div>\n                  </motion.div>\n                ))}\n              </div>\n\n              {/* Desktop Timeline */}\n              <div className=\"hidden md:block relative\">\n                {/* Progress Line - Updated for fewer steps */}\n                <div className=\"absolute top-10 left-0 right-0 flex items-center\">\n                  <div className=\"w-full h-2 bg-gray-800/50 backdrop-blur-sm mx-10 rounded-full ove"}, {"index": 512, "path": "client/src/pages/landingPage.jsx", "chunk": "\n                  <div className=\"w-full h-2 bg-gray-800/50 backdrop-blur-sm mx-10 rounded-full overflow-hidden\">\n                    <div \n                      className=\"h-full bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-500 transition-all duration-500\"\n                      style={{ \n                        width: `${progress}%`,\n                        boxShadow: '0 0 20px rgba(99, 102, 241, 0.3)',\n                        transition: 'width 0.8s cubic-bezier(0.4, 0, 0.2, 1)'\n  "}, {"index": 513, "path": "client/src/pages/landingPage.jsx", "chunk": "9, 102, 241, 0.3)',\n                        transition: 'width 0.8s cubic-bezier(0.4, 0, 0.2, 1)'\n                      }}\n                    />\n                  </div>\n                </div>\n\n                {/* Loading percentage display - Updated styling */}\n                <div className=\"absolute top-0 right-10 text-white font-mono bg-gray-800/50 px-3 py-1 rounded-full text-sm\">\n                  {Math.round(progress)}%\n                </div>\n\n                {/* Steps - Update grid colum"}, {"index": 514, "path": "client/src/pages/landingPage.jsx", "chunk": "       {Math.round(progress)}%\n                </div>\n\n                {/* Steps - Update grid columns for fewer steps */}\n                <div className=\"relative z-10 grid grid-cols-5 gap-4 md:gap-8 pt-0\">\n                  {steps.map((step, index) => (\n                    <motion.div\n                      key={step.title}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.8, delay: 0.2 + in"}, {"index": 515, "path": "client/src/pages/landingPage.jsx", "chunk": "   animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.8, delay: 0.2 + index * 0.1 }}\n                      className=\"flex flex-col items-center relative\"\n                    >\n                      <motion.button\n                        onClick={() => setSelectedStep(index)}\n                        whileHover={{ scale: 1.05, rotate: [0, -5, 5, 0] }}\n                        whileTap={{ scale: 0.95 }}\n                        className={`relative w-20 h-20 rounded-2xl b"}, {"index": 516, "path": "client/src/pages/landingPage.jsx", "chunk": "     whileTap={{ scale: 0.95 }}\n                        className={`relative w-20 h-20 rounded-2xl bg-gradient-to-r ${step.color} \n                          flex items-center justify-center mb-6 z-20\n                          ${selectedStep === index \n                            ? 'ring-4 ring-white shadow-xl shadow-current/50' \n                            : 'hover:opacity-90'}`}\n                        style={{\n                          transformStyle: 'preserve-3d',\n                          b"}, {"index": 517, "path": "client/src/pages/landingPage.jsx", "chunk": "       style={{\n                          transformStyle: 'preserve-3d',\n                          boxShadow: selectedStep === index \n                            ? '0 0 20px rgba(59, 130, 246, 0.5)' \n                            : '0 0 0 rgba(0,0,0,0)'\n                        }}\n                      >\n                        <div className=\"text-white opacity-100\">{step.icon}</div>\n                      </motion.button>\n\n                      <motion.div\n                        initial={false}\n "}, {"index": 518, "path": "client/src/pages/landingPage.jsx", "chunk": "       </motion.button>\n\n                      <motion.div\n                        initial={false}\n                        animate={{\n                          scale: selectedStep === index ? 1 : 0.95,\n                          opacity: selectedStep === index ? 1 : 1,\n                        }}\n                        className=\"text-center group\"\n                      >\n                        <h3 className={`text-xl font-semibold mb-3 transition-colors duration-300\n                          ${"}, {"index": 519, "path": "client/src/pages/landingPage.jsx", "chunk": "3 className={`text-xl font-semibold mb-3 transition-colors duration-300\n                          ${selectedStep === index \n                            ? 'bg-gradient-to-r from-white via-blue-100 to-white bg-clip-text text-transparent' \n                            : 'text-gray-300'}`}\n                        >\n                          {step.title}\n                        </h3>\n                        {selectedStep === index && (\n                          <motion.div\n                            "}, {"index": 520, "path": "client/src/pages/landingPage.jsx", "chunk": "     {selectedStep === index && (\n                          <motion.div\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            className=\"space-y-3 backdrop-blur-sm bg-gray-900/50 p-4 rounded-xl border border-gray-700/50\"\n                          >\n                            <p className=\"text-gray-200 leading-relaxed\">{step.description}</p>\n                          </motion.div>\n                      "}, {"index": 521, "path": "client/src/pages/landingPage.jsx", "chunk": "ading-relaxed\">{step.description}</p>\n                          </motion.div>\n                        )}\n                      </motion.div>\n                    </motion.div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LandingPage;"}, {"index": 522, "path": "client/tailwind.config.js", "chunk": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n    darkMode: [\"class\"],\n    content: [\"./index.html\", \"./src/**/*.{ts,tsx,js,jsx}\"],\n  theme: {\n  \textend: {\n  \t\tborderRadius: {\n  \t\t\tlg: 'var(--radius)',\n  \t\t\tmd: 'calc(var(--radius) - 2px)',\n  \t\t\tsm: 'calc(var(--radius) - 4px)'\n  \t\t},\n  \t\tcolors: {\n  \t\t\tbackground: 'hsl(var(--background))',\n  \t\t\tforeground: 'hsl(var(--foreground))',\n  \t\t\tcard: {\n  \t\t\t\tDEFAULT: 'hsl(var(--card))',\n  \t\t\t\tforeground: 'hsl(var(--card-foreground))'\n  \t"}, {"index": 523, "path": "client/tailwind.config.js", "chunk": "\n  \t\t\tcard: {\n  \t\t\t\tDEFAULT: 'hsl(var(--card))',\n  \t\t\t\tforeground: 'hsl(var(--card-foreground))'\n  \t\t\t},\n  \t\t\tpopover: {\n  \t\t\t\tDEFAULT: 'hsl(var(--popover))',\n  \t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n  \t\t\t},\n  \t\t\tprimary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--primary))',\n  \t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n  \t\t\t},\n  \t\t\tsecondary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n  \t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n  \t\t\t},\n  \t\t\tmuted: {\n  \t\t\t\tDEFAULT: 'hsl(var(--muted))',\n"}, {"index": 524, "path": "client/tailwind.config.js", "chunk": "round: 'hsl(var(--secondary-foreground))'\n  \t\t\t},\n  \t\t\tmuted: {\n  \t\t\t\tDEFAULT: 'hsl(var(--muted))',\n  \t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n  \t\t\t},\n  \t\t\taccent: {\n  \t\t\t\tDEFAULT: 'hsl(var(--accent))',\n  \t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n  \t\t\t},\n  \t\t\tdestructive: {\n  \t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n  \t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n  \t\t\t},\n  \t\t\tborder: 'hsl(var(--border))',\n  \t\t\tinput: 'hsl(var(--input))',\n  \t\t\tring: 'hsl(var(--ring))',\n  \t\t\tchar"}, {"index": 525, "path": "client/tailwind.config.js", "chunk": "der: 'hsl(var(--border))',\n  \t\t\tinput: 'hsl(var(--input))',\n  \t\t\tring: 'hsl(var(--ring))',\n  \t\t\tchart: {\n  \t\t\t\t'1': 'hsl(var(--chart-1))',\n  \t\t\t\t'2': 'hsl(var(--chart-2))',\n  \t\t\t\t'3': 'hsl(var(--chart-3))',\n  \t\t\t\t'4': 'hsl(var(--chart-4))',\n  \t\t\t\t'5': 'hsl(var(--chart-5))'\n  \t\t\t}\n  \t\t}\n  \t}\n  },\n  plugins: [require(\"tailwindcss-animate\"), require('tailwind-scrollbar')],\n}\n"}, {"index": 526, "path": "client/vercel.json", "chunk": "{\n    \"rewrites\": [\n      {\n        \"source\": \"/(.*)\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }"}, {"index": 527, "path": "client/vite.config.js", "chunk": "import path from \"path\"\nimport react from \"@vitejs/plugin-react\"\nimport { defineConfig } from \"vite\"\n\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n})\n"}]