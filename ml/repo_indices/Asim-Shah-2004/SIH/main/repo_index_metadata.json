[{"index": 0, "path": "ML/ML/asgi.py", "chunk": "\"\"\"\nASGI config for ML project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ML.settings')\n\napplication = get_asgi_application()\n"}, {"index": 1, "path": "ML/ML/settings.py", "chunk": "\"\"\"\nDjango settings for ML project.\n\nGenerated by 'django-admin startproject' using Django 5.0.4.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.0/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nimport os\nfrom pathlib import Path\nfrom dotenv import l"}, {"index": 2, "path": "ML/ML/settings.py", "chunk": "IR = Path(__file__).resolve().parent.parent\n\nimport os\nfrom pathlib import Path\nfrom dotenv import load_dotenv\nload_dotenv()\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv('SECRET_KEY')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINST"}, {"index": 3, "path": "ML/ML/settings.py", "chunk": " debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'meme_generator',\n    'texttosql',\n    'spam',\n    'post_analysis',\n    'resume_autofill',\n    'rewriteAI',\n    'recommendation',\n    'chat_pdf',\n    'recommendation_post',\n    'halloffame'\n]\n\nMI"}, {"index": 4, "path": "ML/ML/settings.py", "chunk": "'rewriteAI',\n    'recommendation',\n    'chat_pdf',\n    'recommendation_post',\n    'halloffame'\n]\n\nMIDDLEWARE = [\n  'django.middleware.security.SecurityMiddleware',\n    'corsheaders.middleware.CorsMiddleware', \n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'djan"}, {"index": 5, "path": "ML/ML/settings.py", "chunk": "are.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n\nROOT_URLCONF = 'ML.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n  "}, {"index": 6, "path": "ML/ML/settings.py", "chunk": "template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'ML.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sql"}, {"index": 7, "path": "ML/ML/settings.py", "chunk": "\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_"}, {"index": 8, "path": "ML/ML/settings.py", "chunk": "word_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nCORS_ALLOW_ALL_ORIGINS = True\n\nCORS_ALLOWED_ORIGINS = [\n    'http://localhost:5173',  # React developm"}, {"index": 9, "path": "ML/ML/settings.py", "chunk": "RS_ALLOW_ALL_ORIGINS = True\n\nCORS_ALLOWED_ORIGINS = [\n    'http://localhost:5173',  # React development server\n    'http://127.0.0.1:5173',   # React development server\n    # Add other origins as needed\n]\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSTATIC_U"}, {"index": 10, "path": "ML/ML/settings.py", "chunk": "/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\n\n# Media files configuration\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'"}, {"index": 11, "path": "ML/ML/urls.py", "chunk": "\"\"\"\nURL configuration for buildathon project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n  "}, {"index": 12, "path": "ML/ML/urls.py", "chunk": "    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path,include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/',include('spam.urls')),\n    path('api/',include('meme_generator.urls')),\n    path('api/',include('halloffame.urls"}, {"index": 13, "path": "ML/ML/urls.py", "chunk": "m.urls')),\n    path('api/',include('meme_generator.urls')),\n    path('api/',include('halloffame.urls')),\n   path('api/',include('post_analysis.urls')),\n   path('api/',include('resume_autofill.urls')),\n   path('api/',include('rewriteAI.urls')),\n   path('api/',include('recommendation.urls')),\n   path('api/',include('chat_pdf.urls')),\n   path('api/',include('texttosql.urls')),\n   path('api/',include('recommendation_post.urls'))\n  \n   \n   \n]\n"}, {"index": 14, "path": "ML/ML/urls.py", "chunk": "'recommendation_post.urls'))\n  \n   \n   \n]\n"}, {"index": 15, "path": "ML/ML/wsgi.py", "chunk": "\"\"\"\nWSGI config for ML project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ML.settings')\n\napplication = get_wsgi_application()\n"}, {"index": 16, "path": "ML/chat_pdf/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 17, "path": "ML/chat_pdf/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass ChatPdfConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chat_pdf'\n"}, {"index": 18, "path": "ML/chat_pdf/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 19, "path": "ML/chat_pdf/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 20, "path": "ML/chat_pdf/urls.py", "chunk": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('upload-pdf/', views.upload_pdf, name='upload_pdf'),\n    path('query-pdf/', views.query_pdf, name='query_pdf'),\n]"}, {"index": 21, "path": "ML/chat_pdf/views.py", "chunk": "from django.shortcuts import render\n\n# Create your views here.\nimport os\nimport json\nimport logging\nimport traceback\nimport pymongo\nimport pdfplumber\nimport uuid\nfrom django.shortcuts import render\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.http import JsonResponse\nfrom django.core.files.storage import default_storage\nfrom django.conf import settings\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain_core.ou"}, {"index": 22, "path": "ML/chat_pdf/views.py", "chunk": "ai import ChatGoogleGenerativeAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain_core.output_parsers import JsonOutputParser\nfrom sentence_transformers import SentenceTransformer  # HuggingFace embeddings\nfrom dotenv import load_dotenv\nfrom datetime import datetime\n\n# Load environment variables\nload_dotenv()\n\n# Configure logging\nlogger = logging.getLogger(__name__)\nmongo_url = os.getenv(\"MONGO_URL\")\nclass PDFAnalyzer:\n    def __init__(self):\n        # MongoDB Connection\n        try:\n"}, {"index": 23, "path": "ML/chat_pdf/views.py", "chunk": "v(\"MONGO_URL\")\nclass PDFAnalyzer:\n    def __init__(self):\n        # MongoDB Connection\n        try:\n            mongo_url = os.getenv(\"MONGO_URL\")\n            self.mongo_client = pymongo.MongoClient(mongo_url)\n            self.db = self.mongo_client['SIH']\n            self.pdf_collection = self.db['pdf_documents']\n            self.analysis_collection = self.db['pdf_analyses']\n        except Exception as e:\n            logger.error(f\"MongoDB Connection Error: {e}\")\n            raise\n\n        # Go"}, {"index": 24, "path": "ML/chat_pdf/views.py", "chunk": "ion as e:\n            logger.error(f\"MongoDB Connection Error: {e}\")\n            raise\n\n        # Google Generative AI Initialization\n        api_key = os.getenv(\"GOOGLE_API_KEY\")\n        if not api_key:\n            raise ValueError(\"Google API key is not set. Please check your .env file.\")\n\n        try:\n            self.llm = ChatGoogleGenerativeAI(\n                model=\"gemini-pro\",\n                temperature=0.3,\n                max_tokens=2048,\n                api_key=api_key\n            )"}, {"index": 25, "path": "ML/chat_pdf/views.py", "chunk": "     temperature=0.3,\n                max_tokens=2048,\n                api_key=api_key\n            )\n        except Exception as e:\n            raise ValueError(f\"Failed to initialize LLM: {str(e)}\")\n\n        # HuggingFace Embeddings \n        try:\n            self.embeddings = SentenceTransformer('all-MiniLM-L6-v2')  # Free, lightweight model\n        except Exception as e:\n            raise ValueError(f\"Failed to initialize embeddings: {str(e)}\")\n\n        # JSON Output Parser\n        self.json_p"}, {"index": 26, "path": "ML/chat_pdf/views.py", "chunk": "rror(f\"Failed to initialize embeddings: {str(e)}\")\n\n        # JSON Output Parser\n        self.json_parser = JsonOutputParser()\n\n    def extract_pdf_text(self, pdf_path):\n        \"\"\"\n        Extract all text from a PDF file using pdfplumber.\n        \"\"\"\n        with pdfplumber.open(pdf_path) as pdf:\n            full_text = \"\"\n            for page in pdf.pages:\n                page_text = page.extract_text() or \"\"\n                full_text += page_text + \"\\n\\n\"\n            return full_text\n\n    de"}, {"index": 27, "path": "ML/chat_pdf/views.py", "chunk": "ct_text() or \"\"\n                full_text += page_text + \"\\n\\n\"\n            return full_text\n\n    def generate_comprehensive_analysis(self, pdf_text):\n        \"\"\"\n        Generate a comprehensive analysis of the PDF content.\n        \"\"\"\n        analysis_prompt = PromptTemplate(\n            template=\"\"\"\n            Perform a comprehensive analysis of the following document:\n\n            Document Text: {document_text}\n\n            Provide a detailed JSON analysis with the following sections:\n     "}, {"index": 28, "path": "ML/chat_pdf/views.py", "chunk": "xt: {document_text}\n\n            Provide a detailed JSON analysis with the following sections:\n            1. Document Type Identification\n            2. Key Insights\n            3. Strengths\n            4. Areas of Improvement\n            5. Potential Use Cases\n            6. Detailed Recommendations\n            7. Overall Assessment\n\n            Return a structured JSON with these insights:\n            {{\n                \"document_type\": \"Specific type of document\",\n                \"key_insigh"}, {"index": 29, "path": "ML/chat_pdf/views.py", "chunk": "        {{\n                \"document_type\": \"Specific type of document\",\n                \"key_insights\": [\"List of critical observations\"],\n                \"strengths\": [\"Positive aspects of the document\"],\n                \"improvement_areas\": [\"Suggested improvements\"],\n                \"potential_use_cases\": [\"Possible applications\"],\n                \"recommendations\": [\"Specific actionable recommendations\"],\n                \"overall_assessment\": {{\n                    \"quality_score\": \"Numeric"}, {"index": 30, "path": "ML/chat_pdf/views.py", "chunk": "mendations\"],\n                \"overall_assessment\": {{\n                    \"quality_score\": \"Numeric score out of 10\",\n                    \"summary\": \"Concise overall evaluation\"\n                }}\n            }}\n            \"\"\",\n            input_variables=[\"document_text\"]\n        )\n\n        # Create analysis chain\n        analysis_chain = analysis_prompt | self.llm | self.json_parser\n\n        try:\n            # Generate analysis\n            analysis_result = analysis_chain.invoke({\"document_t"}, {"index": 31, "path": "ML/chat_pdf/views.py", "chunk": "ry:\n            # Generate analysis\n            analysis_result = analysis_chain.invoke({\"document_text\": pdf_text})\n            return analysis_result\n        except Exception as e:\n            logger.error(f\"Analysis Generation Error: {e}\")\n            return {\"error\": str(e)}\n\n    def store_pdf(self, pdf_file, user_id):\n        \"\"\"\n        Store PDF and generate embeddings\n        \"\"\"\n        # Generate unique ID for the PDF\n        pdf_id = str(uuid.uuid4())\n\n        # Save PDF to storage\n  "}, {"index": 32, "path": "ML/chat_pdf/views.py", "chunk": " Generate unique ID for the PDF\n        pdf_id = str(uuid.uuid4())\n\n        # Save PDF to storage\n        file_path = default_storage.save(\n            os.path.join(settings.MEDIA_ROOT, 'pdfs', f\"{pdf_id}_{pdf_file.name}\"),\n            pdf_file\n        )\n        full_path = os.path.join(settings.MEDIA_ROOT, file_path)\n\n        try:\n            # Extract text\n            pdf_text = self.extract_pdf_text(full_path)\n\n            # Generate embeddings (HuggingFace converts to numpy array automatical"}, {"index": 33, "path": "ML/chat_pdf/views.py", "chunk": "_text(full_path)\n\n            # Generate embeddings (HuggingFace converts to numpy array automatically)\n            text_embeddings = self.embeddings.encode(pdf_text).tolist()\n\n            # Store in MongoDB\n            pdf_doc = {\n                \"_id\": pdf_id,\n                \"user_id\": user_id,\n                \"filename\": pdf_file.name,\n                \"file_path\": full_path,\n                \"text_content\": pdf_text,\n                \"embeddings\": text_embeddings,  # Store full embedding list\n"}, {"index": 34, "path": "ML/chat_pdf/views.py", "chunk": "ext_content\": pdf_text,\n                \"embeddings\": text_embeddings,  # Store full embedding list\n                \"uploaded_at\": datetime.now()\n            }\n\n            # Insert document\n            self.pdf_collection.insert_one(pdf_doc)\n\n            return pdf_id\n\n        except Exception as e:\n            logger.error(f\"PDF Storage Error: {e}\")\n            return None\n        \n    def query_pdf(self, pdf_id, query):\n        \"\"\"\n        Query a stored PDF using semantic search\n        \"\"\"\n"}, {"index": 35, "path": "ML/chat_pdf/views.py", "chunk": "_pdf(self, pdf_id, query):\n        \"\"\"\n        Query a stored PDF using semantic search\n        \"\"\"\n        # Retrieve PDF document\n        pdf_doc = self.pdf_collection.find_one({\"_id\": pdf_id})\n        if not pdf_doc:\n            return {\"error\": \"PDF not found\"}\n\n        # Embed the query\n        query_embedding = self.embeddings.encode(query).tolist()\n\n        # Perform similarity search (simple cosine similarity)\n        similarity_score = self._cosine_similarity(\n            query_embeddin"}, {"index": 36, "path": "ML/chat_pdf/views.py", "chunk": "le cosine similarity)\n        similarity_score = self._cosine_similarity(\n            query_embedding, \n            pdf_doc['embeddings']\n        )\n\n        # Generate response based on query and document\n        query_prompt = PromptTemplate(\n            template=\"\"\"\n            Document Context: {document_text}\n            User Query: {user_query}\n\n            Provide a detailed, context-aware response that:\n            1. Directly answers the query\n            2. References specific parts of "}, {"index": 37, "path": "ML/chat_pdf/views.py", "chunk": "esponse that:\n            1. Directly answers the query\n            2. References specific parts of the document\n            3. Provides additional insights if possible\n\n            Response Format:\n            {{\n                \"answer\": \"Comprehensive answer to the query\",\n                \"relevant_excerpts\": [\"Relevant text snippets from the document\"],\n                \"additional_insights\": [\"Extra context or related information\"]\n            }}\n            \"\"\",\n            input_variables="}, {"index": 38, "path": "ML/chat_pdf/views.py", "chunk": "\"Extra context or related information\"]\n            }}\n            \"\"\",\n            input_variables=[\"document_text\", \"user_query\"]\n        )\n\n        query_chain = query_prompt | self.llm | self.json_parser\n\n        try:\n            query_result = query_chain.invoke({\n                \"document_text\": pdf_doc['text_content'],\n                \"user_query\": query\n            })\n\n            # Add similarity score\n            query_result['similarity_score'] = similarity_score\n\n            return q"}, {"index": 39, "path": "ML/chat_pdf/views.py", "chunk": "milarity score\n            query_result['similarity_score'] = similarity_score\n\n            return query_result\n\n        except Exception as e:\n            logger.error(f\"PDF Query Error: {e}\")\n            return {\"error\": str(e)}\n\n    def _cosine_similarity(self, vec1, vec2):\n        \"\"\"\n        Simple cosine similarity calculation\n        \"\"\"\n        import numpy as np\n        return np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))\n\n# Instantiate PDF Analyzer\npdf_analyzer = P"}, {"index": 40, "path": "ML/chat_pdf/views.py", "chunk": ", vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))\n\n# Instantiate PDF Analyzer\npdf_analyzer = PDFAnalyzer()\n\n@csrf_exempt\ndef upload_pdf(request):\n    \"\"\"\n    Upload PDF and perform initial analysis\n    \"\"\"\n    if request.method == 'POST':\n        # Handle multipart form data\n        try:\n            pdf_file = request.FILES.get('pdf')\n            user_id = request.POST.get('user_id')\n\n            if not pdf_file or not user_id:\n                return JsonResponse({\n                    'err"}, {"index": 41, "path": "ML/chat_pdf/views.py", "chunk": "      if not pdf_file or not user_id:\n                return JsonResponse({\n                    'error': 'Missing PDF file or user ID'\n                }, status=400)\n\n            # Validate file type\n            if not pdf_file.name.lower().endswith('.pdf'):\n                return JsonResponse({\n                    'error': 'Only PDF files are allowed'\n                }, status=400)\n\n            # Store PDF and generate ID\n            pdf_id = pdf_analyzer.store_pdf(pdf_file, user_id)\n          "}, {"index": 42, "path": "ML/chat_pdf/views.py", "chunk": " Store PDF and generate ID\n            pdf_id = pdf_analyzer.store_pdf(pdf_file, user_id)\n            \n            if not pdf_id:\n                return JsonResponse({\n                    'error': 'Failed to store PDF'\n                }, status=500)\n\n            # Perform comprehensive analysis\n            full_path = os.path.join(settings.MEDIA_ROOT, 'pdfs', f\"{pdf_id}_{pdf_file.name}\")\n            pdf_text = pdf_analyzer.extract_pdf_text(full_path)\n            analysis = pdf_analyzer.generate_"}, {"index": 43, "path": "ML/chat_pdf/views.py", "chunk": "   pdf_text = pdf_analyzer.extract_pdf_text(full_path)\n            analysis = pdf_analyzer.generate_comprehensive_analysis(pdf_text)\n\n            # Store analysis in MongoDB\n            analysis_doc = {\n                \"pdf_id\": pdf_id,\n                \"user_id\": user_id,\n                \"analysis\": analysis,\n                \"analyzed_at\": datetime.now()\n            }\n            pdf_analyzer.analysis_collection.insert_one(analysis_doc)\n\n            return JsonResponse({\n                'pdf_id'"}, {"index": 44, "path": "ML/chat_pdf/views.py", "chunk": "ysis_collection.insert_one(analysis_doc)\n\n            return JsonResponse({\n                'pdf_id': pdf_id,\n                'analysis': analysis\n            })\n\n        except Exception as e:\n            logger.error(f\"Upload Error: {traceback.format_exc()}\")\n            return JsonResponse({\n                'error': f'Error processing PDF: {str(e)}'\n            }, status=500)\n\n    return JsonResponse({\n        'error': 'Only POST method is allowed'\n    }, status=405)\n\n@csrf_exempt\ndef query_p"}, {"index": 45, "path": "ML/chat_pdf/views.py", "chunk": "sponse({\n        'error': 'Only POST method is allowed'\n    }, status=405)\n\n@csrf_exempt\ndef query_pdf(request):\n    \"\"\"\n    Query a previously uploaded PDF\n    \"\"\"\n    if request.method == 'POST':\n        # Parse JSON input \n        try:\n            body = json.loads(request.body)\n            pdf_id = body.get('pdf_id')\n            query = body.get('query')\n        except json.JSONDecodeError:\n            return JsonResponse({\n                'error': 'Invalid JSON input'\n            }, status="}, {"index": 46, "path": "ML/chat_pdf/views.py", "chunk": "          return JsonResponse({\n                'error': 'Invalid JSON input'\n            }, status=400)\n\n        if not pdf_id or not query:\n            return JsonResponse({\n                'error': 'Missing PDF ID or query'\n            }, status=400)\n\n        try:\n            # Query the PDF\n            query_result = pdf_analyzer.query_pdf(pdf_id, query)\n            return JsonResponse(query_result)\n\n        except Exception as e:\n            logger.error(f\"Query Error: {traceback.format_exc"}, {"index": 47, "path": "ML/chat_pdf/views.py", "chunk": "esult)\n\n        except Exception as e:\n            logger.error(f\"Query Error: {traceback.format_exc()}\")\n            return JsonResponse({\n                'error': f'Error querying PDF: {str(e)}'\n            }, status=500)\n\n    return JsonResponse({\n        'error': 'Only POST method is allowed'\n    }, status=405)"}, {"index": 48, "path": "ML/data.py", "chunk": "import json\nimport random\nfrom faker import Faker\nimport uuid\nimport bcrypt\nfrom pymongo import MongoClient\n\nclass IndianUserProfileGenerator:\n    def __init__(self, num_users=1000):\n        \"\"\"\n        Initialize the user profile generator\n        \n        Args:\n            num_users (int): Number of user profiles to generate\n        \"\"\"\n        self.fake = Faker('en_IN')  # Indian locale\n        self.num_users = num_users\n        \n        # Comprehensive lists for generating diverse profiles\n "}, {"index": 49, "path": "ML/data.py", "chunk": " self.num_users = num_users\n        \n        # Comprehensive lists for generating diverse profiles\n        self.roles = ['user']  # Changed to only 'user' role\n        \n        self.it_skills = [\n            'Python', 'JavaScript', 'React', 'Node.js', 'Machine Learning', \n            'Data Analysis', 'Cloud Computing', 'Docker', 'Kubernetes', \n            'SQL', 'MongoDB', 'TensorFlow', 'AWS', 'Azure', 'Cybersecurity', \n            'Blockchain', 'Natural Language Processing', 'Deep Learning', \n "}, {"index": 50, "path": "ML/data.py", "chunk": "ure', 'Cybersecurity', \n            'Blockchain', 'Natural Language Processing', 'Deep Learning', \n            'Big Data', 'CI/CD', 'Agile Methodologies'\n        ]\n        \n        self.non_it_skills = [\n            'Project Management', 'Business Strategy', 'Sales', 'Marketing', \n            'Content Creation', 'Public Speaking', 'Financial Analysis', \n            'Customer Relations', 'Design Thinking', 'Strategic Planning', \n            'Negotiation', 'Leadership', 'Communication', 'Research'"}, {"index": 51, "path": "ML/data.py", "chunk": "inking', 'Strategic Planning', \n            'Negotiation', 'Leadership', 'Communication', 'Research', \n            'Problem Solving'\n        ]\n        \n        self.interests = [\n            'Technology', 'Artificial Intelligence', 'Startups', 'Innovation', \n            'Machine Learning', 'Entrepreneurship', 'Data Science', 'Coding', \n            'Open Source', 'Cloud Technology', 'Cybersecurity', 'Blockchain', \n            'Digital Marketing', 'Product Design', 'User Experience', \n            "}, {"index": 52, "path": "ML/data.py", "chunk": ", 'Blockchain', \n            'Digital Marketing', 'Product Design', 'User Experience', \n            'Sustainable Technology', 'Robotics', 'Quantum Computing', \n            'Internet of Things', 'Mobile App Development'\n        ]\n        \n        self.indian_cities = [\n            'Mumbai', 'Delhi', 'Bangalore', 'Hyderabad', 'Chennai', \n            'Pune', 'Ahmedabad', 'Kolkata', 'Surat', 'Jaipur', \n            'Lucknow', 'Patna', 'Bhopal', 'Chandigarh', 'Trivandrum'\n        ]\n        \n        se"}, {"index": 53, "path": "ML/data.py", "chunk": " \n            'Lucknow', 'Patna', 'Bhopal', 'Chandigarh', 'Trivandrum'\n        ]\n        \n        self.institutions = [\n            'IIT Bombay', 'IIT Delhi', 'IIT Madras', 'IIT Kanpur', \n            'IIT Kharagpur', 'IIT Roorkee', 'IIT Guwahati', 'BITS Pilani', \n            'NIT Surathkal', 'Delhi University', 'BHU', 'IIM Ahmedabad', \n            'IIM Bangalore', 'IIM Calcutta', 'IIIT Hyderabad'\n        ]\n    \n    def generate_location(self, city):\n        \"\"\"\n        Generate realistic locatio"}, {"index": 54, "path": "ML/data.py", "chunk": "        ]\n    \n    def generate_location(self, city):\n        \"\"\"\n        Generate realistic location coordinates for Indian cities\n        \n        Args:\n            city (str): Name of the city\n        \n        Returns:\n            dict: Location coordinates\n        \"\"\"\n        # Rough coordinates for major Indian cities\n        city_coordinates = {\n            'Mumbai': {'latitude': 19.0760, 'longitude': 72.8777},\n            'Delhi': {'latitude': 28.6139, 'longitude': 77.2090},\n            '"}, {"index": 55, "path": "ML/data.py", "chunk": "ongitude': 72.8777},\n            'Delhi': {'latitude': 28.6139, 'longitude': 77.2090},\n            'Bangalore': {'latitude': 12.9716, 'longitude': 77.5946},\n            'Hyderabad': {'latitude': 17.3850, 'longitude': 78.4867},\n            'Chennai': {'latitude': 13.0827, 'longitude': 80.2707},\n            'Pune': {'latitude': 18.5204, 'longitude': 73.8567},\n            'Ahmedabad': {'latitude': 23.0225, 'longitude': 72.5714},\n            'Kolkata': {'latitude': 22.5726, 'longitude': 88.3639},\n  "}, {"index": 56, "path": "ML/data.py", "chunk": ".0225, 'longitude': 72.5714},\n            'Kolkata': {'latitude': 22.5726, 'longitude': 88.3639},\n            'Surat': {'latitude': 21.1702, 'longitude': 72.8311},\n            'Jaipur': {'latitude': 26.9124, 'longitude': 75.7873},\n            'Lucknow': {'latitude': 26.8467, 'longitude': 80.9462},\n            'Patna': {'latitude': 25.5941, 'longitude': 85.1376},\n            'Bhopal': {'latitude': 23.2599, 'longitude': 77.4126},\n            'Chandigarh': {'latitude': 30.7333, 'longitude': 76.7794"}, {"index": 57, "path": "ML/data.py", "chunk": "23.2599, 'longitude': 77.4126},\n            'Chandigarh': {'latitude': 30.7333, 'longitude': 76.7794},\n            'Trivandrum': {'latitude': 8.5241, 'longitude': 76.9366}\n        }\n        \n        # Add slight random variation\n        city_coord = city_coordinates.get(city, {'latitude': 20.5937, 'longitude': 78.9629})\n        city_coord['latitude'] += random.uniform(-0.1, 0.1)\n        city_coord['longitude'] += random.uniform(-0.1, 0.1)\n        \n        return city_coord\n    \n    def generate_"}, {"index": 58, "path": "ML/data.py", "chunk": "['longitude'] += random.uniform(-0.1, 0.1)\n        \n        return city_coord\n    \n    def generate_hashed_password(self, password=None):\n        \"\"\"\n        Generate a hashed password\n        \n        Args:\n            password (str, optional): Password to hash. If None, generate a random password.\n        \n        Returns:\n            str: Hashed password\n        \"\"\"\n        if not password:\n            password = self.fake.password(length=12, special_chars=True, digits=True, upper_case=True, "}, {"index": 59, "path": "ML/data.py", "chunk": "         password = self.fake.password(length=12, special_chars=True, digits=True, upper_case=True, lower_case=True)\n        \n        # Hash the password\n        salt = bcrypt.gensalt()\n        hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)\n        return hashed_password.decode('utf-8')\n    \n    def generate_user_profile(self):\n        \"\"\"\n        Generate a comprehensive user profile\n        \n        Returns:\n            dict: User profile with multiple attributes\n        \"\"\"\n "}, {"index": 60, "path": "ML/data.py", "chunk": "file\n        \n        Returns:\n            dict: User profile with multiple attributes\n        \"\"\"\n        # Basic profile details\n        email = self.fake.email()\n        full_name = f\"{self.fake.first_name()} {self.fake.last_name()}\"\n        phone = self.fake.phone_number()\n        \n        # Generate password\n        password = self.generate_hashed_password()\n        \n        # Skills generation\n        num_it_skills = random.randint(2, 5)\n        num_non_it_skills = random.randint(1, 3)\n   "}, {"index": 61, "path": "ML/data.py", "chunk": "on\n        num_it_skills = random.randint(2, 5)\n        num_non_it_skills = random.randint(1, 3)\n        skills = (\n            random.sample(self.it_skills, num_it_skills) + \n            random.sample(self.non_it_skills, num_non_it_skills)\n        )\n        \n        # Interests generation\n        num_interests = random.randint(3, 6)\n        interests = random.sample(self.interests, num_interests)\n        \n        # Education generation\n        institution = random.choice(self.institutions)\n    "}, {"index": 62, "path": "ML/data.py", "chunk": "\n        \n        # Education generation\n        institution = random.choice(self.institutions)\n        graduation_year = random.randint(2010, 2023)\n        degree = random.choice([\n            'B.Tech', 'M.Tech', 'MBA', 'MCA', 'MS', 'B.Sc', 'M.Sc'\n        ])\n        \n        # City selection\n        city = random.choice(self.indian_cities)\n        \n        # Location details\n        location = self.generate_location(city)\n        \n        # Projects and Certifications\n        num_projects = ran"}, {"index": 63, "path": "ML/data.py", "chunk": "lf.generate_location(city)\n        \n        # Projects and Certifications\n        num_projects = random.randint(0, 3)\n        projects = [\n            {\n                'title': f\"Project {i+1}\",\n                'description': self.fake.sentence()\n            } for i in range(num_projects)\n        ]\n        \n        num_certifications = random.randint(0, 2)\n        certifications = [\n            {\n                'name': f\"Certification {i+1}\",\n                'issuer': self.fake.company()\n     "}, {"index": 64, "path": "ML/data.py", "chunk": "\n                'name': f\"Certification {i+1}\",\n                'issuer': self.fake.company()\n            } for i in range(num_certifications)\n        ]\n        \n        # Languages\n        languages = random.sample(['English', 'Hindi', 'Tamil', 'Telugu', 'Marathi', 'Bengali', 'Gujarati'], \n                                   random.randint(1, 3))\n        \n        # Bio\n        bio = self.fake.text(max_nb_chars=200)\n        \n        # Construct complete user profile\n        user_profile = {\n    "}, {"index": 65, "path": "ML/data.py", "chunk": "t(max_nb_chars=200)\n        \n        # Construct complete user profile\n        user_profile = {\n            'email': email,\n            'fullName': full_name,\n            'phone': phone,\n            'password': password,\n            'role': 'user',\n            'skills': skills,\n            'interests': interests,\n            'education': [{\n                'institution': institution,\n                'degree': degree,\n                'yearOfGraduation': graduation_year\n            }],\n           "}, {"index": 66, "path": "ML/data.py", "chunk": "   'degree': degree,\n                'yearOfGraduation': graduation_year\n            }],\n            'address': city,\n            'location': location,\n            'projects': projects,\n            'certifications': certifications,\n            'languages': languages,\n            'bio': bio,\n            'connections': [],\n            'receivedRequests': [],\n            'sentRequests': [],\n            'isUniversityGeneratedPassword': random.choice([True, False]),\n            'notifications': [],\n "}, {"index": 67, "path": "ML/data.py", "chunk": "   'isUniversityGeneratedPassword': random.choice([True, False]),\n            'notifications': [],\n            'createdAt': self.fake.date_time_this_decade(),\n            '__v': 0\n        }\n        \n        return user_profile\n    \n    def generate_users(self):\n        \"\"\"\n        Generate multiple user profiles\n        \n        Returns:\n            list: List of user profiles\n        \"\"\"\n        return [self.generate_user_profile() for _ in range(self.num_users)]\n    \n    def save_to_mongodb(se"}, {"index": 68, "path": "ML/data.py", "chunk": "return [self.generate_user_profile() for _ in range(self.num_users)]\n    \n    def save_to_mongodb(self, connection_string='mongodb+srv://IPL_AUCTION_24:IPLAuction2024DontGuessAlsoUseVim@cluster0.ilknu4v.mongodb.net/SIH'):\n        \"\"\"\n        Save generated users to MongoDB\n        \n        Args:\n            connection_string (str): MongoDB connection string\n        \"\"\"\n        client = MongoClient(connection_string)\n        db = client['SIH']\n        users_collection = db['users2']\n        \n    "}, {"index": 69, "path": "ML/data.py", "chunk": "(connection_string)\n        db = client['SIH']\n        users_collection = db['users2']\n        \n        # Generate users\n        users = self.generate_users()\n        \n        # Insert users\n        result = users_collection.insert_many(users)\n        print(f\"Inserted {len(result.inserted_ids)} users\")\n    \n    def export_to_json(self, filename='indian_user_profiles.json'):\n        \"\"\"\n        Export generated users to a JSON file\n        \n        Args:\n            filename (str): Output JSON fi"}, {"index": 70, "path": "ML/data.py", "chunk": "ort generated users to a JSON file\n        \n        Args:\n            filename (str): Output JSON filename\n        \"\"\"\n        users = self.generate_users()\n        with open(filename, 'w', encoding='utf-8') as f:\n            json.dump(users, f, indent=2, ensure_ascii=False)\n        print(f\"Exported {len(users)} user profiles to {filename}\")\n\n# Usage example\nif __name__ == \"__main__\":\n    generator = IndianUserProfileGenerator(num_users=1000)\n    generator.save_to_mongodb()  # Save directly to M"}, {"index": 71, "path": "ML/data.py", "chunk": "r = IndianUserProfileGenerator(num_users=1000)\n    generator.save_to_mongodb()  # Save directly to MongoDB\n    # Or export to JSON\n    # generator.export_to_json()"}, {"index": 72, "path": "ML/data2.py", "chunk": "import os\nimport random\nimport names\nimport pymongo\nfrom faker import Faker\nfrom bson import ObjectId\nfrom datetime import datetime, timedelta\nimport numpy as np\n\n# MongoDB Connection\nMONGO_URL = \"mongodb+srv://IPL_AUCTION_24:IPLAuction2024DontGuessAlsoUseVim@cluster0.ilknu4v.mongodb.net/SIH\"\nclient = pymongo.MongoClient(MONGO_URL)\ndb = client['SIH']\nusers_collection = db['users4']\nposts_collection = db['post4']\n\n# Faker for Indian-specific data generation\nfake = Faker('en_IN')\n\n# Predefined Lis"}, {"index": 73, "path": "ML/data2.py", "chunk": "n = db['post4']\n\n# Faker for Indian-specific data generation\nfake = Faker('en_IN')\n\n# Predefined Lists for Indian Context\nINDIAN_CITIES = [\n    'Mumbai', 'Delhi', 'Bangalore', 'Hyderabad', 'Chennai', \n    'Kolkata', 'Pune', 'Ahmedabad', 'Jaipur', 'Lucknow'\n]\n\nINDIAN_STATES = [\n    'Maharashtra', 'Delhi', 'Karnataka', 'Telangana', 'Tamil Nadu', \n    'West Bengal', 'Gujarat', 'Rajasthan', 'Uttar Pradesh'\n]\n\nPROFESSIONAL_ROLES = [\n    'Software Engineer', 'Data Scientist', 'Product Manager', \n    '"}, {"index": 74, "path": "ML/data2.py", "chunk": "desh'\n]\n\nPROFESSIONAL_ROLES = [\n    'Software Engineer', 'Data Scientist', 'Product Manager', \n    'UX Designer', 'Machine Learning Engineer', 'Backend Developer', \n    'Frontend Developer', 'DevOps Engineer', 'Cloud Architect', \n    'Blockchain Developer', 'AI Researcher'\n]\n\nTECH_SKILLS = [\n    'Python', 'JavaScript', 'React', 'Django', 'Machine Learning', \n    'AI', 'Cloud Computing', 'Docker', 'Kubernetes', 'TensorFlow', \n    'AWS', 'Node.js', 'SQL', 'MongoDB', 'GraphQL'\n]\n\nINDUSTRIES = [\n   "}, {"index": 75, "path": "ML/data2.py", "chunk": "'Kubernetes', 'TensorFlow', \n    'AWS', 'Node.js', 'SQL', 'MongoDB', 'GraphQL'\n]\n\nINDUSTRIES = [\n    'Technology', 'Finance', 'Healthcare', 'E-commerce', \n    'Education', 'Fintech', 'Blockchain', 'AI/ML', 'StartUp'\n]\n\nINDIAN_UNIVERSITIES = [\n    'IIT Delhi', 'IIT Bombay', 'IIT Madras', 'IIT Kanpur', \n    'IIT Kharagpur', 'IIT Roorkee', 'IIT Guwahati', \n    'BITS Pilani', 'Delhi University', 'Pune University', \n    'Anna University', 'Indian Institute of Science',\n    'Jadavpur University', 'IIM"}, {"index": 76, "path": "ML/data2.py", "chunk": " University', \n    'Anna University', 'Indian Institute of Science',\n    'Jadavpur University', 'IIM Ahmedabad', 'IIM Bangalore'\n]\n\ndef generate_simple_password(first_name):\n    \"\"\"Generate a simple, predictable password\"\"\"\n    return f\"{first_name.lower()}2024!\"\n\ndef generate_indian_user():\n    \"\"\"Generate a comprehensive Indian professional user profile\"\"\"\n    gender = random.choice(['male', 'female'])\n    first_name = names.get_first_name(gender=gender)\n    last_name = names.get_last_name()\n "}, {"index": 77, "path": "ML/data2.py", "chunk": "male'])\n    first_name = names.get_first_name(gender=gender)\n    last_name = names.get_last_name()\n    full_name = f\"{first_name} {last_name}\"\n    \n    city = random.choice(INDIAN_CITIES)\n    state = random.choice(INDIAN_STATES)\n    \n    # Generate complex professional profile\n    role = random.choice(PROFESSIONAL_ROLES)\n    skills = random.sample(TECH_SKILLS, k=random.randint(3, 7))\n    \n    # Convert date to datetime for MongoDB compatibility\n    def to_datetime(d):\n        return datetime.com"}, {"index": 78, "path": "ML/data2.py", "chunk": "nvert date to datetime for MongoDB compatibility\n    def to_datetime(d):\n        return datetime.combine(d, datetime.min.time())\n    \n    # Convert latitude and longitude to float to avoid Decimal encoding issue\n    latitude = float(fake.latitude())\n    longitude = float(fake.longitude())\n    \n    return {\n        '_id': ObjectId(),\n        'fullName': full_name,\n        'email': f\"{first_name.lower()}.{last_name.lower()}@{random.choice(['gmail.com', 'outlook.com', 'yahoo.com', 'company.com'])}\""}, {"index": 79, "path": "ML/data2.py", "chunk": "er()}.{last_name.lower()}@{random.choice(['gmail.com', 'outlook.com', 'yahoo.com', 'company.com'])}\",\n        'password': generate_simple_password(first_name),\n        'profilePhoto': f\"https://randomuser.me/api/portraits/{gender}/{random.randint(1, 99)}.jpg\",\n        'phone': f\"+91{random.randint(6000000000, 9999999999)}\",\n        'city': city,\n        'state': state,\n        'country': 'India',\n        'education': [\n            {\n                'degree': random.choice(['B.Tech', 'M.Tech', 'M"}, {"index": 80, "path": "ML/data2.py", "chunk": "        'education': [\n            {\n                'degree': random.choice(['B.Tech', 'M.Tech', 'MCA', 'MBA', 'MS']),\n                'institution': random.choice(INDIAN_UNIVERSITIES),\n                'yearOfGraduation': random.randint(2010, 2024)\n            }\n        ],\n        'workExperience': [\n            {\n                'companyName': fake.company(),\n                'role': role,\n                'startDate': to_datetime(fake.date_between(start_date='-10y', end_date='now')),\n          "}, {"index": 81, "path": "ML/data2.py", "chunk": "          'startDate': to_datetime(fake.date_between(start_date='-10y', end_date='now')),\n                'endDate': to_datetime(fake.date_between(start_date='-2y', end_date='now')) if random.random() < 0.3 else None,\n                'description': fake.catch_phrase()\n            }\n        ],\n        'skills': skills,\n        'interests': random.sample(INDUSTRIES, k=3),\n        'bio': fake.text(max_nb_chars=200),\n        'languages': random.sample(['English', 'Hindi', 'Tamil', 'Telugu', 'Marathi"}, {"index": 82, "path": "ML/data2.py", "chunk": "x_nb_chars=200),\n        'languages': random.sample(['English', 'Hindi', 'Tamil', 'Telugu', 'Marathi'], k=2),\n        'location': {\n            'latitude': latitude,\n            'longitude': longitude\n        },\n        'connections': [],\n        'receivedRequests': [],\n        'sentRequests': [],\n        'notifications': [],\n        'certifications': [],\n        'projects': []\n    }\n\ndef generate_indian_post(users):\n    \"\"\"Generate a contextually rich social media post with direct interaction f"}, {"index": 83, "path": "ML/data2.py", "chunk": "_indian_post(users):\n    \"\"\"Generate a contextually rich social media post with direct interaction fields\"\"\"\n    author = random.choice(users)\n    \n    # Post content generation with professional context\n    post_types = [\n        f\"Excited to share my latest project in {random.choice(INDUSTRIES)}!\",\n        f\"Thoughts on the future of {random.choice(TECH_SKILLS)} in our industry.\",\n        f\"Just completed an amazing course on {random.choice(TECH_SKILLS)}.\",\n        \"Reflecting on my profession"}, {"index": 84, "path": "ML/data2.py", "chunk": " completed an amazing course on {random.choice(TECH_SKILLS)}.\",\n        \"Reflecting on my professional journey...\",\n        f\"Networking opportunities in {random.choice(INDIAN_CITIES)}\"\n    ]\n    \n    media_type = ['image', 'video'] if random.random() > 0.3 else [None]\n    \n    # Prepare users for interactions\n    available_users = [u for u in users if u['_id'] != author['_id']]\n    \n    # Generate Likes\n    num_likes = random.randint(5, 50)\n    likes = random.sample(available_users, k=min(num_l"}, {"index": 85, "path": "ML/data2.py", "chunk": "e Likes\n    num_likes = random.randint(5, 50)\n    likes = random.sample(available_users, k=min(num_likes, len(available_users)))\n    likes_data = [\n        {\n            'userId': user['_id'],\n            'userName': user['fullName'],\n            'userProfilePic': user.get('profilePhoto'),\n            'timestamp': fake.date_time_between(start_date='-1y', end_date='now')\n        } for user in likes\n    ]\n    \n    # Generate Comments\n    num_comments = random.randint(3, 20)\n    comment_users = ran"}, {"index": 86, "path": "ML/data2.py", "chunk": "\n    ]\n    \n    # Generate Comments\n    num_comments = random.randint(3, 20)\n    comment_users = random.sample(available_users, k=min(num_comments, len(available_users)))\n    comments_data = [\n        {\n            'userId': user['_id'],\n            'userName': user['fullName'],\n            'userProfilePic': user.get('profilePhoto'),\n            'text': fake.sentence(),\n            'timestamp': fake.date_time_between(start_date='-1y', end_date='now')\n        } for user in comment_users\n    ]\n   "}, {"index": 87, "path": "ML/data2.py", "chunk": "ke.date_time_between(start_date='-1y', end_date='now')\n        } for user in comment_users\n    ]\n    \n    # Generate Shares\n    num_shares = random.randint(1, 10)\n    share_users = random.sample(available_users, k=min(num_shares, len(available_users)))\n    shares_data = [\n        {\n            'userId': user['_id'],\n            'userName': user['fullName'],\n            'userProfilePic': user.get('profilePhoto'),\n            'timestamp': fake.date_time_between(start_date='-1y', end_date='now')\n  "}, {"index": 88, "path": "ML/data2.py", "chunk": "profilePhoto'),\n            'timestamp': fake.date_time_between(start_date='-1y', end_date='now')\n        } for user in share_users\n    ]\n    \n    return {\n        '_id': ObjectId(),\n        'userId': author['_id'],\n        'text': random.choice(post_types) + \" \" + fake.text(max_nb_chars=200),\n        'media': [\n            {\n                'type': media_type,\n                'url': f\"https://example.com/{media_type}/{random.randint(1, 1000)}\",\n                'description': fake.sentence() if "}, {"index": 89, "path": "ML/data2.py", "chunk": "mple.com/{media_type}/{random.randint(1, 1000)}\",\n                'description': fake.sentence() if media_type else None\n            }\n        ] if media_type else [],\n        'interaction_signals': {\n            'likes': likes_data,\n            'comments': comments_data,\n            'shares': shares_data\n        },\n        'createdAt': datetime.combine(fake.date_between(start_date='-1y', end_date='now'), datetime.min.time())\n    }\n\ndef generate_relationships(users):\n    \"\"\"Create connections an"}, {"index": 90, "path": "ML/data2.py", "chunk": "='now'), datetime.min.time())\n    }\n\ndef generate_relationships(users):\n    \"\"\"Create connections and interactions between users\"\"\"\n    for i, user in enumerate(users):\n        # Create connections\n        potential_connections = users[max(0, i-10):i] + users[i+1:min(len(users), i+11)]\n        \n        # Ensure we don't try to sample more connections than available\n        max_connections = min(len(potential_connections), 15)\n        min_connections = min(5, max_connections)\n        \n        # R"}, {"index": 91, "path": "ML/data2.py", "chunk": "n(potential_connections), 15)\n        min_connections = min(5, max_connections)\n        \n        # Randomize number of connections within available range\n        num_connections = random.randint(min_connections, max_connections)\n        \n        # Avoid duplicate connections\n        existing_connection_ids = {conn['_id'] for conn in user.get('connections', [])}\n        potential_connections_filtered = [\n            conn for conn in potential_connections if conn['_id'] not in existing_connection_"}, {"index": 92, "path": "ML/data2.py", "chunk": "ed = [\n            conn for conn in potential_connections if conn['_id'] not in existing_connection_ids\n        ]\n        \n        # Create connections based on filtered potential connections\n        connections = random.sample(potential_connections_filtered, k=num_connections)\n        \n        user['connections'] = [\n            {\n                '_id': conn['_id'],\n                'fullName': conn['fullName'],\n                'profilePhoto': conn.get('profilePhoto'),\n                'bio': con"}, {"index": 93, "path": "ML/data2.py", "chunk": "nn['fullName'],\n                'profilePhoto': conn.get('profilePhoto'),\n                'bio': conn.get('bio'),\n                'interaction_strength': random.uniform(0.1, 1.0)\n            } for conn in connections\n        ]\n        \n        # Simulate friend requests\n        # Extract IDs of current connections\n        connection_ids = {conn['_id'] for conn in connections}\n\n        # Filter potential requests to exclude existing connections\n        potential_requests = [\n            u for u i"}, {"index": 94, "path": "ML/data2.py", "chunk": "ential requests to exclude existing connections\n        potential_requests = [\n            u for u in potential_connections if u['_id'] not in connection_ids\n        ]\n\n        # Randomly select received and sent requests\n        user['receivedRequests'] = random.sample(\n            [{'userId': u['_id'], 'fullName': u['fullName']} for u in potential_requests],\n            k=min(len(potential_requests), random.randint(0, 5))\n        )\n        user['sentRequests'] = random.sample(\n            [{'u"}, {"index": 95, "path": "ML/data2.py", "chunk": "sts), random.randint(0, 5))\n        )\n        user['sentRequests'] = random.sample(\n            [{'userId': u['_id'], 'fullName': u['fullName']} for u in potential_requests],\n            k=min(len(potential_requests), random.randint(0, 5))\n        )\n\n        # Notifications\n        user['notifications'] = [\n            {\n                'type': random.choice(['like', 'comment', 'connection_request']),\n                'message': fake.sentence(),\n                'createdAt': datetime.now().isoform"}, {"index": 96, "path": "ML/data2.py", "chunk": "']),\n                'message': fake.sentence(),\n                'createdAt': datetime.now().isoformat()  # ISO format for datetime\n            } for _ in range(random.randint(1, 5))\n        ]\n\ndef seed_database(num_users=500, num_posts=1000):\n    \"\"\"Seed the database with generated data\"\"\"\n    users_collection.delete_many({})\n    posts_collection.delete_many({})\n    \n    # Generate Users\n    users = [generate_indian_user() for _ in range(num_users)]\n    users_collection.insert_many(users)\n    \n"}, {"index": 97, "path": "ML/data2.py", "chunk": "s = [generate_indian_user() for _ in range(num_users)]\n    users_collection.insert_many(users)\n    \n    generate_relationships(users)\n    users_collection.bulk_write([\n        pymongo.UpdateOne({'_id': user['_id']}, {'$set': user}) \n        for user in users\n    ])\n    \n    # Generate Posts\n    posts = [generate_indian_post(users) for _ in range(num_posts)]\n    posts_collection.insert_many(posts)\n\n    print(f\"Generated {num_users} users and {num_posts} posts!\")\n\nif __name__ == \"__main__\":\n    se"}, {"index": 98, "path": "ML/data2.py", "chunk": "\n    print(f\"Generated {num_users} users and {num_posts} posts!\")\n\nif __name__ == \"__main__\":\n    seed_database()"}, {"index": 99, "path": "ML/halloffame/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 100, "path": "ML/halloffame/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass HalloffameConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'halloffame'\n"}, {"index": 101, "path": "ML/halloffame/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 102, "path": "ML/halloffame/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 103, "path": "ML/halloffame/urls.py", "chunk": "\n# Create your views here.\n# urls.py\nfrom django.urls import path\nfrom  .views import get_user_hall_of_fame\n\nurlpatterns = [\n   path('hall-of-fame/', get_user_hall_of_fame, name='get_user_hall_of_fame'),\n]\n"}, {"index": 104, "path": "ML/halloffame/views.py", "chunk": "from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom pymongo import MongoClient\nfrom bson.objectid import ObjectId\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nimport os\nimport logging\nimport json\nfrom datetime import datetime\n\nlogger = logging.getLogger(__name__)\n\ndef convert_to_json_serializable(obj):\n    \"\"\"\n    Recursively convert MongoDB and Python objects to JSON-serializable format\n    \"\"\"\n    if is"}, {"index": 105, "path": "ML/halloffame/views.py", "chunk": "\"\"\"\n    Recursively convert MongoDB and Python objects to JSON-serializable format\n    \"\"\"\n    if isinstance(obj, ObjectId):\n        return str(obj)\n    elif isinstance(obj, datetime):\n        return obj.isoformat()\n    elif isinstance(obj, dict):\n        return {key: convert_to_json_serializable(value) for key, value in obj.items()}\n    elif isinstance(obj, list):\n        return [convert_to_json_serializable(item) for item in obj]\n    return obj\n\nclass HallOfFameGenerator:\n    def __init__(self"}, {"index": 106, "path": "ML/halloffame/views.py", "chunk": "serializable(item) for item in obj]\n    return obj\n\nclass HallOfFameGenerator:\n    def __init__(self, api_key):\n        # Initialize MongoDB connection\n        mongo_url = \"mongodb+srv://IPL_AUCTION_24:IPLAuction2024DontGuessAlsoUseVim@cluster0.ilknu4v.mongodb.net/SIH111\"\n        self.client = MongoClient(mongo_url)\n        self.db = self.client.get_database('SIH111')\n        \n        # Initialize Gemini LLM\n        self.llm = ChatGoogleGenerativeAI(\n            model=\"gemini-pro\", \n            "}, {"index": 107, "path": "ML/halloffame/views.py", "chunk": " Gemini LLM\n        self.llm = ChatGoogleGenerativeAI(\n            model=\"gemini-pro\", \n            temperature=0.3, \n            max_tokens=2048,  \n            api_key=api_key\n        )\n\n    def _generate_hall_of_fame_content(self, prompt):\n        \"\"\"\n        Generate Hall of Fame content using Gemini with robust error handling\n        \"\"\"\n        try:\n            response = self.llm.invoke(prompt)\n            content = response.content.strip() if response and response.content else \"No content"}, {"index": 108, "path": "ML/halloffame/views.py", "chunk": "pt)\n            content = response.content.strip() if response and response.content else \"No content generated.\"\n            # Ensure content is a simple string without complex formatting\n            return ' '.join(content.split())\n        except Exception as e:\n            logger.error(f\"Error generating content: {str(e)}\")\n            return f\"Unable to generate content. Error: {str(e)}\"\n\n    def get_user_hall_of_fame_details(self, user):\n        \"\"\"\n        Generate Hall of Fame content for "}, {"index": 109, "path": "ML/halloffame/views.py", "chunk": "ef get_user_hall_of_fame_details(self, user):\n        \"\"\"\n        Generate Hall of Fame content for a user with comprehensive error handling\n        \"\"\"\n        try:\n            # Extract relevant user details with fallback\n            full_name = user.get('fullName', 'Unknown User')\n            skills = ', '.join(user.get('skills', ['No skills listed']))\n            work_experiences = user.get('workExperience', [])\n            education = user.get('education', [])\n\n            # Prepare Hall of"}, {"index": 110, "path": "ML/halloffame/views.py", "chunk": "orkExperience', [])\n            education = user.get('education', [])\n\n            # Prepare Hall of Fame content with robust prompts\n            hall_of_fame_details = {\n                'achievements': self._generate_hall_of_fame_content(\n                    f\"Generate a professional summary of notable achievements in brief for {full_name}, \"\n                    f\"highlighting skills in {skills} in 3-4 words. Focus on unique professional accomplishments. \"\n                    f\"Keep the respons"}, {"index": 111, "path": "ML/halloffame/views.py", "chunk": "in 3-4 words. Focus on unique professional accomplishments. \"\n                    f\"Keep the response concise and factual.in 1 line\"\n                ),\n                'first_job': self._generate_hall_of_fame_content(\n                    f\"Write a brief narrative about {full_name}'s first job experience. in brief\"\n                    f\"If no first job details are available, create a plausible professional origin story  in brief\"\n                    f\"based on their skills in {skills}. Keep it sh"}, {"index": 112, "path": "ML/halloffame/views.py", "chunk": "essional origin story  in brief\"\n                    f\"based on their skills in {skills}. Keep it short and direct. in brief\"\n                ),\n                'current_work': self._generate_hall_of_fame_content(\n                    f\"Describe {full_name}'s current professional context in a few sentences.  in brief \"\n                    f\"If no current work is specified, generate a forward-looking description  in brief\"\n                    f\"that aligns with their skills in {skills}. Be concise"}, {"index": 113, "path": "ML/halloffame/views.py", "chunk": "g description  in brief\"\n                    f\"that aligns with their skills in {skills}. Be concise and clear  in brief  strictly.\"\n                )\n            }\n\n            return hall_of_fame_details\n\n        except Exception as e:\n            logger.error(f\"Comprehensive error in hall of fame generation: {str(e)}\")\n            return {\n                'achievements': \"Unable to generate achievements.\",\n                'first_job': \"Unable to generate first job narrative.\",\n               "}, {"index": 114, "path": "ML/halloffame/views.py", "chunk": "ievements.\",\n                'first_job': \"Unable to generate first job narrative.\",\n                'current_work': \"Unable to generate current work description.\"\n            }\n\n@csrf_exempt\ndef get_user_hall_of_fame(request):\n    \"\"\"\n    Retrieve user's Hall of Fame details by email with robust error handling\n    \"\"\"\n    try:\n        # Get email from query parameters\n        email = request.GET.get('email', '').strip()\n        if not email:\n            return JsonResponse({\n                'su"}, {"index": 115, "path": "ML/halloffame/views.py", "chunk": "get('email', '').strip()\n        if not email:\n            return JsonResponse({\n                'success': False, \n                'message': 'Email is required'\n            }, status=400)\n        \n        # Load API key securely\n        GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')\n        if not GOOGLE_API_KEY:\n            logger.error(\"Google API Key is not set in environment variables\")\n            return JsonResponse({\n                'success': False, \n                'message': 'API "}, {"index": 116, "path": "ML/halloffame/views.py", "chunk": "           return JsonResponse({\n                'success': False, \n                'message': 'API configuration error'\n            }, status=500)\n        \n        # Initialize Hall of Fame generator\n        hof_generator = HallOfFameGenerator(GOOGLE_API_KEY)\n\n        # Find user by email in MongoDB\n        user = hof_generator.db.users.find_one({'email': email})\n        if not user:\n            return JsonResponse({\n                'success': False, \n                'message': 'User not found'"}, {"index": 117, "path": "ML/halloffame/views.py", "chunk": "return JsonResponse({\n                'success': False, \n                'message': 'User not found'\n            }, status=404)\n        \n        # Convert entire user document to JSON-serializable format\n        serializable_user = convert_to_json_serializable(user)\n        \n        # Generate Hall of Fame details with comprehensive error handling\n        hall_of_fame_details = hof_generator.get_user_hall_of_fame_details(user)\n        \n        return JsonResponse({\n            'success': True,\n "}, {"index": 118, "path": "ML/halloffame/views.py", "chunk": "ser_hall_of_fame_details(user)\n        \n        return JsonResponse({\n            'success': True,\n            'hall_of_fame': hall_of_fame_details\n        })\n    \n    except Exception as e:\n        logger.error(f\"Unexpected error in hall of fame view: {str(e)}\")\n        return JsonResponse({\n            'success': False, \n            'message': 'An unexpected error occurred'\n        }, status=500)"}, {"index": 119, "path": "ML/halloffame/views.py", "chunk": ")"}, {"index": 120, "path": "ML/manage.py", "chunk": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ML.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you"}, {"index": 121, "path": "ML/manage.py", "chunk": "ou sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"index": 122, "path": "ML/meme_generator/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 123, "path": "ML/meme_generator/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass MemeGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'meme_generator'\n"}, {"index": 124, "path": "ML/meme_generator/meme_generator.py", "chunk": "from langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.output_parsers import PydanticOutputParser\nfrom pydantic import BaseModel, Field\nfrom typing import List\nimport requests\n\nclass MemeResponse(BaseModel):\n    template_name: str = Field(description=\"Name of the selected meme template\")\n    text_array: List[str] = Field(description=\"Array of text elements for the meme\")\n\nclass MemeTemplate:\n    def __init__(self, name: str, box_"}, {"index": 125, "path": "ML/meme_generator/meme_generator.py", "chunk": "n=\"Array of text elements for the meme\")\n\nclass MemeTemplate:\n    def __init__(self, name: str, box_count: int, template_id: str):\n        self.name = name\n        self.box_count = box_count\n        self.template_id = template_id\n\nclass MemeGenerator:\n    def __init__(self, openai_api_key: str, imgflip_username: str, imgflip_password: str):\n        api_key = os.getenv(\"GOOGLE_API_KEY\")\n        self.llm = ChatGoogleGenerativeAI(model=\"gemini-pro\", temperature=1.0, google_api_key=api_key)\n        "}, {"index": 126, "path": "ML/meme_generator/meme_generator.py", "chunk": "f.llm = ChatGoogleGenerativeAI(model=\"gemini-pro\", temperature=1.0, google_api_key=api_key)\n        self.imgflip_username = imgflip_username\n        self.imgflip_password = imgflip_password\n        \n        # Import templates from meme_templates.py\n        from .meme_templates import templates\n        self.templates = templates\n        \n        self.output_parser = PydanticOutputParser(pydantic_object=MemeResponse)\n        \n        self.prompt = ChatPromptTemplate.from_messages([\n            (\"s"}, {"index": 127, "path": "ML/meme_generator/meme_generator.py", "chunk": "ject=MemeResponse)\n        \n        self.prompt = ChatPromptTemplate.from_messages([\n            (\"system\", \"\"\"You are an elite meme lord with a PhD in Internet Humor and Dank Memes. Your job is to create absolutely hilarious meme captions that will make people laugh out loud. Think Reddit's front page meets Twitter's viral tweets meets TikTok humor.\n\n            Available templates and their text panel counts:\n            {template_info}\n\n            Your mission:\n            1. Choose the PERF"}, {"index": 128, "path": "ML/meme_generator/meme_generator.py", "chunk": " panel counts:\n            {template_info}\n\n            Your mission:\n            1. Choose the PERFECT meme template that will maximize the humor potential of the input text\n            2. Create captions that are:\n               - Extremely witty and clever\n               - Use modern internet slang and meme language when appropriate\n               - Include plot twists, irony, or unexpected humor\n               - Reference popular culture and current trends\n               - Are slightly exagg"}, {"index": 129, "path": "ML/meme_generator/meme_generator.py", "chunk": "or\n               - Reference popular culture and current trends\n               - Are slightly exaggerated for comedic effect\n               - Make use of perfect comedic timing\n            3. Make sure the number of captions matches the template's box count\n            4. Each caption should build on the previous one for maximum humor impact\n            5. Don't just restate the input - transform it into meme gold!\n            6. Only use meme available in template info,dont use anything else s"}, {"index": 130, "path": "ML/meme_generator/meme_generator.py", "chunk": " it into meme gold!\n            6. Only use meme available in template info,dont use anything else strictly\n            Format the output as a JSON with template_name and text_array fields.\n            \"\"\"),\n            (\"human\", \"{input_text}\")\n        ])\n\n    def get_template_info(self):\n        return \"\\n\".join([f\"- {name}: {template.box_count} panels\" \n                         for name, template in self.templates.items()])\n\n    def generate_meme_text(self, input_text: str) -> MemeResponse:\n "}, {"index": 131, "path": "ML/meme_generator/meme_generator.py", "chunk": "te in self.templates.items()])\n\n    def generate_meme_text(self, input_text: str) -> MemeResponse:\n        chain = self.prompt | self.llm | self.output_parser\n        \n        result = chain.invoke({\n            \"template_info\": self.get_template_info(),\n            \"input_text\": input_text\n        })\n        \n        if result.template_name not in self.templates:\n            raise ValueError(f\"Invalid template name: {result.template_name}\")\n            \n        expected_length = self.templates["}, {"index": 132, "path": "ML/meme_generator/meme_generator.py", "chunk": "valid template name: {result.template_name}\")\n            \n        expected_length = self.templates[result.template_name].box_count\n        if len(result.text_array) != expected_length:\n            if len(result.text_array) < expected_length:\n                result.text_array.extend([\"\"] * (expected_length - len(result.text_array)))\n            else:\n                result.text_array = result.text_array[:expected_length]\n                \n        return result\n\n    def create_meme_image(self, tem"}, {"index": 133, "path": "ML/meme_generator/meme_generator.py", "chunk": "_array[:expected_length]\n                \n        return result\n\n    def create_meme_image(self, template_name: str, text_array: List[str]) -> dict:\n        template = self.templates[template_name]\n        url = 'https://api.imgflip.com/caption_image'\n        \n        data = {\n            'template_id': template.template_id,\n            'username': self.imgflip_username,\n            'password': self.imgflip_password,\n        }\n        \n        for i, text in enumerate(text_array):\n            da"}, {"index": 134, "path": "ML/meme_generator/meme_generator.py", "chunk": "lf.imgflip_password,\n        }\n        \n        for i, text in enumerate(text_array):\n            data[f'boxes[{i}][text]'] = text\n            data[f'boxes[{i}][color]'] = \"#ffffff\"\n            data[f'boxes[{i}][outline_color]'] = \"#000000\"\n        \n        try:\n            response = requests.post(url, data=data)\n            response.raise_for_status()\n            result = response.json()\n            \n            if result['success']:\n                return result['data']\n            else:\n    "}, {"index": 135, "path": "ML/meme_generator/meme_generator.py", "chunk": "     \n            if result['success']:\n                return result['data']\n            else:\n                raise Exception(f\"Imgflip API error: {result['error_message']}\")\n                \n        except requests.exceptions.RequestException as e:\n            raise Exception(f\"Failed to create meme: {str(e)}\")\n\n    def generate_complete_meme(self, input_text: str) -> dict:\n        meme_response = self.generate_meme_text(input_text)\n        \n        meme_data = self.create_meme_image(\n       "}, {"index": 136, "path": "ML/meme_generator/meme_generator.py", "chunk": "e = self.generate_meme_text(input_text)\n        \n        meme_data = self.create_meme_image(\n            meme_response.template_name,\n            meme_response.text_array\n        )\n        \n        return {\n            # 'template_name': meme_response.template_name,\n            # 'captions': meme_response.text_array,\n            'url': meme_data['url'],\n          # 'page_url': meme_data['page_url']\n        }\n"}, {"index": 137, "path": "ML/meme_generator/meme_generator.py", "chunk": "]\n        }\n"}, {"index": 138, "path": "ML/meme_generator/meme_templates.py", "chunk": "# memes/meme_templates.py\n\nclass MemeTemplate:\n    def __init__(self, name: str, box_count: int, template_id: str):\n        self.name = name\n        self.box_count = box_count\n        self.template_id = template_id\n\ntemplates = {\n  'Drake Hotline Bling': MemeTemplate('Drake Hotline Bling', 2, '181913649'),\n    'Two Buttons': MemeTemplate('Two Buttons', 3, '87743020'),\n    'Left Exit 12 Off Ramp': MemeTemplate('Left Exit 12 Off Ramp', 3, '124822590'),\n    'Disaster Girl': MemeTemplate('Disaster G"}, {"index": 139, "path": "ML/meme_generator/meme_templates.py", "chunk": "MemeTemplate('Left Exit 12 Off Ramp', 3, '124822590'),\n    'Disaster Girl': MemeTemplate('Disaster Girl', 2, '97984'),\n    'Epic Handshake': MemeTemplate('Epic Handshake', 3, '135256802'),\n    \"Gru's Plan\": MemeTemplate(\"Gru's Plan\", 4, '131940431'),\n    'Sad Pablo Escobar': MemeTemplate('Sad Pablo Escobar', 3, '80707627'),\n    'Batman Slapping Robin': MemeTemplate('Batman Slapping Robin', 2, '438680'),\n    'Waiting Skeleton': MemeTemplate('Waiting Skeleton', 2, '4087833'),\n    'Woman Yelling At"}, {"index": 140, "path": "ML/meme_generator/meme_templates.py", "chunk": "680'),\n    'Waiting Skeleton': MemeTemplate('Waiting Skeleton', 2, '4087833'),\n    'Woman Yelling At Cat': MemeTemplate('Woman Yelling At Cat', 2, '188390779'),\n    'Buff Doge vs. Cheems': MemeTemplate('Buff Doge vs. Cheems', 4, '247375501'),\n    \"I Bet He's Thinking About Other Women\": MemeTemplate(\"I Bet He's Thinking About Other Women\", 2, '110163934'),\n    'Mocking Spongebob': MemeTemplate('Mocking Spongebob', 2, '102156234'),\n    'Trade Offer': MemeTemplate('Trade Offer', 3, '309868304'),\n "}, {"index": 141, "path": "ML/meme_generator/meme_templates.py", "chunk": "cking Spongebob', 2, '102156234'),\n    'Trade Offer': MemeTemplate('Trade Offer', 3, '309868304'),\n    'Monkey Puppet': MemeTemplate('Monkey Puppet', 2, '148909805'),\n    'Success Kid': MemeTemplate('Success Kid', 2, '61544'),\n    \"Y'all Got Any More Of That\": MemeTemplate(\"Y'all Got Any More Of That\", 2, '124055727'),\n    'Ancient Aliens': MemeTemplate('Ancient Aliens', 2, '101470'),\n    'Hide the Pain Harold': MemeTemplate('Hide the Pain Harold', 2, '27813981'),\n    'Trump Bill Signing': MemeT"}, {"index": 142, "path": "ML/meme_generator/meme_templates.py", "chunk": "e Pain Harold': MemeTemplate('Hide the Pain Harold', 2, '27813981'),\n    'Trump Bill Signing': MemeTemplate('Trump Bill Signing', 2, '91545132'),\n    'You Guys are Getting Paid': MemeTemplate('You Guys are Getting Paid', 2, '177682295'),\n    'Blank Nut Button': MemeTemplate('Blank Nut Button', 2, '119139145'),\n    \"They don't know\": MemeTemplate(\"They don't know\", 2, '284929871'),\n    'Squidward window': MemeTemplate('Squidward window', 2, '67452763'),\n    'Roll Safe Think About It': MemeTemplat"}, {"index": 143, "path": "ML/meme_generator/meme_templates.py", "chunk": "indow': MemeTemplate('Squidward window', 2, '67452763'),\n    'Roll Safe Think About It': MemeTemplate('Roll Safe Think About It', 2, '89370399'),\n    'A train hitting a school bus': MemeTemplate('A train hitting a school bus', 2, '247113703'),\n    'where monkey': MemeTemplate('where monkey', 2, '316466202'),\n    'Laughing Leo': MemeTemplate('Laughing Leo', 2, '259237855'),\n    'Whisper and Goosebumps': MemeTemplate('Whisper and Goosebumps', 2, '101956210'),\n    'Sleeping Shaq': MemeTemplate('Sle"}, {"index": 144, "path": "ML/meme_generator/meme_templates.py", "chunk": "mps': MemeTemplate('Whisper and Goosebumps', 2, '101956210'),\n    'Sleeping Shaq': MemeTemplate('Sleeping Shaq', 2, '99683372'),\n    'AJ Styles & Undertaker': MemeTemplate('AJ Styles & Undertaker', 2, '234202281'),\n    'Types of Headaches meme': MemeTemplate('Types of Headaches meme', 2, '119215120'),\n    'The Rock Driving': MemeTemplate('The Rock Driving', 2, '21735'),\n    'All My Homies Hate': MemeTemplate('All My Homies Hate', 2, '216523697'),\n    'Grandma Finds The Internet': MemeTemplate('G"}, {"index": 145, "path": "ML/meme_generator/meme_templates.py", "chunk": "emeTemplate('All My Homies Hate', 2, '216523697'),\n    'Grandma Finds The Internet': MemeTemplate('Grandma Finds The Internet', 2, '61556'),\n    'Third World Skeptical Kid': MemeTemplate('Third World Skeptical Kid', 2, '101288'),\n    'Star Wars Yoda': MemeTemplate('Star Wars Yoda', 2, '14371066'),\n    'Drake Blank': MemeTemplate('Drake Blank', 2, '91998305'),\n    'spiderman pointing at spiderman': MemeTemplate('spiderman pointing at spiderman', 2, '110133729'),\n    'Friendship ended': MemeTempla"}, {"index": 146, "path": "ML/meme_generator/meme_templates.py", "chunk": " MemeTemplate('spiderman pointing at spiderman', 2, '110133729'),\n    'Friendship ended': MemeTemplate('Friendship ended', 2, '137501417'),\n    'Is This A Pigeon': MemeTemplate('Is This A Pigeon', 3, '100777631'),\n    'Who Would Win?': MemeTemplate('Who Would Win?', 2, '101910402'),\n    'First Time?': MemeTemplate('First Time?', 2, '161865971'),\n    'They Live Sunglasses': MemeTemplate('They Live Sunglasses', 2, '252600902'),\n    'Mother Ignoring Kid Drowning': MemeTemplate('Mother Ignoring Kid "}, {"index": 147, "path": "ML/meme_generator/meme_templates.py", "chunk": "Sunglasses', 2, '252600902'),\n    'Mother Ignoring Kid Drowning': MemeTemplate('Mother Ignoring Kid Drowning', 2, '136200013'),\n    'American Chopper Argument': MemeTemplate('American Chopper Argument', 5, '124822590'),\n    'Galaxy Brain': MemeTemplate('Galaxy Brain', 4, '93895088'),\n    'Stonks': MemeTemplate('Stonks', 2, '180190441'),\n    'Doge': MemeTemplate('Doge',2,'8072285')\n\n}"}, {"index": 148, "path": "ML/meme_generator/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 149, "path": "ML/meme_generator/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 150, "path": "ML/meme_generator/urls.py", "chunk": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('generate-meme/', views.generate_meme, name='generate-meme'),\n]"}, {"index": 151, "path": "ML/meme_generator/views.py", "chunk": "from django.shortcuts import render\n\n# Create your views here.\nfrom django.shortcuts import render\n\n# Create your views here.\nfrom rest_framework.decorators import api_view\nfrom rest_framework.response import Response\nfrom .meme_generator import MemeGenerator\nfrom django.conf import settings\nimport os\n\n@api_view(['POST'])\ndef generate_meme(request):\n    try:\n        input_text = request.data.get('input_text')\n        print(input_text)\n        if not input_text:\n            return Response({'erro"}, {"index": 152, "path": "ML/meme_generator/views.py", "chunk": "input_text')\n        print(input_text)\n        if not input_text:\n            return Response({'error': 'No input text provided'}, status=400)\n\n        generator = MemeGenerator(\n            openai_api_key=os.getenv('OPENAI_API_KEY'),\n            imgflip_username=os.getenv('IMGFLIP_USERNAME'),\n            imgflip_password=os.getenv('IMGFLIP_PASSWORD')\n        )\n\n        result = generator.generate_complete_meme(input_text)\n        return Response(result)\n\n    except Exception as e:\n        retur"}, {"index": 153, "path": "ML/meme_generator/views.py", "chunk": "_complete_meme(input_text)\n        return Response(result)\n\n    except Exception as e:\n        return Response({'error': str(e)}, status=500)"}, {"index": 154, "path": "ML/post_analysis/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 155, "path": "ML/post_analysis/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass PostAnalysisConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'post_analysis'\n"}, {"index": 156, "path": "ML/post_analysis/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 157, "path": "ML/post_analysis/services.py", "chunk": "import os\nimport re\nimport json\nimport logging\nimport nltk\nfrom typing import Dict, Any, List\n\n# NLP Libraries\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nfrom transformers import pipeline\n\n# Langchain and Gemini\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\nfrom langchain.output_parsers import PydanticOutputParser\nfrom pydantic import BaseModel, Field\n\n# Configure logging\nlogging.basicConfig"}, {"index": 158, "path": "ML/post_analysis/services.py", "chunk": " PydanticOutputParser\nfrom pydantic import BaseModel, Field\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO, \n    format='%(asctime)s - %(levelname)s: %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\n# Download necessary NLTK resources\nnltk.download('vader_lexicon', quiet=True)\n\n# Pydantic Model for Strict JSON Parsing\nclass SentimentInsights(BaseModel):\n    overall_sentiment: str = Field(\n        description=\"Overall sentiment of the text\",\n        enum=[\"Positive\", \"Negati"}, {"index": 159, "path": "ML/post_analysis/services.py", "chunk": " str = Field(\n        description=\"Overall sentiment of the text\",\n        enum=[\"Positive\", \"Negative\", \"Neutral\"]\n    )\n    emotional_depth: str = Field(\n        description=\"Depth of emotional context in the text\"\n    )\n    professional_context: str = Field(\n        description=\"Professional interpretation of the text\"\n    )\n    communication_effectiveness: str = Field(\n        description=\"Assessment of communication quality\"\n    )\n    key_themes: List[str] = Field(\n        description=\"Prim"}, {"index": 160, "path": "ML/post_analysis/services.py", "chunk": "essment of communication quality\"\n    )\n    key_themes: List[str] = Field(\n        description=\"Primary themes detected in the text\"\n    )\n    engagement_recommendations: List[str] = Field(\n        description=\"Suggestions for further engagement\"\n    )\n\nclass ComprehensiveSentimentAnalyzer:\n    def __init__(self):\n        \"\"\"\n        Initialize comprehensive sentiment analyzer with multiple models\n        \"\"\"\n        # Environment Variable Validation\n        api_key = os.getenv(\"GOOGLE_API_KEY\")"}, {"index": 161, "path": "ML/post_analysis/services.py", "chunk": "\n        \"\"\"\n        # Environment Variable Validation\n        api_key = os.getenv(\"GOOGLE_API_KEY\")\n        if not api_key:\n            raise ValueError(\"Google API Key is required but not set\")\n\n        # Initialize models\n        try:\n            # NLTK VADER Sentiment Analyzer\n            self.vader_analyzer = SentimentIntensityAnalyzer()\n\n            # Transformer-based Sentiment Models\n            self.transformer_sentiment = pipeline(\n                \"sentiment-analysis\",\n                "}, {"index": 162, "path": "ML/post_analysis/services.py", "chunk": "       self.transformer_sentiment = pipeline(\n                \"sentiment-analysis\",\n                model=\"distilbert-base-uncased-finetuned-sst-2-english\"\n            )\n\n            # Emotion Detection Model\n            self.emotion_model = pipeline(\n                \"text-classification\",\n                model=\"j-hartmann/emotion-english-distilroberta-base\"\n            )\n\n            # Pydantic Output Parser\n            self.output_parser = PydanticOutputParser(pydantic_object=SentimentInsights"}, {"index": 163, "path": "ML/post_analysis/services.py", "chunk": "utput Parser\n            self.output_parser = PydanticOutputParser(pydantic_object=SentimentInsights)\n\n            # Initialize Gemini LLM \n            self.gemini_llm = ChatGoogleGenerativeAI(\n                model=\"gemini-pro\",\n                temperature=0.3,\n                max_tokens=1000,\n                convert_system_message_to_human=True,\n                google_api_key=api_key\n            )\n\n            # Enhanced Prompt Template with Pydantic Output Parsing\n            self.gemini_prom"}, {"index": 164, "path": "ML/post_analysis/services.py", "chunk": " )\n\n            # Enhanced Prompt Template with Pydantic Output Parsing\n            self.gemini_prompt = PromptTemplate(\n                template=\"\"\"Analyze the sentiment and context of the following text. \n{format_instructions}\n\nSentiment Analysis Context:\n- Sentiment Scores: {sentiment_scores}\n- Transformer Sentiment: {transformer_sentiment}\n- Detected Emotions: {emotions}\n\nPost Content: {post}\n\nInstructions:\n- Provide a precise, professional analysis\n- Be concise and insightful\n- Focus on act"}, {"index": 165, "path": "ML/post_analysis/services.py", "chunk": "\nInstructions:\n- Provide a precise, professional analysis\n- Be concise and insightful\n- Focus on actionable insights\n\"\"\",\n                input_variables=[\"post\", \"sentiment_scores\", \"transformer_sentiment\", \"emotions\"],\n                partial_variables={\n                    \"format_instructions\": self.output_parser.get_format_instructions()\n                }\n            )\n\n            # Create Gemini Analysis Chain\n            self.gemini_chain = LLMChain(\n                llm=self.gemini_llm,\n"}, {"index": 166, "path": "ML/post_analysis/services.py", "chunk": "emini Analysis Chain\n            self.gemini_chain = LLMChain(\n                llm=self.gemini_llm,\n                prompt=self.gemini_prompt,\n                output_parser=self.output_parser\n            )\n\n        except Exception as e:\n            logger.error(f\"Model initialization failed: {e}\")\n            raise\n\n    def preprocess_text(self, text: str) -> str:\n        \"\"\"\n        Advanced text preprocessing\n\n        Args:\n            text (str): Input text to preprocess\n\n        Returns:\n  "}, {"index": 167, "path": "ML/post_analysis/services.py", "chunk": "t preprocessing\n\n        Args:\n            text (str): Input text to preprocess\n\n        Returns:\n            str: Cleaned and normalized text\n        \"\"\"\n        text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n        text = text.lower().strip()\n        return ' '.join(text.split())\n\n    def analyze_sentiment(self, post: str) -> Dict[str, Any]:\n        \"\"\"\n        Comprehensive sentiment analysis with multiple models\n\n        Args:\n            post (str): Text content to analyze\n\n        Returns:\n  "}, {"index": 168, "path": "ML/post_analysis/services.py", "chunk": " multiple models\n\n        Args:\n            post (str): Text content to analyze\n\n        Returns:\n            dict: Comprehensive sentiment analysis results\n        \"\"\"\n        try:\n            # Preprocess the text\n            cleaned_post = self.preprocess_text(post)\n\n            # VADER Sentiment Analysis\n            vader_scores = self.vader_analyzer.polarity_scores(cleaned_post)\n\n            # Transformer Sentiment Analysis\n            transformer_result = self.transformer_sentiment(cleaned"}, {"index": 169, "path": "ML/post_analysis/services.py", "chunk": "# Transformer Sentiment Analysis\n            transformer_result = self.transformer_sentiment(cleaned_post)[0]\n\n            # Emotion Detection\n            emotion_results = self.emotion_model(cleaned_post)\n\n            # Gemini Enhanced Analysis\n            try:\n                ai_insights = self.gemini_chain.run(\n                    post=post,\n                    sentiment_scores=json.dumps(vader_scores),\n                    transformer_sentiment=transformer_result['label'],\n                   "}, {"index": 170, "path": "ML/post_analysis/services.py", "chunk": "_scores),\n                    transformer_sentiment=transformer_result['label'],\n                    emotions=json.dumps([\n                        {\"label\": emotion['label'], \"score\": emotion['score']}\n                        for emotion in emotion_results\n                    ])\n                )\n            except Exception as gemini_error:\n                logger.warning(f\"Gemini analysis failed: {gemini_error}\")\n                ai_insights = SentimentInsights(\n                    overall_senti"}, {"index": 171, "path": "ML/post_analysis/services.py", "chunk": " {gemini_error}\")\n                ai_insights = SentimentInsights(\n                    overall_sentiment=\"Neutral\",\n                    emotional_depth=\"Limited Context\",\n                    professional_context=\"Analysis Inconclusive\",\n                    communication_effectiveness=\"Basic\",\n                    key_themes=[\"General Discussion\"],\n                    engagement_recommendations=[\"Request More Information\"]\n                )\n\n            # Comprehensive Analysis Result\n            "}, {"index": 172, "path": "ML/post_analysis/services.py", "chunk": "quest More Information\"]\n                )\n\n            # Comprehensive Analysis Result\n            analysis = {\n                \"original_post\": post,\n                \"cleaned_post\": cleaned_post,\n                \"sentiment_metrics\": {\n                    \"vader_sentiment\": {\n                        \"negative\": vader_scores['neg'],\n                        \"neutral\": vader_scores['neu'],\n                        \"positive\": vader_scores['pos'],\n                        \"compound_score\": vader_scor"}, {"index": 173, "path": "ML/post_analysis/services.py", "chunk": "               \"positive\": vader_scores['pos'],\n                        \"compound_score\": vader_scores['compound']\n                    },\n                    \"transformer_sentiment\": {\n                        \"label\": transformer_result['label'],\n                        \"confidence\": transformer_result['score']\n                    },\n                    \"detected_emotions\": {\n                        emotion['label']: emotion['score']\n                        for emotion in emotion_results\n       "}, {"index": 174, "path": "ML/post_analysis/services.py", "chunk": "   emotion['label']: emotion['score']\n                        for emotion in emotion_results\n                    }\n                },\n                \"ai_powered_insights\": ai_insights.dict()\n            }\n\n            return analysis\n\n        except Exception as e:\n            logger.error(f\"Sentiment Analysis Failed: {e}\")\n            return {\n                \"error\": str(e),\n                \"original_post\": post,\n                \"fallback_strategy\": {\n                    \"overall_sentiment\": "}, {"index": 175, "path": "ML/post_analysis/services.py", "chunk": "iginal_post\": post,\n                \"fallback_strategy\": {\n                    \"overall_sentiment\": \"Neutral\",\n                    \"message\": \"Analysis could not be completed\"\n                }\n            }"}, {"index": 176, "path": "ML/post_analysis/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 177, "path": "ML/post_analysis/urls.py", "chunk": "from django.urls import path\nfrom .views import analyze_sentiment\n\nurlpatterns = [\n    path('post/analyze/', analyze_sentiment, name='analyze_sentiment'),\n]   "}, {"index": 178, "path": "ML/post_analysis/views.py", "chunk": "from django.shortcuts import render\n\n# Create your views here.\n# backend/sentiment_app/views.py\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_POST\nimport json\n\nfrom .services import ComprehensiveSentimentAnalyzer\nfrom dotenv import load_dotenv\nload_dotenv()  # This will load variables from .env file\n@csrf_exempt\n@require_POST\ndef analyze_sentiment(request):\n    try:\n        # Parse incoming JSON data\n   "}, {"index": 179, "path": "ML/post_analysis/views.py", "chunk": "exempt\n@require_POST\ndef analyze_sentiment(request):\n    try:\n        # Parse incoming JSON data\n        data = json.loads(request.body)\n        post_content = data.get('post', '')\n\n        if not post_content:\n            return JsonResponse({\n                'error': 'No post content provided'\n            }, status=400)\n\n        # Instantiate sentiment analyzer\n        analyzer = ComprehensiveSentimentAnalyzer()\n        \n        # Perform sentiment analysis\n        result = analyzer.analyze_se"}, {"index": 180, "path": "ML/post_analysis/views.py", "chunk": "ntimentAnalyzer()\n        \n        # Perform sentiment analysis\n        result = analyzer.analyze_sentiment(post_content)\n\n        return JsonResponse(result)\n\n    except Exception as e:\n        return JsonResponse({\n            'error': str(e)\n        }, status=500)"}, {"index": 181, "path": "ML/recommendation.json", "chunk": "{\n    \"overall_recommendations\": [\n        {\n            \"_id\": \"67536d3bb786652f7a5f575f\",\n            \"email\": \"finndhar@example.com\",\n            \"fullName\": \"Falguni Batra\",\n            \"phone\": \"03996716618\",\n            \"password\": \"$2b$12$aeUSxz4UKBMl3jOelMANi.fmzb7VFjJLSoR1/t9m2f42ArcAAwEAS\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Deep Learning\",\n                \"Cloud Computing\",\n                \"Node.js\",\n                \"React\",\n                \"Financial"}, {"index": 182, "path": "ML/recommendation.json", "chunk": "   \"Cloud Computing\",\n                \"Node.js\",\n                \"React\",\n                \"Financial Analysis\",\n                \"Marketing\",\n                \"Design Thinking\"\n            ],\n            \"interests\": [\n                \"Open Source\",\n                \"Startups\",\n                \"Digital Marketing\",\n                \"Internet of Things\",\n                \"User Experience\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Ahmedabad\",\n   "}, {"index": 183, "path": "ML/recommendation.json", "chunk": "            \"education\": [\n                {\n                    \"institution\": \"IIM Ahmedabad\",\n                    \"degree\": \"MS\",\n                    \"yearOfGraduation\": 2015\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 23.02054302351306,\n                \"longitude\": 72.53577736436579\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description"}, {"index": 184, "path": "ML/recommendation.json", "chunk": "cts\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Labore iste voluptas distinctio delectus sed provident incidunt.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"At nulla non.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Gujarati\"\n            ],\n            \"bio\": \"Voluptatibus voluptates dolore quaerat occae"}, {"index": 185, "path": "ML/recommendation.json", "chunk": "          \"Gujarati\"\n            ],\n            \"bio\": \"Voluptatibus voluptates dolore quaerat occaecati.\\nRepudiandae laudantium nihil laudantium magni possimus vero possimus. Optio ut nostrum vitae. Quae neque reiciendis architecto.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": false,\n            \"notifications\": [],\n            \"createdAt\": \"2024-07-28T05:59:50\",\n            \"__v\": 0\n        },"}, {"index": 186, "path": "ML/recommendation.json", "chunk": "\"notifications\": [],\n            \"createdAt\": \"2024-07-28T05:59:50\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f578b\",\n            \"email\": \"abdulsarin@example.com\",\n            \"fullName\": \"Upma Brahmbhatt\",\n            \"phone\": \"8074343882\",\n            \"password\": \"$2b$12$QeGDmM1n7SRNYd7K6J.J0OeI3/0DFCT.0Hsx6Tk9aINDM2fiy7.U.\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Deep Learning\",\n                \"Natural Language Processing"}, {"index": 187, "path": "ML/recommendation.json", "chunk": "           \"skills\": [\n                \"Deep Learning\",\n                \"Natural Language Processing\",\n                \"Blockchain\",\n                \"Problem Solving\"\n            ],\n            \"interests\": [\n                \"Mobile App Development\",\n                \"Open Source\",\n                \"User Experience\",\n                \"Technology\",\n                \"Digital Marketing\",\n                \"Data Science\"\n            ],\n            \"education\": [\n                {\n                    \"inst"}, {"index": 188, "path": "ML/recommendation.json", "chunk": "\"Data Science\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Bangalore\",\n                    \"degree\": \"MS\",\n                    \"yearOfGraduation\": 2016\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 22.979983117406476,\n                \"longitude\": 72.57547519075722\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n "}, {"index": 189, "path": "ML/recommendation.json", "chunk": "          },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Debitis rem porro natus molestias voluptatibus.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Eveniet suscipit delectus dolorum maxime delectus harum architecto.\"\n                }\n            ],\n            \"certifications\": [\n                {\n                    \"name\": \"Certification 1\",\n  "}, {"index": 190, "path": "ML/recommendation.json", "chunk": "\n            \"certifications\": [\n                {\n                    \"name\": \"Certification 1\",\n                    \"issuer\": \"Biswas-Dara\"\n                },\n                {\n                    \"name\": \"Certification 2\",\n                    \"issuer\": \"Mitter, Verma and Dani\"\n                }\n            ],\n            \"languages\": [\n                \"Bengali\"\n            ],\n            \"bio\": \"Cumque amet aut eos veniam nobis. Consequuntur debitis sint reprehenderit.\\nAsperiores occaecati o"}, {"index": 191, "path": "ML/recommendation.json", "chunk": " \"Cumque amet aut eos veniam nobis. Consequuntur debitis sint reprehenderit.\\nAsperiores occaecati officia ducimus deserunt libero natus. Odio sequi ea quas.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2024-12-03T07:31:22\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f54f5\",\n            \"email\":"}, {"index": 192, "path": "ML/recommendation.json", "chunk": "   \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f54f5\",\n            \"email\": \"opradhan@example.com\",\n            \"fullName\": \"Krisha Sami\",\n            \"phone\": \"6379563698\",\n            \"password\": \"$2b$12$/V3ch/MjzMnWynxlIT49Yux7kzWenIDnsY2ANZTdR.no7j7nasnJG\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"JavaScript\",\n                \"MongoDB\",\n                \"Blockchain\",\n                \"Deep Learning\",\n                \"Research\",\n             "}, {"index": 193, "path": "ML/recommendation.json", "chunk": "            \"Blockchain\",\n                \"Deep Learning\",\n                \"Research\",\n                \"Marketing\"\n            ],\n            \"interests\": [\n                \"Robotics\",\n                \"Innovation\",\n                \"Startups\",\n                \"Product Design\",\n                \"Data Science\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"NIT Surathkal\",\n                    \"degree\": \"B.Tech\",\n                    \"yearOfGraduation\": "}, {"index": 194, "path": "ML/recommendation.json", "chunk": "\": \"NIT Surathkal\",\n                    \"degree\": \"B.Tech\",\n                    \"yearOfGraduation\": 2014\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 23.007444801682823,\n                \"longitude\": 72.62592299413515\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Doloremque ullam error non.\"\n                },\n                {\n  "}, {"index": 195, "path": "ML/recommendation.json", "chunk": "                \"description\": \"Doloremque ullam error non.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Iusto consequatur ab eligendi corporis.\"\n                },\n                {\n                    \"title\": \"Project 3\",\n                    \"description\": \"Veritatis necessitatibus temporibus quos dolorem quas tempore.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n          "}, {"index": 196, "path": "ML/recommendation.json", "chunk": "            }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Bengali\",\n                \"English\"\n            ],\n            \"bio\": \"Repudiandae voluptas mollitia omnis dolores alias. Dicta odit aliquid aliquid molestiae reiciendis exercitationem.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt"}, {"index": 197, "path": "ML/recommendation.json", "chunk": "      \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2022-09-26T08:30:05\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f547c\",\n            \"email\": \"lakshmimunshi@example.net\",\n            \"fullName\": \"Amaira Naik\",\n            \"phone\": \"+911920722009\",\n            \"password\": \"$2b$12$VK7GXfJ7/PNLgOQSqa7xeeDdspzXhWzPMPekWSAUMGFvjbw/9An.6\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"N"}, {"index": 198, "path": "ML/recommendation.json", "chunk": "zXhWzPMPekWSAUMGFvjbw/9An.6\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Node.js\",\n                \"TensorFlow\",\n                \"Blockchain\",\n                \"Strategic Planning\"\n            ],\n            \"interests\": [\n                \"Artificial Intelligence\",\n                \"Cloud Technology\",\n                \"Data Science\",\n                \"Quantum Computing\",\n                \"Blockchain\"\n            ],\n            \"education\": [\n                {\n               "}, {"index": 199, "path": "ML/recommendation.json", "chunk": "            \"Blockchain\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"BITS Pilani\",\n                    \"degree\": \"MCA\",\n                    \"yearOfGraduation\": 2014\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 23.08523076393445,\n                \"longitude\": 72.667270577505\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project"}, {"index": 200, "path": "ML/recommendation.json", "chunk": "505\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Aut ex cumque facilis neque quas at.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Quaerat rerum porro nam.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Hindi\",\n                \"English\",\n                \"Tamil\"\n          "}, {"index": 201, "path": "ML/recommendation.json", "chunk": "languages\": [\n                \"Hindi\",\n                \"English\",\n                \"Tamil\"\n            ],\n            \"bio\": \"Accusantium vel quam accusamus odio minus. Reprehenderit tempore tempora quae. Officia neque eligendi.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": false,\n            \"notifications\": [],\n            \"createdAt\": \"2021-06-20T06:48:58\",\n            \"__v\": 0\n        },\n      "}, {"index": 202, "path": "ML/recommendation.json", "chunk": "cations\": [],\n            \"createdAt\": \"2021-06-20T06:48:58\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f55e8\",\n            \"email\": \"ozavyanjana@example.org\",\n            \"fullName\": \"Utkarsh Venkatesh\",\n            \"phone\": \"+915554745704\",\n            \"password\": \"$2b$12$ZV.Ya0cskPP.qtlIw5MoN.C5F6.5oF/aGTkRFsin4SWjCBthacwKS\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"CI/CD\",\n                \"Cloud Computing\",\n                \"A"}, {"index": 203, "path": "ML/recommendation.json", "chunk": "          \"skills\": [\n                \"CI/CD\",\n                \"Cloud Computing\",\n                \"Azure\",\n                \"Blockchain\",\n                \"Agile Methodologies\",\n                \"Business Strategy\",\n                \"Project Management\",\n                \"Problem Solving\"\n            ],\n            \"interests\": [\n                \"Cloud Technology\",\n                \"Cybersecurity\",\n                \"Data Science\",\n                \"User Experience\",\n                \"Technology\",\n       "}, {"index": 204, "path": "ML/recommendation.json", "chunk": "            \"Data Science\",\n                \"User Experience\",\n                \"Technology\",\n                \"Coding\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"NIT Surathkal\",\n                    \"degree\": \"B.Sc\",\n                    \"yearOfGraduation\": 2022\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 23.043147062124497,\n                \"longitude\": 72.522199491186"}, {"index": 205, "path": "ML/recommendation.json", "chunk": "ion\": {\n                \"latitude\": 23.043147062124497,\n                \"longitude\": 72.52219949118638\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Debitis inventore facilis.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Marathi\"\n            ],\n            \"bio\": \"Rem quaerat ex doloribus deleniti eos similique. Nihil hic natus earum sit fu"}, {"index": 206, "path": "ML/recommendation.json", "chunk": "],\n            \"bio\": \"Rem quaerat ex doloribus deleniti eos similique. Nihil hic natus earum sit fugiat. Facere repellat sequi labore dolores.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2024-08-29T05:11:10\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f5454\",\n            \"email\": \"somanbhavya@"}, {"index": 207, "path": "ML/recommendation.json", "chunk": "      },\n        {\n            \"_id\": \"67536d3bb786652f7a5f5454\",\n            \"email\": \"somanbhavya@example.com\",\n            \"fullName\": \"Pooja Chaudhari\",\n            \"phone\": \"+915765472849\",\n            \"password\": \"$2b$12$C/qImSYc/RU9xGU4Wcu6AOaya4WMZXQZS53rODRX/3KlN1oHbn7am\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Big Data\",\n                \"React\",\n                \"Sales\"\n            ],\n            \"interests\": [\n                \"Digital Marketing\",\n         "}, {"index": 208, "path": "ML/recommendation.json", "chunk": "    \"Sales\"\n            ],\n            \"interests\": [\n                \"Digital Marketing\",\n                \"Artificial Intelligence\",\n                \"Entrepreneurship\",\n                \"Cloud Technology\",\n                \"Startups\",\n                \"Technology\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Ahmedabad\",\n                    \"degree\": \"MS\",\n                    \"yearOfGraduation\": 2018\n                }\n            ],\n           "}, {"index": 209, "path": "ML/recommendation.json", "chunk": "ee\": \"MS\",\n                    \"yearOfGraduation\": 2018\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 23.043630765908713,\n                \"longitude\": 72.48085701739296\n            },\n            \"projects\": [],\n            \"certifications\": [],\n            \"languages\": [\n                \"English\",\n                \"Tamil\",\n                \"Marathi\"\n            ],\n            \"bio\": \"Cum nobis quas nesciunt non. Nam maxi"}, {"index": 210, "path": "ML/recommendation.json", "chunk": ",\n                \"Marathi\"\n            ],\n            \"bio\": \"Cum nobis quas nesciunt non. Nam maxime quis necessitatibus earum. Laborum facere fugit accusantium aspernatur.\\nLabore nam beatae temporibus cupiditate. Laudantium facilis voluptatibus sint quisquam.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": false,\n            \"notifications\": [],\n            \"createdAt\": \"2021-12-16T04:27:12\",\n  "}, {"index": 211, "path": "ML/recommendation.json", "chunk": "assword\": false,\n            \"notifications\": [],\n            \"createdAt\": \"2021-12-16T04:27:12\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f57d0\",\n            \"email\": \"zsaxena@example.com\",\n            \"fullName\": \"Meghana Kurian\",\n            \"phone\": \"0109567543\",\n            \"password\": \"$2b$12$CJEoi9YVq3RgglcHjF2KH.OdYU.Aln8Z56m6JZFWKzXNBs6gI5tsW\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Kubernetes\",\n                \"Node."}, {"index": 212, "path": "ML/recommendation.json", "chunk": "        \"role\": \"user\",\n            \"skills\": [\n                \"Kubernetes\",\n                \"Node.js\",\n                \"Machine Learning\",\n                \"Natural Language Processing\",\n                \"Data Analysis\",\n                \"Financial Analysis\"\n            ],\n            \"interests\": [\n                \"Artificial Intelligence\",\n                \"Innovation\",\n                \"Technology\",\n                \"Blockchain\",\n                \"Cloud Technology\"\n            ],\n            \"educ"}, {"index": 213, "path": "ML/recommendation.json", "chunk": "\",\n                \"Blockchain\",\n                \"Cloud Technology\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIT Kanpur\",\n                    \"degree\": \"MCA\",\n                    \"yearOfGraduation\": 2017\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 22.9709155827694,\n                \"longitude\": 72.61144426294516\n            },\n            \"projects\": [\n            "}, {"index": 214, "path": "ML/recommendation.json", "chunk": "                \"longitude\": 72.61144426294516\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Veniam id distinctio.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Exercitationem rerum quaerat illo odit ducimus ducimus quasi.\"\n                }\n            ],\n            \"certifications\": [\n                {\n                    \"name\": \"Cer"}, {"index": 215, "path": "ML/recommendation.json", "chunk": " }\n            ],\n            \"certifications\": [\n                {\n                    \"name\": \"Certification 1\",\n                    \"issuer\": \"Om-Buch\"\n                },\n                {\n                    \"name\": \"Certification 2\",\n                    \"issuer\": \"Sethi-Mannan\"\n                }\n            ],\n            \"languages\": [\n                \"Bengali\"\n            ],\n            \"bio\": \"Distinctio nobis atque architecto nam laudantium tempore eveniet. Consectetur modi quaerat quod"}, {"index": 216, "path": "ML/recommendation.json", "chunk": "o\": \"Distinctio nobis atque architecto nam laudantium tempore eveniet. Consectetur modi quaerat quod. Tenetur unde illum harum iste voluptatem quae.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2023-07-29T08:17:08\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f56d8\",\n            \"email\": \"skale@e"}, {"index": 217, "path": "ML/recommendation.json", "chunk": " 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f56d8\",\n            \"email\": \"skale@example.com\",\n            \"fullName\": \"Thomas Contractor\",\n            \"phone\": \"1304388813\",\n            \"password\": \"$2b$12$LePG4U4PtPrtK0lCyNAM6.tKxJDGcVewdk22TSN8SvmjgAx5lO2lO\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Deep Learning\",\n                \"Natural Language Processing\",\n                \"Machine Learning\",\n                \"Python\",\n                \"Negotiat"}, {"index": 218, "path": "ML/recommendation.json", "chunk": "Processing\",\n                \"Machine Learning\",\n                \"Python\",\n                \"Negotiation\"\n            ],\n            \"interests\": [\n                \"Product Design\",\n                \"Startups\",\n                \"User Experience\",\n                \"Quantum Computing\",\n                \"Open Source\",\n                \"Innovation\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"NIT Surathkal\",\n                    \"degree\": \"M.Tech\",\n       "}, {"index": 219, "path": "ML/recommendation.json", "chunk": "\n                    \"institution\": \"NIT Surathkal\",\n                    \"degree\": \"M.Tech\",\n                    \"yearOfGraduation\": 2019\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 22.981941210990932,\n                \"longitude\": 72.47407943052782\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Assumenda quibusdam fugit dicta.\"\n "}, {"index": 220, "path": "ML/recommendation.json", "chunk": "       \"title\": \"Project 1\",\n                    \"description\": \"Assumenda quibusdam fugit dicta.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Animi odit culpa provident porro numquam.\"\n                }\n            ],\n            \"certifications\": [\n                {\n                    \"name\": \"Certification 1\",\n                    \"issuer\": \"Pandya, Goyal and Basak\"\n                }\n            ],\n            \"languages\":"}, {"index": 221, "path": "ML/recommendation.json", "chunk": "       \"issuer\": \"Pandya, Goyal and Basak\"\n                }\n            ],\n            \"languages\": [\n                \"English\",\n                \"Bengali\",\n                \"Marathi\"\n            ],\n            \"bio\": \"Laboriosam quas mollitia amet.\\nOccaecati doloremque totam praesentium magnam fugiat. Vero quaerat suscipit error quam praesentium libero voluptates. Deserunt mollitia asperiores hic a.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\":"}, {"index": 222, "path": "ML/recommendation.json", "chunk": " a.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2020-08-06T03:39:36\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f54d1\",\n            \"email\": \"vedant86@example.com\",\n            \"fullName\": \"Bina Savant\",\n            \"phone\": \"9720760487\",\n            \"password\": \"$2b$12$EETlZm9K6Uv0i2Osjpf37uY"}, {"index": 223, "path": "ML/recommendation.json", "chunk": " Savant\",\n            \"phone\": \"9720760487\",\n            \"password\": \"$2b$12$EETlZm9K6Uv0i2Osjpf37uY1jCB6J6zwfanwGgbAY8WQJ7mYoHm9C\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"JavaScript\",\n                \"Deep Learning\",\n                \"Blockchain\",\n                \"Data Analysis\",\n                \"Negotiation\",\n                \"Financial Analysis\",\n                \"Customer Relations\"\n            ],\n            \"interests\": [\n                \"Digital Marketing\",\n    "}, {"index": 224, "path": "ML/recommendation.json", "chunk": "tomer Relations\"\n            ],\n            \"interests\": [\n                \"Digital Marketing\",\n                \"Data Science\",\n                \"Cloud Technology\",\n                \"Open Source\",\n                \"Blockchain\",\n                \"Internet of Things\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Calcutta\",\n                    \"degree\": \"M.Tech\",\n                    \"yearOfGraduation\": 2015\n                }\n            ],\n         "}, {"index": 225, "path": "ML/recommendation.json", "chunk": "\": \"M.Tech\",\n                    \"yearOfGraduation\": 2015\n                }\n            ],\n            \"address\": \"Jaipur\",\n            \"location\": {\n                \"latitude\": 26.86831583645484,\n                \"longitude\": 75.70401300162469\n            },\n            \"projects\": [],\n            \"certifications\": [],\n            \"languages\": [\n                \"English\"\n            ],\n            \"bio\": \"Non alias repudiandae necessitatibus atque assumenda. Quam eos exercitationem voluptate cup"}, {"index": 226, "path": "ML/recommendation.json", "chunk": " \"bio\": \"Non alias repudiandae necessitatibus atque assumenda. Quam eos exercitationem voluptate cupiditate.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2022-11-08T21:38:45\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f5478\",\n            \"email\": \"balendradani@example.net\",\n            \"fullNam"}, {"index": 227, "path": "ML/recommendation.json", "chunk": "\": \"67536d3bb786652f7a5f5478\",\n            \"email\": \"balendradani@example.net\",\n            \"fullName\": \"Kritika Dewan\",\n            \"phone\": \"3408258317\",\n            \"password\": \"$2b$12$r1HK4zNLUG50FL..SMORjurHMS5cBV7Xk01pd51jjyyM4OxT1ZDKe\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Agile Methodologies\",\n                \"Cloud Computing\",\n                \"TensorFlow\",\n                \"SQL\",\n                \"Design Thinking\",\n                \"Project Management\",\n    "}, {"index": 228, "path": "ML/recommendation.json", "chunk": "                \"SQL\",\n                \"Design Thinking\",\n                \"Project Management\",\n                \"Negotiation\"\n            ],\n            \"interests\": [\n                \"Robotics\",\n                \"Cloud Technology\",\n                \"Sustainable Technology\",\n                \"Startups\",\n                \"User Experience\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Bangalore\",\n                    \"degree\": \"M.Tech\",\n            "}, {"index": 229, "path": "ML/recommendation.json", "chunk": "                \"institution\": \"IIM Bangalore\",\n                    \"degree\": \"M.Tech\",\n                    \"yearOfGraduation\": 2016\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 22.988786285826972,\n                \"longitude\": 72.61156450599621\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Reiciendis cum provident facilis assumen"}, {"index": 230, "path": "ML/recommendation.json", "chunk": "  \"title\": \"Project 1\",\n                    \"description\": \"Reiciendis cum provident facilis assumenda.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Telugu\"\n            ],\n            \"bio\": \"Est autem iure ea minima. Beatae officiis totam ut dolores. Illum corrupti quam enim.\\nAccusamus eius laudantium maxime sapiente porro cumque.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": ["}, {"index": 231, "path": "ML/recommendation.json", "chunk": ".\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2020-08-25T20:03:29\",\n            \"__v\": 0\n        }\n    ],\n    \"interest_recommendations\": [\n        {\n            \"_id\": \"67536d3bb786652f7a5f56a2\",\n            \"email\": \"wasonaahana@example.org\",\n            \"fullName\": \"Onkar Jaggi\",\n            \"phone\": \"+919974140613\",\n           "}, {"index": 232, "path": "ML/recommendation.json", "chunk": "ample.org\",\n            \"fullName\": \"Onkar Jaggi\",\n            \"phone\": \"+919974140613\",\n            \"password\": \"$2b$12$Hgow94bLRJlkUrf325Gdd.O.YzUQ1582JYOkaIh7XStP9swuKFXcu\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"MongoDB\",\n                \"CI/CD\",\n                \"Machine Learning\",\n                \"AWS\",\n                \"Cybersecurity\",\n                \"Strategic Planning\",\n                \"Customer Relations\"\n            ],\n            \"interests\": [\n          "}, {"index": 233, "path": "ML/recommendation.json", "chunk": "Planning\",\n                \"Customer Relations\"\n            ],\n            \"interests\": [\n                \"Technology\",\n                \"Data Science\",\n                \"Digital Marketing\",\n                \"Internet of Things\",\n                \"Startups\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIT Kharagpur\",\n                    \"degree\": \"B.Sc\",\n                    \"yearOfGraduation\": 2016\n                }\n            ],\n            \"addre"}, {"index": 234, "path": "ML/recommendation.json", "chunk": "c\",\n                    \"yearOfGraduation\": 2016\n                }\n            ],\n            \"address\": \"Chandigarh\",\n            \"location\": {\n                \"latitude\": 30.759604355887948,\n                \"longitude\": 76.69549032002323\n            },\n            \"projects\": [],\n            \"certifications\": [\n                {\n                    \"name\": \"Certification 1\",\n                    \"issuer\": \"Narayan, Sarkar and Kamdar\"\n                },\n                {\n                    \"nam"}, {"index": 235, "path": "ML/recommendation.json", "chunk": "\"issuer\": \"Narayan, Sarkar and Kamdar\"\n                },\n                {\n                    \"name\": \"Certification 2\",\n                    \"issuer\": \"Kalita Inc\"\n                }\n            ],\n            \"languages\": [\n                \"Telugu\"\n            ],\n            \"bio\": \"Corporis reiciendis tenetur natus autem provident. Id dolorem libero eaque dolor. Tempore odit eaque labore dolores.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": "}, {"index": 236, "path": "ML/recommendation.json", "chunk": "s.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": false,\n            \"notifications\": [],\n            \"createdAt\": \"2020-11-05T17:00:49\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f5783\",\n            \"email\": \"dixitsai@example.org\",\n            \"fullName\": \"Hemal Agarwal\",\n            \"phone\": \"+911718343267\",\n            \"password\": \"$2b$12$BtSaDZJqXbmvJi5kbU"}, {"index": 237, "path": "ML/recommendation.json", "chunk": "l Agarwal\",\n            \"phone\": \"+911718343267\",\n            \"password\": \"$2b$12$BtSaDZJqXbmvJi5kbURpG.Sfh7rchJ5GDaKAaCCjIIZNTTWBz9.ZW\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Node.js\",\n                \"Docker\",\n                \"Cloud Computing\",\n                \"Customer Relations\",\n                \"Public Speaking\"\n            ],\n            \"interests\": [\n                \"Startups\",\n                \"Internet of Things\",\n                \"Digital Marketing\",\n     "}, {"index": 238, "path": "ML/recommendation.json", "chunk": "        \"Startups\",\n                \"Internet of Things\",\n                \"Digital Marketing\",\n                \"Data Science\",\n                \"Cybersecurity\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIT Kanpur\",\n                    \"degree\": \"MCA\",\n                    \"yearOfGraduation\": 2012\n                }\n            ],\n            \"address\": \"Mumbai\",\n            \"location\": {\n                \"latitude\": 19.027197718740698,\n          "}, {"index": 239, "path": "ML/recommendation.json", "chunk": "ess\": \"Mumbai\",\n            \"location\": {\n                \"latitude\": 19.027197718740698,\n                \"longitude\": 72.93977378797028\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Ullam culpa porro quo.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Beatae voluptates nihil labore a.\"\n                }\n            ],\n            \"certif"}, {"index": 240, "path": "ML/recommendation.json", "chunk": "scription\": \"Beatae voluptates nihil labore a.\"\n                }\n            ],\n            \"certifications\": [\n                {\n                    \"name\": \"Certification 1\",\n                    \"issuer\": \"Shroff-Vora\"\n                }\n            ],\n            \"languages\": [\n                \"Gujarati\"\n            ],\n            \"bio\": \"Dignissimos magnam harum voluptatem. Corrupti officia suscipit iste officiis eligendi pariatur. Nesciunt sunt adipisci qui illo.\",\n            \"connections\""}, {"index": 241, "path": "ML/recommendation.json", "chunk": "scipit iste officiis eligendi pariatur. Nesciunt sunt adipisci qui illo.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2020-02-15T23:55:11\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f55bf\",\n            \"email\": \"vanshabose@example.net\",\n            \"fullName\": \"Gaurav Minhas\",\n            \"phon"}, {"index": 242, "path": "ML/recommendation.json", "chunk": "       \"email\": \"vanshabose@example.net\",\n            \"fullName\": \"Gaurav Minhas\",\n            \"phone\": \"6791416238\",\n            \"password\": \"$2b$12$9oSpoAW4BHSPdA6BGsIA8.ghrs/NXG1fZvP3kYOd19sMZqI6J5aCO\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Node.js\",\n                \"Cloud Computing\",\n                \"JavaScript\",\n                \"SQL\",\n                \"Project Management\"\n            ],\n            \"interests\": [\n                \"Internet of Things\",\n          "}, {"index": 243, "path": "ML/recommendation.json", "chunk": "nagement\"\n            ],\n            \"interests\": [\n                \"Internet of Things\",\n                \"Digital Marketing\",\n                \"Startups\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"BITS Pilani\",\n                    \"degree\": \"MBA\",\n                    \"yearOfGraduation\": 2013\n                }\n            ],\n            \"address\": \"Bhopal\",\n            \"location\": {\n                \"latitude\": 23.18271463653099,\n               "}, {"index": 244, "path": "ML/recommendation.json", "chunk": ": \"Bhopal\",\n            \"location\": {\n                \"latitude\": 23.18271463653099,\n                \"longitude\": 77.40147801661432\n            },\n            \"projects\": [],\n            \"certifications\": [],\n            \"languages\": [\n                \"Marathi\",\n                \"Telugu\",\n                \"Gujarati\"\n            ],\n            \"bio\": \"Velit quaerat nostrum eum officia pariatur perspiciatis corporis. Voluptatibus asperiores neque natus repellendus eligendi. Impedit at cumque volupta"}, {"index": 245, "path": "ML/recommendation.json", "chunk": "ciatis corporis. Voluptatibus asperiores neque natus repellendus eligendi. Impedit at cumque voluptate iste inventore.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": false,\n            \"notifications\": [],\n            \"createdAt\": \"2023-04-01T03:42:20\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f5729\",\n            \"email\": \"benjaminmuni@example.net\",\n         "}, {"index": 246, "path": "ML/recommendation.json", "chunk": "       \"_id\": \"67536d3bb786652f7a5f5729\",\n            \"email\": \"benjaminmuni@example.net\",\n            \"fullName\": \"Ekbal Guha\",\n            \"phone\": \"+911440521391\",\n            \"password\": \"$2b$12$Lwwnah57KnDdU9wZQ6n/PeywN36OaHXeVLDAGUSB2ubYMUn7uImqm\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Cloud Computing\",\n                \"SQL\",\n                \"Negotiation\"\n            ],\n            \"interests\": [\n                \"Internet of Things\",\n                \"Startups"}, {"index": 247, "path": "ML/recommendation.json", "chunk": "       ],\n            \"interests\": [\n                \"Internet of Things\",\n                \"Startups\",\n                \"Digital Marketing\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIIT Hyderabad\",\n                    \"degree\": \"MBA\",\n                    \"yearOfGraduation\": 2023\n                }\n            ],\n            \"address\": \"Bangalore\",\n            \"location\": {\n                \"latitude\": 13.018872049441143,\n                \"longit"}, {"index": 248, "path": "ML/recommendation.json", "chunk": "\",\n            \"location\": {\n                \"latitude\": 13.018872049441143,\n                \"longitude\": 77.63751834446443\n            },\n            \"projects\": [],\n            \"certifications\": [],\n            \"languages\": [\n                \"Tamil\"\n            ],\n            \"bio\": \"Illum deleniti animi qui. Accusamus officiis alias quis. Similique reprehenderit officiis.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniver"}, {"index": 249, "path": "ML/recommendation.json", "chunk": "ions\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2021-07-29T17:20:11\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f57a7\",\n            \"email\": \"kumararunima@example.com\",\n            \"fullName\": \"Anika Patla\",\n            \"phone\": \"5585300592\",\n            \"password\": \"$2b$12$B9ASVPRXhN.Hf.4Qtw9NeOyTFNluPdVWkbudiD47j8HPu"}, {"index": 250, "path": "ML/recommendation.json", "chunk": "\"phone\": \"5585300592\",\n            \"password\": \"$2b$12$B9ASVPRXhN.Hf.4Qtw9NeOyTFNluPdVWkbudiD47j8HPul27j7Qbi\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Machine Learning\",\n                \"CI/CD\",\n                \"Communication\"\n            ],\n            \"interests\": [\n                \"Entrepreneurship\",\n                \"Internet of Things\",\n                \"Digital Marketing\",\n                \"Data Science\"\n            ],\n            \"education\": [\n                {\n"}, {"index": 251, "path": "ML/recommendation.json", "chunk": "keting\",\n                \"Data Science\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Ahmedabad\",\n                    \"degree\": \"MS\",\n                    \"yearOfGraduation\": 2014\n                }\n            ],\n            \"address\": \"Jaipur\",\n            \"location\": {\n                \"latitude\": 26.865346553978725,\n                \"longitude\": 75.70123891250904\n            },\n            \"projects\": [\n                {\n                    \""}, {"index": 252, "path": "ML/recommendation.json", "chunk": ": 75.70123891250904\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Iusto labore culpa reprehenderit quae quod velit.\"\n                }\n            ],\n            \"certifications\": [\n                {\n                    \"name\": \"Certification 1\",\n                    \"issuer\": \"Ranganathan Inc\"\n                },\n                {\n                    \"name\": \"Certification 2\",\n                    \"issuer\": "}, {"index": 253, "path": "ML/recommendation.json", "chunk": "  },\n                {\n                    \"name\": \"Certification 2\",\n                    \"issuer\": \"Agarwal PLC\"\n                }\n            ],\n            \"languages\": [\n                \"Tamil\",\n                \"Hindi\"\n            ],\n            \"bio\": \"Fugiat corporis possimus inventore. Esse iusto aspernatur nihil. Nesciunt odit tempore laborum tenetur molestiae magni.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniver"}, {"index": 254, "path": "ML/recommendation.json", "chunk": "ions\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2021-02-17T03:54:23\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f54d1\",\n            \"email\": \"vedant86@example.com\",\n            \"fullName\": \"Bina Savant\",\n            \"phone\": \"9720760487\",\n            \"password\": \"$2b$12$EETlZm9K6Uv0i2Osjpf37uY1jCB6J6zwfanwGgbAY8WQJ7mYo"}, {"index": 255, "path": "ML/recommendation.json", "chunk": "ne\": \"9720760487\",\n            \"password\": \"$2b$12$EETlZm9K6Uv0i2Osjpf37uY1jCB6J6zwfanwGgbAY8WQJ7mYoHm9C\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"JavaScript\",\n                \"Deep Learning\",\n                \"Blockchain\",\n                \"Data Analysis\",\n                \"Negotiation\",\n                \"Financial Analysis\",\n                \"Customer Relations\"\n            ],\n            \"interests\": [\n                \"Digital Marketing\",\n                \"Data Science\""}, {"index": 256, "path": "ML/recommendation.json", "chunk": "   ],\n            \"interests\": [\n                \"Digital Marketing\",\n                \"Data Science\",\n                \"Cloud Technology\",\n                \"Open Source\",\n                \"Blockchain\",\n                \"Internet of Things\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Calcutta\",\n                    \"degree\": \"M.Tech\",\n                    \"yearOfGraduation\": 2015\n                }\n            ],\n            \"address\": \"Jaipur\",\n  "}, {"index": 257, "path": "ML/recommendation.json", "chunk": "       \"yearOfGraduation\": 2015\n                }\n            ],\n            \"address\": \"Jaipur\",\n            \"location\": {\n                \"latitude\": 26.86831583645484,\n                \"longitude\": 75.70401300162469\n            },\n            \"projects\": [],\n            \"certifications\": [],\n            \"languages\": [\n                \"English\"\n            ],\n            \"bio\": \"Non alias repudiandae necessitatibus atque assumenda. Quam eos exercitationem voluptate cupiditate.\",\n            \"co"}, {"index": 258, "path": "ML/recommendation.json", "chunk": "ndae necessitatibus atque assumenda. Quam eos exercitationem voluptate cupiditate.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2022-11-08T21:38:45\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f55e0\",\n            \"email\": \"lparmar@example.org\",\n            \"fullName\": \"Omaja Garg\",\n            \""}, {"index": 259, "path": "ML/recommendation.json", "chunk": "e0\",\n            \"email\": \"lparmar@example.org\",\n            \"fullName\": \"Omaja Garg\",\n            \"phone\": \"3325540332\",\n            \"password\": \"$2b$12$ArSEKOEAmuFOXZH.Qs6EvOE87jGfxoyspUoC7UEOEbIESDKWGWeqq\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Kubernetes\",\n                \"Agile Methodologies\",\n                \"Azure\",\n                \"Leadership\"\n            ],\n            \"interests\": [\n                \"Cloud Technology\",\n                \"User Experience\",\n  "}, {"index": 260, "path": "ML/recommendation.json", "chunk": "            \"interests\": [\n                \"Cloud Technology\",\n                \"User Experience\",\n                \"Sustainable Technology\",\n                \"Digital Marketing\",\n                \"Internet of Things\",\n                \"Data Science\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIT Madras\",\n                    \"degree\": \"B.Sc\",\n                    \"yearOfGraduation\": 2020\n                }\n            ],\n            \"address\": \"Pune\""}, {"index": 261, "path": "ML/recommendation.json", "chunk": "             \"yearOfGraduation\": 2020\n                }\n            ],\n            \"address\": \"Pune\",\n            \"location\": {\n                \"latitude\": 18.4815966422298,\n                \"longitude\": 73.85804589591825\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Ratione quas illum.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Marathi\",\n"}, {"index": 262, "path": "ML/recommendation.json", "chunk": "         ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Marathi\",\n                \"Hindi\",\n                \"English\"\n            ],\n            \"bio\": \"Eveniet labore exercitationem molestias totam laborum maiores.\\nDebitis ab maiores porro. Odio cum earum nam animi. Nulla aut magnam voluptatum omnis ut unde.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n   "}, {"index": 263, "path": "ML/recommendation.json", "chunk": "equests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2021-02-13T17:31:40\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f551c\",\n            \"email\": \"sawhneybachittar@example.com\",\n            \"fullName\": \"Triya Minhas\",\n            \"phone\": \"+918291158766\",\n            \"password\": \"$2b$12$cEZiKH86mnAJDo0FnL5lwO6btit7CXXwb7C0I5lQAYmlV2o/5bVQG\",\n            \"r"}, {"index": 264, "path": "ML/recommendation.json", "chunk": "          \"password\": \"$2b$12$cEZiKH86mnAJDo0FnL5lwO6btit7CXXwb7C0I5lQAYmlV2o/5bVQG\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"JavaScript\",\n                \"TensorFlow\",\n                \"Cloud Computing\",\n                \"Machine Learning\",\n                \"Negotiation\",\n                \"Business Strategy\"\n            ],\n            \"interests\": [\n                \"Cloud Technology\",\n                \"Sustainable Technology\",\n                \"Internet of Things\",\n      "}, {"index": 265, "path": "ML/recommendation.json", "chunk": " Technology\",\n                \"Sustainable Technology\",\n                \"Internet of Things\",\n                \"Cybersecurity\",\n                \"Data Science\",\n                \"Startups\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"BHU\",\n                    \"degree\": \"B.Tech\",\n                    \"yearOfGraduation\": 2018\n                }\n            ],\n            \"address\": \"Bhopal\",\n            \"location\": {\n                \"latitude\": 23.3567"}, {"index": 266, "path": "ML/recommendation.json", "chunk": "   ],\n            \"address\": \"Bhopal\",\n            \"location\": {\n                \"latitude\": 23.356760026591544,\n                \"longitude\": 77.3316156229354\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Magnam similique pariatur explicabo aspernatur.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Eaque eaque porro adipisci aliquam ducim"}, {"index": 267, "path": "ML/recommendation.json", "chunk": "  \"title\": \"Project 2\",\n                    \"description\": \"Eaque eaque porro adipisci aliquam ducimus.\"\n                }\n            ],\n            \"certifications\": [\n                {\n                    \"name\": \"Certification 1\",\n                    \"issuer\": \"Choudhry Group\"\n                }\n            ],\n            \"languages\": [\n                \"Telugu\",\n                \"Marathi\"\n            ],\n            \"bio\": \"Eveniet ducimus doloremque quas unde quaerat ratione atque. Natus accus"}, {"index": 268, "path": "ML/recommendation.json", "chunk": "      ],\n            \"bio\": \"Eveniet ducimus doloremque quas unde quaerat ratione atque. Natus accusamus deserunt velit eaque labore nesciunt vitae. Laboriosam sapiente sed magni est.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": false,\n            \"notifications\": [],\n            \"createdAt\": \"2021-03-13T23:08:34\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f"}, {"index": 269, "path": "ML/recommendation.json", "chunk": "-03-13T23:08:34\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f55dd\",\n            \"email\": \"krishnaahuja@example.com\",\n            \"fullName\": \"Ekalinga Kaul\",\n            \"phone\": \"+919997076893\",\n            \"password\": \"$2b$12$EwIB4z/E73VXb17p9wCIXulIkM2xcUJ1Yd8uH5iGqDjFqeQtTt80K\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"CI/CD\",\n                \"Natural Language Processing\",\n                \"Python\",\n                \"Node.js\",\n"}, {"index": 270, "path": "ML/recommendation.json", "chunk": "                \"Natural Language Processing\",\n                \"Python\",\n                \"Node.js\",\n                \"Cloud Computing\",\n                \"Design Thinking\"\n            ],\n            \"interests\": [\n                \"Entrepreneurship\",\n                \"Cloud Technology\",\n                \"Internet of Things\",\n                \"Data Science\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Ahmedabad\",\n                    \"degree\": \"M.Tec"}, {"index": 271, "path": "ML/recommendation.json", "chunk": "          {\n                    \"institution\": \"IIM Ahmedabad\",\n                    \"degree\": \"M.Tech\",\n                    \"yearOfGraduation\": 2022\n                }\n            ],\n            \"address\": \"Chandigarh\",\n            \"location\": {\n                \"latitude\": 30.756707257887864,\n                \"longitude\": 76.82864220083584\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Ab temporibus ea asperi"}, {"index": 272, "path": "ML/recommendation.json", "chunk": "                   \"title\": \"Project 1\",\n                    \"description\": \"Ab temporibus ea asperiores numquam quod.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Voluptatibus exercitationem laudantium impedit cum corporis deleniti.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Bengali\",\n                \"Tamil\",\n                \"Telugu\"\n            ],\n        "}, {"index": 273, "path": "ML/recommendation.json", "chunk": "                \"Bengali\",\n                \"Tamil\",\n                \"Telugu\"\n            ],\n            \"bio\": \"Recusandae veniam nam voluptatum molestias unde eius. Voluptatem modi doloribus fugiat eos reprehenderit. Illum optio doloremque esse tempora accusamus deserunt.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2022-09-30T18:1"}, {"index": 274, "path": "ML/recommendation.json", "chunk": "GeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2022-09-30T18:13:21\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f576e\",\n            \"email\": \"godanitara@example.net\",\n            \"fullName\": \"Manthan Mahal\",\n            \"phone\": \"03908167246\",\n            \"password\": \"$2b$12$SnnFZtQptKfdyMwYR02C.uHGFGFYgrVXWAZiSwB3PkLc4JYllyUki\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Azure\",\n               "}, {"index": 275, "path": "ML/recommendation.json", "chunk": "lyUki\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Azure\",\n                \"MongoDB\",\n                \"Cloud Computing\",\n                \"Negotiation\",\n                \"Public Speaking\"\n            ],\n            \"interests\": [\n                \"Robotics\",\n                \"Internet of Things\",\n                \"Technology\",\n                \"Startups\",\n                \"Digital Marketing\"\n            ],\n            \"education\": [\n                {\n                    \"insti"}, {"index": 276, "path": "ML/recommendation.json", "chunk": "al Marketing\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIT Roorkee\",\n                    \"degree\": \"B.Sc\",\n                    \"yearOfGraduation\": 2019\n                }\n            ],\n            \"address\": \"Pune\",\n            \"location\": {\n                \"latitude\": 18.48864080063386,\n                \"longitude\": 73.86211163566261\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n        "}, {"index": 277, "path": "ML/recommendation.json", "chunk": "   },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Ipsum dolores dolores est dolor.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Corporis enim fugit repudiandae dignissimos.\"\n                },\n                {\n                    \"title\": \"Project 3\",\n                    \"description\": \"Eaque magni natus odit saepe distinctio.\"\n                }\n  "}, {"index": 278, "path": "ML/recommendation.json", "chunk": ",\n                    \"description\": \"Eaque magni natus odit saepe distinctio.\"\n                }\n            ],\n            \"certifications\": [\n                {\n                    \"name\": \"Certification 1\",\n                    \"issuer\": \"Basu-Loke\"\n                },\n                {\n                    \"name\": \"Certification 2\",\n                    \"issuer\": \"Majumdar LLC\"\n                }\n            ],\n            \"languages\": [\n                \"Telugu\",\n                \"Gujarati\",\n     "}, {"index": 279, "path": "ML/recommendation.json", "chunk": "           ],\n            \"languages\": [\n                \"Telugu\",\n                \"Gujarati\",\n                \"Tamil\"\n            ],\n            \"bio\": \"Repellendus dolorem molestias maiores consequuntur nulla aliquid. Maxime totam eos modi delectus sed aut. Culpa quas ex ratione totam tempore. Sequi repudiandae fuga delectus.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notif"}, {"index": 280, "path": "ML/recommendation.json", "chunk": "           \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2021-09-24T12:45:41\",\n            \"__v\": 0\n        }\n    ],\n    \"location_recommendations\": [\n        {\n            \"_id\": \"67536d3bb786652f7a5f542c\",\n            \"email\": \"jhalakcomar@example.net\",\n            \"fullName\": \"Vansha Sami\",\n            \"phone\": \"0211521478\",\n            \"password\": \"$2b$12$X6PgzhEoTOLtkQYv6rlRZOnkKk2oFdKS83Hd1ytrlaGEdHcT/81t.\""}, {"index": 281, "path": "ML/recommendation.json", "chunk": "\"0211521478\",\n            \"password\": \"$2b$12$X6PgzhEoTOLtkQYv6rlRZOnkKk2oFdKS83Hd1ytrlaGEdHcT/81t.\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Azure\",\n                \"Kubernetes\",\n                \"CI/CD\",\n                \"Project Management\",\n                \"Marketing\",\n                \"Financial Analysis\"\n            ],\n            \"interests\": [\n                \"Machine Learning\",\n                \"Innovation\",\n                \"Mobile App Development\",\n            "}, {"index": 282, "path": "ML/recommendation.json", "chunk": "hine Learning\",\n                \"Innovation\",\n                \"Mobile App Development\",\n                \"Robotics\",\n                \"User Experience\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIT Delhi\",\n                    \"degree\": \"B.Tech\",\n                    \"yearOfGraduation\": 2010\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 23.099589914997154,\n              "}, {"index": 283, "path": "ML/recommendation.json", "chunk": "Ahmedabad\",\n            \"location\": {\n                \"latitude\": 23.099589914997154,\n                \"longitude\": 72.50113194630248\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Vitae odit fugiat sequi placeat deleniti.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Ducimus quod delectus perferendis magnam.\"\n                }\n           "}, {"index": 284, "path": "ML/recommendation.json", "chunk": "            \"description\": \"Ducimus quod delectus perferendis magnam.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Telugu\",\n                \"Marathi\",\n                \"Gujarati\"\n            ],\n            \"bio\": \"Quaerat occaecati sequi. Unde maiores labore impedit minus rem.\\nDicta ullam omnis ex aliquid voluptatibus explicabo. Eum officia aspernatur animi nesciunt impedit.\",\n            \"connections\": [],\n            \"receivedR"}, {"index": 285, "path": "ML/recommendation.json", "chunk": "m officia aspernatur animi nesciunt impedit.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2024-05-06T08:16:27\",\n            \"__v\": 0,\n            \"distance\": 2.7888578753833975\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f542d\",\n            \"email\": \"upma76@example.net\",\n            \"fullName\": \"Tanveer Loyal\",\n     "}, {"index": 286, "path": "ML/recommendation.json", "chunk": "7a5f542d\",\n            \"email\": \"upma76@example.net\",\n            \"fullName\": \"Tanveer Loyal\",\n            \"phone\": \"08204718531\",\n            \"password\": \"$2b$12$IQRt2tjQ2Zt7UkFXYGU46OKQOU1BOHoeACz4Ld/daLXwdqPagwiSm\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Docker\",\n                \"Kubernetes\",\n                \"Azure\",\n                \"Financial Analysis\"\n            ],\n            \"interests\": [\n                \"Cybersecurity\",\n                \"Open Source\",\n     "}, {"index": 287, "path": "ML/recommendation.json", "chunk": " ],\n            \"interests\": [\n                \"Cybersecurity\",\n                \"Open Source\",\n                \"Technology\",\n                \"Quantum Computing\",\n                \"Startups\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIT Bombay\",\n                    \"degree\": \"MS\",\n                    \"yearOfGraduation\": 2010\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\""}, {"index": 288, "path": "ML/recommendation.json", "chunk": "         ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 23.00393819675621,\n                \"longitude\": 72.60138974731326\n            },\n            \"projects\": [],\n            \"certifications\": [],\n            \"languages\": [\n                \"Marathi\"\n            ],\n            \"bio\": \"Accusantium facilis nemo vel saepe. Voluptatum accusantium assumenda totam officia illum accusantium aliquam. Animi iusto facere et eum minus. Voluptate culpa omnis ve"}, {"index": 289, "path": "ML/recommendation.json", "chunk": "a totam officia illum accusantium aliquam. Animi iusto facere et eum minus. Voluptate culpa omnis veritatis voluptatum tenetur.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2023-11-02T18:55:33\",\n            \"__v\": 0,\n            \"distance\": 16.663395225149067\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f543e\",\n      "}, {"index": 290, "path": "ML/recommendation.json", "chunk": "ance\": 16.663395225149067\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f543e\",\n            \"email\": \"george59@example.org\",\n            \"fullName\": \"Alexander Shroff\",\n            \"phone\": \"+913862531949\",\n            \"password\": \"$2b$12$NyXXMEuuy3FabLHnylfkUOVOH0YCi4mWVSZJv/QPK1mqHoN/eIvLO\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Natural Language Processing\",\n                \"Deep Learning\",\n                \"Azure\",\n                \"Cloud Computing\","}, {"index": 291, "path": "ML/recommendation.json", "chunk": "ssing\",\n                \"Deep Learning\",\n                \"Azure\",\n                \"Cloud Computing\",\n                \"Python\",\n                \"Financial Analysis\",\n                \"Research\",\n                \"Communication\"\n            ],\n            \"interests\": [\n                \"Technology\",\n                \"Quantum Computing\",\n                \"Robotics\",\n                \"Innovation\",\n                \"Startups\"\n            ],\n            \"education\": [\n                {\n                    \""}, {"index": 292, "path": "ML/recommendation.json", "chunk": "        \"Startups\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Ahmedabad\",\n                    \"degree\": \"M.Sc\",\n                    \"yearOfGraduation\": 2012\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 22.95220309278593,\n                \"longitude\": 72.49051091594204\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project "}, {"index": 293, "path": "ML/recommendation.json", "chunk": "04\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Ratione perferendis repellat dignissimos ad commodi nobis.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Assumenda vitae fugit iure.\"\n                },\n                {\n                    \"title\": \"Project 3\",\n                    \"description\": \"Odit quo necessitatibus ex ipsam ducimus."}, {"index": 294, "path": "ML/recommendation.json", "chunk": " \"title\": \"Project 3\",\n                    \"description\": \"Odit quo necessitatibus ex ipsam ducimus.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"English\",\n                \"Gujarati\",\n                \"Hindi\"\n            ],\n            \"bio\": \"Quaerat odio dicta nihil accusantium a.\\nTotam aperiam quae officia magni ex totam. Delectus maiores beatae laboriosam temporibus non eum cupiditate. Dolores numquam blanditiis delectus offi"}, {"index": 295, "path": "ML/recommendation.json", "chunk": "us maiores beatae laboriosam temporibus non eum cupiditate. Dolores numquam blanditiis delectus officia aut.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2022-04-21T09:52:21\",\n            \"__v\": 0,\n            \"distance\": 16.220400293625428\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f5454\",\n            \"email\": \"som"}, {"index": 296, "path": "ML/recommendation.json", "chunk": "625428\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f5454\",\n            \"email\": \"somanbhavya@example.com\",\n            \"fullName\": \"Pooja Chaudhari\",\n            \"phone\": \"+915765472849\",\n            \"password\": \"$2b$12$C/qImSYc/RU9xGU4Wcu6AOaya4WMZXQZS53rODRX/3KlN1oHbn7am\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Big Data\",\n                \"React\",\n                \"Sales\"\n            ],\n            \"interests\": [\n                \"Digital Marketing\",\n"}, {"index": 297, "path": "ML/recommendation.json", "chunk": "             \"Sales\"\n            ],\n            \"interests\": [\n                \"Digital Marketing\",\n                \"Artificial Intelligence\",\n                \"Entrepreneurship\",\n                \"Cloud Technology\",\n                \"Startups\",\n                \"Technology\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Ahmedabad\",\n                    \"degree\": \"MS\",\n                    \"yearOfGraduation\": 2018\n                }\n            ],\n  "}, {"index": 298, "path": "ML/recommendation.json", "chunk": "    \"degree\": \"MS\",\n                    \"yearOfGraduation\": 2018\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 23.043630765908713,\n                \"longitude\": 72.48085701739296\n            },\n            \"projects\": [],\n            \"certifications\": [],\n            \"languages\": [\n                \"English\",\n                \"Tamil\",\n                \"Marathi\"\n            ],\n            \"bio\": \"Cum nobis quas nesciunt non."}, {"index": 299, "path": "ML/recommendation.json", "chunk": "  \"Tamil\",\n                \"Marathi\"\n            ],\n            \"bio\": \"Cum nobis quas nesciunt non. Nam maxime quis necessitatibus earum. Laborum facere fugit accusantium aspernatur.\\nLabore nam beatae temporibus cupiditate. Laudantium facilis voluptatibus sint quisquam.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": false,\n            \"notifications\": [],\n            \"createdAt\": \"2021-12-16T04:2"}, {"index": 300, "path": "ML/recommendation.json", "chunk": "eneratedPassword\": false,\n            \"notifications\": [],\n            \"createdAt\": \"2021-12-16T04:27:12\",\n            \"__v\": 0,\n            \"distance\": 6.006985585727489\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f5478\",\n            \"email\": \"balendradani@example.net\",\n            \"fullName\": \"Kritika Dewan\",\n            \"phone\": \"3408258317\",\n            \"password\": \"$2b$12$r1HK4zNLUG50FL..SMORjurHMS5cBV7Xk01pd51jjyyM4OxT1ZDKe\",\n            \"role\": \"user\",\n            \"skills\""}, {"index": 301, "path": "ML/recommendation.json", "chunk": "4zNLUG50FL..SMORjurHMS5cBV7Xk01pd51jjyyM4OxT1ZDKe\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Agile Methodologies\",\n                \"Cloud Computing\",\n                \"TensorFlow\",\n                \"SQL\",\n                \"Design Thinking\",\n                \"Project Management\",\n                \"Negotiation\"\n            ],\n            \"interests\": [\n                \"Robotics\",\n                \"Cloud Technology\",\n                \"Sustainable Technology\",\n                \"S"}, {"index": 302, "path": "ML/recommendation.json", "chunk": "s\",\n                \"Cloud Technology\",\n                \"Sustainable Technology\",\n                \"Startups\",\n                \"User Experience\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Bangalore\",\n                    \"degree\": \"M.Tech\",\n                    \"yearOfGraduation\": 2016\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 22.988786285826972,\n                "}, {"index": 303, "path": "ML/recommendation.json", "chunk": "medabad\",\n            \"location\": {\n                \"latitude\": 22.988786285826972,\n                \"longitude\": 72.61156450599621\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Reiciendis cum provident facilis assumenda.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Telugu\"\n            ],\n            \"bio\": \"Est autem iure ea minima. Beatae "}, {"index": 304, "path": "ML/recommendation.json", "chunk": "es\": [\n                \"Telugu\"\n            ],\n            \"bio\": \"Est autem iure ea minima. Beatae officiis totam ut dolores. Illum corrupti quam enim.\\nAccusamus eius laudantium maxime sapiente porro cumque.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2020-08-25T20:03:29\",\n            \"__v\": 0,\n            \"distance\": 18.53996152"}, {"index": 305, "path": "ML/recommendation.json", "chunk": "       \"createdAt\": \"2020-08-25T20:03:29\",\n            \"__v\": 0,\n            \"distance\": 18.539961525377265\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f547c\",\n            \"email\": \"lakshmimunshi@example.net\",\n            \"fullName\": \"Amaira Naik\",\n            \"phone\": \"+911920722009\",\n            \"password\": \"$2b$12$VK7GXfJ7/PNLgOQSqa7xeeDdspzXhWzPMPekWSAUMGFvjbw/9An.6\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Node.js\",\n                \"TensorFlow\",\n"}, {"index": 306, "path": "ML/recommendation.json", "chunk": "   \"role\": \"user\",\n            \"skills\": [\n                \"Node.js\",\n                \"TensorFlow\",\n                \"Blockchain\",\n                \"Strategic Planning\"\n            ],\n            \"interests\": [\n                \"Artificial Intelligence\",\n                \"Cloud Technology\",\n                \"Data Science\",\n                \"Quantum Computing\",\n                \"Blockchain\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"BITS Pilani\",\n    "}, {"index": 307, "path": "ML/recommendation.json", "chunk": "\n            \"education\": [\n                {\n                    \"institution\": \"BITS Pilani\",\n                    \"degree\": \"MCA\",\n                    \"yearOfGraduation\": 2014\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 23.08523076393445,\n                \"longitude\": 72.667270577505\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\":"}, {"index": 308, "path": "ML/recommendation.json", "chunk": "s\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Aut ex cumque facilis neque quas at.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Quaerat rerum porro nam.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Hindi\",\n                \"English\",\n                \"Tamil\"\n            ],\n            \"bio\": \"Accusantium ve"}, {"index": 309, "path": "ML/recommendation.json", "chunk": "                \"English\",\n                \"Tamil\"\n            ],\n            \"bio\": \"Accusantium vel quam accusamus odio minus. Reprehenderit tempore tempora quae. Officia neque eligendi.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": false,\n            \"notifications\": [],\n            \"createdAt\": \"2021-06-20T06:48:58\",\n            \"__v\": 0,\n            \"distance\": 19.816198301603073\n        },\n "}, {"index": 310, "path": "ML/recommendation.json", "chunk": "\"2021-06-20T06:48:58\",\n            \"__v\": 0,\n            \"distance\": 19.816198301603073\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f5480\",\n            \"email\": \"gayathrichaudhry@example.com\",\n            \"fullName\": \"Zansi Bansal\",\n            \"phone\": \"05304682214\",\n            \"password\": \"$2b$12$rbETSlj3bai06Gu9sfk4m.xsDxK5Jex72SD9ZZRhkBoaGignyqaB6\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"MongoDB\",\n                \"React\",\n                \"Agile "}, {"index": 311, "path": "ML/recommendation.json", "chunk": "\n            \"skills\": [\n                \"MongoDB\",\n                \"React\",\n                \"Agile Methodologies\",\n                \"SQL\",\n                \"Sales\"\n            ],\n            \"interests\": [\n                \"Sustainable Technology\",\n                \"Mobile App Development\",\n                \"Blockchain\",\n                \"Digital Marketing\",\n                \"Coding\",\n                \"Data Science\"\n            ],\n            \"education\": [\n                {\n                    \"instit"}, {"index": 312, "path": "ML/recommendation.json", "chunk": "ata Science\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIT Bombay\",\n                    \"degree\": \"B.Tech\",\n                    \"yearOfGraduation\": 2010\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 22.946024734788438,\n                \"longitude\": 72.47176612728605\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n  "}, {"index": 313, "path": "ML/recommendation.json", "chunk": "         },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Delectus aliquam odio excepturi repellendus dignissimos minima.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Quis molestiae quibusdam fugit iusto explicabo.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Tamil\"\n            ],\n    "}, {"index": 314, "path": "ML/recommendation.json", "chunk": "        \"certifications\": [],\n            \"languages\": [\n                \"Tamil\"\n            ],\n            \"bio\": \"Ipsam dolorem asperiores dolorum. Harum soluta facilis minus vel incidunt.\\nEaque aut inventore deserunt molestias.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2024-08-10T19:31:18\",\n            \"__v\": 0,\n            \""}, {"index": 315, "path": "ML/recommendation.json", "chunk": "ifications\": [],\n            \"createdAt\": \"2024-08-10T19:31:18\",\n            \"__v\": 0,\n            \"distance\": 16.820479653901305\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f5482\",\n            \"email\": \"umang68@example.com\",\n            \"fullName\": \"Harita Bose\",\n            \"phone\": \"+910716797608\",\n            \"password\": \"$2b$12$zbIG/Ic2Ez0SNaVpWlEaMOY45NcOt17A3xfvd050ymLsnudWgAxwO\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"AWS\",\n                \"C"}, {"index": 316, "path": "ML/recommendation.json", "chunk": "AxwO\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"AWS\",\n                \"Cybersecurity\",\n                \"Agile Methodologies\",\n                \"TensorFlow\",\n                \"Big Data\",\n                \"Business Strategy\",\n                \"Project Management\"\n            ],\n            \"interests\": [\n                \"Innovation\",\n                \"Digital Marketing\",\n                \"Artificial Intelligence\",\n                \"Open Source\"\n            ],\n            \"educ"}, {"index": 317, "path": "ML/recommendation.json", "chunk": "           \"Artificial Intelligence\",\n                \"Open Source\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIT Delhi\",\n                    \"degree\": \"M.Sc\",\n                    \"yearOfGraduation\": 2010\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 23.026732125559782,\n                \"longitude\": 72.54554955183637\n            },\n            \"projects\": [\n          "}, {"index": 318, "path": "ML/recommendation.json", "chunk": ",\n                \"longitude\": 72.54554955183637\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Magni ipsa necessitatibus et odit earum delectus distinctio.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Quis eligendi doloribus dicta aliquam fugiat.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\""}, {"index": 319, "path": "ML/recommendation.json", "chunk": " fugiat.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"Telugu\",\n                \"Marathi\",\n                \"Hindi\"\n            ],\n            \"bio\": \"Debitis facere ad explicabo iusto repellat. Voluptatem distinctio facilis quisquam sapiente sequi labore. Rem maxime eveniet id qui libero officiis.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGenerated"}, {"index": 320, "path": "ML/recommendation.json", "chunk": "          \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": true,\n            \"notifications\": [],\n            \"createdAt\": \"2024-03-19T02:38:10\",\n            \"__v\": 0,\n            \"distance\": 10.730886213720195\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f5485\",\n            \"email\": \"hardik06@example.com\",\n            \"fullName\": \"Neha Subramanian\",\n            \"phone\": \"6931204108\",\n            \"password\": \"$2b$12$Ajr1cetdUoKq8"}, {"index": 321, "path": "ML/recommendation.json", "chunk": "\"Neha Subramanian\",\n            \"phone\": \"6931204108\",\n            \"password\": \"$2b$12$Ajr1cetdUoKq8NTWeLC2/eyPdiHrY3Nf6Y/rPQmvwxqnR0SNAnlIu\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Deep Learning\",\n                \"Machine Learning\",\n                \"MongoDB\",\n                \"Cloud Computing\",\n                \"Data Analysis\",\n                \"Leadership\"\n            ],\n            \"interests\": [\n                \"Innovation\",\n                \"Blockchain\",\n          "}, {"index": 322, "path": "ML/recommendation.json", "chunk": "],\n            \"interests\": [\n                \"Innovation\",\n                \"Blockchain\",\n                \"Quantum Computing\",\n                \"Data Science\",\n                \"Open Source\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Bangalore\",\n                    \"degree\": \"B.Tech\",\n                    \"yearOfGraduation\": 2011\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"la"}, {"index": 323, "path": "ML/recommendation.json", "chunk": "  }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 22.9793585411691,\n                \"longitude\": 72.56950570413868\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Provident dicta corporis distinctio.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Dolor eveniet aperiam.\"\n            "}, {"index": 324, "path": "ML/recommendation.json", "chunk": "      \"title\": \"Project 2\",\n                    \"description\": \"Dolor eveniet aperiam.\"\n                },\n                {\n                    \"title\": \"Project 3\",\n                    \"description\": \"Ratione eius non.\"\n                }\n            ],\n            \"certifications\": [\n                {\n                    \"name\": \"Certification 1\",\n                    \"issuer\": \"Patel-Master\"\n                },\n                {\n                    \"name\": \"Certification 2\",\n                   "}, {"index": 325, "path": "ML/recommendation.json", "chunk": "             },\n                {\n                    \"name\": \"Certification 2\",\n                    \"issuer\": \"Kant-Rege\"\n                }\n            ],\n            \"languages\": [\n                \"Tamil\"\n            ],\n            \"bio\": \"Dolore aut alias quibusdam adipisci. Labore temporibus nesciunt qui nam iste. Molestias laboriosam repudiandae minus voluptatem sapiente eligendi.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n          "}, {"index": 326, "path": "ML/recommendation.json", "chunk": "   \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": false,\n            \"notifications\": [],\n            \"createdAt\": \"2024-07-09T01:46:21\",\n            \"__v\": 0,\n            \"distance\": 16.35480845450943\n        },\n        {\n            \"_id\": \"67536d3bb786652f7a5f549c\",\n            \"email\": \"dalajaagrawal@example.net\",\n            \"fullName\": \"Lajita Bhasin\",\n            \"phone\": \"07952198268\",\n            \"passw"}, {"index": 327, "path": "ML/recommendation.json", "chunk": "et\",\n            \"fullName\": \"Lajita Bhasin\",\n            \"phone\": \"07952198268\",\n            \"password\": \"$2b$12$f/3S9jag69nvuhzK9FlAz.lVQE4W37nhU1nqo5IGqvHNUf/jbDcZy\",\n            \"role\": \"user\",\n            \"skills\": [\n                \"Node.js\",\n                \"Python\",\n                \"Cloud Computing\",\n                \"Research\",\n                \"Strategic Planning\"\n            ],\n            \"interests\": [\n                \"Coding\",\n                \"Robotics\",\n                \"Internet of "}, {"index": 328, "path": "ML/recommendation.json", "chunk": "  \"interests\": [\n                \"Coding\",\n                \"Robotics\",\n                \"Internet of Things\",\n                \"Mobile App Development\",\n                \"Technology\",\n                \"Sustainable Technology\"\n            ],\n            \"education\": [\n                {\n                    \"institution\": \"IIM Calcutta\",\n                    \"degree\": \"B.Tech\",\n                    \"yearOfGraduation\": 2023\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \""}, {"index": 329, "path": "ML/recommendation.json", "chunk": "Graduation\": 2023\n                }\n            ],\n            \"address\": \"Ahmedabad\",\n            \"location\": {\n                \"latitude\": 23.05111260456741,\n                \"longitude\": 72.61270601435928\n            },\n            \"projects\": [\n                {\n                    \"title\": \"Project 1\",\n                    \"description\": \"Nulla saepe reprehenderit illo rem quam non.\"\n                },\n                {\n                    \"title\": \"Project 2\",\n                    \"descriptio"}, {"index": 330, "path": "ML/recommendation.json", "chunk": "      },\n                {\n                    \"title\": \"Project 2\",\n                    \"description\": \"Officiis ipsam accusamus fuga soluta.\"\n                }\n            ],\n            \"certifications\": [],\n            \"languages\": [\n                \"English\"\n            ],\n            \"bio\": \"Error incidunt id assumenda ratione. Quod dolore iusto totam magnam error eveniet. Nam modi itaque nobis nisi nesciunt.\\nLabore sit est deserunt quo unde nesciunt.\",\n            \"connections\": [],\n    "}, {"index": 331, "path": "ML/recommendation.json", "chunk": "bis nisi nesciunt.\\nLabore sit est deserunt quo unde nesciunt.\",\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"isUniversityGeneratedPassword\": false,\n            \"notifications\": [],\n            \"createdAt\": \"2023-02-15T07:19:24\",\n            \"__v\": 0,\n            \"distance\": 15.091459894222488\n        }\n    ],\n    \"profession_recommendations\": [\n        {\n            \"_id\": \"6751b29f59d2a733ed0aa64c\",\n            \"fullName\": \"Cha"}, {"index": 332, "path": "ML/recommendation.json", "chunk": "mendations\": [\n        {\n            \"_id\": \"6751b29f59d2a733ed0aa64c\",\n            \"fullName\": \"Chahat\",\n            \"email\": \"chahat@example.com\",\n            \"password\": \"$2b$10$QB1YIjsgyWpnb3mLOftDTenZ3IDnUeRcc01oyhU.iQRvJHnUBzkbS\",\n            \"role\": \"user\",\n            \"isUniversityGeneratedPassword\": true,\n            \"phone\": \"+1234567890\",\n            \"address\": \"123 Main St, City, Country\",\n            \"education\": [\n                {\n                    \"degree\": \"Bachelor of Technol"}, {"index": 333, "path": "ML/recommendation.json", "chunk": "ry\",\n            \"education\": [\n                {\n                    \"degree\": \"Bachelor of Technology\",\n                    \"institution\": \"Tech University\",\n                    \"yearOfGraduation\": 2022,\n                    \"_id\": \"6751b29f59d2a733ed0aa64d\"\n                }\n            ],\n            \"workExperience\": [],\n            \"skills\": [\n                \"JavaScript\",\n                \"React\",\n                \"Node.js\"\n            ],\n            \"projects\": [],\n            \"certificatio"}, {"index": 334, "path": "ML/recommendation.json", "chunk": "act\",\n                \"Node.js\"\n            ],\n            \"projects\": [],\n            \"certifications\": [],\n            \"languages\": [\n                \"English\",\n                \"Spanish\"\n            ],\n            \"connections\": [],\n            \"receivedRequests\": [\n                {\n                    \"_id\": \"6751b32c59d2a733ed0aa650\",\n                    \"fullName\": \"Ruchir\",\n                    \"bio\": \"Backend developer passionate about scalable systems\",\n                    \"profilePhoto\""}, {"index": 335, "path": "ML/recommendation.json", "chunk": "    \"bio\": \"Backend developer passionate about scalable systems\",\n                    \"profilePhoto\": null\n                },\n                {\n                    \"_id\": \"6751a1b6b33f8e9cea50d2c0\",\n                    \"fullName\": \"John Doe\",\n                    \"bio\": \"Full-stack developer with 3 years of experience\",\n                    \"profilePhoto\": null\n                }\n            ],\n            \"sentRequests\": [],\n            \"notifications\": [\n                \"Ruchir sent you a connect"}, {"index": 336, "path": "ML/recommendation.json", "chunk": "       \"sentRequests\": [],\n            \"notifications\": [\n                \"Ruchir sent you a connection request\",\n                \"John Doe sent you a connection request\"\n            ],\n            \"bio\": \"Full-stack developer with 3 years of experience\",\n            \"interests\": [\n                \"Web Development\",\n                \"AI\",\n                \"Machine Learning\"\n            ],\n            \"createdAt\": \"2024-12-05T12:51:02.744\",\n            \"__v\": 0\n        },\n        {\n            \"_id"}, {"index": 337, "path": "ML/recommendation.json", "chunk": "  \"createdAt\": \"2024-12-05T12:51:02.744\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"6751a1b6b33f8e9cea50d2c0\",\n            \"fullName\": \"John Doe\",\n            \"email\": \"john.doe@example.com\",\n            \"password\": \"$2b$10$Dm/8wC7VtjZIRqNn2huvpeydm66NrEpwXF6AGedeSf26lwfgsLlXK\",\n            \"role\": \"user\",\n            \"isUniversityGeneratedPassword\": true,\n            \"phone\": \"+1234567890\",\n            \"address\": \"123 Main St, City, Country\",\n            \"education\": [\n     "}, {"index": 338, "path": "ML/recommendation.json", "chunk": "\"+1234567890\",\n            \"address\": \"123 Main St, City, Country\",\n            \"education\": [\n                {\n                    \"degree\": \"Bachelor of Technology\",\n                    \"institution\": \"Tech University\",\n                    \"yearOfGraduation\": 2022,\n                    \"_id\": \"6751a1b6b33f8e9cea50d2c1\"\n                }\n            ],\n            \"skills\": [\n                \"JavaScript\",\n                \"React\",\n                \"Node.js\"\n            ],\n            \"languages\":"}, {"index": 339, "path": "ML/recommendation.json", "chunk": "aScript\",\n                \"React\",\n                \"Node.js\"\n            ],\n            \"languages\": [\n                \"English\",\n                \"Spanish\"\n            ],\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [\n                \"6751b34b59d2a733ed0aa658\",\n                \"6751b29f59d2a733ed0aa64c\",\n                \"6751b37759d2a733ed0aa664\",\n                \"6751b38e59d2a733ed0aa66c\"\n            ],\n            \"notifications\": [\n           "}, {"index": 340, "path": "ML/recommendation.json", "chunk": "                \"6751b38e59d2a733ed0aa66c\"\n            ],\n            \"notifications\": [\n                \"Ruchir sent you a connection request\"\n            ],\n            \"bio\": \"Full-stack developer with 3 years of experience\",\n            \"interests\": [\n                \"Web Development\",\n                \"AI\",\n                \"Machine Learning\"\n            ],\n            \"workExperience\": [],\n            \"projects\": [],\n            \"certifications\": [],\n            \"createdAt\": \"2024-12-05T12:5"}, {"index": 341, "path": "ML/recommendation.json", "chunk": "         \"projects\": [],\n            \"certifications\": [],\n            \"createdAt\": \"2024-12-05T12:51:02.744\",\n            \"__v\": 0\n        },\n        {\n            \"_id\": \"6751b36359d2a733ed0aa660\",\n            \"fullName\": \"Mayank\",\n            \"email\": \"mayank@example.com\",\n            \"password\": \"$2b$10$T4hzSqikjqzhWukxtdyJt.xl4BiIBgecNwh8YipHCtIEsI87cZ9QC\",\n            \"role\": \"user\",\n            \"isUniversityGeneratedPassword\": true,\n            \"phone\": \"+1234567895\",\n            \"address"}, {"index": 342, "path": "ML/recommendation.json", "chunk": "     \"isUniversityGeneratedPassword\": true,\n            \"phone\": \"+1234567895\",\n            \"address\": \"303 Birch St, City, Country\",\n            \"education\": [\n                {\n                    \"degree\": \"Bachelor of Computer Science\",\n                    \"institution\": \"National Computer Academy\",\n                    \"yearOfGraduation\": 2022,\n                    \"_id\": \"6751b36359d2a733ed0aa661\"\n                }\n            ],\n            \"workExperience\": [],\n            \"skills\": [\n    "}, {"index": 343, "path": "ML/recommendation.json", "chunk": "661\"\n                }\n            ],\n            \"workExperience\": [],\n            \"skills\": [\n                \"Java\",\n                \"Spring Boot\",\n                \"Hibernate\"\n            ],\n            \"projects\": [],\n            \"certifications\": [],\n            \"languages\": [\n                \"English\",\n                \"Punjabi\"\n            ],\n            \"connections\": [],\n            \"receivedRequests\": [],\n            \"sentRequests\": [],\n            \"notifications\": [],\n            \"bio\""}, {"index": 344, "path": "ML/recommendation.json", "chunk": "vedRequests\": [],\n            \"sentRequests\": [],\n            \"notifications\": [],\n            \"bio\": \"Java developer focused on enterprise applications\",\n            \"interests\": [\n                \"Software Development\",\n                \"Microservices\"\n            ],\n            \"createdAt\": \"2024-12-05T12:56:02.744\",\n            \"__v\": 0,\n            \"chats\": [\n                {\n                    \"chatId\": \"6753522bc49cc0a5f89cab1d\",\n                    \"otherParticipant\": \"ruchir@example.co"}, {"index": 345, "path": "ML/recommendation.json", "chunk": "    \"chatId\": \"6753522bc49cc0a5f89cab1d\",\n                    \"otherParticipant\": \"ruchir@example.com\",\n                    \"_id\": \"6753522bc49cc0a5f89cab1f\"\n                }\n            ]\n        }\n    ]\n}"}, {"index": 346, "path": "ML/recommendation/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 347, "path": "ML/recommendation/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass RecommendationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'recommendation'\n"}, {"index": 348, "path": "ML/recommendation/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 349, "path": "ML/recommendation/recommendation_engines.py", "chunk": "from django.views.decorators.http import require_POST\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nimport json\nfrom pymongo import MongoClient\nfrom bson import ObjectId\nimport json\nfrom pymongo import MongoClient\nfrom bson import ObjectId, json_util\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom gensim.models import Word2Vec\nimport networkx as nx\nimport random\n"}, {"index": 350, "path": "ML/recommendation/recommendation_engines.py", "chunk": "ise import cosine_similarity\nfrom gensim.models import Word2Vec\nimport networkx as nx\nimport random\nfrom scipy.spatial.distance import pdist, squareform\nfrom bson import json_util\nimport json\nfrom geopy.geocoders import Nominatim\n\nclass ProfessionalNetworkRecommender:\n            def __init__(self, users_collection, current_user):\n                self.users_collection = users_collection\n                self.current_user = current_user\n            \n            def _hashable_representation(self, o"}, {"index": 351, "path": "ML/recommendation/recommendation_engines.py", "chunk": "      self.current_user = current_user\n            \n            def _hashable_representation(self, obj):\n                \"\"\"\n                Convert complex objects to hashable representations\n                \n                Args:\n                    obj: Input object (can be dict, list, or primitive)\n                \n                Returns:\n                    Hashable representation of the object\n                \"\"\"\n                if isinstance(obj, dict):\n                    # Convert dict"}, {"index": 352, "path": "ML/recommendation/recommendation_engines.py", "chunk": "ect\n                \"\"\"\n                if isinstance(obj, dict):\n                    # Convert dict to a sorted tuple of (key, hashable_value) pairs\n                    return tuple(\n                        (k, self._hashable_representation(v)) \n                        for k, v in sorted(obj.items())\n                    )\n                elif isinstance(obj, list):\n                    # Convert list to a tuple of hashable representations\n                    return tuple(self._hashable_represent"}, {"index": 353, "path": "ML/recommendation/recommendation_engines.py", "chunk": "ist to a tuple of hashable representations\n                    return tuple(self._hashable_representation(item) for item in obj)\n                elif isinstance(obj, (str, int, float, bool, type(None))):\n                    # Primitive types are already hashable\n                    return obj\n                else:\n                    # For any other type, convert to string\n                    return str(obj)\n            \n            def compute_professional_distance(self, user1, user2):\n        "}, {"index": 354, "path": "ML/recommendation/recommendation_engines.py", "chunk": "rn str(obj)\n            \n            def compute_professional_distance(self, user1, user2):\n                \"\"\"\n                Compute professional distance between two users\n                \n                Args:\n                    user1, user2: User dictionaries\n                \n                Returns:\n                    Float representing professional similarity\n                \"\"\"\n                distance_features = [\n                    'role', 'skills', 'workExperience', 'education'\n  "}, {"index": 355, "path": "ML/recommendation/recommendation_engines.py", "chunk": "        distance_features = [\n                    'role', 'skills', 'workExperience', 'education'\n                ]\n                \n                total_features = len(distance_features)\n                matched_features = 0\n                \n                for feature in distance_features:\n                    # Convert to hashable representations\n                    user1_feature = set(\n                        self._hashable_representation(x) \n                        for x in user1.get(feature"}, {"index": 356, "path": "ML/recommendation/recommendation_engines.py", "chunk": "                self._hashable_representation(x) \n                        for x in user1.get(feature, [])\n                    )\n                    user2_feature = set(\n                        self._hashable_representation(x) \n                        for x in user2.get(feature, [])\n                    )\n                    \n                    if feature == 'role':\n                        # Exact role match\n                        matched_features += 1 if user1.get(feature) == user2.get(feature)"}, {"index": 357, "path": "ML/recommendation/recommendation_engines.py", "chunk": "role match\n                        matched_features += 1 if user1.get(feature) == user2.get(feature) else 0\n                    else:\n                        # Compute feature overlap\n                        common_elements = len(user1_feature & user2_feature)\n                        matched_features += common_elements / max(\n                            len(user1_feature), \n                            len(user2_feature), \n                            1\n                        )\n                \n "}, {"index": 358, "path": "ML/recommendation/recommendation_engines.py", "chunk": "     len(user2_feature), \n                            1\n                        )\n                \n                return matched_features / total_features\n            \n            def probabilistic_professional_network(self, similar_profession_users):\n                \"\"\"\n                Create probabilistic professional network\n                \n                Args:\n                    similar_profession_users: List of user dictionaries\n                \n                Returns:\n                "}, {"index": 359, "path": "ML/recommendation/recommendation_engines.py", "chunk": "ofession_users: List of user dictionaries\n                \n                Returns:\n                    List of recommended users\n                \"\"\"\n                import numpy as np\n                \n                # Ensure we have enough users\n                if len(similar_profession_users) < 2:\n                    return similar_profession_users\n                \n                # Create similarity matrix\n                similarity_matrix = np.zeros((len(similar_profession_users), len(simil"}, {"index": 360, "path": "ML/recommendation/recommendation_engines.py", "chunk": "larity matrix\n                similarity_matrix = np.zeros((len(similar_profession_users), len(similar_profession_users)))\n                \n                for i, user1 in enumerate(similar_profession_users):\n                    for j, user2 in enumerate(similar_profession_users):\n                        if i != j:\n                            similarity_matrix[i, j] = self.compute_professional_distance(user1, user2)\n                \n                # Normalize similarity matrix\n                r"}, {"index": 361, "path": "ML/recommendation/recommendation_engines.py", "chunk": "tance(user1, user2)\n                \n                # Normalize similarity matrix\n                row_sums = similarity_matrix.sum(axis=1)\n                # Avoid division by zero\n                row_sums[row_sums == 0] = 1\n                random_walk_matrix = similarity_matrix / row_sums[:, np.newaxis]\n                \n                # Random walk recommendation\n                initial_prob = np.ones(len(similar_profession_users)) / len(similar_profession_users)\n                num_walks = mi"}, {"index": 362, "path": "ML/recommendation/recommendation_engines.py", "chunk": "p.ones(len(similar_profession_users)) / len(similar_profession_users)\n                num_walks = min(10, len(similar_profession_users))\n                \n                recommendations = []\n                for _ in range(num_walks):\n                    current_prob = initial_prob.copy()\n                    for _ in range(5):  # Walk 5 steps\n                        current_prob = current_prob @ random_walk_matrix\n                    \n                    # Get top recommendations from this walk\n "}, {"index": 363, "path": "ML/recommendation/recommendation_engines.py", "chunk": "ndom_walk_matrix\n                    \n                    # Get top recommendations from this walk\n                    top_indices = current_prob.argsort()[::-1][:3]\n                    recommendations.extend([similar_profession_users[idx] for idx in top_indices])\n                \n                # Remove duplicates while preserving order\n                unique_recommendations = []\n                seen = set()\n                for user in recommendations:\n                    user_id = self._hasha"}, {"index": 364, "path": "ML/recommendation/recommendation_engines.py", "chunk": " seen = set()\n                for user in recommendations:\n                    user_id = self._hashable_representation(user.get('_id', {}))\n                    if user_id not in seen:\n                        seen.add(user_id)\n                        unique_recommendations.append(user)\n                \n                return unique_recommendations[:10]\n            \n            def recommend(self, limit=10):\n                \"\"\"\n                Main recommendation method\n                \n          "}, {"index": 365, "path": "ML/recommendation/recommendation_engines.py", "chunk": "imit=10):\n                \"\"\"\n                Main recommendation method\n                \n                Args:\n                    limit: Maximum number of recommendations\n                \n                Returns:\n                    List of recommended users\n                \"\"\"\n                # Find users in the same professional domain\n                similar_profession_users = list(self.users_collection.find({\n                    '_id': {'$ne': self.current_user['_id']},\n                   "}, {"index": 366, "path": "ML/recommendation/recommendation_engines.py", "chunk": "_collection.find({\n                    '_id': {'$ne': self.current_user['_id']},\n                    'role': self.current_user['role']\n                }))\n                \n                if len(similar_profession_users) <= 5:\n                    # Simple sorting if few users\n                    similar_profession_users.sort(\n                        key=lambda x: len(\n                            set(self._hashable_representation(skill) \n                                for skill in x.get('skills'"}, {"index": 367, "path": "ML/recommendation/recommendation_engines.py", "chunk": "et(self._hashable_representation(skill) \n                                for skill in x.get('skills', []))\n                            & \n                            set(self._hashable_representation(skill) \n                                for skill in self.current_user.get('skills', []))\n                        ),\n                        reverse=True\n                    )\n                    recommendations = similar_profession_users[:limit]\n                else:\n                    # Advanced "}, {"index": 368, "path": "ML/recommendation/recommendation_engines.py", "chunk": "mmendations = similar_profession_users[:limit]\n                else:\n                    # Advanced probabilistic professional network recommendation\n                    recommendations = self.probabilistic_professional_network(\n                        similar_profession_users\n                    )\n                \n                return recommendations\n\nimport math\ndef haversine_distance(loc1, loc2):\n            \"\"\"\n            Calculate great circle distance between two geographic points\n     "}, {"index": 369, "path": "ML/recommendation/recommendation_engines.py", "chunk": "c2):\n            \"\"\"\n            Calculate great circle distance between two geographic points\n            \n            Args:\n                loc1 (dict): First location with latitude and longitude\n                loc2 (dict): Second location with latitude and longitude\n            \n            Returns:\n                float: Distance in kilometers\n            \"\"\"\n            # Radius of the Earth in kilometers\n            R = 6371.0\n            \n            def safe_get_coordinate(location, coo"}, {"index": 370, "path": "ML/recommendation/recommendation_engines.py", "chunk": " in kilometers\n            R = 6371.0\n            \n            def safe_get_coordinate(location, coord_type):\n                \"\"\"\n                Safely extract coordinate value\n                \n                Args:\n                    location (dict): Location dictionary\n                    coord_type (str): 'latitude' or 'longitude'\n                \n                Returns:\n                    float: Coordinate value\n                \"\"\"\n                # Try multiple potential key formats\n   "}, {"index": 371, "path": "ML/recommendation/recommendation_engines.py", "chunk": "float: Coordinate value\n                \"\"\"\n                # Try multiple potential key formats\n                possible_keys = [\n                    coord_type, \n                    coord_type.lower(), \n                    f'{coord_type}Coordinate', \n                    f'{coord_type}_coordinate',\n                    f'{coord_type}_coords'\n                ]\n                \n                for key in possible_keys:\n                    if key in location and isinstance(location[key], (int, floa"}, {"index": 372, "path": "ML/recommendation/recommendation_engines.py", "chunk": "ey in possible_keys:\n                    if key in location and isinstance(location[key], (int, float)):\n                        return float(location[key])\n                \n                # If no valid coordinate found\n                raise ValueError(f\"Could not find valid {coord_type} coordinate\")\n            \n            try:\n                # Extract coordinates with flexible parsing\n                lat1 = safe_get_coordinate(loc1, 'latitude')\n                lon1 = safe_get_coordinate(loc"}, {"index": 373, "path": "ML/recommendation/recommendation_engines.py", "chunk": "         lat1 = safe_get_coordinate(loc1, 'latitude')\n                lon1 = safe_get_coordinate(loc1, 'longitude')\n                lat2 = safe_get_coordinate(loc2, 'latitude')\n                lon2 = safe_get_coordinate(loc2, 'longitude')\n                \n                # Convert to radians\n                phi1 = math.radians(lat1)\n                phi2 = math.radians(lat2)\n                \n                delta_phi = math.radians(lat2 - lat1)\n                delta_lambda = math.radians(lon2 - l"}, {"index": 374, "path": "ML/recommendation/recommendation_engines.py", "chunk": "          delta_phi = math.radians(lat2 - lat1)\n                delta_lambda = math.radians(lon2 - lon1)\n                \n                # Haversine formula\n                a = (math.sin(delta_phi / 2) ** 2 +\n                    math.cos(phi1) * math.cos(phi2) *\n                    math.sin(delta_lambda / 2) ** 2)\n                \n                c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n                \n                # Calculate the distance\n                distance = R * c\n        "}, {"index": 375, "path": "ML/recommendation/recommendation_engines.py", "chunk": "\n                \n                # Calculate the distance\n                distance = R * c\n                \n                return distance\n            \n            except (ValueError, TypeError) as e:\n                # Provide detailed error information\n                print(f\"Location distance calculation error: {e}\")\n                print(f\"Location 1: {loc1}\")\n                print(f\"Location 2: {loc2}\")\n                raise ValueError(f\"Invalid location data: {e}\")\nclass LocationRecommend"}, {"index": 376, "path": "ML/recommendation/recommendation_engines.py", "chunk": " 2: {loc2}\")\n                raise ValueError(f\"Invalid location data: {e}\")\nclass LocationRecommender:\n            def __init__(self, users_collection, current_user):\n                self.users_collection = users_collection\n                self.current_user = current_user\n            \n            \n\n            def extract_location(self, user):\n                \"\"\"\n                Extract location information, with support for text addresses\n                \"\"\"\n                # Check for existin"}, {"index": 377, "path": "ML/recommendation/recommendation_engines.py", "chunk": "information, with support for text addresses\n                \"\"\"\n                # Check for existing coordinate keys first\n                location_keys = [\n                    'location', \n                    'address', \n                    'geo', \n                    'coordinates', \n                    'position'\n                ]\n                \n                for key in location_keys:\n                    if key in user:\n                        location = user[key]\n                        "}, {"index": 378, "path": "ML/recommendation/recommendation_engines.py", "chunk": "               if key in user:\n                        location = user[key]\n                        \n                        # If it's already a dict with coordinates, use existing method\n                        if isinstance(location, dict):\n                            coordinate_keys = [\n                                ['latitude', 'longitude'],\n                                ['lat', 'lon'],\n                                ['lat', 'lng'],\n                                ['coords', 'latitude',"}, {"index": 379, "path": "ML/recommendation/recommendation_engines.py", "chunk": "                              ['lat', 'lng'],\n                                ['coords', 'latitude', 'longitude']\n                            ]\n                            \n                            for key_set in coordinate_keys:\n                                try:\n                                    return {\n                                        'latitude': float(location[key_set[0]]),\n                                        'longitude': float(location[key_set[1]])\n                       "}, {"index": 380, "path": "ML/recommendation/recommendation_engines.py", "chunk": "                                    'longitude': float(location[key_set[1]])\n                                    }\n                                except (KeyError, ValueError, TypeError):\n                                    continue\n                        \n                        # If it's a string address, try geocoding\n                        elif isinstance(location, str):\n                            geolocator = Nominatim(user_agent=\"location_recommender\")\n                            try:\n"}, {"index": 381, "path": "ML/recommendation/recommendation_engines.py", "chunk": "         geolocator = Nominatim(user_agent=\"location_recommender\")\n                            try:\n                                geocode_result = geolocator.geocode(location)\n                                if geocode_result:\n                                    return {\n                                        'latitude': geocode_result.latitude,\n                                        'longitude': geocode_result.longitude\n                                    }\n                            excep"}, {"index": 382, "path": "ML/recommendation/recommendation_engines.py", "chunk": "e': geocode_result.longitude\n                                    }\n                            except Exception:\n                                continue\n                \n                # If no location found\n                raise ValueError(f\"No valid location found for user: {user.get('email', 'Unknown')}\")\n            \n            def recommend_location_network(self, similar_location_users, limit=10):\n                \"\"\"\n                Advanced location network recommendation\n              "}, {"index": 383, "path": "ML/recommendation/recommendation_engines.py", "chunk": "mit=10):\n                \"\"\"\n                Advanced location network recommendation\n                \n                Args:\n                    similar_location_users (list): Users in similar location\n                    limit (int): Maximum number of recommendations\n                \n                Returns:\n                    list: Recommended users\n                \"\"\"\n                import networkx as nx\n                import numpy as np\n                \n                # Create graph of l"}, {"index": 384, "path": "ML/recommendation/recommendation_engines.py", "chunk": "tworkx as nx\n                import numpy as np\n                \n                # Create graph of location network\n                G = nx.Graph()\n                \n                # Add users as nodes\n                for user in similar_location_users:\n                    G.add_node(user['_id'])\n                \n                # Connect users based on proximity\n                for i, u1 in enumerate(similar_location_users):\n                    for j, u2 in enumerate(similar_location_users[i+1:]"}, {"index": 385, "path": "ML/recommendation/recommendation_engines.py", "chunk": "ate(similar_location_users):\n                    for j, u2 in enumerate(similar_location_users[i+1:], start=i+1):\n                        try:\n                            # Calculate distance between users\n                            distance = haversine_distance(\n                                self.extract_location(u1), \n                                self.extract_location(u2)\n                            )\n                            \n                            # Add edge if within proximity"}, {"index": 386, "path": "ML/recommendation/recommendation_engines.py", "chunk": "           )\n                            \n                            # Add edge if within proximity (e.g., 50 km)\n                            if distance <= 50:\n                                G.add_edge(u1['_id'], u2['_id'], weight=1/distance)\n                        except ValueError:\n                            # Skip if location extraction fails\n                            continue\n                \n                # Use network centrality for recommendations\n                try:\n           "}, {"index": 387, "path": "ML/recommendation/recommendation_engines.py", "chunk": "      \n                # Use network centrality for recommendations\n                try:\n                    centrality = nx.eigenvector_centrality(G)\n                    \n                    # Sort users by network centrality\n                    ranked_users = sorted(\n                        similar_location_users, \n                        key=lambda x: centrality.get(x['_id'], 0), \n                        reverse=True\n                    )\n                    \n                    return ranked"}, {"index": 388, "path": "ML/recommendation/recommendation_engines.py", "chunk": "           reverse=True\n                    )\n                    \n                    return ranked_users[:limit]\n                \n                except nx.PowerIterationFailedConvergence:\n                    # Fallback to simple sorting if eigenvector centrality fails\n                    return similar_location_users[:limit]\n            \n            def recommend(self, limit=10):\n                \"\"\"\n                Main location recommendation method\n                \n                Args:\n   "}, {"index": 389, "path": "ML/recommendation/recommendation_engines.py", "chunk": "  \"\"\"\n                Main location recommendation method\n                \n                Args:\n                    limit (int): Maximum number of recommendations\n                \n                Returns:\n                    list: Recommended users\n                \"\"\"\n                try:\n                    # Extract current user's location\n                    current_user_location = self.extract_location(self.current_user)\n                    \n                    # Find similar location users"}, {"index": 390, "path": "ML/recommendation/recommendation_engines.py", "chunk": "t_location(self.current_user)\n                    \n                    # Find similar location users\n                    similar_location_users = []\n                    all_users = list(self.users_collection.find({\n                        '_id': {'$ne': self.current_user['_id']}\n                    }))\n                    \n                    # Filter users with valid locations\n                    for user in all_users:\n                        try:\n                            user_location = sel"}, {"index": 391, "path": "ML/recommendation/recommendation_engines.py", "chunk": " for user in all_users:\n                        try:\n                            user_location = self.extract_location(user)\n                            distance = haversine_distance(current_user_location, user_location)\n                            \n                            # Add users within 100 km\n                            if distance <= 100:\n                                user['distance'] = distance\n                                similar_location_users.append(user)\n                    "}, {"index": 392, "path": "ML/recommendation/recommendation_engines.py", "chunk": " = distance\n                                similar_location_users.append(user)\n                        except ValueError:\n                            # Skip users without valid location\n                            continue\n                    \n                    # Sort by distance if few users\n                    if len(similar_location_users) <= 5:\n                        similar_location_users.sort(key=lambda x: x.get('distance', float('inf')))\n                        recommendations = simil"}, {"index": 393, "path": "ML/recommendation/recommendation_engines.py", "chunk": ".sort(key=lambda x: x.get('distance', float('inf')))\n                        recommendations = similar_location_users[:limit]\n                    else:\n                        # Use advanced network recommendation\n                        recommendations = self.recommend_location_network(\n                            similar_location_users, \n                            limit\n                        )\n                    \n                    return recommendations\n                \n                e"}, {"index": 394, "path": "ML/recommendation/recommendation_engines.py", "chunk": ")\n                    \n                    return recommendations\n                \n                except Exception as e:\n                    print(f\"Location recommendation error: {e}\")\n                    raise\n\nclass AdvancedInterestRecommender:\n            def __init__(self, users_collection, current_user):\n                self.users_collection = users_collection\n                self.current_user = current_user\n            \n            def preprocess_interests(self, interests):\n             "}, {"index": 395, "path": "ML/recommendation/recommendation_engines.py", "chunk": "ser = current_user\n            \n            def preprocess_interests(self, interests):\n                # Advanced interest preprocessing using Word2Vec\n                model = Word2Vec([interests], vector_size=100, window=5, min_count=1, workers=4)\n                return model.wv\n            \n            def graph_based_interest_similarity(self, users):\n                # Create a graph-based recommendation using NetworkX\n                G = nx.Graph()\n                \n                # Add users"}, {"index": 396, "path": "ML/recommendation/recommendation_engines.py", "chunk": "mendation using NetworkX\n                G = nx.Graph()\n                \n                # Add users as nodes\n                for user in users:\n                    G.add_node(user['_id'], interests=user.get('interests', []))\n                \n                # Connect users with similar interests\n                for u1 in users:\n                    for u2 in users:\n                        if u1['_id'] != u2['_id']:\n                            similarity = len(set(u1.get('interests', [])) & set(u"}, {"index": 397, "path": "ML/recommendation/recommendation_engines.py", "chunk": "id'] != u2['_id']:\n                            similarity = len(set(u1.get('interests', [])) & set(u2.get('interests', [])))\n                            if similarity > 0:\n                                G.add_edge(u1['_id'], u2['_id'], weight=similarity)\n                \n                # Use PageRank to determine importance\n                pagerank = nx.pagerank(G)\n                return pagerank\n            \n            def recommend(self, limit=10):\n                # Get users with at least "}, {"index": 398, "path": "ML/recommendation/recommendation_engines.py", "chunk": "k\n            \n            def recommend(self, limit=10):\n                # Get users with at least one common interest\n                all_users = list(self.users_collection.find({\n                    '_id': {'$ne': self.current_user['_id']},\n                    'interests': {'$exists': True, '$ne': []}\n                }))\n                \n                # Filter users with at least one common interest\n                similar_interest_users = [\n                    user for user in all_users \n "}, {"index": 399, "path": "ML/recommendation/recommendation_engines.py", "chunk": "nterest\n                similar_interest_users = [\n                    user for user in all_users \n                    if set(user.get('interests', [])) & set(self.current_user.get('interests', []))\n                ]\n                \n                if len(similar_interest_users) <= 5:\n                    # If few similar users, use graph-based recommendation\n                    pagerank_scores = self.graph_based_interest_similarity(similar_interest_users)\n                    recommendations = s"}, {"index": 400, "path": "ML/recommendation/recommendation_engines.py", "chunk": "self.graph_based_interest_similarity(similar_interest_users)\n                    recommendations = sorted(\n                        similar_interest_users, \n                        key=lambda x: pagerank_scores.get(x['_id'], 0), \n                        reverse=True\n                    )[:limit]\n                else:\n                    # For many similar users, use advanced vectorization\n                    vectorizer = TfidfVectorizer()\n                    interest_matrix = vectorizer.fit_trans"}, {"index": 401, "path": "ML/recommendation/recommendation_engines.py", "chunk": "           vectorizer = TfidfVectorizer()\n                    interest_matrix = vectorizer.fit_transform([\n                        ' '.join(user.get('interests', [])) for user in similar_interest_users\n                    ])\n                    \n                    current_user_interests = vectorizer.transform([\n                        ' '.join(self.current_user.get('interests', []))\n                    ])\n                    \n                    # Compute cosine similarity and get top recommend"}, {"index": 402, "path": "ML/recommendation/recommendation_engines.py", "chunk": "       ])\n                    \n                    # Compute cosine similarity and get top recommendations\n                    similarity_scores = cosine_similarity(current_user_interests, interest_matrix)[0]\n                    top_indices = np.argsort(similarity_scores)[::-1][:limit]\n                    recommendations = [similar_interest_users[i] for i in top_indices]\n                \n                return recommendations\nclient = MongoClient('mongodb+srv://IPL_AUCTION_24:IPLAuction2024DontG"}, {"index": 403, "path": "ML/recommendation/recommendation_engines.py", "chunk": "       return recommendations\nclient = MongoClient('mongodb+srv://IPL_AUCTION_24:IPLAuction2024DontGuessAlsoUseVim@cluster0.ilknu4v.mongodb.net/SIH')\ndb = client['SIH']\nusers_collection = db['users2']\nclass UserRecommendationEngine:\n            def __init__(self, current_user):\n                self.current_user = current_user\n                self.users_collection = users_collection\n            \n            def calculate_recommendation_score(self, candidate_user):\n                score = 0\n      "}, {"index": 404, "path": "ML/recommendation/recommendation_engines.py", "chunk": "          def calculate_recommendation_score(self, candidate_user):\n                score = 0\n                weights = {\n                    'interests': 0.25,\n                    'skills': 0.20,\n                    'education': 0.15,\n                    'location': 0.15,\n                    'career_stage': 0.15,\n                    'network_proximity': 0.10\n                }\n                \n                # Interests Matching\n                shared_interests = len(set(self.current_user.get('"}, {"index": 405, "path": "ML/recommendation/recommendation_engines.py", "chunk": "             # Interests Matching\n                shared_interests = len(set(self.current_user.get('interests', [])) & \n                                       set(candidate_user.get('interests', [])))\n                interest_score = (shared_interests / max(len(self.current_user.get('interests', [])), \n                                                         len(candidate_user.get('interests', [])), 1)) * 100\n                \n                # Skills Overlap\n                shared_skills = len(s"}, {"index": 406, "path": "ML/recommendation/recommendation_engines.py", "chunk": "), 1)) * 100\n                \n                # Skills Overlap\n                shared_skills = len(set(self.current_user.get('skills', [])) & \n                                     set(candidate_user.get('skills', [])))\n                skills_score = (shared_skills / max(len(self.current_user.get('skills', [])), \n                                                    len(candidate_user.get('skills', [])), 1)) * 100\n                \n                # Education Similarity\n                education_sco"}, {"index": 407, "path": "ML/recommendation/recommendation_engines.py", "chunk": "])), 1)) * 100\n                \n                # Education Similarity\n                education_score = 0\n                if self.current_user.get('education') and candidate_user.get('education'):\n                    current_edu = self.current_user['education'][0]\n                    candidate_edu = candidate_user['education'][0]\n                    \n                    if (current_edu.get('institution') == candidate_edu.get('institution')) or \\\n                       abs(current_edu.get('yearO"}, {"index": 408, "path": "ML/recommendation/recommendation_engines.py", "chunk": "tution') == candidate_edu.get('institution')) or \\\n                       abs(current_edu.get('yearOfGraduation', 0) - candidate_edu.get('yearOfGraduation', 0)) <= 2:\n                        education_score = 100\n                \n                # Location Score (simplified)\n                location_score = 0\n                if self.current_user.get('address') and candidate_user.get('address'):\n                    if self.current_user['address'] == candidate_user['address']:\n                    "}, {"index": 409, "path": "ML/recommendation/recommendation_engines.py", "chunk": "                  if self.current_user['address'] == candidate_user['address']:\n                        location_score = 100\n                \n                # Career Stage Alignment\n                career_score = 0\n                current_exp_len = len(self.current_user.get('workExperience', []))\n                candidate_exp_len = len(candidate_user.get('workExperience', []))\n                \n                if abs(current_exp_len - candidate_exp_len) <= 1:\n                    career_score = 1"}, {"index": 410, "path": "ML/recommendation/recommendation_engines.py", "chunk": "              if abs(current_exp_len - candidate_exp_len) <= 1:\n                    career_score = 100\n                \n                # Network Proximity\n                network_score = 0\n                mutual_connections = len(set(self.current_user.get('connections', [])) & \n                                         set(candidate_user.get('connections', [])))\n                network_score = min(mutual_connections * 20, 100)\n                \n                # Weighted total score\n             "}, {"index": 411, "path": "ML/recommendation/recommendation_engines.py", "chunk": "(mutual_connections * 20, 100)\n                \n                # Weighted total score\n                total_score = (\n                    weights['interests'] * interest_score +\n                    weights['skills'] * skills_score +\n                    weights['education'] * education_score +\n                    weights['location'] * location_score +\n                    weights['career_stage'] * career_score +\n                    weights['network_proximity'] * network_score\n                )\n  "}, {"index": 412, "path": "ML/recommendation/recommendation_engines.py", "chunk": "career_score +\n                    weights['network_proximity'] * network_score\n                )\n                \n                return total_score\n            \n            def get_recommendations(self, limit=10):\n                # Exclude current user and existing connections\n                excluded_ids = set(self.current_user.get('connections', []) + \n                                   [self.current_user['_id']])\n                \n                # Find potential candidates (same role)\n     "}, {"index": 413, "path": "ML/recommendation/recommendation_engines.py", "chunk": "current_user['_id']])\n                \n                # Find potential candidates (same role)\n                candidates = self.users_collection.find({\n                    '_id': {'$nin': list(excluded_ids)},\n                    'role': self.current_user['role']\n                })\n                \n                \n                # Score and rank candidates\n                candidate_scores = []\n                for candidate in candidates:\n                    score = self.calculate_recommendatio"}, {"index": 414, "path": "ML/recommendation/recommendation_engines.py", "chunk": "               for candidate in candidates:\n                    score = self.calculate_recommendation_score(candidate)\n                    candidate_scores.append({\n                        'user': candidate,\n                        'score': score\n                    })\n                \n                # Sort by recommendation score\n                sorted_recommendations = sorted(\n                    candidate_scores, \n                    key=lambda x: x['score'], \n                    reverse=Tru"}, {"index": 415, "path": "ML/recommendation/recommendation_engines.py", "chunk": "   candidate_scores, \n                    key=lambda x: x['score'], \n                    reverse=True\n                )\n                \n                # Return top recommendations\n                return [rec['user'] for rec in sorted_recommendations[:limit]]"}, {"index": 416, "path": "ML/recommendation/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 417, "path": "ML/recommendation/urls.py", "chunk": "from django.urls import path\nfrom .views import get_user_recommendations,recommend_by_interests,recommend_by_location,recommend_by_profession,get_comprehensive_recommendations\n\nurlpatterns = [\n   path('recommendations/', get_user_recommendations, name='user_recommendations'),\n   path('recommend_by_interests/', recommend_by_interests, name='recommend_by_interests'),\n   path('recommend_by_location/', recommend_by_location, name='recommend_by_location'),\n   path('recommend_by_profession/', recommen"}, {"index": 418, "path": "ML/recommendation/urls.py", "chunk": ", recommend_by_location, name='recommend_by_location'),\n   path('recommend_by_profession/', recommend_by_profession, name='recommend_by_profession'),\n   path('get_comprehensive_recommendations/', get_comprehensive_recommendations, name='get_comprehensive_recommendations')\n]"}, {"index": 419, "path": "ML/recommendation/views.py", "chunk": "from django.views.decorators.http import require_POST\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nimport json\nfrom pymongo import MongoClient\nfrom bson import ObjectId\nimport json\nfrom pymongo import MongoClient\nfrom bson import ObjectId, json_util\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom gensim.models import Word2Vec\nimport networkx as nx\nimport random\n"}, {"index": 420, "path": "ML/recommendation/views.py", "chunk": "ise import cosine_similarity\nfrom gensim.models import Word2Vec\nimport networkx as nx\nimport random\nfrom scipy.spatial.distance import pdist, squareform\nfrom bson import json_util\nimport json\nfrom geopy.geocoders import Nominatim\nimport os\nfrom dotenv import load_dotenv\nload_dotenv()\n@csrf_exempt\n@require_POST\ndef get_user_recommendations(request):\n    try:\n        print(request.body)\n        # Parse JSON body using json_util to handle MongoDB-specific types\n        body = json.loads(request.bod"}, {"index": 421, "path": "ML/recommendation/views.py", "chunk": "rse JSON body using json_util to handle MongoDB-specific types\n        body = json.loads(request.body, object_hook=json_util.object_hook)\n        print(\"body is:\",body)\n        email = body.get('email')\n        print(\"Email is:\",email)\n        if not email:\n            return JsonResponse({\n                'error': 'Email is required'\n            }, status=400)\n        \n        # MongoDB Connection\n        mongo_url = os.getenv(\"MONGO_URL\")\n\n# Create MongoClient with the URL from the environment"}, {"index": 422, "path": "ML/recommendation/views.py", "chunk": "n\n        mongo_url = os.getenv(\"MONGO_URL\")\n\n# Create MongoClient with the URL from the environment\n        client = MongoClient(mongo_url) \n        db = client['SIH']\n        users_collection = db['users2']\n        \n        # Find user by email\n        current_user = users_collection.find_one({\"email\": email})\n        print(\"current_user is:\",current_user)       \n        if not current_user:\n            return JsonResponse({\n                'error': 'User not found'\n            }, status=404)\n"}, {"index": 423, "path": "ML/recommendation/views.py", "chunk": "         return JsonResponse({\n                'error': 'User not found'\n            }, status=404)\n        \n        if not current_user:\n            return JsonResponse({\n                'error': 'User not found'\n            }, status=404)\n        \n        # Recommendation Engine\n        class UserRecommendationEngine:\n            def __init__(self, current_user):\n                self.current_user = current_user\n                self.users_collection = users_collection\n            \n            d"}, {"index": 424, "path": "ML/recommendation/views.py", "chunk": "r = current_user\n                self.users_collection = users_collection\n            \n            def calculate_recommendation_score(self, candidate_user):\n                score = 0\n                weights = {\n                    'interests': 0.25,\n                    'skills': 0.20,\n                    'education': 0.15,\n                    'location': 0.15,\n                    'career_stage': 0.15,\n                    'network_proximity': 0.10\n                }\n                \n              "}, {"index": 425, "path": "ML/recommendation/views.py", "chunk": ".15,\n                    'network_proximity': 0.10\n                }\n                \n                # Interests Matching\n                shared_interests = len(set(self.current_user.get('interests', [])) & \n                                       set(candidate_user.get('interests', [])))\n                interest_score = (shared_interests / max(len(self.current_user.get('interests', [])), \n                                                         len(candidate_user.get('interests', [])), 1)) * 10"}, {"index": 426, "path": "ML/recommendation/views.py", "chunk": "                                                  len(candidate_user.get('interests', [])), 1)) * 100\n                \n                # Skills Overlap\n                shared_skills = len(set(self.current_user.get('skills', [])) & \n                                     set(candidate_user.get('skills', [])))\n                skills_score = (shared_skills / max(len(self.current_user.get('skills', [])), \n                                                    len(candidate_user.get('skills', [])), 1)) * "}, {"index": 427, "path": "ML/recommendation/views.py", "chunk": ", \n                                                    len(candidate_user.get('skills', [])), 1)) * 100\n                \n                # Education Similarity\n                education_score = 0\n                if self.current_user.get('education') and candidate_user.get('education'):\n                    current_edu = self.current_user['education'][0]\n                    candidate_edu = candidate_user['education'][0]\n                    \n                    if (current_edu.get('institution') =="}, {"index": 428, "path": "ML/recommendation/views.py", "chunk": "_user['education'][0]\n                    \n                    if (current_edu.get('institution') == candidate_edu.get('institution')) or \\\n                       abs(current_edu.get('yearOfGraduation', 0) - candidate_edu.get('yearOfGraduation', 0)) <= 2:\n                        education_score = 100\n                \n                # Location Score (simplified)\n                location_score = 0\n                if self.current_user.get('address') and candidate_user.get('address'):\n             "}, {"index": 429, "path": "ML/recommendation/views.py", "chunk": "                if self.current_user.get('address') and candidate_user.get('address'):\n                    if self.current_user['address'] == candidate_user['address']:\n                        location_score = 100\n                \n                # Career Stage Alignment\n                career_score = 0\n                current_exp_len = len(self.current_user.get('workExperience', []))\n                candidate_exp_len = len(candidate_user.get('workExperience', []))\n                \n             "}, {"index": 430, "path": "ML/recommendation/views.py", "chunk": "    candidate_exp_len = len(candidate_user.get('workExperience', []))\n                \n                if abs(current_exp_len - candidate_exp_len) <= 1:\n                    career_score = 100\n                \n                # Network Proximity\n                network_score = 0\n                mutual_connections = len(set(self.current_user.get('connections', [])) & \n                                         set(candidate_user.get('connections', [])))\n                network_score = min(mutual_con"}, {"index": 431, "path": "ML/recommendation/views.py", "chunk": "          set(candidate_user.get('connections', [])))\n                network_score = min(mutual_connections * 20, 100)\n                \n                # Weighted total score\n                total_score = (\n                    weights['interests'] * interest_score +\n                    weights['skills'] * skills_score +\n                    weights['education'] * education_score +\n                    weights['location'] * location_score +\n                    weights['career_stage'] * career_scor"}, {"index": 432, "path": "ML/recommendation/views.py", "chunk": "    weights['location'] * location_score +\n                    weights['career_stage'] * career_score +\n                    weights['network_proximity'] * network_score\n                )\n                \n                return total_score\n            \n            def get_recommendations(self, limit=10):\n                # Exclude current user and existing connections\n                excluded_ids = set(self.current_user.get('connections', []) + \n                                   [self.current_use"}, {"index": 433, "path": "ML/recommendation/views.py", "chunk": "set(self.current_user.get('connections', []) + \n                                   [self.current_user['_id']])\n                \n                # Find potential candidates (same role)\n                candidates = self.users_collection.find({\n                    '_id': {'$nin': list(excluded_ids)},\n                    'role': self.current_user['role']\n                })\n                \n                \n                # Score and rank candidates\n                candidate_scores = []\n            "}, {"index": 434, "path": "ML/recommendation/views.py", "chunk": "     \n                # Score and rank candidates\n                candidate_scores = []\n                for candidate in candidates:\n                    score = self.calculate_recommendation_score(candidate)\n                    candidate_scores.append({\n                        'user': candidate,\n                        'score': score\n                    })\n                \n                # Sort by recommendation score\n                sorted_recommendations = sorted(\n                    candidat"}, {"index": 435, "path": "ML/recommendation/views.py", "chunk": "y recommendation score\n                sorted_recommendations = sorted(\n                    candidate_scores, \n                    key=lambda x: x['score'], \n                    reverse=True\n                )\n                \n                # Return top recommendations\n                return [rec['user'] for rec in sorted_recommendations[:limit]]\n        \n        # Create recommendation engine\n        recommendation_engine = UserRecommendationEngine(current_user)\n        recommendations = recom"}, {"index": 436, "path": "ML/recommendation/views.py", "chunk": "      recommendation_engine = UserRecommendationEngine(current_user)\n        recommendations = recommendation_engine.get_recommendations()\n        \n        # Serialize recommendations\n        serialized_recommendations = []\n\n        def convert_objectid_to_str(obj):\n            if isinstance(obj, ObjectId):\n                return str(obj)\n            elif isinstance(obj, dict):\n                return {k: convert_objectid_to_str(v) for k, v in obj.items()}\n            elif isinstance(obj, list):\n"}, {"index": 437, "path": "ML/recommendation/views.py", "chunk": "urn {k: convert_objectid_to_str(v) for k, v in obj.items()}\n            elif isinstance(obj, list):\n                return [convert_objectid_to_str(item) for item in obj]\n            return obj\n\n        for user in recommendations:\n            user = convert_objectid_to_str(user)\n            serialized_recommendations.append(user)\n            print(\"hello vinayak\")\n        print(serialized_recommendations)\n        return JsonResponse({\n            'recommendations': serialized_recommendations\n  "}, {"index": 438, "path": "ML/recommendation/views.py", "chunk": "ndations)\n        return JsonResponse({\n            'recommendations': serialized_recommendations\n        })\n    \n    except json.JSONDecodeError:\n        return JsonResponse({\n            'error': 'Invalid JSON in request body'\n        }, status=400)\n    \n    except Exception as e:\n        return JsonResponse({\n            'error': str(e)\n        }, status=500)\n    \n@csrf_exempt\n@require_POST\ndef recommend_by_interests(request):\n    try:\n        body = json.loads(request.body, object_hook=json_"}, {"index": 439, "path": "ML/recommendation/views.py", "chunk": " recommend_by_interests(request):\n    try:\n        body = json.loads(request.body, object_hook=json_util.object_hook)\n        email = body.get('email')\n        \n        if not email:\n            return JsonResponse({'error': 'Email is required'}, status=400)\n        \n        mongo_url = os.getenv(\"MONGO_URL\")\n\n# Create MongoClient with the URL from the environment\n        client = MongoClient(mongo_url)\n        db = client['SIH']\n        users_collection = db['users2']\n        \n        current_u"}, {"index": 440, "path": "ML/recommendation/views.py", "chunk": "o_url)\n        db = client['SIH']\n        users_collection = db['users2']\n        \n        current_user = users_collection.find_one({\"email\": email})\n        if not current_user:\n            return JsonResponse({'error': 'User not found'}, status=404)\n        \n        class AdvancedInterestRecommender:\n            def __init__(self, users_collection, current_user):\n                self.users_collection = users_collection\n                self.current_user = current_user\n            \n            d"}, {"index": 441, "path": "ML/recommendation/views.py", "chunk": "ction = users_collection\n                self.current_user = current_user\n            \n            def preprocess_interests(self, interests):\n                # Advanced interest preprocessing using Word2Vec\n                model = Word2Vec([interests], vector_size=100, window=5, min_count=1, workers=4)\n                return model.wv\n            \n            def graph_based_interest_similarity(self, users):\n                # Create a graph-based recommendation using NetworkX\n                G = "}, {"index": 442, "path": "ML/recommendation/views.py", "chunk": "f, users):\n                # Create a graph-based recommendation using NetworkX\n                G = nx.Graph()\n                \n                # Add users as nodes\n                for user in users:\n                    G.add_node(user['_id'], interests=user.get('interests', []))\n                \n                # Connect users with similar interests\n                for u1 in users:\n                    for u2 in users:\n                        if u1['_id'] != u2['_id']:\n                          "}, {"index": 443, "path": "ML/recommendation/views.py", "chunk": "      for u2 in users:\n                        if u1['_id'] != u2['_id']:\n                            similarity = len(set(u1.get('interests', [])) & set(u2.get('interests', [])))\n                            if similarity > 0:\n                                G.add_edge(u1['_id'], u2['_id'], weight=similarity)\n                \n                # Use PageRank to determine importance\n                pagerank = nx.pagerank(G)\n                return pagerank\n            \n            def recommend(self"}, {"index": 444, "path": "ML/recommendation/views.py", "chunk": "agerank = nx.pagerank(G)\n                return pagerank\n            \n            def recommend(self, limit=10):\n                # Get users with at least one common interest\n                all_users = list(self.users_collection.find({\n                    '_id': {'$ne': self.current_user['_id']},\n                    'interests': {'$exists': True, '$ne': []}\n                }))\n                \n                # Filter users with at least one common interest\n                similar_interest_user"}, {"index": 445, "path": "ML/recommendation/views.py", "chunk": "              # Filter users with at least one common interest\n                similar_interest_users = [\n                    user for user in all_users \n                    if set(user.get('interests', [])) & set(self.current_user.get('interests', []))\n                ]\n                \n                if len(similar_interest_users) <= 5:\n                    # If few similar users, use graph-based recommendation\n                    pagerank_scores = self.graph_based_interest_similarity(similar_"}, {"index": 446, "path": "ML/recommendation/views.py", "chunk": "d recommendation\n                    pagerank_scores = self.graph_based_interest_similarity(similar_interest_users)\n                    recommendations = sorted(\n                        similar_interest_users, \n                        key=lambda x: pagerank_scores.get(x['_id'], 0), \n                        reverse=True\n                    )[:limit]\n                else:\n                    # For many similar users, use advanced vectorization\n                    vectorizer = TfidfVectorizer()\n   "}, {"index": 447, "path": "ML/recommendation/views.py", "chunk": "any similar users, use advanced vectorization\n                    vectorizer = TfidfVectorizer()\n                    interest_matrix = vectorizer.fit_transform([\n                        ' '.join(user.get('interests', [])) for user in similar_interest_users\n                    ])\n                    \n                    current_user_interests = vectorizer.transform([\n                        ' '.join(self.current_user.get('interests', []))\n                    ])\n                    \n              "}, {"index": 448, "path": "ML/recommendation/views.py", "chunk": "n(self.current_user.get('interests', []))\n                    ])\n                    \n                    # Compute cosine similarity and get top recommendations\n                    similarity_scores = cosine_similarity(current_user_interests, interest_matrix)[0]\n                    top_indices = np.argsort(similarity_scores)[::-1][:limit]\n                    recommendations = [similar_interest_users[i] for i in top_indices]\n                \n                return recommendations\n        \n      "}, {"index": 449, "path": "ML/recommendation/views.py", "chunk": "ers[i] for i in top_indices]\n                \n                return recommendations\n        \n        recommender = AdvancedInterestRecommender(users_collection, current_user)\n        recommendations = recommender.recommend()\n        \n        # Serialize recommendations (similar to previous method)\n        serialized_recommendations = []\n\n        def convert_objectid_to_str(obj):\n            if isinstance(obj, ObjectId):\n                return str(obj)\n            elif isinstance(obj, dict):\n   "}, {"index": 450, "path": "ML/recommendation/views.py", "chunk": "instance(obj, ObjectId):\n                return str(obj)\n            elif isinstance(obj, dict):\n                return {k: convert_objectid_to_str(v) for k, v in obj.items()}\n            elif isinstance(obj, list):\n                return [convert_objectid_to_str(item) for item in obj]\n            return obj\n\n        for user in recommendations:\n            user = convert_objectid_to_str(user)\n            serialized_recommendations.append(user)\n        \n        return JsonResponse({'recommendati"}, {"index": 451, "path": "ML/recommendation/views.py", "chunk": "         serialized_recommendations.append(user)\n        \n        return JsonResponse({'recommendations': serialized_recommendations})\n    \n    except Exception as e:\n        return JsonResponse({'error': str(e)}, status=500)\n\n@csrf_exempt\n@require_POST\ndef recommend_by_location(request):\n    try:\n        body = json.loads(request.body, object_hook=json_util.object_hook)\n        email = body.get('email')\n        \n        if not email:\n            return JsonResponse({'error': 'Email is required'"}, {"index": 452, "path": "ML/recommendation/views.py", "chunk": "email')\n        \n        if not email:\n            return JsonResponse({'error': 'Email is required'}, status=400)\n        \n        mongo_url = os.getenv(\"MONGO_URL\")\n\n# Create MongoClient with the URL from the environment\n        client = MongoClient(mongo_url)\n        db = client['SIH']\n        users_collection = db['users2']\n        \n        current_user = users_collection.find_one({\"email\": email})\n        if not current_user:\n            return JsonResponse({'error': 'User not found'}, stat"}, {"index": 453, "path": "ML/recommendation/views.py", "chunk": "ail})\n        if not current_user:\n            return JsonResponse({'error': 'User not found'}, status=404)\n        import math\n\n        def haversine_distance(loc1, loc2):\n            \"\"\"\n            Calculate great circle distance between two geographic points\n            \n            Args:\n                loc1 (dict): First location with latitude and longitude\n                loc2 (dict): Second location with latitude and longitude\n            \n            Returns:\n                float: Dist"}, {"index": 454, "path": "ML/recommendation/views.py", "chunk": "d location with latitude and longitude\n            \n            Returns:\n                float: Distance in kilometers\n            \"\"\"\n            # Radius of the Earth in kilometers\n            R = 6371.0\n            \n            def safe_get_coordinate(location, coord_type):\n                \"\"\"\n                Safely extract coordinate value\n                \n                Args:\n                    location (dict): Location dictionary\n                    coord_type (str): 'latitude' or 'longi"}, {"index": 455, "path": "ML/recommendation/views.py", "chunk": "     location (dict): Location dictionary\n                    coord_type (str): 'latitude' or 'longitude'\n                \n                Returns:\n                    float: Coordinate value\n                \"\"\"\n                # Try multiple potential key formats\n                possible_keys = [\n                    coord_type, \n                    coord_type.lower(), \n                    f'{coord_type}Coordinate', \n                    f'{coord_type}_coordinate',\n                    f'{coord_ty"}, {"index": 456, "path": "ML/recommendation/views.py", "chunk": "d_type}Coordinate', \n                    f'{coord_type}_coordinate',\n                    f'{coord_type}_coords'\n                ]\n                \n                for key in possible_keys:\n                    if key in location and isinstance(location[key], (int, float)):\n                        return float(location[key])\n                \n                # If no valid coordinate found\n                raise ValueError(f\"Could not find valid {coord_type} coordinate\")\n            \n            try:"}, {"index": 457, "path": "ML/recommendation/views.py", "chunk": "     raise ValueError(f\"Could not find valid {coord_type} coordinate\")\n            \n            try:\n                # Extract coordinates with flexible parsing\n                lat1 = safe_get_coordinate(loc1, 'latitude')\n                lon1 = safe_get_coordinate(loc1, 'longitude')\n                lat2 = safe_get_coordinate(loc2, 'latitude')\n                lon2 = safe_get_coordinate(loc2, 'longitude')\n                \n                # Convert to radians\n                phi1 = math.radians(lat"}, {"index": 458, "path": "ML/recommendation/views.py", "chunk": "tude')\n                \n                # Convert to radians\n                phi1 = math.radians(lat1)\n                phi2 = math.radians(lat2)\n                \n                delta_phi = math.radians(lat2 - lat1)\n                delta_lambda = math.radians(lon2 - lon1)\n                \n                # Haversine formula\n                a = (math.sin(delta_phi / 2) ** 2 +\n                    math.cos(phi1) * math.cos(phi2) *\n                    math.sin(delta_lambda / 2) ** 2)\n               "}, {"index": 459, "path": "ML/recommendation/views.py", "chunk": "th.cos(phi1) * math.cos(phi2) *\n                    math.sin(delta_lambda / 2) ** 2)\n                \n                c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n                \n                # Calculate the distance\n                distance = R * c\n                \n                return distance\n            \n            except (ValueError, TypeError) as e:\n                # Provide detailed error information\n                print(f\"Location distance calculation error: {e}\")\n         "}, {"index": 460, "path": "ML/recommendation/views.py", "chunk": "ailed error information\n                print(f\"Location distance calculation error: {e}\")\n                print(f\"Location 1: {loc1}\")\n                print(f\"Location 2: {loc2}\")\n                raise ValueError(f\"Invalid location data: {e}\")\n        class LocationRecommender:\n            def __init__(self, users_collection, current_user):\n                self.users_collection = users_collection\n                self.current_user = current_user\n            \n            \n\n            def extract"}, {"index": 461, "path": "ML/recommendation/views.py", "chunk": "\n                self.current_user = current_user\n            \n            \n\n            def extract_location(self, user):\n                \"\"\"\n                Extract location information, with support for text addresses\n                \"\"\"\n                # Check for existing coordinate keys first\n                location_keys = [\n                    'location', \n                    'address', \n                    'geo', \n                    'coordinates', \n                    'position'\n      "}, {"index": 462, "path": "ML/recommendation/views.py", "chunk": "                   'geo', \n                    'coordinates', \n                    'position'\n                ]\n                \n                for key in location_keys:\n                    if key in user:\n                        location = user[key]\n                        \n                        # If it's already a dict with coordinates, use existing method\n                        if isinstance(location, dict):\n                            coordinate_keys = [\n                                ["}, {"index": 463, "path": "ML/recommendation/views.py", "chunk": "e(location, dict):\n                            coordinate_keys = [\n                                ['latitude', 'longitude'],\n                                ['lat', 'lon'],\n                                ['lat', 'lng'],\n                                ['coords', 'latitude', 'longitude']\n                            ]\n                            \n                            for key_set in coordinate_keys:\n                                try:\n                                    return {\n         "}, {"index": 464, "path": "ML/recommendation/views.py", "chunk": "te_keys:\n                                try:\n                                    return {\n                                        'latitude': float(location[key_set[0]]),\n                                        'longitude': float(location[key_set[1]])\n                                    }\n                                except (KeyError, ValueError, TypeError):\n                                    continue\n                        \n                        # If it's a string address, try geocoding"}, {"index": 465, "path": "ML/recommendation/views.py", "chunk": " continue\n                        \n                        # If it's a string address, try geocoding\n                        elif isinstance(location, str):\n                            geolocator = Nominatim(user_agent=\"location_recommender\")\n                            try:\n                                geocode_result = geolocator.geocode(location)\n                                if geocode_result:\n                                    return {\n                                        'latitude'"}, {"index": 466, "path": "ML/recommendation/views.py", "chunk": "ult:\n                                    return {\n                                        'latitude': geocode_result.latitude,\n                                        'longitude': geocode_result.longitude\n                                    }\n                            except Exception:\n                                continue\n                \n                # If no location found\n                raise ValueError(f\"No valid location found for user: {user.get('email', 'Unknown')}\")\n            "}, {"index": 467, "path": "ML/recommendation/views.py", "chunk": "  raise ValueError(f\"No valid location found for user: {user.get('email', 'Unknown')}\")\n            \n            def recommend_location_network(self, similar_location_users, limit=10):\n                \"\"\"\n                Advanced location network recommendation\n                \n                Args:\n                    similar_location_users (list): Users in similar location\n                    limit (int): Maximum number of recommendations\n                \n                Returns:\n             "}, {"index": 468, "path": "ML/recommendation/views.py", "chunk": "mit (int): Maximum number of recommendations\n                \n                Returns:\n                    list: Recommended users\n                \"\"\"\n                import networkx as nx\n                import numpy as np\n                \n                # Create graph of location network\n                G = nx.Graph()\n                \n                # Add users as nodes\n                for user in similar_location_users:\n                    G.add_node(user['_id'])\n                \n          "}, {"index": 469, "path": "ML/recommendation/views.py", "chunk": "r in similar_location_users:\n                    G.add_node(user['_id'])\n                \n                # Connect users based on proximity\n                for i, u1 in enumerate(similar_location_users):\n                    for j, u2 in enumerate(similar_location_users[i+1:], start=i+1):\n                        try:\n                            # Calculate distance between users\n                            distance = haversine_distance(\n                                self.extract_location(u1), "}, {"index": 470, "path": "ML/recommendation/views.py", "chunk": "          distance = haversine_distance(\n                                self.extract_location(u1), \n                                self.extract_location(u2)\n                            )\n                            \n                            # Add edge if within proximity (e.g., 50 km)\n                            if distance <= 50:\n                                G.add_edge(u1['_id'], u2['_id'], weight=1/distance)\n                        except ValueError:\n                            # Skip "}, {"index": 471, "path": "ML/recommendation/views.py", "chunk": "], weight=1/distance)\n                        except ValueError:\n                            # Skip if location extraction fails\n                            continue\n                \n                # Use network centrality for recommendations\n                try:\n                    centrality = nx.eigenvector_centrality(G)\n                    \n                    # Sort users by network centrality\n                    ranked_users = sorted(\n                        similar_location_users, \n     "}, {"index": 472, "path": "ML/recommendation/views.py", "chunk": "ty\n                    ranked_users = sorted(\n                        similar_location_users, \n                        key=lambda x: centrality.get(x['_id'], 0), \n                        reverse=True\n                    )\n                    \n                    return ranked_users[:limit]\n                \n                except nx.PowerIterationFailedConvergence:\n                    # Fallback to simple sorting if eigenvector centrality fails\n                    return similar_location_users[:l"}, {"index": 473, "path": "ML/recommendation/views.py", "chunk": " simple sorting if eigenvector centrality fails\n                    return similar_location_users[:limit]\n            \n            def recommend(self, limit=10):\n                \"\"\"\n                Main location recommendation method\n                \n                Args:\n                    limit (int): Maximum number of recommendations\n                \n                Returns:\n                    list: Recommended users\n                \"\"\"\n                try:\n                    # Extract cur"}, {"index": 474, "path": "ML/recommendation/views.py", "chunk": "  list: Recommended users\n                \"\"\"\n                try:\n                    # Extract current user's location\n                    current_user_location = self.extract_location(self.current_user)\n                    \n                    # Find similar location users\n                    similar_location_users = []\n                    all_users = list(self.users_collection.find({\n                        '_id': {'$ne': self.current_user['_id']}\n                    }))\n                    "}, {"index": 475, "path": "ML/recommendation/views.py", "chunk": "               '_id': {'$ne': self.current_user['_id']}\n                    }))\n                    \n                    # Filter users with valid locations\n                    for user in all_users:\n                        try:\n                            user_location = self.extract_location(user)\n                            distance = haversine_distance(current_user_location, user_location)\n                            \n                            # Add users within 100 km\n                    "}, {"index": 476, "path": "ML/recommendation/views.py", "chunk": "                         \n                            # Add users within 100 km\n                            if distance <= 100:\n                                user['distance'] = distance\n                                similar_location_users.append(user)\n                        except ValueError:\n                            # Skip users without valid location\n                            continue\n                    \n                    # Sort by distance if few users\n                    if len("}, {"index": 477, "path": "ML/recommendation/views.py", "chunk": "                    \n                    # Sort by distance if few users\n                    if len(similar_location_users) <= 5:\n                        similar_location_users.sort(key=lambda x: x.get('distance', float('inf')))\n                        recommendations = similar_location_users[:limit]\n                    else:\n                        # Use advanced network recommendation\n                        recommendations = self.recommend_location_network(\n                            similar"}, {"index": 478, "path": "ML/recommendation/views.py", "chunk": "              recommendations = self.recommend_location_network(\n                            similar_location_users, \n                            limit\n                        )\n                    \n                    return recommendations\n                \n                except Exception as e:\n                    print(f\"Location recommendation error: {e}\")\n                    raise\n        \n        recommender = LocationRecommender(users_collection, current_user)\n        recommendations = re"}, {"index": 479, "path": "ML/recommendation/views.py", "chunk": "      recommender = LocationRecommender(users_collection, current_user)\n        recommendations = recommender.recommend()\n        \n        serialized_recommendations = []\n\n        def convert_objectid_to_str(obj):\n            if isinstance(obj, ObjectId):\n                return str(obj)\n            elif isinstance(obj, dict):\n                return {k: convert_objectid_to_str(v) for k, v in obj.items()}\n            elif isinstance(obj, list):\n                return [convert_objectid_to_str(item)"}, {"index": 480, "path": "ML/recommendation/views.py", "chunk": "ems()}\n            elif isinstance(obj, list):\n                return [convert_objectid_to_str(item) for item in obj]\n            return obj\n\n        for user in recommendations:\n            user = convert_objectid_to_str(user)\n            serialized_recommendations.append(user)\n        \n        return JsonResponse({'recommendations': serialized_recommendations})\n    \n    except Exception as e:\n        return JsonResponse({'error': str(e)}, status=500)\n\n@csrf_exempt\n@require_POST\ndef recommend_b"}, {"index": 481, "path": "ML/recommendation/views.py", "chunk": "      return JsonResponse({'error': str(e)}, status=500)\n\n@csrf_exempt\n@require_POST\ndef recommend_by_profession(request):\n    try:\n        body = json.loads(request.body, object_hook=json_util.object_hook)\n        email = body.get('email')\n        \n        if not email:\n            return JsonResponse({'error': 'Email is required'}, status=400)\n        \n        mongo_url = os.getenv(\"MONGO_URL\")\n\n# Create MongoClient with the URL from the environment\n        client = MongoClient(mongo_url) \n   "}, {"index": 482, "path": "ML/recommendation/views.py", "chunk": "\n# Create MongoClient with the URL from the environment\n        client = MongoClient(mongo_url) \n        db = client['SIH']\n        users_collection = db['users']\n        \n        current_user = users_collection.find_one({\"email\": email})\n        if not current_user:\n            return JsonResponse({'error': 'User not found'}, status=404)\n        \n        class ProfessionalNetworkRecommender:\n            def __init__(self, users_collection, current_user):\n                self.users_collection = "}, {"index": 483, "path": "ML/recommendation/views.py", "chunk": "        def __init__(self, users_collection, current_user):\n                self.users_collection = users_collection\n                self.current_user = current_user\n            \n            def _hashable_representation(self, obj):\n                \"\"\"\n                Convert complex objects to hashable representations\n                \n                Args:\n                    obj: Input object (can be dict, list, or primitive)\n                \n                Returns:\n                    Hashabl"}, {"index": 484, "path": "ML/recommendation/views.py", "chunk": "n be dict, list, or primitive)\n                \n                Returns:\n                    Hashable representation of the object\n                \"\"\"\n                if isinstance(obj, dict):\n                    # Convert dict to a sorted tuple of (key, hashable_value) pairs\n                    return tuple(\n                        (k, self._hashable_representation(v)) \n                        for k, v in sorted(obj.items())\n                    )\n                elif isinstance(obj, list):\n    "}, {"index": 485, "path": "ML/recommendation/views.py", "chunk": "r k, v in sorted(obj.items())\n                    )\n                elif isinstance(obj, list):\n                    # Convert list to a tuple of hashable representations\n                    return tuple(self._hashable_representation(item) for item in obj)\n                elif isinstance(obj, (str, int, float, bool, type(None))):\n                    # Primitive types are already hashable\n                    return obj\n                else:\n                    # For any other type, convert to stri"}, {"index": 486, "path": "ML/recommendation/views.py", "chunk": "          return obj\n                else:\n                    # For any other type, convert to string\n                    return str(obj)\n            \n            def compute_professional_distance(self, user1, user2):\n                \"\"\"\n                Compute professional distance between two users\n                \n                Args:\n                    user1, user2: User dictionaries\n                \n                Returns:\n                    Float representing professional similarity\n "}, {"index": 487, "path": "ML/recommendation/views.py", "chunk": "          \n                Returns:\n                    Float representing professional similarity\n                \"\"\"\n                distance_features = [\n                    'role', 'skills', 'workExperience', 'education'\n                ]\n                \n                total_features = len(distance_features)\n                matched_features = 0\n                \n                for feature in distance_features:\n                    # Convert to hashable representations\n                    us"}, {"index": 488, "path": "ML/recommendation/views.py", "chunk": " distance_features:\n                    # Convert to hashable representations\n                    user1_feature = set(\n                        self._hashable_representation(x) \n                        for x in user1.get(feature, [])\n                    )\n                    user2_feature = set(\n                        self._hashable_representation(x) \n                        for x in user2.get(feature, [])\n                    )\n                    \n                    if feature == 'role':\n     "}, {"index": 489, "path": "ML/recommendation/views.py", "chunk": "ture, [])\n                    )\n                    \n                    if feature == 'role':\n                        # Exact role match\n                        matched_features += 1 if user1.get(feature) == user2.get(feature) else 0\n                    else:\n                        # Compute feature overlap\n                        common_elements = len(user1_feature & user2_feature)\n                        matched_features += common_elements / max(\n                            len(user1_feature"}, {"index": 490, "path": "ML/recommendation/views.py", "chunk": "            matched_features += common_elements / max(\n                            len(user1_feature), \n                            len(user2_feature), \n                            1\n                        )\n                \n                return matched_features / total_features\n            \n            def probabilistic_professional_network(self, similar_profession_users):\n                \"\"\"\n                Create probabilistic professional network\n                \n                Args:\n   "}, {"index": 491, "path": "ML/recommendation/views.py", "chunk": "                Create probabilistic professional network\n                \n                Args:\n                    similar_profession_users: List of user dictionaries\n                \n                Returns:\n                    List of recommended users\n                \"\"\"\n                import numpy as np\n                \n                # Ensure we have enough users\n                if len(similar_profession_users) < 2:\n                    return similar_profession_users\n                \n  "}, {"index": 492, "path": "ML/recommendation/views.py", "chunk": "milar_profession_users) < 2:\n                    return similar_profession_users\n                \n                # Create similarity matrix\n                similarity_matrix = np.zeros((len(similar_profession_users), len(similar_profession_users)))\n                \n                for i, user1 in enumerate(similar_profession_users):\n                    for j, user2 in enumerate(similar_profession_users):\n                        if i != j:\n                            similarity_matrix[i, j] = se"}, {"index": 493, "path": "ML/recommendation/views.py", "chunk": "_users):\n                        if i != j:\n                            similarity_matrix[i, j] = self.compute_professional_distance(user1, user2)\n                \n                # Normalize similarity matrix\n                row_sums = similarity_matrix.sum(axis=1)\n                # Avoid division by zero\n                row_sums[row_sums == 0] = 1\n                random_walk_matrix = similarity_matrix / row_sums[:, np.newaxis]\n                \n                # Random walk recommendation\n     "}, {"index": 494, "path": "ML/recommendation/views.py", "chunk": "matrix / row_sums[:, np.newaxis]\n                \n                # Random walk recommendation\n                initial_prob = np.ones(len(similar_profession_users)) / len(similar_profession_users)\n                num_walks = min(10, len(similar_profession_users))\n                \n                recommendations = []\n                for _ in range(num_walks):\n                    current_prob = initial_prob.copy()\n                    for _ in range(5):  # Walk 5 steps\n                        curre"}, {"index": 495, "path": "ML/recommendation/views.py", "chunk": "ial_prob.copy()\n                    for _ in range(5):  # Walk 5 steps\n                        current_prob = current_prob @ random_walk_matrix\n                    \n                    # Get top recommendations from this walk\n                    top_indices = current_prob.argsort()[::-1][:3]\n                    recommendations.extend([similar_profession_users[idx] for idx in top_indices])\n                \n                # Remove duplicates while preserving order\n                unique_recommend"}, {"index": 496, "path": "ML/recommendation/views.py", "chunk": "        \n                # Remove duplicates while preserving order\n                unique_recommendations = []\n                seen = set()\n                for user in recommendations:\n                    user_id = self._hashable_representation(user.get('_id', {}))\n                    if user_id not in seen:\n                        seen.add(user_id)\n                        unique_recommendations.append(user)\n                \n                return unique_recommendations[:10]\n            \n      "}, {"index": 497, "path": "ML/recommendation/views.py", "chunk": "append(user)\n                \n                return unique_recommendations[:10]\n            \n            def recommend(self, limit=10):\n                \"\"\"\n                Main recommendation method\n                \n                Args:\n                    limit: Maximum number of recommendations\n                \n                Returns:\n                    List of recommended users\n                \"\"\"\n                # Find users in the same professional domain\n                similar_profess"}, {"index": 498, "path": "ML/recommendation/views.py", "chunk": "    \"\"\"\n                # Find users in the same professional domain\n                similar_profession_users = list(self.users_collection.find({\n                    '_id': {'$ne': self.current_user['_id']},\n                    'role': self.current_user['role']\n                }))\n                \n                if len(similar_profession_users) <= 5:\n                    # Simple sorting if few users\n                    similar_profession_users.sort(\n                        key=lambda x: len(\n  "}, {"index": 499, "path": "ML/recommendation/views.py", "chunk": "ers\n                    similar_profession_users.sort(\n                        key=lambda x: len(\n                            set(self._hashable_representation(skill) \n                                for skill in x.get('skills', []))\n                            & \n                            set(self._hashable_representation(skill) \n                                for skill in self.current_user.get('skills', []))\n                        ),\n                        reverse=True\n                   "}, {"index": 500, "path": "ML/recommendation/views.py", "chunk": "t('skills', []))\n                        ),\n                        reverse=True\n                    )\n                    recommendations = similar_profession_users[:limit]\n                else:\n                    # Advanced probabilistic professional network recommendation\n                    recommendations = self.probabilistic_professional_network(\n                        similar_profession_users\n                    )\n                \n                return recommendations\n\n        \n       "}, {"index": 501, "path": "ML/recommendation/views.py", "chunk": "sers\n                    )\n                \n                return recommendations\n\n        \n        recommender = ProfessionalNetworkRecommender(users_collection, current_user)\n        recommendations = recommender.recommend()\n        \n        # Serialize recommendations\n        serialized_recommendations = []\n\n        def convert_objectid_to_str(obj):\n            if isinstance(obj, ObjectId):\n                return str(obj)\n            elif isinstance(obj, dict):\n                return {k: con"}, {"index": 502, "path": "ML/recommendation/views.py", "chunk": "              return str(obj)\n            elif isinstance(obj, dict):\n                return {k: convert_objectid_to_str(v) for k, v in obj.items()}\n            elif isinstance(obj, list):\n                return [convert_objectid_to_str(item) for item in obj]\n            return obj\n\n        for user in recommendations:\n            user = convert_objectid_to_str(user)\n            serialized_recommendations.append(user)\n        \n        return JsonResponse({'recommendations': serialized_recommenda"}, {"index": 503, "path": "ML/recommendation/views.py", "chunk": "ndations.append(user)\n        \n        return JsonResponse({'recommendations': serialized_recommendations})\n    \n    except Exception as e:\n        return JsonResponse({'error': str(e)}, status=500)\n    \n\n@csrf_exempt\n@require_POST\ndef get_comprehensive_recommendations(request):\n    try:\n        # Parse JSON body using json_util to handle MongoDB-specific types\n        body = json.loads(request.body, object_hook=json_util.object_hook)\n        email = body.get('email')\n        \n        if not ema"}, {"index": 504, "path": "ML/recommendation/views.py", "chunk": "dy, object_hook=json_util.object_hook)\n        email = body.get('email')\n        \n        if not email:\n            return JsonResponse({\n                'error': 'Email is required'\n            }, status=400)\n        \n        mongo_url = os.getenv(\"MONGO_URL\")\n\n# Create MongoClient with the URL from the environment\n        client = MongoClient(mongo_url)\n        # MongoDB Connection\n        db = client['SIH']\n        users_collection = db['users2']\n        \n        # Find user by email\n        "}, {"index": 505, "path": "ML/recommendation/views.py", "chunk": "client['SIH']\n        users_collection = db['users2']\n        \n        # Find user by email\n        current_user = users_collection.find_one({\"email\": email})\n        if not current_user:\n            return JsonResponse({\n                'error': 'User not found'\n            }, status=404)\n        \n        # Import all recommendation classes\n        from .recommendation_engines import (\n            UserRecommendationEngine,\n            AdvancedInterestRecommender,\n            LocationRecommender"}, {"index": 506, "path": "ML/recommendation/views.py", "chunk": "  UserRecommendationEngine,\n            AdvancedInterestRecommender,\n            LocationRecommender,\n            ProfessionalNetworkRecommender\n        )\n        \n        # Helper function to convert ObjectId to string\n        def convert_objectid_to_str(obj):\n            if isinstance(obj, ObjectId):\n                return str(obj)\n            elif isinstance(obj, dict):\n                return {k: convert_objectid_to_str(v) for k, v in obj.items()}\n            elif isinstance(obj, list):\n     "}, {"index": 507, "path": "ML/recommendation/views.py", "chunk": "k: convert_objectid_to_str(v) for k, v in obj.items()}\n            elif isinstance(obj, list):\n                return [convert_objectid_to_str(item) for item in obj]\n            return obj\n        \n        # Run all recommendation engines\n        recommendation_results = {\n            'overall_recommendations': [],\n            'interest_recommendations': [],\n            'location_recommendations': [],\n            'profession_recommendations': []\n        }\n        \n        # Overall Recommendatio"}, {"index": 508, "path": "ML/recommendation/views.py", "chunk": " [],\n            'profession_recommendations': []\n        }\n        \n        # Overall Recommendations\n        overall_engine = UserRecommendationEngine(current_user)\n        overall_recommendations = overall_engine.get_recommendations()\n        recommendation_results['overall_recommendations'] = [\n            convert_objectid_to_str(user) for user in overall_recommendations\n        ]\n        \n        # Interest-based Recommendations\n        interest_recommender = AdvancedInterestRecommender(use"}, {"index": 509, "path": "ML/recommendation/views.py", "chunk": "     # Interest-based Recommendations\n        interest_recommender = AdvancedInterestRecommender(users_collection, current_user)\n        interest_recommendations = interest_recommender.recommend()\n        recommendation_results['interest_recommendations'] = [\n            convert_objectid_to_str(user) for user in interest_recommendations\n        ]\n        \n        # Location-based Recommendations\n        location_recommender = LocationRecommender(users_collection, current_user)\n        location_r"}, {"index": 510, "path": "ML/recommendation/views.py", "chunk": "       location_recommender = LocationRecommender(users_collection, current_user)\n        location_recommendations = location_recommender.recommend()\n        recommendation_results['location_recommendations'] = [\n            convert_objectid_to_str(user) for user in location_recommendations\n        ]\n        \n        # Profession-based Recommendations\n        # Note: Using users collection instead of users2 as in the original code\n        profession_recommender = ProfessionalNetworkRecommender(\n"}, {"index": 511, "path": "ML/recommendation/views.py", "chunk": " of users2 as in the original code\n        profession_recommender = ProfessionalNetworkRecommender(\n            db['users'], \n            current_user\n        )\n        profession_recommendations = profession_recommender.recommend()\n        recommendation_results['profession_recommendations'] = [\n            convert_objectid_to_str(user) for user in profession_recommendations\n        ]\n        \n        return JsonResponse(recommendation_results)\n    \n    except json.JSONDecodeError:\n        retu"}, {"index": 512, "path": "ML/recommendation/views.py", "chunk": "      return JsonResponse(recommendation_results)\n    \n    except json.JSONDecodeError:\n        return JsonResponse({\n            'error': 'Invalid JSON in request body'\n        }, status=400)\n    \n    except Exception as e:\n        return JsonResponse({\n            'error': str(e)\n        }, status=500)"}, {"index": 513, "path": "ML/recommendation_post/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 514, "path": "ML/recommendation_post/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass RecommendationPostConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'recommendation_post'\n"}, {"index": 515, "path": "ML/recommendation_post/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 516, "path": "ML/recommendation_post/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 517, "path": "ML/recommendation_post/urls.py", "chunk": "from django.urls import path\nfrom .views import quantum_recommend_posts,generate_connection_interaction_strength,update_faiss_index,get_user_connections,get_post_details\n\nurlpatterns = [\n    # Route for the Quantum Recommendation Posts API\n    path('quantum_recommend_posts', quantum_recommend_posts, name='quantum_recommend_posts'),\n    path('get_interaction/', generate_connection_interaction_strength, name='generate_connection_interaction_strength'),\n    path('update_embedding/', update_faiss_in"}, {"index": 518, "path": "ML/recommendation_post/urls.py", "chunk": "gth, name='generate_connection_interaction_strength'),\n    path('update_embedding/', update_faiss_index, name='update_faiss_index'),\n    path('get_connection/',get_user_connections, name='get_user_connections'),\n    path('get_post_detailss/',get_post_details, name='get_post_details'),\n]\n"}, {"index": 519, "path": "ML/recommendation_post/views.py", "chunk": "import os\nimport io\nimport json\nimport numpy as np\nimport faiss\nimport pickle\nfrom sentence_transformers import SentenceTransformer\nfrom django.http import JsonResponse\nfrom pymongo import MongoClient\nfrom bson import Binary, ObjectId\nfrom datetime import datetime, timedelta\nfrom django.views.decorators.csrf import csrf_exempt\n\nclass MongoJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, ObjectId):\n            return str(obj)\n        if isinstance(obj, datetim"}, {"index": 520, "path": "ML/recommendation_post/views.py", "chunk": "        if isinstance(obj, ObjectId):\n            return str(obj)\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        return super().default(obj)\n\nclass PersistentFAISSRecommendationEngine:\n    def __init__(self, mongo_url=None, max_recommendations=5):\n        # MongoDB Connection\n        if not mongo_url:\n            mongo_url = os.getenv(\"MONGO_URL\")\n        \n        try:\n            # MongoDB Connection\n            self.client = MongoClient(mongo_url)\n            "}, {"index": 521, "path": "ML/recommendation_post/views.py", "chunk": " try:\n            # MongoDB Connection\n            self.client = MongoClient(mongo_url)\n            self.db = self.client['SIH07']\n            self.users_collection = self.db['users']\n            self.posts_collection = self.db['posts']\n            self.index_collection = self.db['faiss_indices']  # New collection for index storage\n            \n            # Embedding Model\n            self.embedding_model = SentenceTransformer('all-MiniLM-L6-v2')\n            self.max_recommendations = max_recom"}, {"index": 522, "path": "ML/recommendation_post/views.py", "chunk": "ing_model = SentenceTransformer('all-MiniLM-L6-v2')\n            self.max_recommendations = max_recommendations\n            \n            # Prepare or Load FAISS Index\n            self._manage_faiss_index()\n        \n        except Exception as e:\n            print(f\"Initialization Error: {e}\")\n            raise\n    \n    def _serialize_faiss_index(self, index):\n        \"\"\"\n        Serialize FAISS index to a binary format\n        \"\"\"\n        # Create a temporary file\n        import tempfile\n        "}, {"index": 523, "path": "ML/recommendation_post/views.py", "chunk": "ex to a binary format\n        \"\"\"\n        # Create a temporary file\n        import tempfile\n        \n        # Use a temporary file to write the index\n        with tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n            faiss.write_index(index, tmp_file.name)\n        \n        # Read the file contents\n        with open(tmp_file.name, 'rb') as f:\n            serialized_index = f.read()\n        \n        # Clean up the temporary file\n        import os\n        os.unlink(tmp_file.name)\n    "}, {"index": 524, "path": "ML/recommendation_post/views.py", "chunk": "      \n        # Clean up the temporary file\n        import os\n        os.unlink(tmp_file.name)\n        \n        return serialized_index\n\n    def _deserialize_faiss_index(self, serialized_index):\n        \"\"\"\n        Deserialize FAISS index from binary format\n        \"\"\"\n        # Create a temporary file\n        import tempfile\n        \n        # Write serialized index to a temporary file\n        with tempfile.NamedTemporaryFile(delete=False, mode='wb') as tmp_file:\n            tmp_file.write(ser"}, {"index": 525, "path": "ML/recommendation_post/views.py", "chunk": "ith tempfile.NamedTemporaryFile(delete=False, mode='wb') as tmp_file:\n            tmp_file.write(serialized_index)\n        \n        # Read the index from the temporary file\n        index = faiss.read_index(tmp_file.name)\n        \n        # Clean up the temporary file\n        import os\n        os.unlink(tmp_file.name)\n        \n        return index\n    \n    def _manage_faiss_index(self):\n        \"\"\"\n        Manage FAISS index: check existing, update if needed, or create new\n        \"\"\"\n        # L"}, {"index": 526, "path": "ML/recommendation_post/views.py", "chunk": "\n        Manage FAISS index: check existing, update if needed, or create new\n        \"\"\"\n        # Look for existing index\n        existing_index = self.index_collection.find_one({\n            'type': 'post_semantic_index'\n        })\n        \n        current_time = datetime.now()\n        \n        if existing_index:\n            # Check index age\n            index_age = current_time - existing_index.get('created_at', current_time)\n            \n            # Recreate index if older than 7 days\n    "}, {"index": 527, "path": "ML/recommendation_post/views.py", "chunk": ".get('created_at', current_time)\n            \n            # Recreate index if older than 7 days\n            if index_age > timedelta(days=7):\n                self._rebuild_faiss_index()\n                return\n            \n            # Deserialize and load existing index\n            try:\n                self.faiss_index = self._deserialize_faiss_index(existing_index['index_data'])\n                self.post_ids = existing_index['post_ids']\n                return\n            except Exception as e:"}, {"index": 528, "path": "ML/recommendation_post/views.py", "chunk": "self.post_ids = existing_index['post_ids']\n                return\n            except Exception as e:\n                print(f\"Error loading existing index: {e}\")\n                # Fall back to rebuilding\n        \n        # Build new index if no valid existing index\n        self._rebuild_faiss_index()\n    \n    def _rebuild_faiss_index(self, incremental=False):\n        \"\"\"\n        Rebuild the FAISS index from scratch or incrementally\n        \n        :param incremental: If True, only add new posts "}, {"index": 529, "path": "ML/recommendation_post/views.py", "chunk": "ndex from scratch or incrementally\n        \n        :param incremental: If True, only add new posts since last index creation\n        \"\"\"\n        # Fetch base query for posts\n        query = {'text': {'$exists': True, '$ne': ''}}\n        \n        # If incremental, only fetch posts after last index creation\n        if incremental:\n            last_index = self.index_collection.find_one({'type': 'post_semantic_index'})\n            if last_index and 'created_at' in last_index:\n                query"}, {"index": 530, "path": "ML/recommendation_post/views.py", "chunk": "st_semantic_index'})\n            if last_index and 'created_at' in last_index:\n                query['createdAt'] = {'$gt': last_index['created_at']}\n        \n        # Fetch posts (limit increased for safety)\n        posts = list(self.posts_collection.find(query).limit(20000))\n        \n        # If no new posts and incremental, return early\n        if not posts and incremental:\n            return False\n        \n        # Extract and embed texts\n        texts = [post.get('text', '') for post in "}, {"index": 531, "path": "ML/recommendation_post/views.py", "chunk": " False\n        \n        # Extract and embed texts\n        texts = [post.get('text', '') for post in posts]\n        embeddings = self.embedding_model.encode(texts)\n        \n        # If not incremental or first build, create a new index\n        if not hasattr(self, 'faiss_index') or not incremental:\n            dimension = embeddings.shape[1]\n            index = faiss.IndexFlatL2(dimension)\n            existing_post_ids = []\n        else:\n            # For incremental updates, use existing index\n"}, {"index": 532, "path": "ML/recommendation_post/views.py", "chunk": "     existing_post_ids = []\n        else:\n            # For incremental updates, use existing index\n            index = self.faiss_index\n            existing_post_ids = self.post_ids\n        \n        # Convert embeddings to float32 for FAISS\n        embeddings_float32 = embeddings.astype('float32')\n        \n        # Add new embeddings to index\n        index.add(embeddings_float32)\n        \n        # Combine post IDs\n        all_post_ids = existing_post_ids + [str(post['_id']) for post in posts]"}, {"index": 533, "path": "ML/recommendation_post/views.py", "chunk": "  # Combine post IDs\n        all_post_ids = existing_post_ids + [str(post['_id']) for post in posts]\n        \n        # Serialize and store index in MongoDB\n        serialized_index = self._serialize_faiss_index(index)\n        \n        # Store updated index in MongoDB\n        self.index_collection.update_one(\n            {'type': 'post_semantic_index'},\n            {'$set': {\n                'index_data': Binary(serialized_index),\n                'post_ids': all_post_ids,\n                'create"}, {"index": 534, "path": "ML/recommendation_post/views.py", "chunk": "x_data': Binary(serialized_index),\n                'post_ids': all_post_ids,\n                'created_at': datetime.now(),\n                'total_posts': len(all_post_ids)\n            }},\n            upsert=True\n        )\n        \n        # Set instance variables\n        self.faiss_index = index\n        self.post_ids = all_post_ids\n        \n        return True\n    \n    def _compute_interaction_score(self, post):\n        \"\"\"\n        Compute a quick interaction score\n        \"\"\"\n        likes = le"}, {"index": 535, "path": "ML/recommendation_post/views.py", "chunk": "re(self, post):\n        \"\"\"\n        Compute a quick interaction score\n        \"\"\"\n        likes = len(post.get('likes', []))\n        comments = len(post.get('comments', []))\n        \n        # Temporal decay\n        post_age = (datetime.now() - post.get('createdAt', datetime.now())).days\n        recency_factor = max(0, 1 - (post_age * 0.1))\n        \n        return (likes * 2 + comments * 3) * recency_factor\n    \n    def semantic_recommendations(self, current_user):\n        \"\"\"\n        Generate s"}, {"index": 536, "path": "ML/recommendation_post/views.py", "chunk": "ncy_factor\n    \n    def semantic_recommendations(self, current_user):\n        \"\"\"\n        Generate semantic recommendations using persistent FAISS index\n        with connection and interaction details\n        \"\"\"\n        try:\n            # Create a dictionary of connections for easy lookup\n            current_user_connections = {\n                str(conn['_id']): conn for conn in current_user.get('connections', [])\n            }\n            \n            # Get user's text for semantic search\n    "}, {"index": 537, "path": "ML/recommendation_post/views.py", "chunk": "'connections', [])\n            }\n            \n            # Get user's text for semantic search\n            user_posts = list(self.posts_collection.find({'userId': current_user['_id']}))\n            if not user_posts:\n                return []\n            \n            # Use first post or combined text for user embedding\n            user_text = ' '.join([post.get('text', '') for post in user_posts])\n            user_embedding = self.embedding_model.encode([user_text])[0]\n            \n            "}, {"index": 538, "path": "ML/recommendation_post/views.py", "chunk": ")\n            user_embedding = self.embedding_model.encode([user_text])[0]\n            \n            # Convert to float32\n            user_embedding = user_embedding.astype('float32').reshape(1, -1)\n            \n            # Search FAISS index\n            k = min(self.max_recommendations * 3, len(self.post_ids))\n            distances, indices = self.faiss_index.search(user_embedding, k)\n            \n            # Helper function to process user interactions\n            def process_user_interacti"}, {"index": 539, "path": "ML/recommendation_post/views.py", "chunk": "  \n            # Helper function to process user interactions\n            def process_user_interactions(user_id):\n                # Convert user_id to string for dictionary lookup\n                user_id_str = str(user_id)\n                \n                # Find the user\n                user = self.users_collection.find_one({'_id': user_id})\n                if not user:\n                    return None\n                \n                # Check connection status and get interaction strength\n       "}, {"index": 540, "path": "ML/recommendation_post/views.py", "chunk": "None\n                \n                # Check connection status and get interaction strength\n                connection_info = None\n                if user_id_str in current_user_connections:\n                    connection_info = {\n                        'is_connection': True,\n                        'interaction_strength': current_user_connections[user_id_str].get('interaction_strength', 0)\n                    }\n                else:\n                    connection_info = {\n                    "}, {"index": 541, "path": "ML/recommendation_post/views.py", "chunk": "                }\n                else:\n                    connection_info = {\n                        'is_connection': False,\n                        'interaction_strength': 0  # Set to 0 for sorting purposes\n                    }\n                \n                return {\n                    'userId': str(user['_id']),\n                    'fullName': user.get('fullName', 'Unknown'),\n                    'email': user.get('email', ''),\n                    'profilePhoto': user.get('profilePhoto',"}, {"index": 542, "path": "ML/recommendation_post/views.py", "chunk": "        'email': user.get('email', ''),\n                    'profilePhoto': user.get('profilePhoto', ''),\n                    **connection_info\n                }\n            \n            # Sorting function for interactions\n            def sort_interactions(interactions):\n                # Sort by:\n                # 1. Connection status (connected first)\n                # 2. Interaction strength (descending)\n                return sorted(\n                    interactions, \n                    key"}, {"index": 543, "path": "ML/recommendation_post/views.py", "chunk": "escending)\n                return sorted(\n                    interactions, \n                    key=lambda x: (-x['is_connection'], -x.get('interaction_strength', 0))\n                )\n            author_cache = {}\n            def get_author_details(user_id):\n                \"\"\"\n                Retrieve author details efficiently using a cache\n                \"\"\"\n                user_id_str = str(user_id)\n                if user_id_str not in author_cache:\n                    author = self.user"}, {"index": 544, "path": "ML/recommendation_post/views.py", "chunk": "(user_id)\n                if user_id_str not in author_cache:\n                    author = self.users_collection.find_one({'_id': ObjectId(user_id)})\n                    if author:\n                        author_cache[user_id_str] = {\n                            'fullName': author.get('fullName', 'Unknown'),\n                            'profilePhoto': author.get('profilePhoto', '')\n                        }\n                    else:\n                        author_cache[user_id_str] = {\n         "}, {"index": 545, "path": "ML/recommendation_post/views.py", "chunk": "         }\n                    else:\n                        author_cache[user_id_str] = {\n                            'fullName': 'Unknown',\n                            'profilePhoto': ''\n                        }\n                return author_cache[user_id_str]\n            # Process recommendations\n            recommendations = []\n            seen_post_ids = set()\n            \n            for dist, idx in zip(distances[0], indices[0]):\n                if idx >= len(self.post_ids):\n            "}, {"index": 546, "path": "ML/recommendation_post/views.py", "chunk": "st, idx in zip(distances[0], indices[0]):\n                if idx >= len(self.post_ids):\n                    continue\n                \n                post_id = self.post_ids[idx]\n                if post_id in seen_post_ids:\n                    continue\n                \n                # Fetch full post details\n                post = self.posts_collection.find_one({'_id': ObjectId(post_id)})\n                \n                if not post or post['userId'] == current_user['_id']:\n                   "}, {"index": 547, "path": "ML/recommendation_post/views.py", "chunk": "          \n                if not post or post['userId'] == current_user['_id']:\n                    continue\n                author_details = get_author_details(post['userId'])\n                # Process likes with connection info\n                likes_details = []\n                for like_user_id in post.get('likes', []):\n                    try:\n                        like_user_info = process_user_interactions(like_user_id)\n                        if like_user_info:\n                          "}, {"index": 548, "path": "ML/recommendation_post/views.py", "chunk": "ser_interactions(like_user_id)\n                        if like_user_info:\n                            likes_details.append(like_user_info)\n                    except Exception as e:\n                        print(f\"Error processing like user {like_user_id}: {e}\")\n                likes_details = sort_interactions(likes_details)\n                \n                # Process comments with connection info\n                comments_details = []\n                for comment in post.get('comments', []):\n    "}, {"index": 549, "path": "ML/recommendation_post/views.py", "chunk": "\n                comments_details = []\n                for comment in post.get('comments', []):\n                    try:\n                        comment_user_info = process_user_interactions(comment['userId'])\n                        if comment_user_info:\n                            comment_details = {\n                                **comment_user_info,\n                                'text': comment.get('text', ''),\n                                'timestamp': comment.get('createdAt', '')\n    "}, {"index": 550, "path": "ML/recommendation_post/views.py", "chunk": "ment.get('text', ''),\n                                'timestamp': comment.get('createdAt', '')\n                            }\n                            comments_details.append(comment_details)\n                    except Exception as e:\n                        print(f\"Error processing comment user {comment['userId']}: {e}\")\n                comments_details = sort_interactions(comments_details)\n                \n                # Compute recommendation score\n                semantic_score = 1.0 /"}, {"index": 551, "path": "ML/recommendation_post/views.py", "chunk": "              \n                # Compute recommendation score\n                semantic_score = 1.0 / (1.0 + dist)  # Convert distance to similarity\n                interaction_score = self._compute_interaction_score(post)\n                \n                recommendation = {\n                    'postId': str(post['_id']),\n                    'text': post.get('text', ''),\n                    'authorId': str(post['userId']),\n                    'fullName': author_details['fullName'],\n               "}, {"index": 552, "path": "ML/recommendation_post/views.py", "chunk": "d': str(post['userId']),\n                    'fullName': author_details['fullName'],\n                    'profilePhoto': author_details['profilePhoto'],\n                    'total_score': semantic_score * 1 + interaction_score * 0.3,\n                    'media': post.get('media', []),\n                    'likes': {\n                        'total': len(likes_details),\n                        'details': likes_details\n                    },\n                    'comments': {\n                        "}, {"index": 553, "path": "ML/recommendation_post/views.py", "chunk": "ls': likes_details\n                    },\n                    'comments': {\n                        'total': len(comments_details),\n                        'details': comments_details\n                    },\n                    'timestamp': post.get('createdAt')\n                }\n                \n                # Optionally, process reactions and shares similarly if they exist\n                \n                recommendations.append(recommendation)\n                seen_post_ids.add(post_id)\n     "}, {"index": 554, "path": "ML/recommendation_post/views.py", "chunk": "             recommendations.append(recommendation)\n                seen_post_ids.add(post_id)\n                \n                if len(recommendations) >= self.max_recommendations:\n                    break\n            \n            # Sort recommendations by total score\n            recommendations.sort(key=lambda x: x['total_score'], reverse=True)\n            return recommendations[:self.max_recommendations]\n        \n        except Exception as e:\n            print(f\"Recommendation Error: {e}\")\n "}, {"index": 555, "path": "ML/recommendation_post/views.py", "chunk": "endations]\n        \n        except Exception as e:\n            print(f\"Recommendation Error: {e}\")\n            return []\n\ndef quantum_recommend_posts(request):\n    \"\"\"\n    Django view for persistent FAISS-powered semantic recommendations\n    \"\"\"\n    if request.method == 'GET':\n        # User email lookup\n        user_email = request.GET.get('email', '').strip()\n        \n        if not user_email:\n            return JsonResponse({\n                'error': 'Email is required'\n            }, status"}, {"index": 556, "path": "ML/recommendation_post/views.py", "chunk": "            return JsonResponse({\n                'error': 'Email is required'\n            }, status=400)\n\n        # Get MongoDB URL from environment variable\n        mongo_url = os.getenv(\"MONGO_URL\")\n\n        try:\n            # Create recommendation engine\n            recommender = PersistentFAISSRecommendationEngine(mongo_url, max_recommendations=5)\n            \n            # Find user by email\n            current_user = recommender.users_collection.find_one({\"email\": user_email})\n           "}, {"index": 557, "path": "ML/recommendation_post/views.py", "chunk": "\n            current_user = recommender.users_collection.find_one({\"email\": user_email})\n            \n            if not current_user:\n                return JsonResponse({\n                    'error': 'User not found'\n                }, status=404)\n            \n            # Get semantic recommendations\n            recommendations = recommender.semantic_recommendations(current_user)\n            \n            # Use custom JSON encoder to handle ObjectId serialization\n            return JsonRespon"}, {"index": 558, "path": "ML/recommendation_post/views.py", "chunk": "            # Use custom JSON encoder to handle ObjectId serialization\n            return JsonResponse({\n                'recommendations': json.loads(json.dumps(recommendations, cls=MongoJSONEncoder))\n            })\n        \n        except Exception as e:\n            print(f\"Error in recommendations: {e}\")\n            return JsonResponse({\n                'error': 'An error occurred while fetching recommendations'\n            }, status=500)\n\n@csrf_exempt\ndef update_faiss_index(request):\n    \"\"\""}, {"index": 559, "path": "ML/recommendation_post/views.py", "chunk": "g recommendations'\n            }, status=500)\n\n@csrf_exempt\ndef update_faiss_index(request):\n    \"\"\"\n    Route to trigger FAISS index update\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            # Get MongoDB URL from environment variable\n            mongo_url = os.getenv(\"MONGO_URL\")\n            \n            # Create recommendation engine\n            recommender = PersistentFAISSRecommendationEngine(mongo_url)\n            \n            # Rebuild the index\n            recommender._reb"}, {"index": 560, "path": "ML/recommendation_post/views.py", "chunk": "mendationEngine(mongo_url)\n            \n            # Rebuild the index\n            recommender._rebuild_faiss_index()\n            \n            return JsonResponse({\n                'status': 'success',\n                'message': 'FAISS index updated successfully'\n            })\n        \n        except Exception as e:\n            print(f\"Error updating index: {e}\")\n            return JsonResponse({\n                'status': 'error',\n                'message': str(e)\n            }, status=500)\n  "}, {"index": 561, "path": "ML/recommendation_post/views.py", "chunk": "{\n                'status': 'error',\n                'message': str(e)\n            }, status=500)\n    \n    return JsonResponse({\n        'error': 'Only POST method is allowed'\n    }, status=405)\n\n\nclass MongoJSONEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, ObjectId):\n            return str(obj)\n        if isinstance(obj, datetime):\n            return obj.isoformat()\n        return super().default(obj)\n\nclass QuantumInteractionStrengthCalculator:\n    def __ini"}, {"index": 562, "path": "ML/recommendation_post/views.py", "chunk": "mat()\n        return super().default(obj)\n\nclass QuantumInteractionStrengthCalculator:\n    def __init__(self, mongo_url=None):\n        # MongoDB Connection\n        if not mongo_url:\n            mongo_url = os.getenv(\"MONGO_URL\", \n                \"mongodb+srv://IPL_AUCTION_24:IPLAuction2024DontGuessAlsoUseVim@cluster0.ilknu4v.mongodb.net/SIH\")\n        \n        try:\n            client = MongoClient(mongo_url)\n            self.db = client['SIH']\n            self.users_collection = self.db['users3']"}, {"index": 563, "path": "ML/recommendation_post/views.py", "chunk": "mongo_url)\n            self.db = client['SIH']\n            self.users_collection = self.db['users3']\n            self.posts_collection = self.db['post3']\n            self.interactions_collection = self.db['interaction_strengths']\n        except Exception as e:\n            print(f\"MongoDB Connection Error: {e}\")\n            raise\n    def _calculate_professional_proximity(self, source_data, target_data):\n        \"\"\"\n        Calculate professional closeness based on work experience and education\n  "}, {"index": 564, "path": "ML/recommendation_post/views.py", "chunk": "ata):\n        \"\"\"\n        Calculate professional closeness based on work experience and education\n        \"\"\"\n        work_exp_score = 0\n        education_score = 0\n        \n        # Compare work experiences\n        for source_work in source_data.get('workExperience', []):\n            for target_work in target_data.get('workExperience', []):\n                # Check for similar roles, companies, or industries\n                if (source_work.get('companyName') == target_work.get('companyName') or"}, {"index": 565, "path": "ML/recommendation_post/views.py", "chunk": "r industries\n                if (source_work.get('companyName') == target_work.get('companyName') or\n                    self._are_roles_similar(source_work.get('role', ''), target_work.get('role', ''))):\n                    work_exp_score += 0.5\n        \n        # Compare educational background\n        for source_edu in source_data.get('education', []):\n            for target_edu in target_data.get('education', []):\n                if (source_edu.get('institution') == target_edu.get('institutio"}, {"index": 566, "path": "ML/recommendation_post/views.py", "chunk": "et('education', []):\n                if (source_edu.get('institution') == target_edu.get('institution') or\n                    source_edu.get('degree') == target_edu.get('degree')):\n                    education_score += 0.3\n        \n        return min(work_exp_score + education_score, 1.0)\n    def _calculate_skill_resonance(self, source_user, target_user):\n        \"\"\"\n        Calculate skill overlap and complementarity\n        \"\"\"\n        source_skills = set(source_user.get('skills', []))\n     "}, {"index": 567, "path": "ML/recommendation_post/views.py", "chunk": "lap and complementarity\n        \"\"\"\n        source_skills = set(source_user.get('skills', []))\n        target_skills = set(target_user.get('skills', []))\n        \n        # Calculate Jaccard similarity\n        intersection = len(source_skills.intersection(target_skills))\n        union = len(source_skills.union(target_skills))\n        \n        skill_similarity = intersection / union if union > 0 else 0\n        \n        # Bonus for complementary skills\n        complementary_bonus = 0.2 if any(\n   "}, {"index": 568, "path": "ML/recommendation_post/views.py", "chunk": "se 0\n        \n        # Bonus for complementary skills\n        complementary_bonus = 0.2 if any(\n            self._are_skills_complementary(s, t) \n            for s in source_skills \n            for t in target_skills\n        ) else 0\n        \n        return min(skill_similarity + complementary_bonus, 1.0)\n    def _are_skills_complementary(self, skill1, skill2):\n        \"\"\"\n        Detect complementary skills\n        \"\"\"\n        complementary_skill_pairs = [\n            ('python', 'data science'"}, {"index": 569, "path": "ML/recommendation_post/views.py", "chunk": "ntary skills\n        \"\"\"\n        complementary_skill_pairs = [\n            ('python', 'data science'),\n            ('frontend', 'backend'),\n            ('design', 'marketing'),\n            ('machine learning', 'software engineering')\n        ]\n        \n        return any(\n            (skill1.lower() in pair[0] and skill2.lower() in pair[1]) or\n            (skill1.lower() in pair[1] and skill2.lower() in pair[0])\n            for pair in complementary_skill_pairs\n        )\n    def _calculate_socia"}, {"index": 570, "path": "ML/recommendation_post/views.py", "chunk": "r() in pair[0])\n            for pair in complementary_skill_pairs\n        )\n    def _calculate_social_graph_connectivity(self, source_user, target_user):\n        \"\"\"\n        Analyze shared connections and network proximity\n        \"\"\"\n        source_connections = set(conn['_id'] for conn in source_user.get('connections', []))\n        target_connections = set(conn['_id'] for conn in target_user.get('connections', []))\n        \n        # Calculate shared connections\n        shared_connections = le"}, {"index": 571, "path": "ML/recommendation_post/views.py", "chunk": "('connections', []))\n        \n        # Calculate shared connections\n        shared_connections = len(source_connections.intersection(target_connections))\n        \n        # Normalize based on total connections\n        total_connections = len(source_connections.union(target_connections))\n        \n        return min(shared_connections / (total_connections + 1), 1.0)\n    \n    def _calculate_content_interaction(self, source_user_id, target_user_id):\n        \"\"\"\n        Measure interactions through "}, {"index": 572, "path": "ML/recommendation_post/views.py", "chunk": "interaction(self, source_user_id, target_user_id):\n        \"\"\"\n        Measure interactions through posts, comments, likes\n        \"\"\"\n        # Fetch posts and interactions\n        source_posts = list(self.posts_collection.find({'userId': source_user_id}))\n        target_posts = list(self.posts_collection.find({'userId': target_user_id}))\n        \n        # Count mutual interactions\n        interaction_count = 0\n        \n        for source_post in source_posts:\n            # Check if target use"}, {"index": 573, "path": "ML/recommendation_post/views.py", "chunk": "action_count = 0\n        \n        for source_post in source_posts:\n            # Check if target user liked or commented\n            if any(like.get('userId') == target_user_id for like in source_post.get('likes', [])):\n                interaction_count += 0.3\n            \n            if any(comment.get('userId') == target_user_id for comment in source_post.get('comments', [])):\n                interaction_count += 0.5\n        \n        return min(interaction_count, 1.0)\n    \n    def _calculate_g"}, {"index": 574, "path": "ML/recommendation_post/views.py", "chunk": "teraction_count += 0.5\n        \n        return min(interaction_count, 1.0)\n    \n    def _calculate_geographic_proximity(self, source_user, target_user):\n        \"\"\"\n        Calculate geographic closeness using Haversine formula\n        \"\"\"\n        from math import radians, sin, cos, sqrt, atan2\n        \n        def haversine_distance(lat1, lon1, lat2, lon2):\n            R = 6371  # Earth's radius in kilometers\n            \n            # Convert to radians\n            lat1, lon1, lat2, lon2 = map"}, {"index": 575, "path": "ML/recommendation_post/views.py", "chunk": "in kilometers\n            \n            # Convert to radians\n            lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])\n            \n            # Haversine formula\n            dlat = lat2 - lat1\n            dlon = lon2 - lon1\n            \n            a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n            c = 2 * atan2(sqrt(a), sqrt(1-a))\n            \n            return R * c\n        \n        # Check location data\n        source_location = source_user.get('locati"}, {"index": 576, "path": "ML/recommendation_post/views.py", "chunk": "eturn R * c\n        \n        # Check location data\n        source_location = source_user.get('location', {})\n        target_location = target_user.get('location', {})\n        \n        if not (source_location and target_location):\n            return 0\n        \n        # Calculate distance\n        distance = haversine_distance(\n            source_location.get('latitude', 0),\n            source_location.get('longitude', 0),\n            target_location.get('latitude', 0),\n            target_location"}, {"index": 577, "path": "ML/recommendation_post/views.py", "chunk": "ion.get('longitude', 0),\n            target_location.get('latitude', 0),\n            target_location.get('longitude', 0)\n        )\n        \n        # Convert distance to proximity score\n        # Closer distances get higher scores\n        proximity_score = max(1 - (distance / 10000), 0)  # Assuming max relevant distance is 10000 km\n        \n        return proximity_score\n    \n    def _calculate_temporal_engagement(self, source_user_id, target_user_id):\n        \"\"\"\n        Analyze engagement patt"}, {"index": 578, "path": "ML/recommendation_post/views.py", "chunk": "mporal_engagement(self, source_user_id, target_user_id):\n        \"\"\"\n        Analyze engagement patterns over time\n        \"\"\"\n        from datetime import datetime, timedelta\n        \n        # Fetch posts and interactions\n        source_posts = list(self.posts_collection.find({'userId': source_user_id}))\n        \n        # Time-based engagement analysis\n        recent_interactions = []\n        now = datetime.now()\n        \n        for post in source_posts:\n            # Check for interactions "}, {"index": 579, "path": "ML/recommendation_post/views.py", "chunk": "ow = datetime.now()\n        \n        for post in source_posts:\n            # Check for interactions by target user\n            likes = [like for like in post.get('likes', []) if like.get('userId') == target_user_id]\n            comments = [comment for comment in post.get('comments', []) if comment.get('userId') == target_user_id]\n            \n            for interaction in likes + comments:\n                interaction_time = interaction.get('createdAt', now)\n                time_diff = (now - in"}, {"index": 580, "path": "ML/recommendation_post/views.py", "chunk": "          interaction_time = interaction.get('createdAt', now)\n                time_diff = (now - interaction_time).days\n                \n                # Decay function - more recent interactions matter more\n                recent_weight = max(1 - (time_diff / 365), 0)\n                recent_interactions.append(recent_weight)\n        \n        # Calculate temporal engagement score\n        return sum(recent_interactions) / (len(recent_interactions) + 1)\n    \n    def _calculate_serendipity_factor"}, {"index": 581, "path": "ML/recommendation_post/views.py", "chunk": "sum(recent_interactions) / (len(recent_interactions) + 1)\n    \n    def _calculate_serendipity_factor(self):\n        \"\"\"\n        Introduce an element of unexpected connection\n        \"\"\"\n        import random\n        \n        # Controlled randomness\n        # High chance of low value, small chance of high value\n        serendipity = random.betavariate(0.5, 2)\n        return serendipity\n    def _are_roles_similar(self, role1, role2):\n        \"\"\"\n        Advanced role similarity detection using sem"}, {"index": 582, "path": "ML/recommendation_post/views.py", "chunk": "_roles_similar(self, role1, role2):\n        \"\"\"\n        Advanced role similarity detection using semantic matching\n        \"\"\"\n        # This is a placeholder - in a real-world scenario, \n        # you'd use more sophisticated NLP techniques\n        common_keywords = [\n            'manager', 'developer', 'engineer', 'lead', \n            'senior', 'junior', 'director', 'analyst'\n        ]\n        \n        if not role1 or not role2:\n            return False\n        \n        role1_lower = role1.low"}, {"index": 583, "path": "ML/recommendation_post/views.py", "chunk": "        if not role1 or not role2:\n            return False\n        \n        role1_lower = role1.lower()\n        role2_lower = role2.lower()\n        \n        # Basic keyword matching\n        for keyword in common_keywords:\n            if keyword in role1_lower and keyword in role2_lower:\n                return True\n        \n        return False\n    def calculate_interaction_strength(self, source_user_id, target_user_id):\n        \"\"\"\n        Quantum-inspired multi-dimensional interaction strength"}, {"index": 584, "path": "ML/recommendation_post/views.py", "chunk": "ser_id, target_user_id):\n        \"\"\"\n        Quantum-inspired multi-dimensional interaction strength calculation\n        \n        Handles ObjectId inputs by converting to string\n        \"\"\"\n        try:\n            # Convert to ObjectId\n            source_user_id = ObjectId(str(source_user_id))\n            target_user_id = ObjectId(str(target_user_id))\n            \n            # Fetch full user documents\n            source_user = self.users_collection.find_one({'_id': source_user_id})\n          "}, {"index": 585, "path": "ML/recommendation_post/views.py", "chunk": "cuments\n            source_user = self.users_collection.find_one({'_id': source_user_id})\n            target_user = self.users_collection.find_one({'_id': target_user_id})\n            \n            if not source_user or not target_user:\n                print(f\"User not found: Source {source_user_id}, Target {target_user_id}\")\n                return 0\n            \n            # Safely extract user data\n            source_data = {\n                'workExperience': source_user.get('workExperience', "}, {"index": 586, "path": "ML/recommendation_post/views.py", "chunk": "ata\n            source_data = {\n                'workExperience': source_user.get('workExperience', []),\n                'education': source_user.get('education', []),\n                'skills': source_user.get('skills', []),\n                'location': source_user.get('location', {}),\n                'connections': source_user.get('connections', [])\n            }\n            \n            target_data = {\n                'workExperience': target_user.get('workExperience', []),\n                'edu"}, {"index": 587, "path": "ML/recommendation_post/views.py", "chunk": "ta = {\n                'workExperience': target_user.get('workExperience', []),\n                'education': target_user.get('education', []),\n                'skills': target_user.get('skills', []),\n                'location': target_user.get('location', {}),\n                'connections': target_user.get('connections', [])\n            }\n            \n            # 1. Professional Proximity Score\n            professional_proximity = self._calculate_professional_proximity(source_data, target_data"}, {"index": 588, "path": "ML/recommendation_post/views.py", "chunk": "            professional_proximity = self._calculate_professional_proximity(source_data, target_data)\n            \n            # 2. Skill Resonance\n            skill_resonance = self._calculate_skill_resonance(source_data, target_data)\n            \n            # 3. Social Graph Connectivity\n            social_connectivity = self._calculate_social_graph_connectivity(source_data, target_data)\n            \n            # 4. Content Interaction Intensity\n            content_interaction = self._calcul"}, {"index": 589, "path": "ML/recommendation_post/views.py", "chunk": "      \n            # 4. Content Interaction Intensity\n            content_interaction = self._calculate_content_interaction(str(source_user_id), str(target_user_id))\n            \n            # 5. Geographic Relevance\n            geographic_relevance = self._calculate_geographic_proximity(source_data, target_data)\n            \n            # 6. Temporal Engagement Pattern\n            temporal_engagement = self._calculate_temporal_engagement(str(source_user_id), str(target_user_id))\n            \n  "}, {"index": 590, "path": "ML/recommendation_post/views.py", "chunk": "ment = self._calculate_temporal_engagement(str(source_user_id), str(target_user_id))\n            \n            # 7. Probabilistic Serendipity Factor\n            serendipity_factor = self._calculate_serendipity_factor()\n            \n            # Quantum-inspired Non-linear Combination\n            interaction_strength = (\n                0.25 * professional_proximity +\n                0.20 * skill_resonance +\n                0.15 * social_connectivity +\n                0.15 * content_interaction +"}, {"index": 591, "path": "ML/recommendation_post/views.py", "chunk": "esonance +\n                0.15 * social_connectivity +\n                0.15 * content_interaction +\n                0.10 * geographic_relevance +\n                0.10 * temporal_engagement +\n                0.05 * serendipity_factor\n            )\n            \n            # Normalize and scale\n            final_score = min(max(interaction_strength * 10, 0), 100)\n            \n            print(f\"Interaction Strength Breakdown:\")\n            print(f\"Professional Proximity: {professional_proximity}"}, {"index": 592, "path": "ML/recommendation_post/views.py", "chunk": "teraction Strength Breakdown:\")\n            print(f\"Professional Proximity: {professional_proximity}\")\n            print(f\"Skill Resonance: {skill_resonance}\")\n            print(f\"Social Connectivity: {social_connectivity}\")\n            print(f\"Content Interaction: {content_interaction}\")\n            print(f\"Geographic Relevance: {geographic_relevance}\")\n            print(f\"Temporal Engagement: {temporal_engagement}\")\n            print(f\"Serendipity Factor: {serendipity_factor}\")\n            pri"}, {"index": 593, "path": "ML/recommendation_post/views.py", "chunk": "emporal_engagement}\")\n            print(f\"Serendipity Factor: {serendipity_factor}\")\n            print(f\"Final Score: {final_score}\")\n            \n            return final_score\n        \n        except Exception as e:\n            print(f\"Detailed Interaction Strength Calculation Error: {e}\")\n            return 0\n    \n    def store_interaction_strength(self, source_user_id, target_user_id, interaction_strength):\n        \"\"\"\n        Store interaction strength in the database\n        \"\"\"\n        tr"}, {"index": 594, "path": "ML/recommendation_post/views.py", "chunk": "ion_strength):\n        \"\"\"\n        Store interaction strength in the database\n        \"\"\"\n        try:\n            # Convert to ObjectId\n            source_user_id = ObjectId(str(source_user_id))\n            target_user_id = ObjectId(str(target_user_id))\n            \n            # Prepare interaction document\n            interaction_doc = {\n                'source_user_id': source_user_id,\n                'target_user_id': target_user_id,\n                'interaction_strength': interaction_stren"}, {"index": 595, "path": "ML/recommendation_post/views.py", "chunk": "         'target_user_id': target_user_id,\n                'interaction_strength': interaction_strength,\n                'created_at': datetime.now(),\n                'last_updated': datetime.now()\n            }\n            \n            # Check if interaction already exists\n            existing_interaction = self.interactions_collection.find_one({\n                'source_user_id': source_user_id,\n                'target_user_id': target_user_id\n            })\n            \n            if existing"}, {"index": 596, "path": "ML/recommendation_post/views.py", "chunk": "                'target_user_id': target_user_id\n            })\n            \n            if existing_interaction:\n                # Update existing interaction\n                self.interactions_collection.update_one(\n                    {\n                        'source_user_id': source_user_id,\n                        'target_user_id': target_user_id\n                    },\n                    {'$set': {\n                        'interaction_strength': interaction_strength,\n                      "}, {"index": 597, "path": "ML/recommendation_post/views.py", "chunk": "set': {\n                        'interaction_strength': interaction_strength,\n                        'last_updated': datetime.now()\n                    }}\n                )\n                print(f\"Updated interaction strength between {source_user_id} and {target_user_id}\")\n            else:\n                # Insert new interaction\n                self.interactions_collection.insert_one(interaction_doc)\n                print(f\"Stored new interaction strength between {source_user_id} and {target_"}, {"index": 598, "path": "ML/recommendation_post/views.py", "chunk": "n_doc)\n                print(f\"Stored new interaction strength between {source_user_id} and {target_user_id}\")\n            \n            return True\n        except Exception as e:\n            print(f\"Error storing interaction strength: {e}\")\n            return False\n    \n    def get_stored_interaction_strength(self, source_user_id, target_user_id):\n        \"\"\"\n        Retrieve stored interaction strength\n        \"\"\"\n        try:\n            # Convert to ObjectId\n            source_user_id = Objec"}, {"index": 599, "path": "ML/recommendation_post/views.py", "chunk": "rength\n        \"\"\"\n        try:\n            # Convert to ObjectId\n            source_user_id = ObjectId(str(source_user_id))\n            target_user_id = ObjectId(str(target_user_id))\n            \n            # Find the interaction\n            interaction = self.interactions_collection.find_one({\n                'source_user_id': source_user_id,\n                'target_user_id': target_user_id\n            })\n            \n            if interaction:\n                return interaction.get('interac"}, {"index": 600, "path": "ML/recommendation_post/views.py", "chunk": "         })\n            \n            if interaction:\n                return interaction.get('interaction_strength', 0)\n            \n            return 0\n        except Exception as e:\n            print(f\"Error retrieving interaction strength: {e}\")\n            return 0\n\n    # ... (rest of the existing methods remain the same)\n\n# New Django views\n@csrf_exempt\ndef generate_connection_interaction_strength(request):\n    \"\"\"\n    Django view to generate and store interaction strength when a connection"}, {"index": 601, "path": "ML/recommendation_post/views.py", "chunk": "ength(request):\n    \"\"\"\n    Django view to generate and store interaction strength when a connection is made\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            # Parse JSON data\n            data = json.loads(request.body)\n            source_user_id = data.get('source_user_id')\n            target_user_id = data.get('target_user_id')\n            \n            # Validate input\n            if not source_user_id or not target_user_id:\n                return JsonResponse({\n              "}, {"index": 602, "path": "ML/recommendation_post/views.py", "chunk": "   if not source_user_id or not target_user_id:\n                return JsonResponse({\n                    'error': 'Source and target user IDs are required'\n                }, status=400)\n            \n            # Create interaction strength calculator\n            calculator = QuantumInteractionStrengthCalculator()\n            \n            # Calculate interaction strength\n            interaction_strength = calculator.calculate_interaction_strength(\n                source_user_id, \n             "}, {"index": 603, "path": "ML/recommendation_post/views.py", "chunk": "strength = calculator.calculate_interaction_strength(\n                source_user_id, \n                target_user_id\n            )\n            \n            # Store interaction strength\n            success = calculator.store_interaction_strength(\n                source_user_id, \n                target_user_id, \n                interaction_strength\n            )\n            \n            if success:\n                return JsonResponse({\n                    'interaction_strength': interaction_stren"}, {"index": 604, "path": "ML/recommendation_post/views.py", "chunk": "\n                return JsonResponse({\n                    'interaction_strength': interaction_strength,\n                    'message': 'Interaction strength calculated and stored successfully'\n                })\n            else:\n                return JsonResponse({\n                    'error': 'Failed to store interaction strength'\n                }, status=500)\n        \n        except json.JSONDecodeError:\n            return JsonResponse({\n                'error': 'Invalid JSON'\n            "}, {"index": 605, "path": "ML/recommendation_post/views.py", "chunk": "NDecodeError:\n            return JsonResponse({\n                'error': 'Invalid JSON'\n            }, status=400)\n        except Exception as e:\n            print(f\"Error in connection interaction strength generation: {e}\")\n            return JsonResponse({\n                'error': 'An unexpected error occurred'\n            }, status=500)\n    \n    return JsonResponse({\n        'error': 'Method not allowed'\n    }, status=405)\n\n\n\n@csrf_exempt\ndef get_user_connections(request):\n    \"\"\"\n    Django "}, {"index": 606, "path": "ML/recommendation_post/views.py", "chunk": "t allowed'\n    }, status=405)\n\n\n\n@csrf_exempt\ndef get_user_connections(request):\n    \"\"\"\n    Django view to retrieve detailed connection information for a user\n    \"\"\"\n    if request.method == 'GET':\n        try:\n            # Get user ID from query parameters\n            user_id = request.GET.get('user_id')\n            print(user_id)\n            if not user_id:\n                return JsonResponse({\n                    'error': 'User ID is required'\n                }, status=400)\n            \n  "}, {"index": 607, "path": "ML/recommendation_post/views.py", "chunk": "({\n                    'error': 'User ID is required'\n                }, status=400)\n            \n            # Convert to ObjectId if needed\n            try:\n                user_id = ObjectId(user_id)\n            except:\n                return JsonResponse({\n                    'error': 'Invalid user ID format'\n                }, status=400)\n            \n            # MongoDB Connection (assuming same connection as other methods)\n            client = MongoClient(os.getenv(\"MONGO_URL\"))\n       "}, {"index": 608, "path": "ML/recommendation_post/views.py", "chunk": "g same connection as other methods)\n            client = MongoClient(os.getenv(\"MONGO_URL\"))\n            db = client['SIH']\n            users_collection = db['users3']\n            \n            # Find the user\n            user = users_collection.find_one({'_id': user_id})\n            \n            if not user:\n                return JsonResponse({\n                    'error': 'User not found'\n                }, status=404)\n            \n            # Prepare connections details\n            connecti"}, {"index": 609, "path": "ML/recommendation_post/views.py", "chunk": "          }, status=404)\n            \n            # Prepare connections details\n            connection_details = []\n            \n            # Check if connections exist\n            if user.get('connections'):\n                print(\"user connections are:\",user['connections'])\n                for connection in user['connections']:\n                    \n                    \n                    connection_info = {\n                        'name': connection.get('fullName', 0),\n                       "}, {"index": 610, "path": "ML/recommendation_post/views.py", "chunk": "tion_info = {\n                        'name': connection.get('fullName', 0),\n                        'interaction_strength': connection.get('interaction_strength', 0),\n                        \n                    }\n                    \n                    connection_details.append(connection_info)\n            \n            \n            return JsonResponse({\n                'total_connections': len(connection_details),\n                'connections': connection_details\n            })\n        \n     "}, {"index": 611, "path": "ML/recommendation_post/views.py", "chunk": "connection_details),\n                'connections': connection_details\n            })\n        \n        except Exception as e:\n            print(f\"Error retrieving user connections: {e}\")\n            return JsonResponse({\n                'error': 'An unexpected error occurred'\n            }, status=500)\n    \n    return JsonResponse({\n        'error': 'Method not allowed'\n    }, status=405)\n\n\n@csrf_exempt\ndef get_post_details(request):\n    \"\"\"\n    Django view to retrieve comprehensive post details"}, {"index": 612, "path": "ML/recommendation_post/views.py", "chunk": "exempt\ndef get_post_details(request):\n    \"\"\"\n    Django view to retrieve comprehensive post details including \n    likes, comments, reactions, shares, and connection details\n    Sorted by connection status and interaction strength\n    \"\"\"\n    if request.method == 'GET':\n        try:\n            # Get post ID from query parameters\n            post_id = request.GET.get('post_id')\n            \n            # Validate post ID\n            if not post_id:\n                return JsonResponse({\n        "}, {"index": 613, "path": "ML/recommendation_post/views.py", "chunk": "       # Validate post ID\n            if not post_id:\n                return JsonResponse({\n                    'error': 'Post ID is required'\n                }, status=400)\n            \n            # Convert to ObjectId\n            try:\n                post_id = ObjectId(post_id)\n            except:\n                return JsonResponse({\n                    'error': 'Invalid post ID format'\n                }, status=400)\n            \n            # MongoDB Connection\n            client = MongoCli"}, {"index": 614, "path": "ML/recommendation_post/views.py", "chunk": "          }, status=400)\n            \n            # MongoDB Connection\n            client = MongoClient(os.getenv(\"MONGO_URL\"))\n            db = client['SIH']\n            posts_collection = db['post3']\n            users_collection = db['users3']\n            \n            # Find the post\n            post = posts_collection.find_one({'_id': post_id})\n            if not post:\n                return JsonResponse({\n                    'error': 'Post not found'\n                }, status=404)\n          "}, {"index": 615, "path": "ML/recommendation_post/views.py", "chunk": "onResponse({\n                    'error': 'Post not found'\n                }, status=404)\n            \n            # Get post owner details\n            try:\n                post_owner = users_collection.find_one({'_id': post['userId']})\n                owner_info = {\n                    'user_id': str(post_owner['_id']),\n                    'name': post_owner.get('fullName', 'Unknown'),\n                    'email': post_owner.get('email', '')\n                }\n                \n                # "}, {"index": 616, "path": "ML/recommendation_post/views.py", "chunk": "          'email': post_owner.get('email', '')\n                }\n                \n                # Create a dictionary of connections for easy lookup\n                owner_connections = {\n                    str(conn['_id']): conn for conn in post_owner.get('connections', [])\n                }\n            except:\n                owner_info = {\n                    'user_id': '',\n                    'name': 'Unknown',\n                    'email': ''\n                }\n                owner_connect"}, {"index": 617, "path": "ML/recommendation_post/views.py", "chunk": "  'name': 'Unknown',\n                    'email': ''\n                }\n                owner_connections = {}\n            \n            # Helper function to process user interactions\n            def process_user_interactions(user_id):\n                # Convert user_id to string for dictionary lookup\n                user_id_str = str(user_id)\n                \n                # Find the user\n                user = users_collection.find_one({'_id': user_id})\n                if not user:\n            "}, {"index": 618, "path": "ML/recommendation_post/views.py", "chunk": "        user = users_collection.find_one({'_id': user_id})\n                if not user:\n                    return None\n                \n                # Check connection status and get interaction strength\n                connection_info = None\n                if user_id_str in owner_connections:\n                    connection_info = {\n                        'is_connection': True,\n                        'interaction_strength': owner_connections[user_id_str].get('interaction_strength', 0)\n   "}, {"index": 619, "path": "ML/recommendation_post/views.py", "chunk": "           'interaction_strength': owner_connections[user_id_str].get('interaction_strength', 0)\n                    }\n                else:\n                    connection_info = {\n                        'is_connection': False,\n                        'interaction_strength': 0  # Set to 0 for sorting purposes\n                    }\n                \n                return {\n                    'user_id': str(user['_id']),\n                    'name': user.get('fullName', 'Unknown'),\n              "}, {"index": 620, "path": "ML/recommendation_post/views.py", "chunk": "r_id': str(user['_id']),\n                    'name': user.get('fullName', 'Unknown'),\n                    'email': user.get('email', ''),\n                    **connection_info\n                }\n            \n            # Sorting function for interactions\n            def sort_interactions(interactions):\n                # Sort by:\n                # 1. Connection status (connected first)\n                # 2. Interaction strength (descending)\n                return sorted(\n                    intera"}, {"index": 621, "path": "ML/recommendation_post/views.py", "chunk": "    # 2. Interaction strength (descending)\n                return sorted(\n                    interactions, \n                    key=lambda x: (-x['is_connection'], -x.get('interaction_strength', 0))\n                )\n            \n            # Process likes\n            likes_details = []\n            for like_user_id in post.get('likes', []):\n                try:\n                    like_user_info = process_user_interactions(like_user_id)\n                    if like_user_info:\n                  "}, {"index": 622, "path": "ML/recommendation_post/views.py", "chunk": " = process_user_interactions(like_user_id)\n                    if like_user_info:\n                        likes_details.append(like_user_info)\n                except Exception as e:\n                    print(f\"Error processing like user {like_user_id}: {e}\")\n            likes_details = sort_interactions(likes_details)\n            \n            # Process comments\n            comments_details = []\n            for comment in post.get('comments', []):\n                try:\n                    comment_"}, {"index": 623, "path": "ML/recommendation_post/views.py", "chunk": "          for comment in post.get('comments', []):\n                try:\n                    comment_user_info = process_user_interactions(comment['userId'])\n                    if comment_user_info:\n                        comment_details = {\n                            **comment_user_info,\n                            'text': comment.get('text', ''),\n                            'created_at': comment.get('createdAt', '')\n                        }\n                        comments_details.append(co"}, {"index": 624, "path": "ML/recommendation_post/views.py", "chunk": "nt.get('createdAt', '')\n                        }\n                        comments_details.append(comment_details)\n                except Exception as e:\n                    print(f\"Error processing comment user {comment['userId']}: {e}\")\n            comments_details = sort_interactions(comments_details)\n            \n            # Process reactions\n            reactions_details = []\n            for reaction in post.get('reactions', []):\n                try:\n                    reaction_user_info"}, {"index": 625, "path": "ML/recommendation_post/views.py", "chunk": "r reaction in post.get('reactions', []):\n                try:\n                    reaction_user_info = process_user_interactions(reaction['userId'])\n                    if reaction_user_info:\n                        reaction_details = {\n                            **reaction_user_info,\n                            'reaction_type': reaction.get('type', '')\n                        }\n                        reactions_details.append(reaction_details)\n                except Exception as e:\n           "}, {"index": 626, "path": "ML/recommendation_post/views.py", "chunk": "       reactions_details.append(reaction_details)\n                except Exception as e:\n                    print(f\"Error processing reaction user {reaction['userId']}: {e}\")\n            reactions_details = sort_interactions(reactions_details)\n            \n            # Process shares\n            shares_details = []\n            for share_user_id in post.get('shares', []):\n                try:\n                    share_user_info = process_user_interactions(share_user_id)\n                    if s"}, {"index": 627, "path": "ML/recommendation_post/views.py", "chunk": "                 share_user_info = process_user_interactions(share_user_id)\n                    if share_user_info:\n                        shares_details.append(share_user_info)\n                except Exception as e:\n                    print(f\"Error processing share user {share_user_id}: {e}\")\n            shares_details = sort_interactions(shares_details)\n            \n            # Prepare response\n            response_data = {\n                'post_id': str(post['_id']),\n                'owne"}, {"index": 628, "path": "ML/recommendation_post/views.py", "chunk": "nse\n            response_data = {\n                'post_id': str(post['_id']),\n                'owner': owner_info,\n                'total_likes': len(likes_details),\n                'likes': likes_details,\n                'total_comments': len(comments_details),\n                'comments': comments_details,\n                'total_reactions': len(reactions_details),\n                'reactions': reactions_details,\n                'total_shares': len(shares_details),\n                'shares': shar"}, {"index": 629, "path": "ML/recommendation_post/views.py", "chunk": "actions_details,\n                'total_shares': len(shares_details),\n                'shares': shares_details\n            }\n            \n            return JsonResponse(response_data)\n        \n        except Exception as e:\n            print(f\"Error retrieving post details: {e}\")\n            return JsonResponse({\n                'error': 'An unexpected error occurred'\n            }, status=500)\n    \n    return JsonResponse({\n        'error': 'Method not allowed'\n    }, status=405)"}, {"index": 630, "path": "ML/recommendation_post/views.py", "chunk": "   \n    return JsonResponse({\n        'error': 'Method not allowed'\n    }, status=405)"}, {"index": 631, "path": "ML/requirements.txt", "chunk": "aiohappyeyeballs==2.4.3\naiohttp==3.11.8\naiosignal==1.3.1\nannotated-types==0.7.0\nanyio==4.6.2.post1\nasgiref==3.8.1\nattrs==24.2.0\nbcrypt==4.2.1\nbuild==1.2.2.post1\nCacheControl==0.14.1\ncachetools==5.5.0\ncertifi==2024.8.30\ncffi==1.17.1\ncharset-normalizer==3.4.0\ncleo==2.1.0\nclick==8.1.7\ncolorama==0.4.6\ncrashtest==0.4.1\ncryptography==44.0.0\ndataclasses-json==0.6.7\ndistlib==0.3.9\ndistro==1.9.0\nDjango==5.1.3\ndjango-cors-headers==4.6.0\ndjangorestframework==3.15.2\ndnspython==2.7.0\ndulwich==0.21.7\nfaiss-cp"}, {"index": 632, "path": "ML/requirements.txt", "chunk": "1.3\ndjango-cors-headers==4.6.0\ndjangorestframework==3.15.2\ndnspython==2.7.0\ndulwich==0.21.7\nfaiss-cpu==1.9.0.post1\nFaker==33.1.0\nfastjsonschema==2.21.0\nfilelock==3.16.1\nfrozenlist==1.5.0\nfsspec==2024.10.0\ngensim==4.3.3\ngeographiclib==2.0\ngeopy==2.4.1\ngoogle-ai-generativelanguage==0.6.10\ngoogle-api-core==2.23.0\ngoogle-api-python-client==2.154.0\ngoogle-auth==2.36.0\ngoogle-auth-httplib2==0.2.0\ngoogle-generativeai==0.8.3\ngoogleapis-common-protos==1.66.0\ngreenlet==3.1.1\ngrpcio==1.68.0\ngrpcio-status=="}, {"index": 633, "path": "ML/requirements.txt", "chunk": "-generativeai==0.8.3\ngoogleapis-common-protos==1.66.0\ngreenlet==3.1.1\ngrpcio==1.68.0\ngrpcio-status==1.68.0\nh11==0.14.0\nhttpcore==1.0.7\nhttplib2==0.22.0\nhttpx==0.27.2\nhttpx-sse==0.4.0\nhuggingface-hub==0.26.2\nidna==3.10\ninstaller==0.7.0\njaraco.classes==3.4.0\nJinja2==3.1.4\njiter==0.7.1\njoblib==1.4.2\njsonpatch==1.33\njsonpointer==3.0.0\nkeyring==24.3.1\nlangchain==0.3.9\nlangchain-community==0.3.8\nlangchain-core==0.3.21\nlangchain-google-genai==2.0.5\nlangchain-openai==0.2.9\nlangchain-text-splitters==0.3."}, {"index": 634, "path": "ML/requirements.txt", "chunk": "in-core==0.3.21\nlangchain-google-genai==2.0.5\nlangchain-openai==0.2.9\nlangchain-text-splitters==0.3.2\nlangsmith==0.1.147\nMarkupSafe==3.0.2\nmarshmallow==3.23.1\nmore-itertools==10.5.0\nmpmath==1.3.0\nmsgpack==1.1.0\nmultidict==6.1.0\nmypy-extensions==1.0.0\nnetworkx==3.4.2\nnltk==3.9.1\nnumpy==1.26.4\nopenai==1.55.1\norjson==3.10.12\npackaging==24.2\npdfminer.six==20231228\npdfplumber==0.11.4\npexpect==4.9.0\npillow==11.0.0\npkginfo==1.11.2\nplatformdirs==4.3.6\npoetry==1.8.4\npoetry-core==1.9.1\npoetry-plugin-expor"}, {"index": 635, "path": "ML/requirements.txt", "chunk": "low==11.0.0\npkginfo==1.11.2\nplatformdirs==4.3.6\npoetry==1.8.4\npoetry-core==1.9.1\npoetry-plugin-export==1.8.0\npropcache==0.2.0\nproto-plus==1.25.0\nprotobuf==5.28.3\nptyprocess==0.7.0\npyasn1==0.6.1\npyasn1_modules==0.4.1\npycparser==2.22\npydantic==2.10.2\npydantic-settings==2.6.1\npydantic_core==2.27.1\npymongo==4.10.1\nPyMySQL==1.1.1\npyparsing==3.2.0\npypdfium2==4.30.0\npyproject_hooks==1.2.0\npython-dateutil==2.9.0.post0\npython-dotenv==1.0.1\npywin32-ctypes==0.2.3\nPyYAML==6.0.2\nRapidFuzz==3.10.1\nregex==2024"}, {"index": 636, "path": "ML/requirements.txt", "chunk": "==2.9.0.post0\npython-dotenv==1.0.1\npywin32-ctypes==0.2.3\nPyYAML==6.0.2\nRapidFuzz==3.10.1\nregex==2024.11.6\nrequests==2.32.3\nrequests-toolbelt==1.0.0\nrsa==4.9\nsafetensors==0.4.5\nscikit-learn==1.5.2\nscipy==1.13.1\nsentence-transformers==3.3.1\nsetuptools==75.6.0\nshellingham==1.5.4\nsix==1.17.0\nsmart-open==7.0.5\nsniffio==1.3.1\nSQLAlchemy==2.0.36\nsqlparse==0.5.2\nsympy==1.13.1\ntenacity==9.0.0\nthreadpoolctl==3.5.0\ntiktoken==0.8.0\ntokenizers==0.20.3\ntomlkit==0.13.2\ntorch==2.5.1\ntqdm==4.67.1\ntransformers==4"}, {"index": 637, "path": "ML/requirements.txt", "chunk": "==3.5.0\ntiktoken==0.8.0\ntokenizers==0.20.3\ntomlkit==0.13.2\ntorch==2.5.1\ntqdm==4.67.1\ntransformers==4.46.3\ntrove-classifiers==2024.10.21.16\ntyping-inspect==0.9.0\ntyping_extensions==4.12.2\ntzdata==2024.2\nuritemplate==4.1.1\nurllib3==2.2.3\nvirtualenv==20.28.0\nwrapt==1.17.0\nyarl==1.18.0"}, {"index": 638, "path": "ML/resume_autofill/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 639, "path": "ML/resume_autofill/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass ResumeAutofillConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'resume_autofill'\n"}, {"index": 640, "path": "ML/resume_autofill/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 641, "path": "ML/resume_autofill/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 642, "path": "ML/resume_autofill/urls.py", "chunk": "from django.urls import path\nfrom .views import upload_resume\n\nurlpatterns = [\n    path('upload-resume/', upload_resume, name='upload_resume'),\n]"}, {"index": 643, "path": "ML/resume_autofill/views.py", "chunk": "from django.views.decorators.csrf import csrf_exempt\nimport os\nimport json\nimport logging\nimport traceback\nimport random\nimport pdfplumber\nfrom django.http import JsonResponse\nfrom django.core.files.storage import default_storage\nfrom django.conf import settings\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain_core.output_parsers import JsonOutputParser\nfrom datetime import datetime\n\n# Configure logging\nlogger = logging.getLogg"}, {"index": 644, "path": "ML/resume_autofill/views.py", "chunk": " import JsonOutputParser\nfrom datetime import datetime\n\n# Configure logging\nlogger = logging.getLogger(__name__)\n\nclass ResumeComprehensiveExtractor:\n    def __init__(self):\n        # Ensure Google API key is set\n        api_key = os.getenv(\"GOOGLE_API_KEY\")\n        if not api_key:\n            raise ValueError(\"Google API key is not set. Please check your .env file.\")\n        \n        # Initialize the LLM\n        self.llm = ChatGoogleGenerativeAI(\n            model=\"gemini-pro\", \n            tem"}, {"index": 645, "path": "ML/resume_autofill/views.py", "chunk": " the LLM\n        self.llm = ChatGoogleGenerativeAI(\n            model=\"gemini-pro\", \n            temperature=0.3, \n            max_tokens=2048,  \n            api_key=api_key\n        )\n        \n        # Create a JSON output parser\n        self.json_parser = JsonOutputParser()\n        \n        # Comprehensive prompt template to extract multiple pieces of information\n        self.prompt = PromptTemplate(\n    template=\"\"\"\n    Extract detailed information from the resume text following this comprehe"}, {"index": 646, "path": "ML/resume_autofill/views.py", "chunk": "late(\n    template=\"\"\"\n    Extract detailed information from the resume text following this comprehensive schema:\n\n    {{\n        \"fullName\": \"Full name as it appears on the resume\",\n        \"email\": \"Professional email address\",\n        \"phone\": \"Primary contact phone number\",\n        \"city\": \"City of residence or work\",\n        \"state\": \"State of residence or work\",\n        \"country\": \"Country of residence or work (default to 'India' if not specified)\",\n        \"bio\": \"Professional summary or "}, {"index": 647, "path": "ML/resume_autofill/views.py", "chunk": "f residence or work (default to 'India' if not specified)\",\n        \"bio\": \"Professional summary or objective statement\",\n        \"about\": \"Detailed description of professional background\",\n        \"website\": \"Personal website or professional portfolio URL\",\n        \"skills\": [\"List of professional skills\"],\n        \"interests\": [\"List of professional or personal interests\"],\n        \"languages\": [\"List of languages known\"],\n        \"education\": [\n            {{\n                \"degree\": \"Degree"}, {"index": 648, "path": "ML/resume_autofill/views.py", "chunk": "[\"List of languages known\"],\n        \"education\": [\n            {{\n                \"degree\": \"Degree earned (B.Tech, M.Tech, etc.)\",\n                \"department\": \"Field of study or academic department\",\n                \"institution\": \"Name of educational institution\",\n                \"graduationYear\": \"Year of graduation\",\n                \"isVerified\": \"Always set to false in this context\"\n            }}\n        ],\n        \"workExperience\": [\n            {{\n                \"companyName\": \"Name "}, {"index": 649, "path": "ML/resume_autofill/views.py", "chunk": "      }}\n        ],\n        \"workExperience\": [\n            {{\n                \"companyName\": \"Name of company or organization\",\n                \"role\": \"Job title or position\",\n                \"startDate\": \"Start date of employment\",\n                \"endDate\": \"End date of employment (or null if current job)\",\n                \"description\": \"Brief description of responsibilities or achievements\"\n            }}\n        ],\n        \"projects\": [\n            {{\n                \"title\": \"Project nam"}, {"index": 650, "path": "ML/resume_autofill/views.py", "chunk": "            }}\n        ],\n        \"projects\": [\n            {{\n                \"title\": \"Project name\",\n                \"description\": \"Detailed project description\",\n                \"link\": \"Project URL or repository link (if available)\"\n            }}\n        ],\n        \"certifications\": [\n            {{\n                \"name\": \"Certification name\",\n                \"issuingOrganization\": \"Organization that issued the certification\",\n                \"issueDate\": \"Date of certification\"\n        "}, {"index": 651, "path": "ML/resume_autofill/views.py", "chunk": "zation that issued the certification\",\n                \"issueDate\": \"Date of certification\"\n            }}\n        ]\n    }}\n\n    Resume Text: {resume_text}\n    \"\"\",\n    input_variables=[\"resume_text\"]\n)\n        \n        # Create the extraction chain\n        self.extraction_chain = self.prompt | self.llm | self.json_parser\n\n    def extract_pdf_text(self, pdf_path):\n        \"\"\"\n        Extract all text from a PDF file using pdfplumber.\n        \"\"\"\n        with pdfplumber.open(pdf_path) as pdf:\n   "}, {"index": 652, "path": "ML/resume_autofill/views.py", "chunk": "ext from a PDF file using pdfplumber.\n        \"\"\"\n        with pdfplumber.open(pdf_path) as pdf:\n            full_text = \"\"\n            for page in pdf.pages:\n                page_text = page.extract_text() or \"\"\n                full_text += page_text + \"\\n\\n\"\n        \n        return full_text\n\n    def extract_pdf_text_in_chunks(self, pdf_path, max_chars=5000):\n        \"\"\"\n        Extract text from a PDF in manageable chunks for LLM processing.\n        \"\"\"\n        with pdfplumber.open(pdf_path) "}, {"index": 653, "path": "ML/resume_autofill/views.py", "chunk": "m a PDF in manageable chunks for LLM processing.\n        \"\"\"\n        with pdfplumber.open(pdf_path) as pdf:\n            full_text = \"\"\n            for page in pdf.pages:\n                full_text += (page.extract_text() or \"\") + \"\\n\\n\"\n        \n        # Split text into chunks\n        return [full_text[i:i+max_chars] for i in range(0, len(full_text), max_chars)]\n\n    def clean_and_merge_results(self, raw_outputs):\n        \"\"\"\n        Clean and merge results from multiple chunk extractions.\n     "}, {"index": 654, "path": "ML/resume_autofill/views.py", "chunk": "lf, raw_outputs):\n        \"\"\"\n        Clean and merge results from multiple chunk extractions.\n        \"\"\"\n        try:\n            # Initialize the comprehensive result structure\n            final_result = {\n                \"fullName\": None,\n                \"email\": None,\n                \"phone\": None,\n                \"city\": None,\n                \"state\": None,\n                \"country\": \"India\",\n                \"bio\": None,\n                \"about\": None,\n                \"website\": None,\n     "}, {"index": 655, "path": "ML/resume_autofill/views.py", "chunk": ",\n                \"bio\": None,\n                \"about\": None,\n                \"website\": None,\n                \"skills\": [],\n                \"interests\": [],\n                \"languages\": [],\n                \"education\": [],\n                \"workExperience\": [],\n                \"projects\": [],\n                \"certifications\": []\n            }\n\n            # Process each chunk's results\n            for output in raw_outputs:\n                # Merge scalar fields (take first non-null value)\n      "}, {"index": 656, "path": "ML/resume_autofill/views.py", "chunk": " for output in raw_outputs:\n                # Merge scalar fields (take first non-null value)\n                scalar_fields = [\n                    \"fullName\", \"email\", \"phone\", \"city\", \"state\", \n                    \"bio\", \"about\", \"website\", \"country\"\n                ]\n                for field in scalar_fields:\n                    if output.get(field) and not final_result[field]:\n                        final_result[field] = output[field]\n\n                # Merge list fields\n                li"}, {"index": 657, "path": "ML/resume_autofill/views.py", "chunk": "         final_result[field] = output[field]\n\n                # Merge list fields\n                list_fields = [\n                    \"skills\", \"interests\", \"languages\", \n                    \"education\", \"workExperience\", \"projects\", \"certifications\"\n                ]\n                for field in list_fields:\n                    if output.get(field):\n                        # Extend without duplicates\n                        unique_items = [\n                            item for item in output[fi"}, {"index": 658, "path": "ML/resume_autofill/views.py", "chunk": "ates\n                        unique_items = [\n                            item for item in output[field] \n                            if item not in final_result[field]\n                        ]\n                        final_result[field].extend(unique_items)\n\n            # Post-processing\n            # Limit lists to reasonable lengths\n            final_result[\"skills\"] = final_result[\"skills\"][:10]\n            final_result[\"interests\"] = final_result[\"interests\"][:5]\n            final_result[\""}, {"index": 659, "path": "ML/resume_autofill/views.py", "chunk": "10]\n            final_result[\"interests\"] = final_result[\"interests\"][:5]\n            final_result[\"languages\"] = final_result[\"languages\"][:4]\n            final_result[\"education\"] = final_result[\"education\"][:3]\n            final_result[\"workExperience\"] = final_result[\"workExperience\"][:5]\n            final_result[\"projects\"] = final_result[\"projects\"][:5]\n            final_result[\"certifications\"] = final_result[\"certifications\"][:5]\n\n            # Default values for missing critical fields\n"}, {"index": 660, "path": "ML/resume_autofill/views.py", "chunk": "ns\"] = final_result[\"certifications\"][:5]\n\n            # Default values for missing critical fields\n            if not final_result[\"fullName\"]:\n                final_result[\"fullName\"] = \"Unknown\"\n            \n            # Ensure dates are in correct format\n            for exp in final_result[\"workExperience\"]:\n                try:\n                    exp[\"startDate\"] = datetime.strptime(exp[\"startDate\"], \"%Y-%m-%d\") if exp.get(\"startDate\") else None\n                    exp[\"endDate\"] = dateti"}, {"index": 661, "path": "ML/resume_autofill/views.py", "chunk": "artDate\"], \"%Y-%m-%d\") if exp.get(\"startDate\") else None\n                    exp[\"endDate\"] = datetime.strptime(exp[\"endDate\"], \"%Y-%m-%d\") if exp.get(\"endDate\") else None\n                except (ValueError, TypeError):\n                    exp[\"startDate\"] = None\n                    exp[\"endDate\"] = None\n\n            # Add default values for missing but important fields\n            final_result[\"createdAt\"] = datetime.now()\n            final_result[\"profilePhoto\"] = None\n            final_result"}, {"index": 662, "path": "ML/resume_autofill/views.py", "chunk": "reatedAt\"] = datetime.now()\n            final_result[\"profilePhoto\"] = None\n            final_result[\"password\"] = None  # Will be handled separately\n            final_result[\"eventsRegistered\"] = []\n            final_result[\"connections\"] = []\n            final_result[\"receivedRequests\"] = []\n            final_result[\"sentRequests\"] = []\n            final_result[\"notifications\"] = []\n            final_result[\"chats\"] = []\n            final_result[\"donationHistory\"] = []\n            final_result"}, {"index": 663, "path": "ML/resume_autofill/views.py", "chunk": "final_result[\"chats\"] = []\n            final_result[\"donationHistory\"] = []\n            final_result[\"posts\"] = []\n            final_result[\"likes\"] = []\n            final_result[\"comments\"] = []\n\n            return final_result\n        \n        except Exception as e:\n            logger.error(f\"Error in cleaning results: {e}\")\n            logger.error(traceback.format_exc())\n            return None\n\n    def process_resume(self, pdf_file):\n        \"\"\"\n        Process the uploaded PDF resume and e"}, {"index": 664, "path": "ML/resume_autofill/views.py", "chunk": "e\n\n    def process_resume(self, pdf_file):\n        \"\"\"\n        Process the uploaded PDF resume and extract comprehensive information.\n        \"\"\"\n        # Save the uploaded file temporarily\n        file_path = default_storage.save(\n            os.path.join(settings.MEDIA_ROOT, 'resumes', pdf_file.name), \n            pdf_file\n        )\n        full_path = os.path.join(settings.MEDIA_ROOT, file_path)\n\n        try:\n            # Extract text from PDF\n            resume_chunks = self.extract_pdf_te"}, {"index": 665, "path": "ML/resume_autofill/views.py", "chunk": "h)\n\n        try:\n            # Extract text from PDF\n            resume_chunks = self.extract_pdf_text_in_chunks(full_path)\n\n            # Log the first chunk for debugging\n            logger.info(f\"First Chunk of Resume Text (first 1000 chars):\\n{resume_chunks[0][:1000]}...\")\n\n            # Use LLM to extract structured information\n            extraction_results = []\n            for chunk in resume_chunks:\n                try:\n                    result = self.extraction_chain.invoke({\"resume_t"}, {"index": 666, "path": "ML/resume_autofill/views.py", "chunk": "me_chunks:\n                try:\n                    result = self.extraction_chain.invoke({\"resume_text\": chunk})\n                    extraction_results.append(result)\n                except Exception as chain_error:\n                    logger.error(f\"Chain Extraction Error for chunk: {chain_error}\")\n                    extraction_results.append({\"error\": str(chain_error)})\n\n            # Combine and clean results\n            combined_results = self.clean_and_merge_results(extraction_results)\n  "}, {"index": 667, "path": "ML/resume_autofill/views.py", "chunk": "and clean results\n            combined_results = self.clean_and_merge_results(extraction_results)\n            \n            logger.info(f\"Combined Extraction Results: {combined_results}\")\n            return combined_results\n\n        except Exception as e:\n            # Log the full traceback for debugging\n            logger.error(f\"Error processing resume: {e}\")\n            logger.error(traceback.format_exc())\n            return {\"error\": str(e)}\n        \n        finally:\n            # Clean up t"}, {"index": 668, "path": "ML/resume_autofill/views.py", "chunk": "ormat_exc())\n            return {\"error\": str(e)}\n        \n        finally:\n            # Clean up the temporary file\n            if os.path.exists(full_path):\n                os.remove(full_path)\n\n# Instantiate the extractor\nresume_extractor = ResumeComprehensiveExtractor()\n\n@csrf_exempt\ndef upload_resume(request):\n    \"\"\"\n    Handle resume upload and extraction of comprehensive information.\n    \n    Expected: Multipart form-data with 'resume' file\n    Returns: JSON with extracted resume inform"}, {"index": 669, "path": "ML/resume_autofill/views.py", "chunk": "\n    Expected: Multipart form-data with 'resume' file\n    Returns: JSON with extracted resume information\n    \"\"\"\n    if request.method == 'POST':\n        # Check if file is present\n        if 'resume' not in request.FILES:\n            return JsonResponse({\n                'error': 'No resume file uploaded'\n            }, status=400)\n        \n        # Get the uploaded file\n        resume_file = request.FILES['resume']\n        \n        # Validate file type (optional but recommended)\n        if n"}, {"index": 670, "path": "ML/resume_autofill/views.py", "chunk": "equest.FILES['resume']\n        \n        # Validate file type (optional but recommended)\n        if not resume_file.name.lower().endswith('.pdf'):\n            return JsonResponse({\n                'error': 'Only PDF files are allowed'\n            }, status=400)\n        \n        # Process the resume\n        try:\n            extracted_info = resume_extractor.process_resume(resume_file)\n            return JsonResponse(extracted_info, safe=False)\n        \n        except Exception as e:\n            re"}, {"index": 671, "path": "ML/resume_autofill/views.py", "chunk": "turn JsonResponse(extracted_info, safe=False)\n        \n        except Exception as e:\n            return JsonResponse({\n                'error': f'Error processing resume: {str(e)}'\n            }, status=500)\n    \n    # Handle non-POST requests\n    return JsonResponse({\n        'error': 'Only POST method is allowed'\n    }, status=405)"}, {"index": 672, "path": "ML/rewriteAI/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 673, "path": "ML/rewriteAI/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass RewriteaiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'rewriteAI'\n"}, {"index": 674, "path": "ML/rewriteAI/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 675, "path": "ML/rewriteAI/template.py", "chunk": "\nfrom langchain_core.prompts import PromptTemplate\ndef _define_rewriting_styles():\n        \"\"\"Define comprehensive and nuanced rewriting styles\"\"\"\n        return {\n            # Professional Spectrum\n            'professional_80': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite in a highly formal, corporate professional tone with precise language:\\n\\n{post}\"\n                ),\n                'description': \"Extremely formal, corporate communication style"}, {"index": 676, "path": "ML/rewriteAI/template.py", "chunk": "\"\n                ),\n                'description': \"Extremely formal, corporate communication style\",\n                'keywords': ['very professional', 'corporate', 'executive', 'formal', 'precise']\n            },\n            'professional_standard': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite in a clear, professional business communication style:\\n\\n{post}\"\n                ),\n                'description': \"Standard professional communication\",\n    "}, {"index": 677, "path": "ML/rewriteAI/template.py", "chunk": "post}\"\n                ),\n                'description': \"Standard professional communication\",\n                'keywords': ['professional', 'business', 'clear', 'standard']\n         },\n            'professional_casual': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite in a relaxed, approachable professional tone:\\n\\n{post}\"\n                ),\n                'description': \"Friendly yet professional communication\",\n                'keywords': ['casual pro"}, {"index": 678, "path": "ML/rewriteAI/template.py", "chunk": "  'description': \"Friendly yet professional communication\",\n                'keywords': ['casual professional', 'approachable', 'friendly business']\n            },\n            \n            # Emotional and Cultural Styles\n            'emotional_passionate': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite with intense emotional depth and passionate expression:\\n\\n{post}\"\n                ),\n                'description': \"Highly emotional and expressive comm"}, {"index": 679, "path": "ML/rewriteAI/template.py", "chunk": ":\\n\\n{post}\"\n                ),\n                'description': \"Highly emotional and expressive communication\",\n                'keywords': ['passionate', 'emotional', 'intense', 'heartfelt']\n            },\n            'emotional_subtle': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite with nuanced, understated emotional undertones:\\n\\n{post}\"\n                ),\n                'description': \"Subtle and refined emotional expression\",\n                'key"}, {"index": 680, "path": "ML/rewriteAI/template.py", "chunk": "   ),\n                'description': \"Subtle and refined emotional expression\",\n                'keywords': ['subtle emotion', 'understated', 'refined']\n            },\n            \n            # Language and Cultural Mixtures\n            'multilingual_hindi_english': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite blending Hindi and English:\\n\\n{post}\"\n                ),\n                'description': \"Bilingual communication mixing Hindi and English\",\n  "}, {"index": 681, "path": "ML/rewriteAI/template.py", "chunk": "            ),\n                'description': \"Bilingual communication mixing Hindi and English\",\n                'keywords': ['hinglish', 'hindi-english', 'bilingual']\n            },\n            'multilingual_gujarati_english': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite incorporating Gujarati linguistic nuances with English:\\n\\n{post}\"\n                ),\n                'description': \"Bilingual communication mixing Gujarati and English\",\n          "}, {"index": 682, "path": "ML/rewriteAI/template.py", "chunk": " ),\n                'description': \"Bilingual communication mixing Gujarati and English\",\n                'keywords': ['gujarati-english', 'bilingual', 'regional']\n            },\n            'multilingual_marathi_english': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite blending Marathi and English, preserving cultural context:\\n\\n{post}\"\n                ),\n                'description': \"Bilingual communication mixing Marathi and English\",\n              "}, {"index": 683, "path": "ML/rewriteAI/template.py", "chunk": "\n                'description': \"Bilingual communication mixing Marathi and English\",\n                'keywords': ['marathi-english', 'bilingual', 'maharashtrian']\n            },\n            \n            # Tonal Variations\n            'casual_joking': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite with a light-hearted, humorous tone, adding playful jokes:\\n\\n{post}\"\n                ),\n                'description': \"Conversational style with humor and jo"}, {"index": 684, "path": "ML/rewriteAI/template.py", "chunk": "n\\n{post}\"\n                ),\n                'description': \"Conversational style with humor and jokes\",\n                'keywords': ['casual', 'humorous', 'joking', 'funny']\n            },\n            'serious_academic': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite in a scholarly, analytical, and serious academic tone:\\n\\n{post}\"\n                ),\n                'description': \"Scholarly and serious academic communication\",\n                'keyword"}, {"index": 685, "path": "ML/rewriteAI/template.py", "chunk": "             'description': \"Scholarly and serious academic communication\",\n                'keywords': ['academic', 'serious', 'scholarly', 'analytical']\n            },\n            \n            # Emotional States\n            'emotion_anger': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite expressing controlled yet intense frustration and anger:\\n\\n{post}\"\n                ),\n                'description': \"Communication expressing anger and frustration\",\n"}, {"index": 686, "path": "ML/rewriteAI/template.py", "chunk": "                ),\n                'description': \"Communication expressing anger and frustration\",\n                'keywords': ['angry', 'frustrated', 'intense emotion']\n            },\n            'emotion_sympathetic': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite with deep empathy, compassion, and understanding:\\n\\n{post}\"\n                ),\n                'description': \"Compassionate and empathetic communication\",\n                'keywords': ['sym"}, {"index": 687, "path": "ML/rewriteAI/template.py", "chunk": "      'description': \"Compassionate and empathetic communication\",\n                'keywords': ['sympathetic', 'empathetic', 'compassionate']\n            },\n            \n            # Fallback Default Styles\n            'casual': {\n                'template': PromptTemplate.from_template(\n                    \"Rewrite in a relaxed, conversational, everyday tone:\\n\\n{post}\"\n                ),\n                'description': \"Informal, friendly, everyday communication\",\n                'keywords': ["}, {"index": 688, "path": "ML/rewriteAI/template.py", "chunk": "          'description': \"Informal, friendly, everyday communication\",\n                'keywords': ['casual', 'conversational', 'relaxed', 'friendly']\n            },\n            'strategic_persuasion': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a strategic, persuasive corporate tone to influence decision-makers:\\n\\n{post}\"\n    ),\n    'description': \"Persuasive communication tailored for executives or leadership.\",\n    'keywords': ['strategic', 'persuasive', 'corporate', "}, {"index": 689, "path": "ML/rewriteAI/template.py", "chunk": "n tailored for executives or leadership.\",\n    'keywords': ['strategic', 'persuasive', 'corporate', 'executive', 'influential']\n},\n'investor_focused': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a focus on financial stakeholders, emphasizing ROI and data insights:\\n\\n{post}\"\n    ),\n    'description': \"Financially-focused communication for investors.\",\n    'keywords': ['financial', 'ROI', 'data-driven', 'investors']\n},\n'confident_leadership': {\n    'template': PromptTemp"}, {"index": 690, "path": "ML/rewriteAI/template.py", "chunk": "nancial', 'ROI', 'data-driven', 'investors']\n},\n'confident_leadership': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a confident, authoritative tone suited for leadership communication:\\n\\n{post}\"\n    ),\n    'description': \"Authoritative and inspiring communication for leaders.\",\n    'keywords': ['leadership', 'confident', 'authoritative', 'inspiring']\n},\n'visionary_futuristic': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a visionary and futuristi"}, {"index": 691, "path": "ML/rewriteAI/template.py", "chunk": "ic': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a visionary and futuristic tone, emphasizing innovation:\\n\\n{post}\"\n    ),\n    'description': \"Inspirational communication focused on future possibilities.\",\n    'keywords': ['visionary', 'futuristic', 'innovative', 'inspirational']\n},\n'process_oriented': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a precise and detailed tone, emphasizing processes and workflows:\\n\\n{post}\"\n    ),\n    'description'"}, {"index": 692, "path": "ML/rewriteAI/template.py", "chunk": " precise and detailed tone, emphasizing processes and workflows:\\n\\n{post}\"\n    ),\n    'description': \"Communication focusing on detailed processes and workflows.\",\n    'keywords': ['process', 'workflow', 'precise', 'structured']\n},\n'technical_formal': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a highly technical and formal tone, maintaining clarity:\\n\\n{post}\"\n    ),\n    'description': \"Formal and detailed technical communication.\",\n    'keywords': ['technical', 'form"}, {"index": 693, "path": "ML/rewriteAI/template.py", "chunk": "  'description': \"Formal and detailed technical communication.\",\n    'keywords': ['technical', 'formal', 'detailed', 'clarity']\n},\n'crisis_management': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a calm, reassuring tone suitable for crisis management:\\n\\n{post}\"\n    ),\n    'description': \"Communication designed to manage crises with composure.\",\n    'keywords': ['crisis', 'reassuring', 'calm', 'management']\n},\n'employee_engagement': {\n    'template': PromptTemplate.from_t"}, {"index": 694, "path": "ML/rewriteAI/template.py", "chunk": "reassuring', 'calm', 'management']\n},\n'employee_engagement': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with an engaging tone, focused on motivating employees:\\n\\n{post}\"\n    ),\n    'description': \"Motivational communication aimed at employee engagement.\",\n    'keywords': ['engaging', 'motivational', 'employees', 'positive']\n},\n'diverse_inclusive': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a focus on diversity and inclusion, maintaining respect a"}, {"index": 695, "path": "ML/rewriteAI/template.py", "chunk": "plate.from_template(\n        \"Rewrite with a focus on diversity and inclusion, maintaining respect and equity:\\n\\n{post}\"\n    ),\n    'description': \"Communication emphasizing diversity and inclusivity.\",\n    'keywords': ['diverse', 'inclusive', 'equity', 'respect']\n},\n'neutral_informative': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a neutral, informative tone, avoiding bias or emotional language:\\n\\n{post}\"\n    ),\n    'description': \"Clear and unbiased informative commu"}, {"index": 696, "path": "ML/rewriteAI/template.py", "chunk": "as or emotional language:\\n\\n{post}\"\n    ),\n    'description': \"Clear and unbiased informative communication.\",\n    'keywords': ['neutral', 'informative', 'unbiased', 'clear']\n},\n'playful_creative': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a creative and playful tone, adding a touch of whimsy:\\n\\n{post}\"\n    ),\n    'description': \"Imaginative communication with a playful twist.\",\n    'keywords': ['creative', 'playful', 'imaginative', 'whimsical']\n},\n'sales_promotiona"}, {"index": 697, "path": "ML/rewriteAI/template.py", "chunk": "ul twist.\",\n    'keywords': ['creative', 'playful', 'imaginative', 'whimsical']\n},\n'sales_promotional': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a persuasive tone optimized for sales and promotions:\\n\\n{post}\"\n    ),\n    'description': \"Sales-focused communication designed to promote products or services.\",\n    'keywords': ['sales', 'promotional', 'persuasive', 'marketing']\n},\n'scientific_precise': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a s"}, {"index": 698, "path": "ML/rewriteAI/template.py", "chunk": "g']\n},\n'scientific_precise': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a scientific tone with precise terminology and data-backed claims:\\n\\n{post}\"\n    ),\n    'description': \"Communication focusing on scientific accuracy and precision.\",\n    'keywords': ['scientific', 'precise', 'data-backed', 'analytical']\n},\n'empathetic_leadership': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with empathetic language to inspire and support your team:\\n\\n{post}\"\n "}, {"index": 699, "path": "ML/rewriteAI/template.py", "chunk": "m_template(\n        \"Rewrite with empathetic language to inspire and support your team:\\n\\n{post}\"\n    ),\n    'description': \"Supportive and empathetic leadership communication.\",\n    'keywords': ['empathetic', 'supportive', 'leadership', 'inspiring']\n},\n'youthful_energetic': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a youthful, energetic tone to appeal to younger audiences:\\n\\n{post}\"\n    ),\n    'description': \"Energetic communication aimed at younger audiences.\",\n  "}, {"index": 700, "path": "ML/rewriteAI/template.py", "chunk": "nces:\\n\\n{post}\"\n    ),\n    'description': \"Energetic communication aimed at younger audiences.\",\n    'keywords': ['youthful', 'energetic', 'vibrant', 'fun']\n},\n'calm_apologetic': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a calm and sincere apologetic tone:\\n\\n{post}\"\n    ),\n    'description': \"Sincere and calm tone for apologies.\",\n    'keywords': ['calm', 'apologetic', 'sincere', 'reassuring']\n},\n'festive_celebratory': {\n    'template': PromptTemplate.from_template("}, {"index": 701, "path": "ML/rewriteAI/template.py", "chunk": ", 'sincere', 'reassuring']\n},\n'festive_celebratory': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a joyful and celebratory tone for festive occasions:\\n\\n{post}\"\n    ),\n    'description': \"Upbeat communication for festive celebrations.\",\n    'keywords': ['festive', 'celebratory', 'joyful', 'upbeat']\n},\n'legal_formal': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with formal legal terminology and precise phrasing:\\n\\n{post}\"\n    ),\n    'description': \""}, {"index": 702, "path": "ML/rewriteAI/template.py", "chunk": " \"Rewrite with formal legal terminology and precise phrasing:\\n\\n{post}\"\n    ),\n    'description': \"Formal and precise legal communication.\",\n    'keywords': ['legal', 'formal', 'precise', 'terminology']\n},\n'patient_explanatory': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a patient, explanatory tone suitable for complex topics:\\n\\n{post}\"\n    ),\n    'description': \"Patient and clear communication for explaining complex ideas.\",\n    'keywords': ['patient', 'explanatory', "}, {"index": 703, "path": "ML/rewriteAI/template.py", "chunk": " and clear communication for explaining complex ideas.\",\n    'keywords': ['patient', 'explanatory', 'clear', 'educational']\n},\n'aspirational_dreamy': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with an aspirational and dreamy tone to inspire imagination:\\n\\n{post}\"\n    ),\n    'description': \"Imaginative and inspirational communication.\",\n    'keywords': ['aspirational', 'dreamy', 'imaginative', 'inspirational']\n},\n'mentorship_guidance': {\n    'template': PromptTemplate.from_"}, {"index": 704, "path": "ML/rewriteAI/template.py", "chunk": "y', 'imaginative', 'inspirational']\n},\n'mentorship_guidance': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a warm and supportive tone, offering guidance and mentorship:\\n\\n{post}\"\n    ),\n    'description': \"Communication focused on providing advice and guidance to students.\",\n    'keywords': ['mentorship', 'guidance', 'supportive', 'advisory']\n},\n'career_advice': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a professional tone offering actionable c"}, {"index": 705, "path": "ML/rewriteAI/template.py", "chunk": "late': PromptTemplate.from_template(\n        \"Rewrite with a professional tone offering actionable career advice:\\n\\n{post}\"\n    ),\n    'description': \"Focused on helping students with career-related queries.\",\n    'keywords': ['career', 'advice', 'professional', 'actionable']\n},\n'networking_formal': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a professional tone to foster formal networking connections:\\n\\n{post}\"\n    ),\n    'description': \"Facilitating formal professio"}, {"index": 706, "path": "ML/rewriteAI/template.py", "chunk": "r formal networking connections:\\n\\n{post}\"\n    ),\n    'description': \"Facilitating formal professional networking between alumni and students.\",\n    'keywords': ['networking', 'formal', 'connections', 'professional']\n},\n'networking_casual': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a friendly tone encouraging casual networking and relationship building:\\n\\n{post}\"\n    ),\n    'description': \"Fostering casual and approachable networking interactions.\",\n    'keywords': ['"}, {"index": 707, "path": "ML/rewriteAI/template.py", "chunk": "\n    'description': \"Fostering casual and approachable networking interactions.\",\n    'keywords': ['networking', 'casual', 'friendly', 'approachable']\n},\n'collaboration_initiative': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a proactive tone encouraging collaboration on projects or initiatives:\\n\\n{post}\"\n    ),\n    'description': \"Encouraging collaboration on professional or academic projects.\",\n    'keywords': ['collaboration', 'initiatives', 'projects', 'teamwork']\n},"}, {"index": 708, "path": "ML/rewriteAI/template.py", "chunk": " or academic projects.\",\n    'keywords': ['collaboration', 'initiatives', 'projects', 'teamwork']\n},\n'inspirational_experience': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in an inspirational tone sharing personal experiences and success stories:\\n\\n{post}\"\n    ),\n    'description': \"Motivating communication by sharing alumni success stories.\",\n    'keywords': ['inspirational', 'experience', 'motivational', 'success stories']\n},\n'resume_review': {\n    'template': PromptTemp"}, {"index": 709, "path": "ML/rewriteAI/template.py", "chunk": "', 'experience', 'motivational', 'success stories']\n},\n'resume_review': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a focus on providing feedback for resumes or portfolios:\\n\\n{post}\"\n    ),\n    'description': \"Professional tone offering constructive feedback on resumes.\",\n    'keywords': ['resume', 'portfolio', 'feedback', 'constructive']\n},\n'interview_preparation': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a professional tone offering intervi"}, {"index": 710, "path": "ML/rewriteAI/template.py", "chunk": "  'template': PromptTemplate.from_template(\n        \"Rewrite in a professional tone offering interview preparation tips:\\n\\n{post}\"\n    ),\n    'description': \"Focused on helping students prepare for interviews effectively.\",\n    'keywords': ['interview', 'preparation', 'professional', 'guidance']\n},\n'alumni_event_invitation': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a formal and inviting tone for alumni events or reunions:\\n\\n{post}\"\n    ),\n    'description': \"Formal i"}, {"index": 711, "path": "ML/rewriteAI/template.py", "chunk": "rmal and inviting tone for alumni events or reunions:\\n\\n{post}\"\n    ),\n    'description': \"Formal invitations for alumni to attend events or reunions.\",\n    'keywords': ['event', 'invitation', 'formal', 'reunion']\n},\n'alumni_mentorship_request': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a polite and respectful tone for requesting mentorship:\\n\\n{post}\"\n    ),\n    'description': \"Requests for alumni to mentor students, phrased politely.\",\n    'keywords': ['mentorship', "}, {"index": 712, "path": "ML/rewriteAI/template.py", "chunk": "ption': \"Requests for alumni to mentor students, phrased politely.\",\n    'keywords': ['mentorship', 'request', 'polite', 'respectful']\n},\n'student_guidance_request': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a curious and enthusiastic tone requesting guidance from alumni:\\n\\n{post}\"\n    ),\n    'description': \"Student requests for career or academic guidance from alumni.\",\n    'keywords': ['guidance', 'student', 'enthusiastic', 'curious']\n},\n'technical_advice': {\n    'te"}, {"index": 713, "path": "ML/rewriteAI/template.py", "chunk": "\n    'keywords': ['guidance', 'student', 'enthusiastic', 'curious']\n},\n'technical_advice': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite with a technical tone offering expertise in a specific domain:\\n\\n{post}\"\n    ),\n    'description': \"Alumni offering domain-specific technical advice to students.\",\n    'keywords': ['technical', 'advice', 'domain-specific', 'expertise']\n},\n'achievement_announcement': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in an enthu"}, {"index": 714, "path": "ML/rewriteAI/template.py", "chunk": "ievement_announcement': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in an enthusiastic tone to announce achievements or milestones:\\n\\n{post}\"\n    ),\n    'description': \"Sharing milestones or achievements with the alumni community.\",\n    'keywords': ['achievement', 'announcement', 'enthusiastic', 'milestone']\n},\n'job_referral': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a professional tone seeking or offering job referrals:\\n\\n{post}\"\n    ),\n    'des"}, {"index": 715, "path": "ML/rewriteAI/template.py", "chunk": "       \"Rewrite in a professional tone seeking or offering job referrals:\\n\\n{post}\"\n    ),\n    'description': \"Communication focused on job referrals between alumni and students.\",\n    'keywords': ['job', 'referral', 'professional', 'opportunity']\n},\n'industry_insights': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in an informative tone offering insights about industry trends:\\n\\n{post}\"\n    ),\n    'description': \"Sharing valuable industry trends or insights with students.\""}, {"index": 716, "path": "ML/rewriteAI/template.py", "chunk": ":\\n\\n{post}\"\n    ),\n    'description': \"Sharing valuable industry trends or insights with students.\",\n    'keywords': ['industry', 'insights', 'informative', 'trends']\n},\n'alumni_testimonial': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a reflective tone sharing testimonials about the institution:\\n\\n{post}\"\n    ),\n    'description': \"Testimonials by alumni reflecting on their experiences at the institution.\",\n    'keywords': ['testimonial', 'reflective', 'alumni', 'insti"}, {"index": 717, "path": "ML/rewriteAI/template.py", "chunk": "eir experiences at the institution.\",\n    'keywords': ['testimonial', 'reflective', 'alumni', 'institution']\n},\n'fundraising_campaign': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in an encouraging tone appealing for alumni contributions:\\n\\n{post}\"\n    ),\n    'description': \"Appealing to alumni for donations or fundraising campaigns.\",\n    'keywords': ['fundraising', 'donations', 'encouraging', 'campaign']\n},\n'success_story_highlight': {\n    'template': PromptTemplate.from_"}, {"index": 718, "path": "ML/rewriteAI/template.py", "chunk": "ns', 'encouraging', 'campaign']\n},\n'success_story_highlight': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a celebratory tone highlighting a successful alumni story:\\n\\n{post}\"\n    ),\n    'description': \"Celebrating and sharing notable alumni successes.\",\n    'keywords': ['success', 'highlight', 'celebratory', 'alumni']\n},\n'student_introduction': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a polite and enthusiastic tone introducing a student to an a"}, {"index": 719, "path": "ML/rewriteAI/template.py", "chunk": "late.from_template(\n        \"Rewrite in a polite and enthusiastic tone introducing a student to an alumni:\\n\\n{post}\"\n    ),\n    'description': \"Introducing students to alumni for mentorship or networking.\",\n    'keywords': ['introduction', 'student', 'polite', 'enthusiastic']\n},\n'alumni_connect_general': {\n    'template': PromptTemplate.from_template(\n        \"Rewrite in a warm and approachable tone to encourage alumni-student interaction:\\n\\n{post}\"\n    ),\n    'description': \"General communica"}, {"index": 720, "path": "ML/rewriteAI/template.py", "chunk": "one to encourage alumni-student interaction:\\n\\n{post}\"\n    ),\n    'description': \"General communication fostering alumni-student relationships.\",\n    'keywords': ['connect', 'alumni', 'student', 'interaction']\n}\n\n\n        }"}, {"index": 721, "path": "ML/rewriteAI/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 722, "path": "ML/rewriteAI/urls.py", "chunk": "from django.urls import path\nfrom .views import rewrite_text,analyze_emotion\n\nurlpatterns = [\n    path('rewrite/', rewrite_text, name='rewrite_text'),\n    path('analyze_emotion/', analyze_emotion, name='analyze_text_emotion'),\n]"}, {"index": 723, "path": "ML/rewriteAI/views.py", "chunk": "import os\nimport json\nimport torch\nimport faiss\nimport logging\nimport numpy as np\nfrom typing import Dict, Any, List\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom django.core.exceptions import ValidationError\n\nfrom transformers import pipeline\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain_core.prompts import PromptTemplate\nfrom langchain_core.output_parsers im"}, {"index": 724, "path": "ML/rewriteAI/views.py", "chunk": "GenerativeAI\nfrom langchain_core.prompts import PromptTemplate\nfrom langchain_core.output_parsers import StrOutputParser\nfrom sentence_transformers import SentenceTransformer\nfrom .template import _define_rewriting_styles\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass AdvancedEmotionPostRewriter:\n    MAX_INPUT_LENGTH = 5000\n    MIN_INPUT_LENGTH = 10\n    \n    def __init__(self):\n        # Language Model\n        self.model = self._initialize_language_model()\n "}, {"index": 725, "path": "ML/rewriteAI/views.py", "chunk": "ef __init__(self):\n        # Language Model\n        self.model = self._initialize_language_model()\n        \n        # Advanced Text Analysis Models\n        self.semantic_model = SentenceTransformer('all-mpnet-base-v2')\n        self.content_classifier = pipeline(\n            \"zero-shot-classification\", \n            model=\"facebook/bart-large-mnli\"\n        )\n        self.emotion_analyzer = pipeline(\n            \"text-classification\", \n            model=\"j-hartmann/emotion-english-distilroberta-bas"}, {"index": 726, "path": "ML/rewriteAI/views.py", "chunk": "\n            \"text-classification\", \n            model=\"j-hartmann/emotion-english-distilroberta-base\",\n            top_k=None\n        )\n        \n        # Expanded Rewriting Styles\n        self.styles = _define_rewriting_styles()\n        \n        # Initialize FAISS Index for Style Matching\n        self._build_style_index()\n    \n    def _build_style_index(self):\n        \"\"\"Build a FAISS index for style embedding similarity search\"\"\"\n        try:\n            # Extract only style descriptions\n    "}, {"index": 727, "path": "ML/rewriteAI/views.py", "chunk": "style embedding similarity search\"\"\"\n        try:\n            # Extract only style descriptions\n            style_descriptions = [\n                details['description']\n                for details in self.styles.values()\n            ]\n            style_names = list(self.styles.keys())\n            \n            # Encode style descriptions\n            style_embeddings = self.semantic_model.encode(style_descriptions)\n            \n            # Create FAISS index\n            dimension = style_embedd"}, {"index": 728, "path": "ML/rewriteAI/views.py", "chunk": "yle_descriptions)\n            \n            # Create FAISS index\n            dimension = style_embeddings.shape[1]\n            index = faiss.IndexFlatL2(dimension)\n            index.add(style_embeddings)\n            \n            # Store index and related information\n            self.style_index = index\n            self.style_embeddings = style_embeddings\n            self.style_names = style_names\n            \n            logger.info(f\"FAISS index built for {len(style_names)} styles\")\n        exce"}, {"index": 729, "path": "ML/rewriteAI/views.py", "chunk": "           \n            logger.info(f\"FAISS index built for {len(style_names)} styles\")\n        except Exception as e:\n            logger.critical(f\"FAISS index creation failed: {e}\")\n            raise\n\n    def advanced_content_detection(self, text: str) -> List[tuple]:\n        \"\"\"Detect content categories with high confidence\"\"\"\n        categories = [\n            'professional', 'casual', \n            'technical', 'emotional', \n            'informative', 'persuasive'\n        ]\n        \n        "}, {"index": 730, "path": "ML/rewriteAI/views.py", "chunk": "      'technical', 'emotional', \n            'informative', 'persuasive'\n        ]\n        \n        classification = self.content_classifier(\n            text, \n            categories, \n            multi_label=True\n        )\n        \n        return [\n            (class_name, score) \n            for class_name, score in zip(\n                classification['labels'], \n                classification['scores']\n            ) if score > 0.5\n        ]\n    \n    def nuanced_emotion_analysis(self, text: s"}, {"index": 731, "path": "ML/rewriteAI/views.py", "chunk": "'scores']\n            ) if score > 0.5\n        ]\n    \n    def nuanced_emotion_analysis(self, text: str) -> List[Dict]:\n        \"\"\"\n        Perform emotion detection using a pretrained model\n        \n        Args:\n            text (str): Input text to analyze\n        \n        Returns:\n            List of detected emotions\n        \"\"\"\n        try:\n            # Use a robust pretrained emotion classification model\n            emotion_pipeline = pipeline(\n                \"text-classification\", \n    "}, {"index": 732, "path": "ML/rewriteAI/views.py", "chunk": "fication model\n            emotion_pipeline = pipeline(\n                \"text-classification\", \n                model=\"bhadresh-savani/bert-base-uncased-emotion\",\n                top_k=None\n            )\n            \n            # Truncate very long texts to prevent processing issues\n            truncated_text = text[:1024]\n            \n            # Perform emotion detection\n            emotions = emotion_pipeline(truncated_text)\n            \n            # Sort emotions by score in descending o"}, {"index": 733, "path": "ML/rewriteAI/views.py", "chunk": "= emotion_pipeline(truncated_text)\n            \n            # Sort emotions by score in descending order\n            sorted_emotions = sorted(\n                emotions[0], \n                key=lambda x: x['score'], \n                reverse=True\n            )\n            \n            return sorted_emotions\n        \n        except Exception as e:\n            logger.error(f\"Emotion detection failed: {e}\")\n            # Return a default emotion result\n            return [\n                {\"label\": \""}, {"index": 734, "path": "ML/rewriteAI/views.py", "chunk": "{e}\")\n            # Return a default emotion result\n            return [\n                {\"label\": \"neutral\", \"score\": 1.0}\n            ]\n    def _initialize_language_model(self):\n        \"\"\"Initialize Gemini Pro with robust error handling\"\"\"\n        try:\n            return ChatGoogleGenerativeAI(\n                model=\"gemini-pro\",\n                google_api_key=os.getenv('GOOGLE_API_KEY'),\n                temperature=0.7,\n                max_retries=3\n            )\n        except Exception as "}, {"index": 735, "path": "ML/rewriteAI/views.py", "chunk": "           temperature=0.7,\n                max_retries=3\n            )\n        except Exception as e:\n            logger.critical(f\"Language model initialization failed: {e}\")\n            raise\n\n    def get_emotion_analysis(self, post: str) -> Dict[str, Any]:\n        \"\"\"\n        Perform comprehensive emotion analysis on a given text.\n        \n        Args:\n            post (str): The input text to analyze\n        \n        Returns:\n            Dict containing detailed emotion analysis\n        \"\""}, {"index": 736, "path": "ML/rewriteAI/views.py", "chunk": "o analyze\n        \n        Returns:\n            Dict containing detailed emotion analysis\n        \"\"\"\n        try:\n            # Validate input length\n            if len(post) < self.MIN_INPUT_LENGTH:\n                raise ValidationError(\"Text too short for emotion analysis\")\n            \n            if len(post) > self.MAX_INPUT_LENGTH:\n                raise ValidationError(\"Text exceeds maximum length\")\n            \n            # Perform emotion analysis\n            emotions = self.nuanced_em"}, {"index": 737, "path": "ML/rewriteAI/views.py", "chunk": " length\")\n            \n            # Perform emotion analysis\n            emotions = self.nuanced_emotion_analysis(post)\n            \n            # Perform content type detection\n            content_types = self.advanced_content_detection(post)\n            \n            return {\n                \"emotions\": emotions,\n                \"content_types\": content_types\n            }\n        \n        except ValidationError as e:\n            logger.warning(f\"Validation error in emotion analysis: {e}\")\n   "}, {"index": 738, "path": "ML/rewriteAI/views.py", "chunk": "t ValidationError as e:\n            logger.warning(f\"Validation error in emotion analysis: {e}\")\n            return {\"error\": str(e), \"status\": \"validation_failed\"}\n        except Exception as e:\n            logger.error(f\"Unexpected error in emotion analysis: {e}\")\n            return {\"error\": \"Emotion analysis failed\", \"status\": \"processing_error\"}\n\n    \n\n    def _match_style_with_faiss(self, style_input: str) -> str:\n        \"\"\"\n        Match style using FAISS-based semantic similarity\n      "}, {"index": 739, "path": "ML/rewriteAI/views.py", "chunk": "yle_input: str) -> str:\n        \"\"\"\n        Match style using FAISS-based semantic similarity\n        \n        Args:\n            style_input (str): Input style description or query\n        \n        Returns:\n            str: Best matching style name\n        \"\"\"\n        try:\n            # Handle potential encoding issues with style input\n            style_input = style_input[:512]  # Truncate to max length\n            \n            # Encode the input query\n            query_embedding = self.semanti"}, {"index": 740, "path": "ML/rewriteAI/views.py", "chunk": " length\n            \n            # Encode the input query\n            query_embedding = self.semantic_model.encode([style_input])\n            \n            # Search FAISS index\n            distances, indices = self.style_index.search(query_embedding, k=1)\n            \n            # Get the matched style\n            matched_style = self.style_names[indices[0][0]]\n            \n            logger.info(f\"Matched style for '{style_input}': {matched_style}\")\n            \n            return matched_styl"}, {"index": 741, "path": "ML/rewriteAI/views.py", "chunk": "(f\"Matched style for '{style_input}': {matched_style}\")\n            \n            return matched_style\n        \n        except Exception as e:\n            logger.error(f\"Style matching failed: {e}\")\n            # Fallback to a default style if matching fails\n            return 'professional_standard'\n\n    def validate_input(self, post: str, style: str):\n        \"\"\"Comprehensive input validation with FAISS-based style matching\"\"\"\n        if len(post) < self.MIN_INPUT_LENGTH:\n            raise Vali"}, {"index": 742, "path": "ML/rewriteAI/views.py", "chunk": "h FAISS-based style matching\"\"\"\n        if len(post) < self.MIN_INPUT_LENGTH:\n            raise ValidationError(\"Text too short\")\n        \n        if len(post) > self.MAX_INPUT_LENGTH:\n            raise ValidationError(\"Text exceeds maximum length\")\n        \n        # Use FAISS-based style matching\n        matched_style = self._match_style_with_faiss(style)\n        return matched_style\n\n    def semantic_similarity(self, text1: str, text2: str) -> float:\n        \"\"\"Return a default semantic simil"}, {"index": 743, "path": "ML/rewriteAI/views.py", "chunk": "mantic_similarity(self, text1: str, text2: str) -> float:\n        \"\"\"Return a default semantic similarity score\"\"\"\n        return 0.5\n\n    def rewrite_post(self, post: str, style: str) -> Dict[str, Any]:\n        \"\"\"Advanced text rewriting with comprehensive analysis and FAISS-based style matching\"\"\"\n        try:\n            # Validate input length\n            if len(post) < self.MIN_INPUT_LENGTH:\n                raise ValidationError(\"Text too short\")\n            \n            if len(post) > self"}, {"index": 744, "path": "ML/rewriteAI/views.py", "chunk": "                raise ValidationError(\"Text too short\")\n            \n            if len(post) > self.MAX_INPUT_LENGTH:\n                raise ValidationError(\"Text exceeds maximum length\")\n            \n            # Match style using only the style input\n            matched_style = self._match_style_with_faiss(style)\n            \n            print(f\"Original Post Length: {len(post)}\")\n            print(f\"Style Input: {style}\")\n            print(f\"Matched Style: {matched_style}\")\n            \n    "}, {"index": 745, "path": "ML/rewriteAI/views.py", "chunk": "rint(f\"Style Input: {style}\")\n            print(f\"Matched Style: {matched_style}\")\n            \n            # Analyze original text\n            original_content_type = self.advanced_content_detection(post)\n            original_emotions = self.nuanced_emotion_analysis(post)\n            \n            # Rewrite text using matched style\n            rewrite_chain = (\n                self.styles[matched_style]['template'] | \n                self.model | \n                StrOutputParser()\n            )\n"}, {"index": 746, "path": "ML/rewriteAI/views.py", "chunk": "style]['template'] | \n                self.model | \n                StrOutputParser()\n            )\n            rewritten_post = rewrite_chain.invoke({\"post\": post})\n            print(rewritten_post)\n            # Analyze rewritten text\n            rewritten_content_type = self.advanced_content_detection(rewritten_post)\n            print(\"hi\")\n            print(rewritten_content_type)\n            rewritten_emotions = self.nuanced_emotion_analysis(rewritten_post)\n            print(\"hello again\")\n"}, {"index": 747, "path": "ML/rewriteAI/views.py", "chunk": "rewritten_emotions = self.nuanced_emotion_analysis(rewritten_post)\n            print(\"hello again\")\n            # Calculate semantic similarity\n            semantic_similarity = self.semantic_similarity(post, rewritten_post)\n            \n            return {\n                \"style\": matched_style,\n                \"original_input_style\": style,\n                \"original_content_type\": original_content_type,\n                \"rewritten_content_type\": rewritten_content_type,\n                \"origina"}, {"index": 748, "path": "ML/rewriteAI/views.py", "chunk": "ent_type,\n                \"rewritten_content_type\": rewritten_content_type,\n                \"original_emotions\": original_emotions,\n                \"rewritten_emotions\": rewritten_emotions,\n                \"semantic_similarity\": semantic_similarity,\n                \"rewritten_text\": rewritten_post\n            }\n        \n        except ValidationError as e:\n            logger.warning(f\"Validation error: {e}\")\n            return {\"error\": str(e), \"status\": \"validation_failed\"}\n        except Excep"}, {"index": 749, "path": "ML/rewriteAI/views.py", "chunk": "rror: {e}\")\n            return {\"error\": str(e), \"status\": \"validation_failed\"}\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e}\")\n            return {\"error\": \"Rewriting process failed\", \"status\": \"processing_error\"}\n\n    \n# Django Views\nrewriter = AdvancedEmotionPostRewriter()\n\n@csrf_exempt\n@require_http_methods([\"POST\"])\ndef rewrite_text(request):\n    print(\"hi\")\n    \"\"\"Enhanced text rewriting endpoint\"\"\"\n    try:\n        data = json.loads(request.body)\n        "}, {"index": 750, "path": "ML/rewriteAI/views.py", "chunk": "    \"\"\"Enhanced text rewriting endpoint\"\"\"\n    try:\n        data = json.loads(request.body)\n        post = data.get('post', '').strip()\n        style = data.get('style', 'professional_standard')\n        \n        result = rewriter.rewrite_post(post, style)\n        \n        if result.get('status') == 'validation_failed':\n            return JsonResponse(result, status=400)\n        elif result.get('status') == 'processing_error':\n            return JsonResponse(result, status=500)\n        \n        r"}, {"index": 751, "path": "ML/rewriteAI/views.py", "chunk": "atus') == 'processing_error':\n            return JsonResponse(result, status=500)\n        \n        return JsonResponse(result)\n    \n    except json.JSONDecodeError:\n        return JsonResponse({\"error\": \"Invalid JSON\"}, status=400)\n    except Exception as e:\n        logger.critical(f\"Unhandled request error: {e}\")\n        return JsonResponse({\"error\": \"Internal server error\"}, status=500)\n\n@csrf_exempt\n@require_http_methods([\"POST\"])\ndef analyze_emotion(request):\n    \"\"\"Emotion analysis endpoint"}, {"index": 752, "path": "ML/rewriteAI/views.py", "chunk": "xempt\n@require_http_methods([\"POST\"])\ndef analyze_emotion(request):\n    \"\"\"Emotion analysis endpoint\"\"\"\n    try:\n        data = json.loads(request.body)\n        post = data.get('post', '').strip()\n        \n        result = rewriter.get_emotion_analysis(post)\n        \n        if result.get('status') == 'validation_failed':\n            return JsonResponse(result, status=400)\n        elif result.get('status') == 'processing_error':\n            return JsonResponse(result, status=500)\n        \n      "}, {"index": 753, "path": "ML/rewriteAI/views.py", "chunk": "'status') == 'processing_error':\n            return JsonResponse(result, status=500)\n        \n        return JsonResponse(result)\n    \n    except json.JSONDecodeError:\n        return JsonResponse({\"error\": \"Invalid JSON\"}, status=400)\n    except Exception as e:\n        logger.critical(f\"Unhandled request error in emotion analysis: {e}\")\n        return JsonResponse({\"error\": \"Internal server error\"}, status=500)"}, {"index": 754, "path": "ML/rewriteAI/views.py", "chunk": "}, status=500)"}, {"index": 755, "path": "ML/spam/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 756, "path": "ML/spam/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass SpamConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'spam'\n"}, {"index": 757, "path": "ML/spam/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 758, "path": "ML/spam/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 759, "path": "ML/spam/urls.py", "chunk": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('spam/analyze/', views.analyze_spam, name='analyze_spam'),\n    path('spam/bulk-analyze/', views.bulk_analyze_spam, name='bulk_analyze_spam'),\n]"}, {"index": 760, "path": "ML/spam/views.py", "chunk": "import os\nimport re\nimport json\nimport time\nimport torch\nimport unicodedata\nimport numpy as np\nfrom typing import Dict, Any, Set, List, Tuple\nfrom dotenv import load_dotenv\nfrom django.http import JsonResponse\nfrom django.shortcuts import render\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.views.decorators.http import require_http_methods\nfrom transformers import AutoTokenizer, AutoModelForSequenceClassification\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom l"}, {"index": 761, "path": "ML/spam/views.py", "chunk": " AutoModelForSequenceClassification\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\n\nload_dotenv()\n\nclass ContentModerator:\n    def __init__(self):\n        self.offensive_words: Set[str] = set()\n        self.word_pattern = re.compile(r'\\b\\w+\\b')\n        \n    def normalize_text(self, text: str) -> str:\n        \"\"\"Normalize text by removing accents and converting to lowercase.\"\"\"\n        text = text.lower("}, {"index": 762, "path": "ML/spam/views.py", "chunk": "    \"\"\"Normalize text by removing accents and converting to lowercase.\"\"\"\n        text = text.lower()\n        text = unicodedata.normalize('NFKD', text)\n        text = ''.join(c for c in text if not unicodedata.combining(c))\n        return text\n    \n    def load_words(self, filepath: str) -> None:\n        try:\n            with open(filepath, 'r', encoding='utf-8') as file:\n                words = [line.strip().lower() for line in file if line.strip()]\n                self.offensive_words.update("}, {"index": 763, "path": "ML/spam/views.py", "chunk": "[line.strip().lower() for line in file if line.strip()]\n                self.offensive_words.update(words)\n                  # Debug print\n        except FileNotFoundError:\n            print(f\"Warning: Could not find word list file: {filepath}\")\n        \n    def check_text(self, text: str) -> Tuple[bool, List[str], str]:\n        \"\"\"\n        Check text for offensive content and return:\n        - Whether text is offensive\n        - List of found offensive terms\n        - Censored version of the te"}, {"index": 764, "path": "ML/spam/views.py", "chunk": "ether text is offensive\n        - List of found offensive terms\n        - Censored version of the text\n        \"\"\"\n        if not text:\n            return False, [], text\n        \n        original_text = text\n        text = self.normalize_text(text)\n        found_terms = []\n        censored_text = original_text\n        \n        # Check for exact matches of multi-word phrases first\n        for term in sorted(self.offensive_words, key=len, reverse=True):\n            if ' ' in term and term in text"}, {"index": 765, "path": "ML/spam/views.py", "chunk": " in sorted(self.offensive_words, key=len, reverse=True):\n            if ' ' in term and term in text:\n                found_terms.append(term)\n                # Censor the term in the output text\n                pattern = re.compile(re.escape(term), re.IGNORECASE)\n                censored_text = pattern.sub('*' * len(term), censored_text)\n        \n        # Check for single word matches\n        words = self.word_pattern.findall(text)\n        for word in words:\n            if word in self.offensi"}, {"index": 766, "path": "ML/spam/views.py", "chunk": "rds = self.word_pattern.findall(text)\n        for word in words:\n            if word in self.offensive_words:\n                found_terms.append(word)\n                # Censor the word in the output text\n                pattern = re.compile(r'\\b' + re.escape(word) + r'\\b', re.IGNORECASE)\n                censored_text = pattern.sub('*' * len(word), censored_text)\n        \n        return bool(found_terms), found_terms, censored_text\n\nclass HybridSpamDetector:\n    def __init__(self):\n        # Cont"}, {"index": 767, "path": "ML/spam/views.py", "chunk": "terms), found_terms, censored_text\n\nclass HybridSpamDetector:\n    def __init__(self):\n        # Content Moderation Initialization\n        self.content_moderator = ContentModerator()\n        try:\n            # Use absolute path relative to current file's directory\n            current_dir = os.path.dirname(os.path.abspath(__file__))\n            offensive_words_path = os.path.join(current_dir, 'offensive_words.txt')\n            self.content_moderator.load_words(offensive_words_path)\n        except "}, {"index": 768, "path": "ML/spam/views.py", "chunk": "sive_words.txt')\n            self.content_moderator.load_words(offensive_words_path)\n        except Exception as e:\n            print(f\"Error initializing content moderator: {e}\")\n\n        # Load pre-trained spam detection model (using bert-base-uncased fine-tuned on spam)\n        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n        self.tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')\n        self.model = AutoModelForSequenceClassification.from_pretra"}, {"index": 769, "path": "ML/spam/views.py", "chunk": "_pretrained('bert-base-uncased')\n        self.model = AutoModelForSequenceClassification.from_pretrained(\n            'bert-base-uncased', \n            num_labels=2\n        ).to(self.device)\n        \n        # Initialize backup Gemini system\n        api_key = os.getenv(\"GOOGLE_API_KEY\")\n        if not api_key:\n            raise ValueError(\"Google API key is not set. Please check your .env file.\")\n        self.llm = ChatGoogleGenerativeAI(\n            model=\"gemini-pro\",\n            temperature=0"}, {"index": 770, "path": "ML/spam/views.py", "chunk": "        self.llm = ChatGoogleGenerativeAI(\n            model=\"gemini-pro\",\n            temperature=0.3,\n            max_tokens=256,\n            api_key=api_key\n        )\n        \n        # Categories for classification\n        self.spam_categories = {\n            'promotional': ['offer', 'discount', 'limited time', 'buy now'],\n            'scam': ['urgent', 'account blocked', 'verify now', 'bank details'],\n            'inappropriate': ['adult content', 'offensive', 'explicit'],\n            'mali"}, {"index": 771, "path": "ML/spam/views.py", "chunk": "etails'],\n            'inappropriate': ['adult content', 'offensive', 'explicit'],\n            'malicious': ['malware', 'virus', 'hack', 'crack'],\n            'phishing': ['password', 'login', 'verify account', 'security alert']\n        }\n        \n        # Load additional pre-trained models for specific checks\n        self.toxicity_tokenizer = AutoTokenizer.from_pretrained('unitary/toxic-bert')\n        self.toxicity_model = AutoModelForSequenceClassification.from_pretrained('unitary/toxic-bert'"}, {"index": 772, "path": "ML/spam/views.py", "chunk": "       self.toxicity_model = AutoModelForSequenceClassification.from_pretrained('unitary/toxic-bert').to(self.device)\n        \n        # Message flooding detection parameters\n        self.message_history = {}\n        self.repetition_threshold = 3  # Number of times a message can be repeated\n        self.time_window = 60  # Seconds to track repetitions\n        self.ip_flood_tracking = {}\n        self.ip_flood_threshold = 10  # Maximum messages from an IP in time window\n\n    def preprocess_text(se"}, {"index": 773, "path": "ML/spam/views.py", "chunk": "lf.ip_flood_threshold = 10  # Maximum messages from an IP in time window\n\n    def preprocess_text(self, text: str) -> torch.Tensor:\n        \"\"\"Tokenize and prepare text for model input\"\"\"\n        inputs = self.tokenizer(\n            text,\n            truncation=True,\n            max_length=512,\n            padding='max_length',\n            return_tensors='pt'\n        )\n        return inputs.to(self.device)\n\n    def detect_message_flooding(self, text: str, ip_address: str = None) -> Dict[str, boo"}, {"index": 774, "path": "ML/spam/views.py", "chunk": "f.device)\n\n    def detect_message_flooding(self, text: str, ip_address: str = None) -> Dict[str, bool]:\n        \"\"\"\n        Detect message flooding through two mechanisms:\n        1. Identical message repetition\n        2. High volume of messages from a single IP\n        \"\"\"\n        current_time = time.time()\n        flood_detection = {\n            \"message_repetition_flood\": False,\n            \"ip_volume_flood\": False\n        }\n        \n        # Clean up old entries in message history\n        "}, {"index": 775, "path": "ML/spam/views.py", "chunk": "p_volume_flood\": False\n        }\n        \n        # Clean up old entries in message history\n        self.message_history = {\n            msg: timestamps for msg, timestamps in self.message_history.items()\n            if any(current_time - ts < self.time_window for ts in timestamps)\n        }\n        \n        # Track message repetition\n        if text not in self.message_history:\n            self.message_history[text] = [current_time]\n        else:\n            self.message_history[text].append(cu"}, {"index": 776, "path": "ML/spam/views.py", "chunk": "essage_history[text] = [current_time]\n        else:\n            self.message_history[text].append(current_time)\n            \n            # Check if message exceeds repetition threshold\n            if len(self.message_history[text]) > self.repetition_threshold:\n                flood_detection[\"message_repetition_flood\"] = True\n        \n        # Track IP-based flooding if IP is provided\n        if ip_address:\n            if ip_address not in self.ip_flood_tracking:\n                self.ip_flood_t"}, {"index": 777, "path": "ML/spam/views.py", "chunk": "ip_address:\n            if ip_address not in self.ip_flood_tracking:\n                self.ip_flood_tracking[ip_address] = [current_time]\n            else:\n                # Remove timestamps outside the time window\n                self.ip_flood_tracking[ip_address] = [\n                    ts for ts in self.ip_flood_tracking[ip_address] \n                    if current_time - ts < self.time_window\n                ]\n                \n                self.ip_flood_tracking[ip_address].append(current_"}, {"index": 778, "path": "ML/spam/views.py", "chunk": "               ]\n                \n                self.ip_flood_tracking[ip_address].append(current_time)\n                \n                # Check if IP exceeds message volume threshold\n                if len(self.ip_flood_tracking[ip_address]) > self.ip_flood_threshold:\n                    flood_detection[\"ip_volume_flood\"] = True\n        \n        return flood_detection\n\n    def get_spam_score(self, text: str) -> float:\n        \"\"\"Get spam probability using pre-trained model\"\"\"\n        with tor"}, {"index": 779, "path": "ML/spam/views.py", "chunk": "lf, text: str) -> float:\n        \"\"\"Get spam probability using pre-trained model\"\"\"\n        with torch.no_grad():\n            inputs = self.preprocess_text(text)\n            outputs = self.model(**inputs)\n            probabilities = torch.nn.functional.softmax(outputs.logits, dim=-1)\n            return probabilities[0][1].item()  # Probability of spam class\n\n    def check_toxicity(self, text: str) -> float:\n        \"\"\"Check content toxicity using toxic-bert\"\"\"\n        with torch.no_grad():\n     "}, {"index": 780, "path": "ML/spam/views.py", "chunk": " -> float:\n        \"\"\"Check content toxicity using toxic-bert\"\"\"\n        with torch.no_grad():\n            inputs = self.toxicity_tokenizer(\n                text,\n                return_tensors='pt',\n                truncation=True,\n                max_length=512\n            ).to(self.device)\n            outputs = self.toxicity_model(**inputs)\n            probs = torch.nn.functional.softmax(outputs.logits, dim=-1)\n            return probs[0][1].item()\n\n    def identify_categories(self, text: str"}, {"index": 781, "path": "ML/spam/views.py", "chunk": "s.logits, dim=-1)\n            return probs[0][1].item()\n\n    def identify_categories(self, text: str) -> list:\n        \"\"\"Identify specific spam categories\"\"\"\n        text_lower = text.lower()\n        detected_categories = []\n        \n        for category, keywords in self.spam_categories.items():\n            if any(keyword in text_lower for keyword in keywords):\n                detected_categories.append(category)\n                \n        return detected_categories\n\n    def get_gemini_validatio"}, {"index": 782, "path": "ML/spam/views.py", "chunk": "s.append(category)\n                \n        return detected_categories\n\n    def get_gemini_validation(self, text: str, initial_score: float) -> Dict[str, Any]:\n        \"\"\"Get secondary validation from Gemini for borderline cases\"\"\"\n        if 0.3 <= initial_score <= 0.7:  # Only use Gemini for uncertain cases\n            prompt = PromptTemplate(\n                input_variables=[\"content\"],\n                template=\"\"\"\n                Analyze if this content is spam. Consider:\n                - P"}, {"index": 783, "path": "ML/spam/views.py", "chunk": "         template=\"\"\"\n                Analyze if this content is spam. Consider:\n                - Promotional content\n                - Scams/fraud attempts\n                - Inappropriate content\n                - Malicious intent\n                \n                Content: {content}\n                \n                Respond with only a number between 0 and 1 indicating spam probability.\n                \"\"\"\n            )\n            chain = LLMChain(llm=self.llm, prompt=prompt)\n            try:\n "}, {"index": 784, "path": "ML/spam/views.py", "chunk": "      \"\"\"\n            )\n            chain = LLMChain(llm=self.llm, prompt=prompt)\n            try:\n                gemini_score = float(chain.run(content=text))\n                return {\n                    \"gemini_score\": gemini_score,\n                    \"combined_score\": (initial_score + gemini_score) / 2\n                }\n            except:\n                return {\n                    \"gemini_score\": None,\n                    \"combined_score\": initial_score\n                }\n        return {"}, {"index": 785, "path": "ML/spam/views.py", "chunk": "score\": None,\n                    \"combined_score\": initial_score\n                }\n        return {\n            \"gemini_score\": None,\n            \"combined_score\": initial_score\n        }\n\n    def analyze_content(self, text: str, ip_address: str = None) -> Dict[str, Any]:\n        \"\"\"Complete content analysis\"\"\"\n        # Content moderation check\n        is_offensive, offensive_terms, censored_text = self.content_moderator.check_text(text)\n        \n        # Get initial spam score\n        spam_s"}, {"index": 786, "path": "ML/spam/views.py", "chunk": "t = self.content_moderator.check_text(text)\n        \n        # Get initial spam score\n        spam_score = self.get_spam_score(text)\n        \n        # Get toxicity score\n        toxicity_score = self.check_toxicity(text)\n        \n        # Identify specific categories\n        categories = self.identify_categories(text)\n        \n        # Detect flooding\n        flooding_detection = self.detect_message_flooding(text, ip_address)\n        \n        # Get Gemini validation for uncertain cases\n      "}, {"index": 787, "path": "ML/spam/views.py", "chunk": "ssage_flooding(text, ip_address)\n        \n        # Get Gemini validation for uncertain cases\n        gemini_results = self.get_gemini_validation(text, spam_score)\n        \n        # Calculate final spam probability\n        final_score = gemini_results[\"combined_score\"]\n        \n        return {\n            \"is_spam\": (final_score > 0.5 or \n                        flooding_detection[\"message_repetition_flood\"] or \n                        flooding_detection[\"ip_volume_flood\"] or \n                "}, {"index": 788, "path": "ML/spam/views.py", "chunk": "ition_flood\"] or \n                        flooding_detection[\"ip_volume_flood\"] or \n                        is_offensive),\n            \"spam_score\": final_score,\n            \"initial_score\": spam_score,\n            \"toxicity_score\": toxicity_score,\n            \"gemini_score\": gemini_results[\"gemini_score\"],\n            \"categories\": categories,\n            \"confidence\": 1 - abs(0.5 - final_score) * 2,\n            \"requires_manual_review\": 0.4 <= final_score <= 0.6,\n            \"flooding_detectio"}, {"index": 789, "path": "ML/spam/views.py", "chunk": "* 2,\n            \"requires_manual_review\": 0.4 <= final_score <= 0.6,\n            \"flooding_detection\": flooding_detection,\n            \"offensive_content\": {\n                \"is_offensive\": is_offensive,\n                \"offensive_terms\": offensive_terms,\n                \"censored_text\": censored_text\n            }\n        }\n\n# Initialize global detector\nspam_detector = HybridSpamDetector()\n\n@csrf_exempt\n@require_http_methods([\"POST\"])\ndef analyze_spam(request):\n    try:\n        data = json.loa"}, {"index": 790, "path": "ML/spam/views.py", "chunk": "f_exempt\n@require_http_methods([\"POST\"])\ndef analyze_spam(request):\n    try:\n        data = json.loads(request.body)\n        content = data.get('content', '')\n        ip_address = request.META.get('REMOTE_ADDR')\n        \n        if not content:\n            return JsonResponse({\n                'error': 'No content provided'\n            }, status=400)\n            \n        analysis = spam_detector.analyze_content(content, ip_address)\n        \n        return JsonResponse({\n            'analysis': a"}, {"index": 791, "path": "ML/spam/views.py", "chunk": "nalyze_content(content, ip_address)\n        \n        return JsonResponse({\n            'analysis': analysis,\n            'content_length': len(content),\n            'status': 'success'\n        })\n        \n    except Exception as e:\n        return JsonResponse({\n            'error': str(e)\n        }, status=500)\n\n@csrf_exempt\n@require_http_methods([\"POST\"])\ndef bulk_analyze_spam(request):\n    try:\n        data = json.loads(request.body)\n        contents = data.get('contents', [])\n        ip_addre"}, {"index": 792, "path": "ML/spam/views.py", "chunk": "        data = json.loads(request.body)\n        contents = data.get('contents', [])\n        ip_address = request.META.get('REMOTE_ADDR')\n        \n        if not contents:\n            return JsonResponse({\n                'error': 'No contents provided'\n            }, status=400)\n            \n        results = []\n        for content in contents:\n            analysis = spam_detector.analyze_content(content, ip_address)\n            results.append({\n                'content': content,\n              "}, {"index": 793, "path": "ML/spam/views.py", "chunk": "content, ip_address)\n            results.append({\n                'content': content,\n                'analysis': analysis\n            })\n            \n        return JsonResponse({\n            'results': results,\n            'total_analyzed': len(results),\n            'status': 'success'\n        })\n        \n    except Exception as e:\n        return JsonResponse({\n            'error': str(e)\n        }, status=500)"}, {"index": 794, "path": "ML/spam/views.py", "chunk": "  }, status=500)"}, {"index": 795, "path": "ML/texttosql/admin.py", "chunk": "from django.contrib import admin\n\n# Register your models here.\n"}, {"index": 796, "path": "ML/texttosql/apps.py", "chunk": "from django.apps import AppConfig\n\n\nclass TexttosqlConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'texttosql'\n"}, {"index": 797, "path": "ML/texttosql/models.py", "chunk": "from django.db import models\n\n# Create your models here.\n"}, {"index": 798, "path": "ML/texttosql/tests.py", "chunk": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"index": 799, "path": "ML/texttosql/urls.py", "chunk": "# urls.py\nfrom django.urls import path\nfrom .views import smart_search_view\n\nurlpatterns = [\n    path('smart-search/', smart_search_view, name='smart_search'),\n]"}, {"index": 800, "path": "ML/texttosql/views.py", "chunk": "# views.py\nimport os\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom sqlalchemy import create_engine\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.agents import create_sql_agent\nfrom langchain.agents.agent_toolkits import SQLDatabaseToolkit\nfrom langchain.sql_database import SQLDatabase\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\nclass SmartSearchEngine:\n    def __init__(self):\n        # Dir"}, {"index": 801, "path": "ML/texttosql/views.py", "chunk": " environment variables\nload_dotenv()\n\nclass SmartSearchEngine:\n    def __init__(self):\n        # Directly fetch credentials from environment variables\n        self.host = os.getenv('DB_HOST', 'localhost')\n        self.port = os.getenv('DB_PORT', '5432')\n        self.user = os.getenv('DB_USER')\n        self.password = os.getenv('DB_PASSWORD')\n        self.database = os.getenv('DB_NAME')\n        self.google_api_key = os.getenv('GOOGLE_API_KEY')\n\n        # Validate required environment variables\n  "}, {"index": 802, "path": "ML/texttosql/views.py", "chunk": "f.google_api_key = os.getenv('GOOGLE_API_KEY')\n\n        # Validate required environment variables\n        if not all([self.host, self.port, self.user, self.password, self.database, self.google_api_key]):\n            raise ValueError(\"Missing required environment variables for database connection\")\n\n        # Create database connection string for PostgreSQL\n        connection_string = f\"postgresql://{self.user}:{self.password}@{self.host}:{self.port}/{self.database}\"\n        \n        # Create SQL"}, {"index": 803, "path": "ML/texttosql/views.py", "chunk": "//{self.user}:{self.password}@{self.host}:{self.port}/{self.database}\"\n        \n        # Create SQLAlchemy engine and database connection\n        self.engine = create_engine(connection_string)\n        self.db = SQLDatabase(self.engine)\n        \n        # Initialize Google Gemini LLM\n        os.environ[\"GOOGLE_API_KEY\"] = self.google_api_key\n        self.llm = ChatGoogleGenerativeAI(model=\"gemini-pro\")\n        \n        # Create SQL agent\n        self.agent_executor = self._create_sql_agent()\n\n  "}, {"index": 804, "path": "ML/texttosql/views.py", "chunk": "pro\")\n        \n        # Create SQL agent\n        self.agent_executor = self._create_sql_agent()\n\n    def _create_sql_agent(self):\n        toolkit = SQLDatabaseToolkit(db=self.db, llm=self.llm)\n        return create_sql_agent(\n            llm=self.llm, \n            toolkit=toolkit, \n            verbose=True, \n            handle_parsing_errors=True\n        )\n\n    def search(self, query):\n        try:\n            result = self.agent_executor.invoke({\"input\": query})\n            return result.get('"}, {"index": 805, "path": "ML/texttosql/views.py", "chunk": "y:\n            result = self.agent_executor.invoke({\"input\": query})\n            return result.get('output', 'No results found')\n        except Exception as e:\n            return f\"Error: {str(e)}\"\nimport json\n@csrf_exempt\ndef smart_search_view(request):\n    if request.method == 'POST':\n        body = json.loads(request.body)\n        query = body.get('query', '')\n        print(\"query is\",query)\n        if not query:\n            return JsonResponse({'error': 'No query provided'}, status=400)\n    "}, {"index": 806, "path": "ML/texttosql/views.py", "chunk": "      if not query:\n            return JsonResponse({'error': 'No query provided'}, status=400)\n        \n        try:\n            search_engine = SmartSearchEngine()\n            result = search_engine.search(query)\n            \n            return JsonResponse({\n                'query': query,\n                'result': result\n            })\n        except ValueError as ve:\n            return JsonResponse({'error': str(ve)}, status=500)\n        except Exception as e:\n            return JsonRespons"}, {"index": 807, "path": "ML/texttosql/views.py", "chunk": "sponse({'error': str(ve)}, status=500)\n        except Exception as e:\n            return JsonResponse({'error': 'An unexpected error occurred'}, status=500)\n    \n    return JsonResponse({'error': 'Only POST method is allowed'}, status=405)"}, {"index": 808, "path": "client/.yarnrc.yml", "chunk": "compressionLevel: mixed\n\nenableGlobalCache: false\n\nenableTelemetry: false\n\nlogFilters:\n  - code: YN0002\n    level: discard\n  - code: YN0060\n    level: discard\n  - code: YN0006\n    level: discard\n  - code: YN0076\n    level: discard\n\nnodeLinker: node-modules"}, {"index": 809, "path": "client/App.jsx", "chunk": "import './global.css';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { StatusBar, SafeAreaView } from 'react-native';\n\nimport AppNavigator from './navigation/AppNavigator';\nimport Providers from './providers/CustomProvider';\nimport { themes } from './utils/colorTheme';\n\nexport default function App() {\n  return (\n    <Providers>\n      <NavigationContainer>\n        <SafeAreaView className=\"flex-1 bg-background\" style={themes['light']}>\n          <StatusBar barStyle=\"dark-c"}, {"index": 810, "path": "client/App.jsx", "chunk": "View className=\"flex-1 bg-background\" style={themes['light']}>\n          <StatusBar barStyle=\"dark-content\" backgroundColor=\"#ffffff\" />\n          <AppNavigator />\n        </SafeAreaView>\n      </NavigationContainer>\n    </Providers>\n  );\n}\n"}, {"index": 811, "path": "client/app-env.d.ts", "chunk": "// @ts-ignore\n/// <reference types=\"nativewind/types\" />\n"}, {"index": 812, "path": "client/app.json", "chunk": "{\n  \"expo\": {\n    \"name\": \"vidya-setu\",\n    \"slug\": \"vidya-setu\",\n    \"version\": \"1.0.0\",\n    \"orientation\": \"portrait\",\n    \"icon\": \"./assets/icon.png\",\n    \"scheme\": \"vsetu\",\n    \"userInterfaceStyle\": \"automatic\",\n    \"newArchEnabled\": true,\n    \"splash\": {\n      \"image\": \"./assets/splash-icon.png\",\n      \"resizeMode\": \"contain\",\n      \"backgroundColor\": \"#ffffff\"\n    },\n    \"assetBundlePatterns\": [\n      \"**/*\"\n    ],\n    \"ios\": {\n      \"supportsTablet\": true,\n      \"bundleIdentifier\": \"com.s"}, {"index": 813, "path": "client/app.json", "chunk": "\": [\n      \"**/*\"\n    ],\n    \"ios\": {\n      \"supportsTablet\": true,\n      \"bundleIdentifier\": \"com.souldev07.vidyasetu\"\n    },\n    \"android\": {\n      \"adaptiveIcon\": {\n        \"foregroundImage\": \"./assets/adaptive-icon.png\",\n        \"backgroundColor\": \"#ffffff\"\n      },\n      \"permissions\": [\n        \"android.permission.RECORD_AUDIO\",\n        \"android.permission.MODIFY_AUDIO_SETTINGS\"\n      ],\n      \"package\": \"com.souldev07.vidyasetu\"\n    },\n    \"web\": {\n      \"bundler\": \"metro\",\n      \"output\""}, {"index": 814, "path": "client/app.json", "chunk": "   \"package\": \"com.souldev07.vidyasetu\"\n    },\n    \"web\": {\n      \"bundler\": \"metro\",\n      \"output\": \"static\",\n      \"favicon\": \"./assets/favicon.png\",\n      \"permissions\": [\"camera\", \"microphone\"]\n    },\n    \"plugins\": [\n      \"expo-font\",\n      \"expo-router\",\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"Allow Vidya Setu to access your photos\",\n          \"cameraPermission\": \"Allow Vidya Setu to access your camera\"\n        }\n      ],\n      [\n        \"expo-camera"}, {"index": 815, "path": "client/app.json", "chunk": "ermission\": \"Allow Vidya Setu to access your camera\"\n        }\n      ],\n      [\n        \"expo-camera\",\n        {\n          \"cameraPermission\": \"Allow Vidya Setu to access your camera\",\n          \"microphonePermission\": \"Allow Vidya Setu to access your microphone\",\n          \"recordAudioAndroid\": true\n        }\n      ],\n      [\n        \"expo-av\",\n        {\n          \"microphonePermission\": \"Allow Vidya Setu to access your microphone.\"\n        }\n      ]\n    ],\n    \"experiments\": {\n      \"typedRout"}, {"index": 816, "path": "client/app.json", "chunk": "idya Setu to access your microphone.\"\n        }\n      ]\n    ],\n    \"experiments\": {\n      \"typedRoutes\": true,\n      \"tsconfigPaths\": true\n    },\n    \"extra\": {\n      \"router\": {\n        \"origin\": false\n      },\n      \"eas\": {\n        \"projectId\": \"84e20670-0643-49e9-9f9b-f9954e017d82\"\n      }\n    }\n  }\n}\n"}, {"index": 817, "path": "client/babel.config.js", "chunk": "module.exports = function (api) {\n  api.cache(true);\n  const plugins = [];\n\n  return {\n    presets: [['babel-preset-expo', { jsxImportSource: 'nativewind' }], 'nativewind/babel'],\n\n    plugins: [\n      [\n        \"module:react-native-dotenv\",\n        {\n          moduleName: \"@env\",\n          path: \".env\",\n        },\n      ],\n    ],\n  };\n};\n"}, {"index": 818, "path": "client/components/CustomAlertModal.jsx", "chunk": "import { Modal, View, Text, TouchableOpacity } from 'react-native';\n\nconst CustomAlertModal = ({\n  visible,\n  onClose,\n  icon,\n  title,\n  subtitle,\n  buttons = [],\n  variant = 'single',\n}) => {\n  const renderButtons = () => {\n    if (variant === 'single') {\n      return (\n        <View className=\"mt-6 flex w-full items-center\">\n          <TouchableOpacity onPress={onClose} className=\"w-1/2 rounded-lg bg-blue-600 px-4 py-3\">\n            <Text className=\"text-center text-base font-semibold text-wh"}, {"index": 819, "path": "client/components/CustomAlertModal.jsx", "chunk": "-lg bg-blue-600 px-4 py-3\">\n            <Text className=\"text-center text-base font-semibold text-white\">OK</Text>\n          </TouchableOpacity>\n        </View>\n      );\n    }\n\n    return (\n      <View className=\"mt-6 flex-row justify-between\">\n        <TouchableOpacity\n          onPress={buttons[0]?.onPress || onClose}\n          className=\"w-[45%] rounded-lg bg-gray-100 px-4 py-3\">\n          <Text className=\"text-center text-base font-semibold text-gray-600\">\n            {buttons[0]?.text || 'R"}, {"index": 820, "path": "client/components/CustomAlertModal.jsx", "chunk": "t className=\"text-center text-base font-semibold text-gray-600\">\n            {buttons[0]?.text || 'Reject'}\n          </Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          onPress={buttons[1]?.onPress || onClose}\n          className=\"w-[45%] rounded-lg bg-blue-600 px-4 py-3\">\n          <Text className=\"text-center text-base font-semibold text-white\">\n            {buttons[1]?.text || 'Accept'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\n  return (\n "}, {"index": 821, "path": "client/components/CustomAlertModal.jsx", "chunk": "t || 'Accept'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    );\n  };\n\n  return (\n    <Modal\n      animationType=\"fade\"\n      transparent\n      visible={visible}\n      statusBarTranslucent\n      onRequestClose={onClose}>\n      <View className=\"flex-1 items-center justify-center bg-black/60 px-4\">\n        <View className=\"w-full max-w-sm rounded-2xl bg-white p-6\">\n          {icon && <View className=\"mb-4 items-center\">{icon}</View>}\n          <Text className=\"text-center text-xl "}, {"index": 822, "path": "client/components/CustomAlertModal.jsx", "chunk": "& <View className=\"mb-4 items-center\">{icon}</View>}\n          <Text className=\"text-center text-xl font-bold text-gray-900\">{title}</Text>\n          {subtitle && <Text className=\"mt-2 text-center text-base text-gray-600\">{subtitle}</Text>}\n          {renderButtons()}\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default CustomAlertModal;\n"}, {"index": 823, "path": "client/components/KeyboardDismissWrapper.jsx", "chunk": "import React from 'react';\nimport { \n  TouchableWithoutFeedback, \n  Keyboard, \n  KeyboardAvoidingView, \n  Platform \n} from 'react-native';\n\nexport const KeyboardDismissWrapper = ({ children }) => {\n  return (\n    <KeyboardAvoidingView \n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      style={{ flex: 1 }}\n    >\n      <TouchableWithoutFeedback onPress={Keyboard.dismiss}>\n        {children}\n      </TouchableWithoutFeedback>\n    </KeyboardAvoidingView>\n  );\n};"}, {"index": 824, "path": "client/components/KeyboardDismissWrapper.jsx", "chunk": "hildren}\n      </TouchableWithoutFeedback>\n    </KeyboardAvoidingView>\n  );\n};"}, {"index": 825, "path": "client/components/LoadingComponent.jsx", "chunk": "import { LinearGradient } from 'expo-linear-gradient';\nimport { useEffect } from 'react';\nimport { View, Text, Dimensions, Image } from 'react-native';\nimport Animated, {\n  BounceIn,\n  FadeOut,\n  useAnimatedStyle,\n  withRepeat,\n  withSpring,\n  withSequence,\n  withTiming,\n  useSharedValue,\n  withDelay,\n} from 'react-native-reanimated';\n\nimport logo from '../assets/splash-icon.png';\n\nconst { width, height } = Dimensions.get('window');\n\nconst LoadingComponent = () => {\n  const scale = useSharedValu"}, {"index": 826, "path": "client/components/LoadingComponent.jsx", "chunk": "height } = Dimensions.get('window');\n\nconst LoadingComponent = () => {\n  const scale = useSharedValue(1);\n  const opacity = useSharedValue(1);\n  const translateY = useSharedValue(0);\n\n  useEffect(() => {\n    scale.value = withRepeat(\n      withSequence(withTiming(1.2, { duration: 1000 }), withTiming(1, { duration: 1000 })),\n      -1,\n      true\n    );\n\n    translateY.value = withRepeat(withSequence(withSpring(-10), withSpring(0)), -1, true);\n  }, []);\n\n  const iconStyle = useAnimatedStyle(() => "}, {"index": 827, "path": "client/components/LoadingComponent.jsx", "chunk": "e(withSpring(-10), withSpring(0)), -1, true);\n  }, []);\n\n  const iconStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: scale.value }, { translateY: translateY.value }],\n  }));\n\n  const Particle = ({ delay }) => {\n    const particleTranslateY = useSharedValue(height);\n    const particleOpacity = useSharedValue(0);\n\n    useEffect(() => {\n      particleTranslateY.value = withDelay(\n        delay,\n        withRepeat(withTiming(-height, { duration: 3000 }), -1)\n      );\n      particleOpacity"}, {"index": 828, "path": "client/components/LoadingComponent.jsx", "chunk": "elay,\n        withRepeat(withTiming(-height, { duration: 3000 }), -1)\n      );\n      particleOpacity.value = withDelay(\n        delay,\n        withRepeat(\n          withSequence(withTiming(1, { duration: 1000 }), withTiming(0, { duration: 2000 })),\n          -1\n        )\n      );\n    }, []);\n\n    return (\n      <Animated.View\n        style={[\n          {\n            position: 'absolute',\n            width: 4,\n            height: 4,\n            backgroundColor: 'rgba(255,255,255,0.5)',\n          "}, {"index": 829, "path": "client/components/LoadingComponent.jsx", "chunk": "   width: 4,\n            height: 4,\n            backgroundColor: 'rgba(255,255,255,0.5)',\n            borderRadius: 2,\n            left: Math.random() * width,\n          },\n          {\n            transform: [{ translateY: particleTranslateY }],\n            opacity: particleOpacity,\n          },\n        ]}\n      />\n    );\n  };\n\n  return (\n    <LinearGradient\n      colors={['#1e3c72', '#2a5298', '#1e3c72']}\n      style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      {[...Arra"}, {"index": 830, "path": "client/components/LoadingComponent.jsx", "chunk": "1e3c72']}\n      style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      {[...Array(15)].map((_, i) => (\n        <Particle key={i} delay={i * 200} />\n      ))}\n\n      <Animated.View entering={BounceIn} exiting={FadeOut} className=\"items-center space-y-8\">\n        <Animated.View style={iconStyle}>\n          <Image source={logo} className=\"h-48 w-48\" resizeMode=\"contain\" />\n        </Animated.View>\n\n        <View className=\"items-center space-y-3\">\n          <Animated.Text\n      "}, {"index": 831, "path": "client/components/LoadingComponent.jsx", "chunk": " </Animated.View>\n\n        <View className=\"items-center space-y-3\">\n          <Animated.Text\n            entering={BounceIn.delay(300)}\n            className=\"text-center text-2xl font-bold text-white\">\n            AlumniConnect\n          </Animated.Text>\n          <Animated.Text\n            entering={BounceIn.delay(600)}\n            className=\"text-center text-lg font-semibold text-white\">\n            Building Bridges Between Generations\n          </Animated.Text>\n        </View>\n\n        <Vie"}, {"index": 832, "path": "client/components/LoadingComponent.jsx", "chunk": "       Building Bridges Between Generations\n          </Animated.Text>\n        </View>\n\n        <View className=\"flex-row space-x-2\">\n          {[...Array(3)].map((_, i) => (\n            <Animated.View\n              key={i}\n              style={{\n                width: 10,\n                height: 10,\n                borderRadius: 5,\n                backgroundColor: 'white',\n              }}\n              entering={BounceIn.delay(900 + i * 200)}\n            />\n          ))}\n        </View>\n      "}, {"index": 833, "path": "client/components/LoadingComponent.jsx", "chunk": "        entering={BounceIn.delay(900 + i * 200)}\n            />\n          ))}\n        </View>\n      </Animated.View>\n    </LinearGradient>\n  );\n};\n\nexport default LoadingComponent;\n"}, {"index": 834, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "import { useNavigation } from '@react-navigation/native';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { View, Text, FlatList, TouchableOpacity, ScrollView } from 'react-native';\nimport { ML_URL } from '@env';\nimport UserCard from '../../utils/UserCard'; // Importing the UserCard component\n// import { connectHandler } from '../../utils/connectHandler';\n\nconst AlumniRecommendations = () => {\n  const navigation = useNavigation();\n  const [interestRecommendations, "}, {"index": 835, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "niRecommendations = () => {\n  const navigation = useNavigation();\n  const [interestRecommendations, setInterestRecommendations] = useState([]);\n  const [locationRecommendations, setLocationRecommendations] = useState([]);\n  const [overallRecommendations, setOverallRecommendations] = useState([]);\n  const [professionRecommendations, setProfessionRecommendations] = useState([]);\n\n  useEffect(() => {\n    const getRecommendations = async () => {\n      try {\n        const response = await axios.post("}, {"index": 836, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "\n    const getRecommendations = async () => {\n      try {\n        const response = await axios.post(\n          `${ML_URL}/api/get_comprehensive_recommendations/`,\n          {\n            email: 'raywridesh@example.org',\n          }\n        );\n        setInterestRecommendations(response.data.interest_recommendations);\n        setLocationRecommendations(response.data.location_recommendations);\n        setOverallRecommendations(response.data.overall_recommendations);\n        setProfessionRecommenda"}, {"index": 837, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "   setOverallRecommendations(response.data.overall_recommendations);\n        setProfessionRecommendations(response.data.profession_recommendations);\n      } catch (err) {\n        console.error('Error:', err);\n      }\n    };\n    getRecommendations();\n  }, []);\n\n  const renderRecommendationItem = ({ item }) => <UserCard alumni={item} />;\n\n  return (\n    <ScrollView contentContainerStyle={{ paddingBottom: 16 }} className=\"bg-gray-100 p-4\">\n      {/* Alumni Map Button */}\n      <View className=\"flex"}, {"index": 838, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "ttom: 16 }} className=\"bg-gray-100 p-4\">\n      {/* Alumni Map Button */}\n      <View className=\"flex-row justify-evenly\">\n        <View className=\"mb-4 flex-row justify-between\">\n          <TouchableOpacity\n            className=\"rounded-md bg-blue-700 px-4 py-2\"\n            onPress={() => navigation.navigate('Map')}>\n            <Text className=\"text-base font-semibold text-white\">Alumni Map</Text>\n          </TouchableOpacity>\n        </View>\n        <View className=\"mb-4 flex-row justify-betw"}, {"index": 839, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "t>\n          </TouchableOpacity>\n        </View>\n        <View className=\"mb-4 flex-row justify-between\">\n          <TouchableOpacity\n            className=\"rounded-md bg-blue-700 px-4 py-2\"\n            onPress={() => navigation.navigate('Directory')}>\n            <Text className=\"text-base font-semibold text-white\">Alumni Directory</Text>\n          </TouchableOpacity>\n        </View>\n        <View className=\"mb-4 flex-row justify-between\">\n          <TouchableOpacity\n            className=\"roun"}, {"index": 840, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "w className=\"mb-4 flex-row justify-between\">\n          <TouchableOpacity\n            className=\"rounded-md bg-blue-700 px-4 py-2\"\n            onPress={() => navigation.navigate('All')}>\n            <Text className=\"text-base font-semibold text-white\">All</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Alumni Recommendations based on different categories */}\n      <Text className=\"mb-3 text-lg font-bold\">Alumni Recommendations</Text>\n\n      <Text className=\"mb-3 text"}, {"index": 841, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "t className=\"mb-3 text-lg font-bold\">Alumni Recommendations</Text>\n\n      <Text className=\"mb-3 text-lg font-bold\">Overall</Text>\n      <FlatList\n        data={overallRecommendations}\n        keyExtractor={(item) => item._id}\n        renderItem={renderRecommendationItem} // Using the UserCard component here\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        contentContainerStyle={{ paddingVertical: 12 }}\n        ItemSeparatorComponent={() => <View style={{ width: 15 }} />}"}, {"index": 842, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "tyle={{ paddingVertical: 12 }}\n        ItemSeparatorComponent={() => <View style={{ width: 15 }} />} // Spacing between cards\n      />\n\n      <Text className=\"mb-3 text-lg font-bold\">Based on Interests</Text>\n      <FlatList\n        data={interestRecommendations}\n        keyExtractor={(item) => item._id}\n        renderItem={renderRecommendationItem} // Using the UserCard component here\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        contentContainerStyle={{ paddingVerti"}, {"index": 843, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "izontal\n        showsHorizontalScrollIndicator={false}\n        contentContainerStyle={{ paddingVertical: 12 }}\n        ItemSeparatorComponent={() => <View style={{ width: 15 }} />} // Spacing between cards\n      />\n\n      <Text className=\"mb-3 text-lg font-bold\">Based on Profession</Text>\n      <FlatList\n        data={professionRecommendations}\n        keyExtractor={(item) => item._id}\n        renderItem={renderRecommendationItem} // Using the UserCard component here\n        horizontal\n        s"}, {"index": 844, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "derItem={renderRecommendationItem} // Using the UserCard component here\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        contentContainerStyle={{ paddingVertical: 12 }}\n        ItemSeparatorComponent={() => <View style={{ width: 12 }} />} // Spacing between cards\n      />\n\n      <Text className=\"mb-3 text-lg font-bold\">Based on Location</Text>\n      <FlatList\n        data={locationRecommendations}\n        keyExtractor={(item) => item._id}\n        renderItem={renderRecomm"}, {"index": 845, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "{locationRecommendations}\n        keyExtractor={(item) => item._id}\n        renderItem={renderRecommendationItem} // Using the UserCard component here\n        horizontal\n        showsHorizontalScrollIndicator={false}\n        contentContainerStyle={{ paddingVertical: 12 }}\n        ItemSeparatorComponent={() => <View style={{ width: 12 }} />} // Spacing between cards\n      />\n    </ScrollView>\n  );\n};\n\nexport default AlumniRecommendations;\n"}, {"index": 846, "path": "client/components/connections/AlumniConnections.jsx", "chunk": "};\n\nexport default AlumniRecommendations;\n"}, {"index": 847, "path": "client/components/connections/CollegeConnections.jsx", "chunk": "import { View, Text, FlatList, TouchableOpacity, ScrollView } from 'react-native';\n\nimport AlumniDirectory from '../../screens/AlumniDirectory';\n\nconst AlumniRecommendations = ({ navigation }) => {\n  return (\n    <ScrollView contentContainerStyle={{ paddingBottom: 16 }} className=\"bg-gray-100 p-4\">\n      {/* Alumni Map Button */}\n      <View className=\"flex-row justify-between\">\n        <View className=\"mb-4 flex-grow flex-row justify-between\">\n          <TouchableOpacity\n            className=\""}, {"index": 848, "path": "client/components/connections/CollegeConnections.jsx", "chunk": "sName=\"mb-4 flex-grow flex-row justify-between\">\n          <TouchableOpacity\n            className=\"rounded-md bg-blue-700 px-4 py-2\"\n            onPress={() => navigation.navigate('Map')}>\n            <Text className=\"text-base font-semibold text-white\">Alumni Map</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      <AlumniDirectory />\n    </ScrollView>\n  );\n};\n\nexport default AlumniRecommendations;\n"}, {"index": 849, "path": "client/components/connections/CollegeConnections.jsx", "chunk": "t AlumniRecommendations;\n"}, {"index": 850, "path": "client/components/events/EventCard.jsx", "chunk": "import { View, Text, TouchableOpacity, Image } from 'react-native';\n\nconst EventCard = ({ event, onClick }) => {\n  return (\n    <TouchableOpacity\n      className=\"mb-4 overflow-hidden rounded-lg border bg-white shadow-lg\"\n      onPress={onClick}>\n      <Image source={{ uri: event.image }} className=\"h-40 w-full\" />\n      <View className=\"p-4\">\n        <Text className=\"mb-1 text-lg font-bold text-gray-900\">{event.title}</Text>\n        <Text className=\"text-sm text-gray-600\">\n          {event.date"}, {"index": 851, "path": "client/components/events/EventCard.jsx", "chunk": "ray-900\">{event.title}</Text>\n        <Text className=\"text-sm text-gray-600\">\n          {event.date} \u2022 {event.location}\n        </Text>\n        <Text className=\"mt-2 text-base font-semibold text-blue-600\">{event.price}</Text>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport default EventCard;\n"}, {"index": 852, "path": "client/components/events/EventModal.jsx", "chunk": "import { Feather } from '@expo/vector-icons';\nimport { useState, useCallback, useEffect } from 'react';\nimport { View, Text, Modal, Image, ScrollView, TouchableOpacity, Dimensions } from 'react-native';\nimport { SERVER_URL } from '@env';\nimport axios from 'axios';\nimport PaymentModal from './PaymentModal';\nimport { useAuth } from '../../providers/AuthProvider';\n\nconst EventModal = ({ open, onClose, event, role }) => {\n  const [paymentModalOpen, setPaymentModalOpen] = useState(false);\n  const [re"}, {"index": 853, "path": "client/components/events/EventModal.jsx", "chunk": ", event, role }) => {\n  const [paymentModalOpen, setPaymentModalOpen] = useState(false);\n  const [registeredUsers, setRegisteredUsers] = useState([]); // Initialize as empty array\n  const screenHeight = Dimensions.get('window').height;\n  console.log(role);\n  // console.log(event._id);\n\n  // Memoized handleRegister function\n  const handleRegister = useCallback(() => {\n    setPaymentModalOpen(true);\n  }, []);\n\n  const handlePaymentComplete = () => {\n    setPaymentModalOpen(false);\n    onClose();\n\n"}, {"index": 854, "path": "client/components/events/EventModal.jsx", "chunk": "\n  }, []);\n\n  const handlePaymentComplete = () => {\n    setPaymentModalOpen(false);\n    onClose();\n\n  };\n\n  const { token } = useAuth();\n\n  useEffect(() => {\n    const fetchRegisteredUsers = async () => {\n      if (open && event?._id) {\n        try {\n          const response = await axios.get(`${SERVER_URL}/events/${event._id}/registered`, {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          });\n          if (response.data) {\n            console.log(r"}, {"index": 855, "path": "client/components/events/EventModal.jsx", "chunk": "rer ${token}`,\n            },\n          });\n          if (response.data) {\n            console.log(response.data);\n            setRegisteredUsers(response.data); // Make sure to access response.data\n          }\n        } catch (error) {\n          console.error('Error fetching registered users:', error);\n          setRegisteredUsers([]); // Set to empty array on error\n        }\n      }\n    };\n\n    fetchRegisteredUsers();\n  }, [open, event]);\n\n  const defaultProfilePhoto = 'https://www.gravatar.co"}, {"index": 856, "path": "client/components/events/EventModal.jsx", "chunk": "fetchRegisteredUsers();\n  }, [open, event]);\n\n  const defaultProfilePhoto = 'https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y';\n\n  if (!open || !event) return null;\n\n  return (\n    <>\n      <Modal\n        animationType=\"slide\"\n        transparent\n        visible={open}\n        statusBarTranslucent\n        onRequestClose={onClose}>\n        <View className=\"flex-1 justify-end bg-black/60\">\n          <View\n            className=\"rounded-t-[32px] bg-white shadow-2xl\"\n       "}, {"index": 857, "path": "client/components/events/EventModal.jsx", "chunk": "d bg-black/60\">\n          <View\n            className=\"rounded-t-[32px] bg-white shadow-2xl\"\n            style={{ maxHeight: screenHeight * 0.95 }} // Adjusted max height for better fit\n          >\n            {/* Drag indicator for intuitive gesture interaction */}\n            <View className=\"my-4 h-1 w-12 self-center rounded-full bg-gray-300\" />\n\n            {/* Close Button with Enhanced Styling */}\n            <View className=\"absolute right-4 top-2 z-10\">\n              <TouchableOpacity cl"}, {"index": 858, "path": "client/components/events/EventModal.jsx", "chunk": "ng */}\n            <View className=\"absolute right-4 top-2 z-10\">\n              <TouchableOpacity className=\"mb-4 h-12 w-10 p-2\" onPress={onClose}>\n                <Feather name=\"x\" size={24} color=\"#6B7280\" strokeWidth={2} />\n              </TouchableOpacity>\n            </View>\n\n            <ScrollView\n              // className='mt-4'\n              showsVerticalScrollIndicator={false}\n              contentContainerStyle={{\n                paddingHorizontal: 24,\n                paddingBottom: "}, {"index": 859, "path": "client/components/events/EventModal.jsx", "chunk": "     contentContainerStyle={{\n                paddingHorizontal: 24,\n                paddingBottom: 20,\n              }}>\n              {/* Event Header with Vibrant Title */}\n              <Text className=\"mb-4 mt-6 text-3xl font-bold tracking-tight text-gray-900\">\n                {event.title}\n              </Text>\n\n              {/* Info Cards with Enhanced Spacing */}\n              <View className=\"mb-4 space-y-4\">\n                <View className=\"flex-row items-center gap-2 space-x-3 rounde"}, {"index": 860, "path": "client/components/events/EventModal.jsx", "chunk": "Name=\"mb-4 space-y-4\">\n                <View className=\"flex-row items-center gap-2 space-x-3 rounded-xl bg-blue-50 p-3\">\n                  <Feather name=\"calendar\" size={24} color=\"#2563EB\" />\n                  <View>\n                    <Text className=\"text-sm font-semibold text-blue-800\">Date & Time</Text>\n                    <Text className=\"text-gray-600\">{`${event.date}, ${event.time}`}</Text>\n                  </View>\n                </View>\n\n                <View className=\"flex-row ite"}, {"index": 861, "path": "client/components/events/EventModal.jsx", "chunk": "xt>\n                  </View>\n                </View>\n\n                <View className=\"flex-row items-center gap-2 space-x-3 rounded-xl bg-green-50 p-3\">\n                  <Feather name=\"map-pin\" size={24} color=\"#16A34A\" />\n                  <View>\n                    <Text className=\"text-sm font-semibold text-green-800\">Location</Text>\n                    <Text className=\"text-gray-600\">{event.location}</Text>\n                  </View>\n                </View>\n              </View>\n\n         "}, {"index": 862, "path": "client/components/events/EventModal.jsx", "chunk": ".location}</Text>\n                  </View>\n                </View>\n              </View>\n\n              {/* Speakers Section */}\n              <Text className=\"mb-4 text-xl font-bold text-gray-900\">Speakers</Text>\n              <View className=\"mb-4 space-y-4\">\n                {event.speakers.map((speaker, index) => (\n                  <View\n                    key={index}\n                    className=\"flex-row items-center space-x-4 rounded-xl bg-gray-50 p-3\">\n                    <Image\n     "}, {"index": 863, "path": "client/components/events/EventModal.jsx", "chunk": "ssName=\"flex-row items-center space-x-4 rounded-xl bg-gray-50 p-3\">\n                    <Image\n                      source={{ uri: speaker.image }}\n                      className=\"h-16 w-16 rounded-full border-2 border-white shadow-md\"\n                    />\n                    <View className=\"flex-1\">\n                      <Text className=\"font-semibold text-gray-900\">{speaker.name}</Text>\n                      <Text className=\"text-sm text-gray-600\">{speaker.role}</Text>\n                   "}, {"index": 864, "path": "client/components/events/EventModal.jsx", "chunk": "                   <Text className=\"text-sm text-gray-600\">{speaker.role}</Text>\n                    </View>\n                    <Feather name=\"star\" size={20} color=\"#EAB308\" fill=\"#EAB308\" />\n                  </View>\n                ))}\n              </View>\n\n              {/* Agenda Section */}\n              <Text className=\"mb-4 text-xl font-bold text-gray-900\">Agenda</Text>\n              <Text className=\"mb-4 leading-relaxed text-gray-700\">{event.agenda}</Text>\n\n              {/* Sponsors "}, {"index": 865, "path": "client/components/events/EventModal.jsx", "chunk": "xt className=\"mb-4 leading-relaxed text-gray-700\">{event.agenda}</Text>\n\n              {/* Sponsors Section */}\n              <Text className=\"mb-4 text-xl font-bold text-gray-900\">Sponsors</Text>\n              <View className=\"mb-4 flex-row flex-wrap\">\n                {event.sponsors.map((sponsor, index) => (\n                  <View key={index} className=\"m-1 rounded-full bg-gray-100 px-3 py-1\">\n                    <Text className=\"text-gray-700\">{sponsor}</Text>\n                  </View>\n     "}, {"index": 866, "path": "client/components/events/EventModal.jsx", "chunk": "                    <Text className=\"text-gray-700\">{sponsor}</Text>\n                  </View>\n                ))}\n              </View>\n\n              {\n                role === \"college\" && (\n                  <View className=\"mb-4 space-y-3\">\n                    <View className=\"flex-row items-center justify-between rounded-xl bg-gray-50 p-4\">\n                      <View className=\"flex-row items-center space-x-3\">\n                        <View>\n                          <Text className=\"font"}, {"index": 867, "path": "client/components/events/EventModal.jsx", "chunk": "ms-center space-x-3\">\n                        <View>\n                          <Text className=\"font-semibold text-gray-900\">Total Registered</Text>\n                          <Text className=\"text-sm text-gray-600\">{event.registeredCount}</Text>\n                        </View>\n                      </View>\n                    </View>\n                  </View>\n                )\n              }\n\n              {\n                role == 'college' && (\n                  <View className=\"mb-6\">\n      "}, {"index": 868, "path": "client/components/events/EventModal.jsx", "chunk": "           {\n                role == 'college' && (\n                  <View className=\"mb-6\">\n                    <View className=\"mb-4 flex-row items-center justify-between\">\n                      <Text className=\"text-xl font-bold text-gray-900\">Registered Users</Text>\n                      <View className=\"flex-shrink-0 rounded-full bg-blue-100 px-3 py-1 -ml-16\">\n                        <Text className=\"font-medium text-blue-800\">\n                          {registeredUsers.length} Total\n     "}, {"index": 869, "path": "client/components/events/EventModal.jsx", "chunk": "lassName=\"font-medium text-blue-800\">\n                          {registeredUsers.length} Total\n                        </Text>\n                      </View>\n                    </View>\n                    <View className=\"space-y-3\">\n                      {registeredUsers && registeredUsers.length > 0 ? (\n                        registeredUsers.map((user, index) => (\n                          <View\n                            key={index}\n                            className=\"flex-row items-cent"}, {"index": 870, "path": "client/components/events/EventModal.jsx", "chunk": "w\n                            key={index}\n                            className=\"flex-row items-center justify-between rounded-xl bg-gray-50/80 p-4 shadow-sm\">\n                            <View className=\"flex-row items-center\">\n                              <Image\n                                source={{ uri: user.profilePhoto || defaultProfilePhoto }}\n                                className=\"h-12 w-12 rounded-full border-2 border-white shadow\"\n                                defaultSource={"}, {"index": 871, "path": "client/components/events/EventModal.jsx", "chunk": "h-12 w-12 rounded-full border-2 border-white shadow\"\n                                defaultSource={{ uri: defaultProfilePhoto }}\n                              />\n                              <View className=\"ml-4\">\n                                <Text className=\"text-base font-semibold text-gray-900\">{user.fullName}</Text>\n                                <Text className=\"text-sm text-gray-500\">Registered</Text>\n                              </View>\n                            </View>\n        "}, {"index": 872, "path": "client/components/events/EventModal.jsx", "chunk": "Registered</Text>\n                              </View>\n                            </View>\n                            <View className=\"rounded-full bg-blue-100 px-3 py-1\">\n                              <Text className=\"font-medium text-blue-800\">\n                                {index + 1}\n                              </Text>\n                            </View>\n                          </View>\n                        ))\n                      ) : (\n                        <View className=\"rou"}, {"index": 873, "path": "client/components/events/EventModal.jsx", "chunk": "\n                        ))\n                      ) : (\n                        <View className=\"rounded-xl bg-gray-50 p-8\">\n                          <Text className=\"text-center text-gray-500\">No registrations yet</Text>\n                        </View>\n                      )}\n                    </View>\n                  </View>\n                )\n              }\n\n\n              {/* Register Button with Active Opacity */}\n              {role != \"college\" && (\n                <TouchableOpacity\n"}, {"index": 874, "path": "client/components/events/EventModal.jsx", "chunk": "ton with Active Opacity */}\n              {role != \"college\" && (\n                <TouchableOpacity\n                  onPress={handleRegister}\n                  className=\"mx-4 mt-4 rounded-xl bg-blue-600 py-4 shadow-lg\"\n                  activeOpacity={0.8}>\n                  <Text className=\"text-center text-lg font-bold tracking-wide text-white\">\n                    Register for Event\n                  </Text>\n                </TouchableOpacity>)\n\n              }\n\n            </ScrollView>\n  "}, {"index": 875, "path": "client/components/events/EventModal.jsx", "chunk": "         </Text>\n                </TouchableOpacity>)\n\n              }\n\n            </ScrollView>\n          </View>\n        </View>\n\n        {role === 'college' && (\n          <View>\n\n          </View>\n        )}\n      </Modal>\n      <PaymentModal\n        open={paymentModalOpen}\n        onClose={() => setPaymentModalOpen(false)}\n        onPaymentComplete={handlePaymentComplete}\n        type=\"event\"\n        amount={event.price}\n        title={event.title}\n        itemId={event.id}\n      />\n    </"}, {"index": 876, "path": "client/components/events/EventModal.jsx", "chunk": "\"\n        amount={event.price}\n        title={event.title}\n        itemId={event.id}\n      />\n    </>\n  );\n};\n\nexport default EventModal;\n"}, {"index": 877, "path": "client/components/events/PaymentModal.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport { Feather, AntDesign } from '@expo/vector-icons';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport {\n  Modal,\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  Dimensions,\n  ActivityIndicator,\n} from 'react-native';\n\nimport { useAuth } from '../../providers/AuthProvider';\nimport CustomAlertModal from '../CustomAlertModal';\n\nconst PaymentModal = ({\n  open,\n  onClose,\n  onPaymentComplete,\n  type = 'donation', // new prop\n  amount,\n  ti"}, {"index": 878, "path": "client/components/events/PaymentModal.jsx", "chunk": "ntModal = ({\n  open,\n  onClose,\n  onPaymentComplete,\n  type = 'donation', // new prop\n  amount,\n  title,\n  itemId, // can be campaignId or eventId\n}) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [showThankYou, setShowThankYou] = useState(false);\n  const [paymentMethod, setPaymentMethod] = useState('');\n  const [transactionDetails, setTransactionDetails] = useState(null);\n  const { token } = useAuth();\n  const screenHeight = Dimensions.get('window').height;\n\n  const dis"}, {"index": 879, "path": "client/components/events/PaymentModal.jsx", "chunk": "\n  const { token } = useAuth();\n  const screenHeight = Dimensions.get('window').height;\n\n  const displayConfig = {\n    donation: {\n      title: 'Donating',\n      icon: <AntDesign name=\"heart\" size={50} color=\"#ec4899\" />,\n      thankTitle: 'Thank you for your donation!',\n      amountPrefix: '\u20b9',\n      summaryText: `for ${title}`,\n    },\n    event: {\n      title: 'Registering',\n      icon: <AntDesign name=\"checkcircle\" size={50} color=\"#22c55e\" />,\n      thankTitle: 'Successfully Registered!',\n  "}, {"index": 880, "path": "client/components/events/PaymentModal.jsx", "chunk": "gn name=\"checkcircle\" size={50} color=\"#22c55e\" />,\n      thankTitle: 'Successfully Registered!',\n      amountPrefix: '\u20b9',\n      summaryText: `for ${title}`,\n    },\n  };\n\n  const config = displayConfig[type];\n\n  const handlePayment = async (method) => {\n    setIsProcessing(true);\n    setPaymentMethod(method);\n\n    try {\n      let response;\n      if (type === 'donation') {\n        response = await axios.post(\n          `${SERVER_URL}/donationcampaigns/${itemId}/donate`,\n          {\n            am"}, {"index": 881, "path": "client/components/events/PaymentModal.jsx", "chunk": "axios.post(\n          `${SERVER_URL}/donationcampaigns/${itemId}/donate`,\n          {\n            amount: Number(amount),\n            transactionMethod: method,\n          },\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        );\n        setTransactionDetails(response.data.transaction);\n      } else if (type === 'event') {\n        response = await axios.post(\n          `${SERVER_URL}/events/${itemId}/register`,\n          {\n            amount: Number(amount),"}, {"index": 882, "path": "client/components/events/PaymentModal.jsx", "chunk": "          `${SERVER_URL}/events/${itemId}/register`,\n          {\n            amount: Number(amount),\n            transactionMethod: method,\n          },\n          {\n            headers: { Authorization: `Bearer ${token}` },\n          }\n        );\n        setTransactionDetails(response.data.registration); // Store registration details\n      }\n\n      setIsProcessing(false);\n      setShowThankYou(true);\n    } catch (error) {\n      setIsProcessing(false);\n      alert(error.response?.data?.message ||"}, {"index": 883, "path": "client/components/events/PaymentModal.jsx", "chunk": "e);\n    } catch (error) {\n      setIsProcessing(false);\n      alert(error.response?.data?.message || 'Payment failed. Please try again.');\n      onClose();\n    }\n  };\n\n  const handleThankYouClose = () => {\n    setShowThankYou(false);\n    onPaymentComplete({\n      amount: transactionDetails?.amount || amount,\n      itemId,\n      transaction: transactionDetails,\n    });\n  };\n\n  if (!open) return null;\n\n  return (\n    <>\n      <Modal\n        animationType=\"slide\"\n        transparent\n        visible"}, {"index": 884, "path": "client/components/events/PaymentModal.jsx", "chunk": "l;\n\n  return (\n    <>\n      <Modal\n        animationType=\"slide\"\n        transparent\n        visible={open}\n        statusBarTranslucent\n        onRequestClose={onClose}>\n        <View className=\"flex-1 justify-end bg-black/60\">\n          <View\n            className=\"rounded-t-[32px] bg-white shadow-2xl\"\n            style={{ maxHeight: screenHeight * 0.95 }}>\n            {/* Close Button */}\n            <View className=\"absolute right-4 top-2 z-10\">\n              <TouchableOpacity className=\"mb-"}, {"index": 885, "path": "client/components/events/PaymentModal.jsx", "chunk": "       <View className=\"absolute right-4 top-2 z-10\">\n              <TouchableOpacity className=\"mb-4 h-12 w-10 p-2\" onPress={onClose}>\n                <Feather name=\"x\" size={24} color=\"#6B7280\" strokeWidth={2} />\n              </TouchableOpacity>\n            </View>\n\n            <ScrollView\n              showsVerticalScrollIndicator={false}\n              contentContainerStyle={{\n                paddingHorizontal: 24,\n                paddingBottom: 20,\n              }}>\n              {/* Title "}, {"index": 886, "path": "client/components/events/PaymentModal.jsx", "chunk": "paddingHorizontal: 24,\n                paddingBottom: 20,\n              }}>\n              {/* Title */}\n              <Text className=\"mb-4 mt-6 text-3xl font-bold tracking-tight text-gray-900\">\n                Payment Method\n              </Text>\n\n              {/* Amount and Title Display */}\n              <View className=\"mb-6 rounded-xl bg-blue-50 p-4\">\n                <Text className=\"text-sm text-gray-600\">{config.title}</Text>\n                <Text className=\"text-2xl font-bold text-gray-"}, {"index": 887, "path": "client/components/events/PaymentModal.jsx", "chunk": " text-gray-600\">{config.title}</Text>\n                <Text className=\"text-2xl font-bold text-gray-900\">\n                  {config.amountPrefix}\n                  {amount}\n                </Text>\n                <Text className=\"mt-1 text-base text-gray-600\">to {title}</Text>\n              </View>\n\n              {/* Payment Options */}\n              {isProcessing ? (\n                <View className=\"flex-1 items-center justify-center\">\n                  <ActivityIndicator size=\"large\" color=\"#2"}, {"index": 888, "path": "client/components/events/PaymentModal.jsx", "chunk": "me=\"flex-1 items-center justify-center\">\n                  <ActivityIndicator size=\"large\" color=\"#2563EB\" />\n                  <Text className=\"mt-4 text-lg text-gray-600\">Processing payment...</Text>\n                </View>\n              ) : (\n                <View className=\"mb-4 space-y-6\">\n                  <TouchableOpacity\n                    onPress={() => handlePayment('UPI')}\n                    className=\"mb-2 flex-row items-center gap-2 space-x-3 rounded-xl bg-blue-50 p-3\">\n         "}, {"index": 889, "path": "client/components/events/PaymentModal.jsx", "chunk": "         className=\"mb-2 flex-row items-center gap-2 space-x-3 rounded-xl bg-blue-50 p-3\">\n                    <Text className=\"text-lg font-semibold text-blue-800\">UPI</Text>\n                  </TouchableOpacity>\n\n                  <TouchableOpacity\n                    onPress={() => handlePayment('Net Banking')}\n                    className=\"mb-2 flex-row items-center gap-2 space-x-3 rounded-xl bg-green-50 p-3\">\n                    <Text className=\"text-lg font-semibold text-green-800\">Net Ba"}, {"index": 890, "path": "client/components/events/PaymentModal.jsx", "chunk": " bg-green-50 p-3\">\n                    <Text className=\"text-lg font-semibold text-green-800\">Net Banking</Text>\n                  </TouchableOpacity>\n\n                  <TouchableOpacity\n                    onPress={() => handlePayment('Credit/Debit Card')}\n                    className=\"flex-row items-center gap-2 space-x-3 rounded-xl bg-yellow-50 p-3\">\n                    <Text className=\"text-lg font-semibold text-yellow-800\">Credit/Debit Card</Text>\n                  </TouchableOpacity>\n   "}, {"index": 891, "path": "client/components/events/PaymentModal.jsx", "chunk": "lg font-semibold text-yellow-800\">Credit/Debit Card</Text>\n                  </TouchableOpacity>\n                </View>\n              )}\n            </ScrollView>\n          </View>\n        </View>\n      </Modal>\n\n      <CustomAlertModal\n        visible={showThankYou}\n        onClose={handleThankYouClose}\n        icon={\n          <View className=\"items-center\">\n            {config.icon}\n            <View className=\"mt-2 items-center\">\n              <Text className=\"text-lg font-bold text-gray-90"}, {"index": 892, "path": "client/components/events/PaymentModal.jsx", "chunk": "  <View className=\"mt-2 items-center\">\n              <Text className=\"text-lg font-bold text-gray-900\">\n                {config.amountPrefix}\n                {amount}\n              </Text>\n              <Text className=\"text-sm text-gray-600\">{config.summaryText}</Text>\n              {transactionDetails && (\n                <Text className=\"mt-2 text-xs text-gray-500\">\n                  Transaction ID: {transactionDetails._id}\n                </Text>\n              )}\n            </View>\n        "}, {"index": 893, "path": "client/components/events/PaymentModal.jsx", "chunk": "n ID: {transactionDetails._id}\n                </Text>\n              )}\n            </View>\n          </View>\n        }\n        title={config.thankTitle}\n        subtitle={`Payment successful via ${paymentMethod}`}\n        variant=\"single\"\n      />\n    </>\n  );\n};\n\nexport default PaymentModal;\n"}, {"index": 894, "path": "client/components/general/Button.jsx", "chunk": "import { View, Text, TouchableOpacity } from 'react-native';\n\nconst Button = ({ text, nav, navigation }) => {\n  return (\n    <TouchableOpacity\n      onPress={() => navigation.navigate(nav)}\n      className=\"w-full rounded-full bg-black p-4 active:bg-gray-800\">\n      <Text className=\"text-center text-base font-semibold text-white\">{text}</Text>\n    </TouchableOpacity>\n  );\n};\n\nexport default Button;\n"}, {"index": 895, "path": "client/components/general/Button.jsx", "chunk": ";\n"}, {"index": 896, "path": "client/components/home/CommentModal.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport { FontAwesome, Ionicons } from '@expo/vector-icons';\nimport axios from 'axios';\nimport { useState, useRef, useEffect, useMemo } from 'react';\nimport {\n  Modal,\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  TextInput,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n  PanResponder,\n  Animated,\n} from 'react-native';\n\nimport { useAuth } from '../../providers/AuthProvider';\n\nconst CommentModal = ({ isVisible, onClose, post, updateComments }) => {\n  const "}, {"index": 897, "path": "client/components/home/CommentModal.jsx", "chunk": "rs/AuthProvider';\n\nconst CommentModal = ({ isVisible, onClose, post, updateComments }) => {\n  const [newComment, setNewComment] = useState('');\n  const panY = useRef(new Animated.Value(0)).current;\n  const { user, token } = useAuth();\n\n  // Reset pan position when modal visibility changes\n  useEffect(() => {\n    if (isVisible) {\n      panY.setValue(0);\n      panY.setOffset(0);\n    }\n  }, [isVisible]);\n\n  const translateY = panY.interpolate({\n    inputRange: [-1, 0, 1],\n    outputRange: [0, 0, 1]"}, {"index": 898, "path": "client/components/home/CommentModal.jsx", "chunk": "e]);\n\n  const translateY = panY.interpolate({\n    inputRange: [-1, 0, 1],\n    outputRange: [0, 0, 1],\n  });\n\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onMoveShouldSetPanResponder: () => true,\n      onPanResponderMove: (_, gestureState) => {\n        // Only allow downward drag\n        if (gestureState.dy > 0) {\n          panY.setValue(gestureState.dy);\n        }\n      },\n      onPanResponderRelease: (_, gestureState) => {\n      "}, {"index": 899, "path": "client/components/home/CommentModal.jsx", "chunk": "alue(gestureState.dy);\n        }\n      },\n      onPanResponderRelease: (_, gestureState) => {\n        if (gestureState.dy > 50) {\n          // If dragged down more than 50px, close the modal\n          handleClose();\n        } else {\n          // Otherwise, snap back to initial position\n          Animated.spring(panY, {\n            toValue: 0,\n            useNativeDriver: true,\n          }).start();\n        }\n      },\n    })\n  ).current;\n\n  const handleSubmitComment = async () => {\n    if (!newCo"}, {"index": 900, "path": "client/components/home/CommentModal.jsx", "chunk": ";\n        }\n      },\n    })\n  ).current;\n\n  const handleSubmitComment = async () => {\n    if (!newComment.trim()) return;\n\n    try {\n      // const response = await axios.post(`${SERVER_URL}/posts/comment`, {\n      //   postId: postData._id,\n      //   email: user.email,\n      //   text: newComment,\n      // });\n\n      const newCommentObj = {\n        email: user.email,\n        fullName: user.fullName,\n        profilePhoto: user.profilePhoto,\n        text: newComment,\n        timestamp: new Date("}, {"index": 901, "path": "client/components/home/CommentModal.jsx", "chunk": "ame,\n        profilePhoto: user.profilePhoto,\n        text: newComment,\n        timestamp: new Date().toISOString(),\n        userId: user.fullName,\n      };\n\n      // Update the comments in parent components\n      updateComments(post.postId, newCommentObj);\n      setNewComment('');\n    } catch (error) {\n      console.error('Error posting comment:', error);\n    }\n  };\n\n  // Add relative time formatting\n  const getRelativeTime = (date) => {\n    if (!date) return 'unknown';\n    const now = new Date"}, {"index": 902, "path": "client/components/home/CommentModal.jsx", "chunk": "ting\n  const getRelativeTime = (date) => {\n    if (!date) return 'unknown';\n    const now = new Date();\n    const posted = new Date(date);\n    const diff = Math.floor((now - posted) / 1000); // seconds\n\n    if (diff < 60) return 'just now';\n    if (diff < 3600) return `${Math.floor(diff / 60)}m`;\n    if (diff < 86400) return `${Math.floor(diff / 3600)}h`;\n    return posted.toLocaleDateString();\n  };\n\n  // Sort comments to show user's comments first\n  const sortedComments = useMemo(() => {\n    if"}, {"index": 903, "path": "client/components/home/CommentModal.jsx", "chunk": "};\n\n  // Sort comments to show user's comments first\n  const sortedComments = useMemo(() => {\n    if (!post.comments?.details) return [];\n\n    return [...post.comments.details].sort((a, b) => {\n      // User's comments first\n      if (a.userId === user._id && b.userId !== user._id) return -1;\n      if (a.userId !== user._id && b.userId === user._id) return 1;\n      // Then sort by date\n      return new Date(b.timestamp) - new Date(a.timestamp);\n    });\n  }, [post.comments, user._id]);\n\n  const h"}, {"index": 904, "path": "client/components/home/CommentModal.jsx", "chunk": "n new Date(b.timestamp) - new Date(a.timestamp);\n    });\n  }, [post.comments, user._id]);\n\n  const handleClose = () => {\n    panY.setValue(0);\n    onClose();\n  };\n\n  return (\n    <Modal animationType=\"slide\" transparent visible={isVisible} onRequestClose={handleClose}>\n      <View className=\"flex-1 bg-black/60\">\n        <Animated.View\n          className=\"mt-8 flex-1 rounded-t-[32px] bg-white shadow-2xl\"\n          style={{ transform: [{ translateY }] }}>\n          {/* Drag Handle */}\n          <"}, {"index": 905, "path": "client/components/home/CommentModal.jsx", "chunk": "ow-2xl\"\n          style={{ transform: [{ translateY }] }}>\n          {/* Drag Handle */}\n          <View\n            {...panResponder.panHandlers}\n            className=\"absolute left-0 right-0 top-0 h-8 items-center justify-center\">\n            <View className=\"h-1 w-16 rounded-full bg-gray-300\" />\n          </View>\n\n          {/* Header - adjusted padding for drag handle */}\n          <View className=\"mt-6 flex-row items-center justify-between border-b border-gray-200 p-4\">\n            <Text c"}, {"index": 906, "path": "client/components/home/CommentModal.jsx", "chunk": "sName=\"mt-6 flex-row items-center justify-between border-b border-gray-200 p-4\">\n            <Text className=\"text-xl font-bold\">Comments</Text>\n            <TouchableOpacity onPress={handleClose} className=\"rounded-full bg-gray-100 p-2\">\n              <FontAwesome name=\"times\" size={20} color=\"#374151\" />\n            </TouchableOpacity>\n          </View>\n\n          {/* Comments List */}\n          <ScrollView className=\"flex-1 p-4\">\n            {sortedComments.length > 0 ? (\n              sorted"}, {"index": 907, "path": "client/components/home/CommentModal.jsx", "chunk": " <ScrollView className=\"flex-1 p-4\">\n            {sortedComments.length > 0 ? (\n              sortedComments.map((comment, index) => (\n                <View\n                  key={`${comment.userId}-${index}`}\n                  className=\"mb-4 border-b border-gray-100 pb-4\">\n                  <View className=\"flex-row items-start\">\n                    <Image\n                      source={{\n                        uri: comment?.profilePhoto || 'https://ui-avatars.com/api/?name=User',\n            "}, {"index": 908, "path": "client/components/home/CommentModal.jsx", "chunk": "                 uri: comment?.profilePhoto || 'https://ui-avatars.com/api/?name=User',\n                      }}\n                      className=\"h-8 w-8 rounded-full\"\n                    />\n                    <View className=\"ml-3 flex-1\">\n                      <Text className=\"font-semibold text-gray-900\">\n                        {comment.fullName || 'User'}\n                      </Text>\n                      <Text className=\"text-gray-600\">{comment.text}</Text>\n                      <Text cl"}, {"index": 909, "path": "client/components/home/CommentModal.jsx", "chunk": "                <Text className=\"text-gray-600\">{comment.text}</Text>\n                      <Text className=\"mt-1 text-xs text-gray-400\">\n                        {getRelativeTime(comment.timestamp)}\n                      </Text>\n                    </View>\n                  </View>\n                </View>\n              ))\n            ) : (\n              <Text className=\"text-center text-gray-500\">No comments yet</Text>\n            )}\n          </ScrollView>\n\n          {/* Comment Input */}\n     "}, {"index": 910, "path": "client/components/home/CommentModal.jsx", "chunk": "No comments yet</Text>\n            )}\n          </ScrollView>\n\n          {/* Comment Input */}\n          <KeyboardAvoidingView\n            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n            className=\"border-t border-gray-200 bg-white p-4\">\n            <View className=\"flex-row items-center\">\n              <TextInput\n                className=\"mr-2 flex-1 rounded-full bg-gray-100 px-4 py-4\"\n                placeholder=\"Add a comment...\"\n                value={newComment}\n       "}, {"index": 911, "path": "client/components/home/CommentModal.jsx", "chunk": "px-4 py-4\"\n                placeholder=\"Add a comment...\"\n                value={newComment}\n                onChangeText={setNewComment}\n                multiline\n              />\n              <TouchableOpacity\n                onPress={handleSubmitComment}\n                className=\"rounded-full border p-2\"\n                disabled={!newComment.trim()}>\n                <Ionicons name=\"send\" size={20} className=\"text-white\" />\n              </TouchableOpacity>\n            </View>\n          </Ke"}, {"index": 912, "path": "client/components/home/CommentModal.jsx", "chunk": "={20} className=\"text-white\" />\n              </TouchableOpacity>\n            </View>\n          </KeyboardAvoidingView>\n        </Animated.View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default CommentModal;\n"}, {"index": 913, "path": "client/components/home/NewPost.jsx", "chunk": "import { ML_URL } from '@env';\nimport { Ionicons } from '@expo/vector-icons';\nimport axios from 'axios';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as VideoThumbnails from 'expo-video-thumbnails';\nimport { useState } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, Image, ScrollView } from 'react-native';\nimport { SERVER_URL } from '@env'\n\nimport Post from './Post';\nimport { useAuth } from '../../providers/AuthProvider';\nimport AsyncStorage from '@react-native-asyn"}, {"index": 914, "path": "client/components/home/NewPost.jsx", "chunk": "import { useAuth } from '../../providers/AuthProvider';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst NewPost = () => {\n  const [newPost, setNewPost] = useState('');\n  const [media, setMedia] = useState([]);\n  const [emotion, setEmotion] = useState('');\n  const [AI, setAI] = useState(false);\n  const [prompt, setPrompt] = useState('');\n  const [loading1, setLoading1] = useState(false);\n  const [loading2, setLoading2] = useState(false);\n  const [stack, setStack] = us"}, {"index": 915, "path": "client/components/home/NewPost.jsx", "chunk": "= useState(false);\n  const [loading2, setLoading2] = useState(false);\n  const [stack, setStack] = useState([]);\n  const [showPreview, setShowPreview] = useState(false);\n  const { user } = useAuth();\n\n  const suggestions = [\n    'Make this more professional',\n    'Add a touch of humor',\n    'Simplify the language',\n  ];\n\n  const applyAISuggestion = (suggestion) => {\n    setPrompt((prevPrompt) => `${prevPrompt} ${suggestion}`);\n  };\n\n  const handleHelper = (val) => {\n    setAI(!val);\n  };\n\n  const"}, {"index": 916, "path": "client/components/home/NewPost.jsx", "chunk": "{prevPrompt} ${suggestion}`);\n  };\n\n  const handleHelper = (val) => {\n    setAI(!val);\n  };\n\n  const analyzeEmotion = async () => {\n    try {\n      setLoading1(true);\n      const response = await axios.post(`${ML_URL}/api/analyze_emotion/`, {\n        post: newPost,\n      });\n      console.log('Emotion Analysis Response:', response.data);\n      setEmotion(response.data.emotions[0].label);\n    } catch (error) {\n      console.error('Error analyzing emotion:', error);\n    } finally {\n      setLoadin"}, {"index": 917, "path": "client/components/home/NewPost.jsx", "chunk": "ch (error) {\n      console.error('Error analyzing emotion:', error);\n    } finally {\n      setLoading1(false);\n    }\n  };\n\n  const rewriteText = async () => {\n    try {\n      setLoading2(true);\n      const response = await axios.post(`${ML_URL}/api/rewrite/`, {\n        post: newPost || '',\n        style: prompt,\n      });\n      console.log('Rewrite Response:', response.data);\n      setStack([...stack, newPost]);\n      setNewPost(response.data.rewritten_text);\n    } catch (error) {\n      console."}, {"index": 918, "path": "client/components/home/NewPost.jsx", "chunk": "ack, newPost]);\n      setNewPost(response.data.rewritten_text);\n    } catch (error) {\n      console.error('Error rewriting text:', error);\n    } finally {\n      setLoading2(false);\n    }\n  };\n\n  const undoRewrite = () => {\n    if (stack.length > 0) {\n      setNewPost(stack.pop());\n      setStack([...stack]);\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      const token = await AsyncStorage.getItem('token');\n      if (!token) {\n        throw new Error('Invalid token')\n      }\n     "}, {"index": 919, "path": "client/components/home/NewPost.jsx", "chunk": "Storage.getItem('token');\n      if (!token) {\n        throw new Error('Invalid token')\n      }\n      const response = await axios.post(`${SERVER_URL}/posts/`, {\n        text: newPost,\n        media\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      })\n      console.log(response.data);\n      setMedia([])\n      setNewPost('')\n    }\n    catch (err) {\n      console.error('Error submitting post:', err);\n    }\n  };\n\n\n  const pickMedia = async () => {\n    const { s"}, {"index": 920, "path": "client/components/home/NewPost.jsx", "chunk": "e.error('Error submitting post:', err);\n    }\n  };\n\n\n  const pickMedia = async () => {\n    const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    if (status !== 'granted') {\n      alert('Sorry, we need camera roll permissions to make this work!');\n      return;\n    }\n\n    const result = await ImagePicker.launchImageLibraryAsync({\n      allowsMultipleSelection: true,\n    });\n\n    if (!result.canceled) {\n      const newMedia = await Promise.all(\n        result.assets.map(a"}, {"index": 921, "path": "client/components/home/NewPost.jsx", "chunk": ";\n\n    if (!result.canceled) {\n      const newMedia = await Promise.all(\n        result.assets.map(async (asset) => {\n          const isVideo = asset.type === 'video';\n          if (isVideo) {\n            try {\n              const { uri } = await VideoThumbnails.getThumbnailAsync(asset.uri, {\n                time: 1000,\n              });\n              return {\n                type: 'video',\n                uri: asset.uri,\n                thumbnail: uri,\n              };\n            } catch (e) {"}, {"index": 922, "path": "client/components/home/NewPost.jsx", "chunk": "          uri: asset.uri,\n                thumbnail: uri,\n              };\n            } catch (e) {\n              console.error('Error generating video thumbnail', e);\n              return {\n                type: 'video',\n                uri: asset.uri,\n              };\n            }\n          }\n          return {\n            type: 'image',\n            uri: asset.uri,\n          };\n        })\n      );\n\n      setMedia((prevMedia) => [...prevMedia, ...newMedia]);\n    }\n  };\n\n  const removeMedia = "}, {"index": 923, "path": "client/components/home/NewPost.jsx", "chunk": "  );\n\n      setMedia((prevMedia) => [...prevMedia, ...newMedia]);\n    }\n  };\n\n  const removeMedia = (index) => {\n    setMedia((prevMedia) => prevMedia.filter((_, i) => i !== index));\n  };\n\n  const renderMediaPreview = () => {\n    return (\n      <ScrollView horizontal showsHorizontalScrollIndicator={false} className=\"mb-3 mt-3 flex-row\">\n        {media.map((item, index) => (\n          <View key={index} className=\"relative mr-2\">\n            <Image\n              source={{ uri: item.type === 'image"}, {"index": 924, "path": "client/components/home/NewPost.jsx", "chunk": "dex} className=\"relative mr-2\">\n            <Image\n              source={{ uri: item.type === 'image' ? item.uri : item.thumbnail || item.uri }}\n              className=\"h-24 w-24 rounded-lg\"\n            />\n            <TouchableOpacity\n              className=\"absolute right-1 top-1 rounded-full bg-black/60 p-1\"\n              onPress={() => removeMedia(index)}>\n              <Ionicons name=\"close-circle\" size={24} color=\"white\" />\n            </TouchableOpacity>\n          </View>\n        ))}\n  "}, {"index": 925, "path": "client/components/home/NewPost.jsx", "chunk": "-circle\" size={24} color=\"white\" />\n            </TouchableOpacity>\n          </View>\n        ))}\n      </ScrollView>\n    );\n  };\n\n  return (\n    <View className=\"border-b border-gray-200 bg-white p-4\">\n      <View className=\"flex-row items-start\">\n        <Image\n          source={{ uri: user?.profilePhoto || 'https://via.placeholder.com/40' }}\n          className=\"mr-3 h-10 w-10 rounded-full\"\n        />\n        <TextInput\n          className=\"max-h-[120px] min-h-[40px] flex-1 rounded-lg bg-gray"}, {"index": 926, "path": "client/components/home/NewPost.jsx", "chunk": "     />\n        <TextInput\n          className=\"max-h-[120px] min-h-[40px] flex-1 rounded-lg bg-gray-100 p-4 text-base shadow-sm\"\n          placeholder=\"What's on your mind?\"\n          multiline\n          value={newPost}\n          onChangeText={setNewPost}\n          placeholderTextColor=\"#657786\"\n        />\n      </View>\n\n      {media.length > 0 && <View className=\"my-4\">{renderMediaPreview()}</View>}\n\n      {/* {newPost && renderMarkdownPreview()} */}\n\n      <View className=\"mt-3 flex-row items"}, {"index": 927, "path": "client/components/home/NewPost.jsx", "chunk": "ew>}\n\n      {/* {newPost && renderMarkdownPreview()} */}\n\n      <View className=\"mt-3 flex-row items-center justify-between\">\n        <View className=\"flex-row\">\n          <TouchableOpacity\n            className=\"ounded-lg mr-2 flex-row items-center bg-gray-50 px-3 py-1\"\n            onPress={pickMedia}>\n            <Ionicons name=\"image-outline\" size={24} color=\"#4a4a4a\" />\n            <Text className=\"text-sm font-medium text-gray-700\">Media</Text>\n          </TouchableOpacity>\n\n          {/* <"}, {"index": 928, "path": "client/components/home/NewPost.jsx", "chunk": "Name=\"text-sm font-medium text-gray-700\">Media</Text>\n          </TouchableOpacity>\n\n          {/* <TouchableOpacity\n            className=\"flex-row items-center rounded-lg bg-gray-50 px-3\"\n            onPress={() => handleHelper(AI)}>\n            <Ionicons name=\"sparkles-outline\" size={24} color=\"#4a4a4a\" />\n            <Text className=\"text-sm font-medium text-gray-700\">AI Helper</Text>\n          </TouchableOpacity>\n\n          <TouchableOpacity\n            className=\"flex-row items-center roun"}, {"index": 929, "path": "client/components/home/NewPost.jsx", "chunk": "  </TouchableOpacity>\n\n          <TouchableOpacity\n            className=\"flex-row items-center rounded-lg bg-gray-50 px-3\"\n            onPress={() => setShowPreview(!showPreview)}>\n            <Ionicons name=\"eye-outline\" size={24} color=\"#4a4a4a\" />\n            <Text className=\"text-sm font-medium text-gray-700\">Preview</Text>\n          </TouchableOpacity> */}\n        </View>\n\n        <TouchableOpacity\n          className={`rounded-full px-6 py-2 ${!newPost.trim() && media.length === 0 ? 'bg-b"}, {"index": 930, "path": "client/components/home/NewPost.jsx", "chunk": "Opacity\n          className={`rounded-full px-6 py-2 ${!newPost.trim() && media.length === 0 ? 'bg-black/50' : 'bg-black'\n            }`}\n          onPress={handleSubmit}\n          disabled={!newPost.trim() && media.length === 0}>\n          <Text className=\"text-sm font-semibold text-white\" onPress={handleSubmit}>Post</Text>\n        </TouchableOpacity>\n      </View>\n\n      {showPreview && (\n        <View className=\"mt-4 rounded-lg border border-gray-200\">\n          <Post\n            post={{\n    "}, {"index": 931, "path": "client/components/home/NewPost.jsx", "chunk": "  <View className=\"mt-4 rounded-lg border border-gray-200\">\n          <Post\n            post={{\n              postId: 'preview',\n              authorId: user._id,\n              fullName: user.fullName,\n              profilePhoto: user.profilePhoto,\n              text: newPost,\n              media,\n              comments: { total: 0, details: [] },\n              likes: { total: 0, details: [] },\n              timestamp: new Date(),\n            }}\n            preview\n          />\n        </View>\n "}, {"index": 932, "path": "client/components/home/NewPost.jsx", "chunk": "            timestamp: new Date(),\n            }}\n            preview\n          />\n        </View>\n      )}\n\n      {AI && (\n        <View className=\"mt-2 space-y-4\">\n          {/* Analyze Emotion Section */}\n          <View className=\"flex-row items-center gap-1 rounded-lg border-l-4 border-yellow-500 bg-yellow-50 p-2 shadow-lg\">\n            <Text className=\"text-xl text-yellow-500\">\ud83d\udca1</Text>\n            <Text className=\"text-sm font-medium text-gray-800\">\n              Try writing something in t"}, {"index": 933, "path": "client/components/home/NewPost.jsx", "chunk": "       <Text className=\"text-sm font-medium text-gray-800\">\n              Try writing something in the Post to analyze emotion or Generate Post entirely by AI.\n            </Text>\n          </View>\n\n          <View className=\"flex-row items-center justify-between rounded-lg bg-gray-50 p-3\">\n            <TouchableOpacity\n              className={`rounded-lg px-4 py-2 ${newPost ? 'bg-blue-500' : 'bg-gray-300'}`}\n              onPress={newPost ? analyzeEmotion : null}\n              disabled={!newPo"}, {"index": 934, "path": "client/components/home/NewPost.jsx", "chunk": "-gray-300'}`}\n              onPress={newPost ? analyzeEmotion : null}\n              disabled={!newPost}>\n              <Text className={`text-sm font-medium ${newPost ? 'text-white' : 'text-gray-500'}`}>\n                Analyze Emotion\n              </Text>\n            </TouchableOpacity>\n            <Text className=\"text-sm font-medium text-gray-700\">\n              {loading1 ? 'Loading...' : emotion || 'No emotion detected'}\n            </Text>\n          </View>\n\n          {/* Suggestions Secti"}, {"index": 935, "path": "client/components/home/NewPost.jsx", "chunk": "ion || 'No emotion detected'}\n            </Text>\n          </View>\n\n          {/* Suggestions Section */}\n          <ScrollView horizontal showsHorizontalScrollIndicator={false} className=\"py-2\">\n            {suggestions.map((suggestion, index) => (\n              <TouchableOpacity\n                key={index}\n                className=\"mr-1 rounded-full border border-blue-200 bg-blue-50 px-3 py-2 shadow-sm\"\n                onPress={() => applyAISuggestion(suggestion)}>\n                <Text clas"}, {"index": 936, "path": "client/components/home/NewPost.jsx", "chunk": "shadow-sm\"\n                onPress={() => applyAISuggestion(suggestion)}>\n                <Text className=\"text-sm font-medium text-blue-600\">{suggestion}</Text>\n              </TouchableOpacity>\n            ))}\n          </ScrollView>\n\n          {/* AI Prompt Input */}\n          <View>\n            <TextInput\n              className=\"mb-2 max-h-[80px] min-h-[40px] rounded-lg border border-gray-200 bg-white p-4 text-base shadow-sm\"\n              placeholder=\"Enter AI prompt...\"\n              mult"}, {"index": 937, "path": "client/components/home/NewPost.jsx", "chunk": " bg-white p-4 text-base shadow-sm\"\n              placeholder=\"Enter AI prompt...\"\n              multiline\n              value={prompt}\n              onChangeText={setPrompt}\n              placeholderTextColor=\"#657786\"\n            />\n            <TouchableOpacity\n              className={`mb-2 rounded-lg ${prompt ? 'bg-green-500' : 'bg-gray-300'} px-4 py-3 shadow-sm`}\n              onPress={prompt ? rewriteText : null} // Only trigger rewriteText if prompt is set\n              disabled={!prompt}"}, {"index": 938, "path": "client/components/home/NewPost.jsx", "chunk": " ? rewriteText : null} // Only trigger rewriteText if prompt is set\n              disabled={!prompt} // Disable the button when prompt is not set\n            >\n              <Text\n                className={`text-center text-sm font-medium ${prompt ? 'text-white' : 'text-gray-500'}`}>\n                {loading2 ? 'Generating Response...' : 'Write with AI'}\n              </Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              className={`rounded-lg px-4 py-3 shadow-sm $"}, {"index": 939, "path": "client/components/home/NewPost.jsx", "chunk": "bleOpacity>\n            <TouchableOpacity\n              className={`rounded-lg px-4 py-3 shadow-sm ${stack.length === 0 ? 'bg-gray-500' : 'bg-black'}`}\n              onPress={stack ? undoRewrite : null} // Only trigger undoRewrite if stack is not empty\n              disabled={stack.length === 0} // Disable the button when stack is empty\n            >\n              <Text className=\"text-center text-sm font-medium text-white\">Discard Response</Text>\n            </TouchableOpacity>\n          </View"}, {"index": 940, "path": "client/components/home/NewPost.jsx", "chunk": "-sm font-medium text-white\">Discard Response</Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport default NewPost;\n"}, {"index": 941, "path": "client/components/home/Post.jsx", "chunk": "import { Feather } from '@expo/vector-icons';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useState } from 'react';\nimport { View, Text, Image, TouchableOpacity, ScrollView, FlatList } from 'react-native';\nimport Markdown, { MarkdownIt } from 'react-native-markdown-display';\n\nimport CommentModal from './CommentModal';\n\nconst Post = ({ post, updateComments, preview = false }) => {\n  const [showComments, setShowComments] = useState(false);\n\n  const handleComments = (show) => {\n "}, {"index": 942, "path": "client/components/home/Post.jsx", "chunk": "{\n  const [showComments, setShowComments] = useState(false);\n\n  const handleComments = (show) => {\n    setShowComments(!show);\n  };\n\n  // Format date to relative time\n  const getRelativeTime = (date) => {\n    if (!date) return 'unknown';\n    const now = new Date();\n    const posted = new Date(date);\n    const diff = Math.floor((now - posted) / 1000); // seconds\n\n    if (diff < 60) return 'just now';\n    if (diff < 3600) return `${Math.floor(diff / 60)}m`;\n    if (diff < 86400) return `${Math.flo"}, {"index": 943, "path": "client/components/home/Post.jsx", "chunk": "';\n    if (diff < 3600) return `${Math.floor(diff / 60)}m`;\n    if (diff < 86400) return `${Math.floor(diff / 3600)}h`;\n    return posted.toLocaleDateString();\n  };\n\n  // Get reaction counts\n  // const getReactionCounts = () => {\n  //   if (!post?.reactions) return {};\n  //   const counts = {};\n  //   post.reactions.forEach((reaction) => {\n  //     counts[reaction.type] = (counts[reaction.type] || 0) + 1;\n  //   });\n  //   return counts;\n  // };\n\n  // const reactionIcons = {\n  //   like: <Feathe"}, {"index": 944, "path": "client/components/home/Post.jsx", "chunk": " 0) + 1;\n  //   });\n  //   return counts;\n  // };\n\n  // const reactionIcons = {\n  //   like: <Feather name=\"thumbs-up\" size={16} color=\"#0a66c2\" />,\n  //   love: <Feather name=\"heart\" size={16} color=\"#e11d48\" />,\n  //   wow: <Feather name=\"star\" size={16} color=\"#eab308\" />,\n  // };\n\n  return (\n    <LinearGradient\n      colors={['#ffffff', '#f8fafc']}\n      className=\"my-2 overflow-hidden rounded-xl shadow-sm\">\n      {/* Post Header */}\n      <View className=\"flex-row items-center p-4\">\n       "}, {"index": 945, "path": "client/components/home/Post.jsx", "chunk": "-xl shadow-sm\">\n      {/* Post Header */}\n      <View className=\"flex-row items-center p-4\">\n        <Image\n          source={{\n            uri: post?.profilePhoto || `https://ui-avatars.com/api/?name=User&background=random`,\n          }}\n          className=\"h-12 w-12 rounded-full\"\n        />\n        <View className=\"ml-3 flex-1\">\n          <Text className=\"text-base font-semibold text-gray-800\" numberOfLines={1}>\n            {post.fullName}\n          </Text>\n          <Text className=\"text-sm "}, {"index": 946, "path": "client/components/home/Post.jsx", "chunk": "numberOfLines={1}>\n            {post.fullName}\n          </Text>\n          <Text className=\"text-sm text-gray-500\">{getRelativeTime(post.timestamp)}</Text>\n        </View>\n      </View>\n\n      {/* Post Content */}\n      {post?.text && (\n        <View className=\"px-4\">\n          <Markdown\n            markdownit={MarkdownIt({ linkify: true }).disable([\n              'hr',\n              'blockquote',\n              'fence',\n              'table',\n              'image',\n            ])}\n            st"}, {"index": 947, "path": "client/components/home/Post.jsx", "chunk": "\n              'fence',\n              'table',\n              'image',\n            ])}\n            style={{\n              text: {\n                fontSize: 15,\n              },\n              body: {\n                fontSize: 15,\n              },\n              paragraph: {\n                flexWrap: 'wrap',\n                flexDirection: 'row',\n                alignItems: 'flex-start',\n                marginBottom: 4,\n              },\n              link: {\n                color: '#2563eb',\n        "}, {"index": 948, "path": "client/components/home/Post.jsx", "chunk": "  marginBottom: 4,\n              },\n              link: {\n                color: '#2563eb',\n                textDecorationLine: 'underline',\n              },\n              heading1: {\n                marginTop: 4,\n                marginBottom: 4,\n                fontSize: 20,\n                fontWeight: 'bold',\n              },\n              heading2: {\n                marginTop: 4,\n                marginBottom: 4,\n                fontSize: 18,\n                fontWeight: 'bold',\n              }"}, {"index": 949, "path": "client/components/home/Post.jsx", "chunk": "  marginBottom: 4,\n                fontSize: 18,\n                fontWeight: 'bold',\n              },\n              code_block: {\n                padding: 4,\n                borderRadius: 4,\n                fontFamily: 'monospace',\n              },\n            }}\n            rules={{\n              textgroup: (node, children) => {\n                return <Text key={node.key}>{children}</Text>;\n              },\n              text: (node) => {\n                return <Text key={node.key}>{node.conten"}, {"index": 950, "path": "client/components/home/Post.jsx", "chunk": "         },\n              text: (node) => {\n                return <Text key={node.key}>{node.content}</Text>;\n              },\n            }}>\n            {post.text}\n          </Markdown>\n        </View>\n      )}\n\n      {/* Media Content */}\n      {/* {postData?.media?.length > 0 && (\n        <ScrollView horizontal showsHorizontalScrollIndicator={false} className=\"mt-3\">\n          {postData.media.map((item, index) => (\n            <View key={index} className=\"mx-4 mb-3\">\n              {item.ty"}, {"index": 951, "path": "client/components/home/Post.jsx", "chunk": "a.map((item, index) => (\n            <View key={index} className=\"mx-4 mb-3\">\n              {item.type === 'image' && (\n                <Image source={{ uri: item.url }} className=\"h-[200px] w-[300px] rounded-lg\" />\n              )}\n              {item.description && (\n                <Text className=\"mt-1 text-xs text-gray-500\">{item.description}</Text>\n              )}\n            </View>\n          ))}\n        </ScrollView>\n      )} */}\n\n      {!preview && true && (\n        <ScrollView horizon"}, {"index": 952, "path": "client/components/home/Post.jsx", "chunk": "    ))}\n        </ScrollView>\n      )} */}\n\n      {!preview && true && (\n        <ScrollView horizontal showsHorizontalScrollIndicator={false} className=\"mt-3\">\n          {/* Placeholder Media Items */}\n          {[1, 2, 3, 4, 5].map((item, index) => (\n            <View key={index} className=\"mx-4 mb-3\">\n              {index < 3 ? (\n                // Placeholder Images\n                <Image\n                  source={{\n                    uri: `https://via.placeholder.com/300x200?text=Image+${i"}, {"index": 953, "path": "client/components/home/Post.jsx", "chunk": "              source={{\n                    uri: `https://via.placeholder.com/300x200?text=Image+${index + 1}`,\n                  }}\n                  className=\"h-[100px] w-[150px] rounded-lg\"\n                />\n              ) : (\n                // Placeholder Videos\n                <View className=\"flex h-[100px] w-[150px] items-center justify-center rounded-lg bg-gray-300\">\n                  <Text className=\"text-white\">Video {index - 2}</Text>\n                </View>\n              )}\n     "}, {"index": 954, "path": "client/components/home/Post.jsx", "chunk": "<Text className=\"text-white\">Video {index - 2}</Text>\n                </View>\n              )}\n            </View>\n          ))}\n        </ScrollView>\n      )}\n\n      {/* Reactions & Stats */}\n      {!preview && (\n        <>\n          <View className=\"border-t border-gray-200 p-4\">\n            <View className=\"flex-row items-center\">\n              {/* <View className=\"flex-row items-center\">\n                {Object.entries(getReactionCounts()).map(([type, count], index) => (\n                  <V"}, {"index": 955, "path": "client/components/home/Post.jsx", "chunk": "           {Object.entries(getReactionCounts()).map(([type, count], index) => (\n                  <View key={type} className=\"mr-2 flex-row items-center\">\n                    {reactionIcons[type]}\n                    <Text className=\"ml-1 text-gray-500\">{count}</Text>\n                  </View>\n                ))}\n              </View> */}\n\n              <Text className=\"ml-auto text-gray-500\" onPress={() => handleComments(showComments)}>\n                {post.comments?.total || 0} comments \u2022 {po"}, {"index": 956, "path": "client/components/home/Post.jsx", "chunk": "ess={() => handleComments(showComments)}>\n                {post.comments?.total || 0} comments \u2022 {post?.shares?.length || 0} shares\n              </Text>\n            </View>\n          </View>\n\n          {/* Action Buttons */}\n          <View className=\"flex-row justify-around border-t border-gray-200 py-2\">\n            <TouchableOpacity className=\"flex-row items-center\">\n              <Feather name=\"thumbs-up\" size={20} color=\"#6b7280\" />\n              <Text className=\"ml-1.5 text-gray-500\">Like"}, {"index": 957, "path": "client/components/home/Post.jsx", "chunk": "e=\"thumbs-up\" size={20} color=\"#6b7280\" />\n              <Text className=\"ml-1.5 text-gray-500\">Like</Text>\n            </TouchableOpacity>\n            <TouchableOpacity\n              className=\"flex-row items-center\"\n              onPress={() => setShowComments(true)}>\n              <Feather name=\"message-circle\" size={20} color=\"#6b7280\" />\n              <Text className=\"ml-1.5 text-gray-500\">Comment</Text>\n            </TouchableOpacity>\n            <TouchableOpacity className=\"flex-row items"}, {"index": 958, "path": "client/components/home/Post.jsx", "chunk": "mment</Text>\n            </TouchableOpacity>\n            <TouchableOpacity className=\"flex-row items-center\">\n              <Feather name=\"share-2\" size={20} color=\"#6b7280\" />\n              <Text className=\"ml-1.5 text-gray-500\">Share</Text>\n            </TouchableOpacity>\n          </View>\n\n          {/* Comment Modal */}\n          <CommentModal\n            isVisible={showComments}\n            onClose={() => setShowComments(false)}\n            post={post}\n            updateComments={updateComm"}, {"index": 959, "path": "client/components/home/Post.jsx", "chunk": "nClose={() => setShowComments(false)}\n            post={post}\n            updateComments={updateComments}\n          />\n        </>\n      )}\n    </LinearGradient>\n  );\n};\n\nexport default Post;\n"}, {"index": 960, "path": "client/components/jobs/JobCard.jsx", "chunk": "import { useState } from 'react';\nimport { View, Text, TouchableOpacity, Image, useWindowDimensions } from 'react-native';\n\nimport JobDetailsModal from './JobDetailsModal';\n\nconst JobCard = ({ item, userSkills }) => {\n  const [modalVisible, setModalVisible] = useState(false);\n  const { width: screenWidth } = useWindowDimensions();\n  const isSmallScreen = screenWidth < 380;\n\n  const matchingSkills = item.skills.filter((skill) => userSkills.includes(skill));\n  const matchPercentage = Math.round((m"}, {"index": 961, "path": "client/components/jobs/JobCard.jsx", "chunk": "= item.skills.filter((skill) => userSkills.includes(skill));\n  const matchPercentage = Math.round((matchingSkills.length / item.skills.length) * 100);\n\n  return (\n    <>\n      <TouchableOpacity\n        onPress={() => setModalVisible(true)}\n        className={`mb-3 overflow-hidden rounded-xl border-2 bg-white shadow-lg ${\n          matchingSkills.length === item.skills.length ? 'border-green-500' : 'border-black'\n        }`}>\n        <View className={`${isSmallScreen ? 'p-3' : 'p-5'}`}>\n         "}, {"index": 962, "path": "client/components/jobs/JobCard.jsx", "chunk": " 'border-black'\n        }`}>\n        <View className={`${isSmallScreen ? 'p-3' : 'p-5'}`}>\n          {/* Job Header Section */}\n          <View className=\"mb-3 flex-row items-center\">\n            <Image\n              source={{ uri: item.logo }}\n              className={`mr-3 ${isSmallScreen ? 'h-12 w-12' : 'h-14 w-14'} rounded-lg`}\n            />\n            <View>\n              <Text className={`${isSmallScreen ? 'text-xl' : 'text-2xl'} font-bold text-gray-900`}>\n                {item.title}\n  "}, {"index": 963, "path": "client/components/jobs/JobCard.jsx", "chunk": "${isSmallScreen ? 'text-xl' : 'text-2xl'} font-bold text-gray-900`}>\n                {item.title}\n              </Text>\n              <Text className={`${isSmallScreen ? 'text-sm' : 'text-base'} text-blue-600`}>\n                {item.company}\n              </Text>\n            </View>\n          </View>\n\n          {/* Add match badge */}\n          <View className=\"mt-2 self-end rounded-lg bg-green-50 px-2 py-1\">\n            <Text className=\"text-xs font-bold text-green-700\">\n              {matchin"}, {"index": 964, "path": "client/components/jobs/JobCard.jsx", "chunk": "0 px-2 py-1\">\n            <Text className=\"text-xs font-bold text-green-700\">\n              {matchingSkills.length}/{item.skills.length} skills matched ({matchPercentage}%)\n            </Text>\n          </View>\n\n          {/* Preview Info */}\n          <View className=\"space-y-1\">\n            <Text className={`${isSmallScreen ? 'text-sm' : 'text-sm'} text-gray-700`}>\n              {item.location}\n            </Text>\n            <Text className={`${isSmallScreen ? 'text-sm' : 'text-sm'} text-gray"}, {"index": 965, "path": "client/components/jobs/JobCard.jsx", "chunk": "            </Text>\n            <Text className={`${isSmallScreen ? 'text-sm' : 'text-sm'} text-gray-700`}>\n              {item.salary}\n            </Text>\n            <Text className={`${isSmallScreen ? 'text-sm' : 'text-sm'} text-blue-600`}>\n              {item.type} \u2022 {item.experience}\n            </Text>\n          </View>\n        </View>\n      </TouchableOpacity>\n\n      <JobDetailsModal\n        isVisible={modalVisible}\n        onClose={() => setModalVisible(false)}\n        item={item}\n      "}, {"index": 966, "path": "client/components/jobs/JobCard.jsx", "chunk": "  isVisible={modalVisible}\n        onClose={() => setModalVisible(false)}\n        item={item}\n        userSkills={userSkills}\n      />\n    </>\n  );\n};\n\nexport default JobCard;\n"}, {"index": 967, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "import { FontAwesome } from '@expo/vector-icons';\nimport * as WebBrowser from 'expo-web-browser';\nimport { useState } from 'react';\nimport {\n  Modal,\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  Image,\n  useWindowDimensions,\n} from 'react-native';\n\nimport ConnectModal from '../../utils/ConnectModal';\n\nconst JobDetailsModal = ({ isVisible, onClose, item, userSkills }) => {\n  const [connectModalVisible, setConnectModalVisible] = useState(false);\n  const { width: screenWidth } = useWindowDim"}, {"index": 968, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "dalVisible, setConnectModalVisible] = useState(false);\n  const { width: screenWidth } = useWindowDimensions();\n\n  const isSmallScreen = screenWidth < 380;\n\n  const handleDownloadPDF = async () => {\n    try {\n      await WebBrowser.openBrowserAsync(item.jdPdf);\n    } catch (error) {\n      console.error('Error opening PDF:', error);\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day:"}, {"index": 969, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "ate(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const SkillTag = ({ skill }) => (\n    <Text\n      className={`rounded-xl px-4 py-2 text-sm font-medium ${\n        userSkills.includes(skill)\n          ? 'border-blue-200 bg-blue-100 text-blue-800'\n          : 'border-gray-200 bg-gray-100 text-gray-700'\n      }`}>\n      {skill}\n      {userSkills.includes(skill) && ' \u2713'}\n    </Text>\n  );\n\n  return (\n    <Modal animationTy"}, {"index": 970, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "kill}\n      {userSkills.includes(skill) && ' \u2713'}\n    </Text>\n  );\n\n  return (\n    <Modal animationType=\"slide\" transparent visible={isVisible} onRequestClose={onClose}>\n      <View className=\"flex-1 bg-black/60\">\n        <View\n          className={`mt-${isSmallScreen ? '4' : '8'} flex-1 rounded-t-[32px] bg-white shadow-2xl`}>\n          <ScrollView showsVerticalScrollIndicator={false} className=\"px-6 pt-6\">\n            {/* Header */}\n            <View className=\"mb-6 flex-row items-center justify"}, {"index": 971, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "-6 pt-6\">\n            {/* Header */}\n            <View className=\"mb-6 flex-row items-center justify-end\">\n              <TouchableOpacity onPress={onClose} className=\"rounded-full bg-gray-100 p-2\">\n                <FontAwesome name=\"times\" size={isSmallScreen ? 18 : 22} color=\"#374151\" />\n              </TouchableOpacity>\n            </View>\n\n            {/* Company Info with enhanced styling */}\n            <View className=\"mb-8 flex-row items-start\">\n              <Image source={{ uri: item.l"}, {"index": 972, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "\n            <View className=\"mb-8 flex-row items-start\">\n              <Image source={{ uri: item.logo }} className=\"h-20 w-20\" />\n              <View className=\"ml-4 flex-1\">\n                <Text className=\"text-2xl font-bold tracking-tight text-gray-900\">\n                  {item.title}\n                </Text>\n                <Text className=\"mt-1 text-lg font-medium text-blue-600\">{item.company}</Text>\n              </View>\n            </View>\n\n            {/* Department, Vacancies & Posted "}, {"index": 973, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "y}</Text>\n              </View>\n            </View>\n\n            {/* Department, Vacancies & Posted Date */}\n            <View className=\"mb-6 flex-row gap-4\">\n              <View className=\"flex-1 rounded-xl bg-purple-50 p-4\">\n                <Text className=\"mb-1 text-sm text-purple-600\">Department</Text>\n                <Text className=\"font-medium text-purple-900\">{item.department}</Text>\n              </View>\n              <View className=\"flex-1 rounded-xl bg-orange-50 p-4\">\n              "}, {"index": 974, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "          </View>\n              <View className=\"flex-1 rounded-xl bg-orange-50 p-4\">\n                <Text className=\"mb-1 text-sm text-orange-600\">Posted On</Text>\n                <Text className=\"font-medium text-orange-900\">{formatDate(item.postedDate)}</Text>\n              </View>\n            </View>\n\n            {/* Vacancies */}\n            <View className=\"mb-6 rounded-xl bg-green-50 p-4\">\n              <Text className=\"text-center font-medium text-green-700\">\n                {item.vacan"}, {"index": 975, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "\n              <Text className=\"text-center font-medium text-green-700\">\n                {item.vacancies} {item.vacancies > 1 ? 'Vacancies' : 'Vacancy'}\n              </Text>\n            </View>\n\n            {/* Description */}\n            <View className=\"mb-8\">\n              <Text className=\"mb-3 text-xl font-bold text-gray-900\">Description</Text>\n              <Text className=\"leading-relaxed text-gray-600\">{item.description}</Text>\n            </View>\n\n            {/* Key Details with modern"}, {"index": 976, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "ext-gray-600\">{item.description}</Text>\n            </View>\n\n            {/* Key Details with modern grid */}\n            <View className=\"mb-8 rounded-2xl bg-gray-200 p-4\">\n              <View className=\"grid grid-cols-2 gap-4\">\n                {[\n                  { icon: 'map-marker', label: 'Location', value: item.location },\n                  { icon: 'money', label: 'Salary', value: item.salary },\n                  { icon: 'briefcase', label: 'Experience', value: item.experience },\n        "}, {"index": 977, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "ry },\n                  { icon: 'briefcase', label: 'Experience', value: item.experience },\n                  { icon: 'clock-o', label: 'Type', value: item.type },\n                ].map((detail, index) => (\n                  <View key={index} className=\"rounded-xl bg-white p-3 shadow-sm\">\n                    <Text className=\"mb-1 text-sm text-gray-500\">{detail.label}</Text>\n                    <Text className=\"font-semibold\">{detail.value}</Text>\n                  </View>\n                ))}\n   "}, {"index": 978, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "xt className=\"font-semibold\">{detail.value}</Text>\n                  </View>\n                ))}\n              </View>\n            </View>\n\n            {/* Posted By Section with enhanced styling */}\n            <View className=\"mb-8 rounded-2xl bg-gray-100 p-4\">\n              <View className=\"flex-row items-center justify-between\">\n                <View>\n                  <Text className=\"mb-1 font-medium text-blue-600\">Posted By</Text>\n                  <Text className=\"text-xl font-semibold t"}, {"index": 979, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "nt-medium text-blue-600\">Posted By</Text>\n                  <Text className=\"text-xl font-semibold text-gray-900\">{item.postedBy?.name}</Text>\n                </View>\n                <TouchableOpacity\n                  className=\"rounded-full bg-black px-6 py-2.5 shadow-sm\"\n                  onPress={() => setConnectModalVisible(true)}>\n                  <Text className=\"font-medium text-white\">Connect</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n\n        "}, {"index": 980, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "nnect</Text>\n                </TouchableOpacity>\n              </View>\n            </View>\n\n            {/* Requirements and Benefits with modern styling */}\n            {['Requirements', 'Benefits'].map((section) => (\n              <View key={section} className=\"mb-8\">\n                <Text className=\"mb-4 text-xl font-bold text-gray-900\">{section}</Text>\n                <View className={`${section !== 'Requirements' ? 'flex-row flex-wrap gap-3' : ''}`}>\n                  {item[section.toLowerC"}, {"index": 981, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "on !== 'Requirements' ? 'flex-row flex-wrap gap-3' : ''}`}>\n                  {item[section.toLowerCase()]?.map((item, index) =>\n                    section === 'Requirements' ? (\n                      <View key={index} className=\"mb-3 flex-row items-center\">\n                        <View className=\"mr-3 h-2 w-2 rounded-full bg-blue-600\" />\n                        <Text className=\"text-base text-gray-700\">{item}</Text>\n                      </View>\n                    ) : (\n                     "}, {"index": 982, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "ray-700\">{item}</Text>\n                      </View>\n                    ) : (\n                      <Text\n                        key={index}\n                        className=\"rounded-xl bg-green-50 px-4 py-2 text-sm font-medium text-green-700\">\n                        {item}\n                      </Text>\n                    )\n                  )}\n                </View>\n              </View>\n            ))}\n\n            {/* Skills section with modern tags */}\n            <View className=\"mb-8"}, {"index": 983, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "          ))}\n\n            {/* Skills section with modern tags */}\n            <View className=\"mb-8\">\n              <Text className=\"mb-4 text-xl font-bold text-gray-900\">Required Skills</Text>\n              <View className=\"flex-row flex-wrap gap-3\">\n                {item.skills?.map((skill) => (\n                  <SkillTag key={skill} skill={skill} />\n                ))}\n              </View>\n              <View className=\"mt-4 rounded-xl bg-gray-50 p-4\">\n                <Text className=\"font"}, {"index": 984, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "             <View className=\"mt-4 rounded-xl bg-gray-50 p-4\">\n                <Text className=\"font-medium text-gray-700\">\n                  Match: {item.skills.filter((skill) => userSkills.includes(skill)).length}/\n                  {item.skills.length} skills\n                </Text>\n              </View>\n            </View>\n\n            {/* View JD & Apply Now Buttons Above Additional Info */}\n            <View className=\"mb-6\">\n              {/* View Job Description Button */}\n              "}, {"index": 985, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "            <View className=\"mb-6\">\n              {/* View Job Description Button */}\n              <TouchableOpacity\n                onPress={handleDownloadPDF}\n                className=\"mb-4 flex-row items-center justify-center rounded-xl bg-blue-400 p-3\">\n                <FontAwesome name=\"file-pdf-o\" size={20} color=\"#000\" className=\"mr-2\" />\n                <Text className=\"text-lg text-black\">View Job Description</Text>\n              </TouchableOpacity>\n\n              {/* Apply Now Button"}, {"index": 986, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "k\">View Job Description</Text>\n              </TouchableOpacity>\n\n              {/* Apply Now Button */}\n              <TouchableOpacity className=\"rounded-xl bg-black px-6 py-2.5 shadow-sm\">\n                <Text className=\"text-center text-lg font-semibold text-white\">Apply Now</Text>\n              </TouchableOpacity>\n            </View>\n\n            {/* Additional Info */}\n            <View className=\"mb-8 rounded-xl bg-gray-50 p-4\">\n              <Text className=\"text-sm text-gray-500\">\n    "}, {"index": 987, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "ssName=\"mb-8 rounded-xl bg-gray-50 p-4\">\n              <Text className=\"text-sm text-gray-500\">\n                This position was posted on {formatDate(item.postedDate)}.\n                {item.vacancies > 1\n                  ? ` There are currently ${item.vacancies} open positions.`\n                  : ' There is currently 1 open position.'}\n              </Text>\n            </View>\n          </ScrollView>\n        </View>\n        <ConnectModal\n          isVisible={connectModalVisible}\n          "}, {"index": 988, "path": "client/components/jobs/JobDetailsModal.jsx", "chunk": "rollView>\n        </View>\n        <ConnectModal\n          isVisible={connectModalVisible}\n          closeModal={() => setConnectModalVisible(false)}\n          item={item}\n        />\n      </View>\n    </Modal>\n  );\n};\nexport default JobDetailsModal;\n"}, {"index": 989, "path": "client/components/jobs/NewJob.jsx", "chunk": "import { Ionicons } from '@expo/vector-icons';\nimport * as DocumentPicker from 'expo-document-picker';\nimport debounce from 'lodash/debounce';\nimport { useState, useCallback, useRef } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  ScrollView,\n  Pressable,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  StyleSheet,\n  TouchableOpacity,\n  ActivityIndicator,\n} from 'react-native';\n\nconst NewJob = () => {\n  const scrollViewRef = useRef(null);\n  const [formData, setFormData] = useState({\n    tit"}, {"index": 990, "path": "client/components/jobs/NewJob.jsx", "chunk": "= () => {\n  const scrollViewRef = useRef(null);\n  const [formData, setFormData] = useState({\n    title: '',\n    company: '',\n    location: '',\n    salary: '',\n    type: 'Full-time',\n    experience: '',\n    skills: [],\n    benefits: [],\n    description: '',\n    requirements: [],\n    jdPdf: null,\n  });\n\n  const [currentSkill, setCurrentSkill] = useState('');\n  const [currentBenefit, setCurrentBenefit] = useState('');\n  const [currentRequirement, setCurrentRequirement] = useState('');\n  const [erro"}, {"index": 991, "path": "client/components/jobs/NewJob.jsx", "chunk": "t] = useState('');\n  const [currentRequirement, setCurrentRequirement] = useState('');\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Debounced change handler\n  const debouncedHandleChange = useCallback(\n    debounce((name, value) => {\n      setFormData((prev) => ({ ...prev, [name]: value }));\n    }, 300),\n    []\n  );\n\n  const handleChange = (name, value) => {\n    debouncedHandleChange(name, value);\n    if (errors[name]) {\n      setEr"}, {"index": 992, "path": "client/components/jobs/NewJob.jsx", "chunk": "nge = (name, value) => {\n    debouncedHandleChange(name, value);\n    if (errors[name]) {\n      setErrors((prev) => ({ ...prev, [name]: null }));\n    }\n  };\n\n  // Optimized array handler\n  const addToArray = useCallback((field, value, setter) => {\n    const trimmedValue = value.trim();\n    if (!trimmedValue) return;\n\n    setFormData((prev) => {\n      if (prev[field].includes(trimmedValue)) {\n        Alert.alert('Already exists', `This ${field.slice(0, -1)} is already added`);\n        return prev;"}, {"index": 993, "path": "client/components/jobs/NewJob.jsx", "chunk": "  Alert.alert('Already exists', `This ${field.slice(0, -1)} is already added`);\n        return prev;\n      }\n      if (prev[field].length >= 10) {\n        Alert.alert('Limit reached', `Maximum 10 ${field} allowed`);\n        return prev;\n      }\n      return {\n        ...prev,\n        [field]: [...prev[field], trimmedValue],\n      };\n    });\n    setter('');\n  }, []);\n\n  const removeFromArray = (field, index) => {\n    setFormData((prev) => ({\n      ...prev,\n      [field]: prev[field].filter((_, i)"}, {"index": 994, "path": "client/components/jobs/NewJob.jsx", "chunk": "ld, index) => {\n    setFormData((prev) => ({\n      ...prev,\n      [field]: prev[field].filter((_, i) => i !== index),\n    }));\n  };\n\n  const handleFileUpload = async () => {\n    try {\n      const result = await DocumentPicker.getDocumentAsync({\n        type: 'application/pdf',\n        copyToCacheDirectory: true,\n      });\n\n      if (result.type === 'success') {\n        setFormData((prev) => ({ ...prev, jdPdf: result }));\n        Alert.alert('Success', 'PDF uploaded successfully');\n      }\n    } "}, {"index": 995, "path": "client/components/jobs/NewJob.jsx", "chunk": "prev, jdPdf: result }));\n        Alert.alert('Success', 'PDF uploaded successfully');\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Failed to upload document');\n    }\n  };\n\n  const validateForm = () => {\n    const requiredFields = ['title', 'company', 'location', 'salary', 'experience', 'description'];\n    const newErrors = {};\n\n    requiredFields.forEach((field) => {\n      if (!formData[field]?.trim()) {\n        newErrors[field] = 'This field is required';\n      }\n    });\n\n    if (f"}, {"index": 996, "path": "client/components/jobs/NewJob.jsx", "chunk": "ta[field]?.trim()) {\n        newErrors[field] = 'This field is required';\n      }\n    });\n\n    if (formData.skills.length === 0) newErrors.skills = 'Add at least one skill';\n    if (formData.requirements.length === 0) newErrors.requirements = 'Add at least one requirement';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async () => {\n    if (!validateForm()) {\n      Alert.alert('Validation Error', 'Please complete all required fields');\n  "}, {"index": 997, "path": "client/components/jobs/NewJob.jsx", "chunk": "(!validateForm()) {\n      Alert.alert('Validation Error', 'Please complete all required fields');\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      // Simulate API call\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      Alert.alert('Success', 'Job posted successfully!');\n    } catch (error) {\n      Alert.alert('Error', 'Failed to post job');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Optimized array input renderer\n  const renderArrayInput = ("}, {"index": 998, "path": "client/components/jobs/NewJob.jsx", "chunk": "setIsSubmitting(false);\n    }\n  };\n\n  // Optimized array input renderer\n  const renderArrayInput = (\n    label,\n    value,\n    setValue,\n    arrayField,\n    placeholder = 'Add item',\n    required = false\n  ) => (\n    <View style={styles.arrayInputContainer}>\n      <Text style={[styles.label, required && styles.requiredLabel]}>\n        {label} {required && '*'} ({formData[arrayField].length}/10)\n      </Text>\n      <View style={styles.arrayInputWrapper}>\n        <TextInput\n          style={styles"}, {"index": 999, "path": "client/components/jobs/NewJob.jsx", "chunk": "    </Text>\n      <View style={styles.arrayInputWrapper}>\n        <TextInput\n          style={styles.arrayInput}\n          placeholder={placeholder}\n          value={value}\n          onChangeText={setValue}\n          maxLength={50}\n          returnKeyType=\"done\"\n          onSubmitEditing={() => addToArray(arrayField, value, setValue)}\n        />\n        <TouchableOpacity\n          activeOpacity={0.7}\n          style={[styles.addButton, formData[arrayField].length >= 10 && styles.addButtonDisable"}, {"index": 1000, "path": "client/components/jobs/NewJob.jsx", "chunk": ".7}\n          style={[styles.addButton, formData[arrayField].length >= 10 && styles.addButtonDisabled]}\n          disabled={formData[arrayField].length >= 10}\n          onPress={() => addToArray(arrayField, value, setValue)}>\n          <Text style={styles.plusIcon}>+</Text>\n        </TouchableOpacity>\n      </View>\n      {errors[arrayField] && <Text style={styles.errorText}>{errors[arrayField]}</Text>}\n      <View style={styles.tagContainer}>\n        {formData[arrayField].map((item, index) => (\n"}, {"index": 1001, "path": "client/components/jobs/NewJob.jsx", "chunk": "ext>}\n      <View style={styles.tagContainer}>\n        {formData[arrayField].map((item, index) => (\n          <TouchableOpacity\n            key={index}\n            style={styles.tag}\n            onPress={() => removeFromArray(arrayField, index)}>\n            <Text style={styles.tagText}>{item}</Text>\n            <Ionicons name=\"close\" size={16} color=\"white\" />\n          </TouchableOpacity>\n        ))}\n      </View>\n    </View>\n  );\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.conta"}, {"index": 1002, "path": "client/components/jobs/NewJob.jsx", "chunk": "  ))}\n      </View>\n    </View>\n  );\n\n  return (\n    <KeyboardAvoidingView\n      style={styles.container}\n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 0}>\n      <ScrollView\n        ref={scrollViewRef}\n        contentContainerStyle={styles.scrollViewContent}\n        showsVerticalScrollIndicator\n        bounces={false}\n        overScrollMode=\"never\"\n        keyboardShouldPersistTaps=\"handled\">\n        <View style={styles.f"}, {"index": 1003, "path": "client/components/jobs/NewJob.jsx", "chunk": "   overScrollMode=\"never\"\n        keyboardShouldPersistTaps=\"handled\">\n        <View style={styles.formContainer}>\n          <Text style={styles.title}>Post a New Job</Text>\n\n          {/* Basic Information Inputs */}\n          <View style={styles.inputGroup}>\n            <TextInput\n              style={[styles.input, errors.title && styles.errorInput]}\n              placeholder=\"Job Title *\"\n              placeholderTextColor=\"#999\"\n              value={formData.title}\n              onChangeTex"}, {"index": 1004, "path": "client/components/jobs/NewJob.jsx", "chunk": "          placeholderTextColor=\"#999\"\n              value={formData.title}\n              onChangeText={(val) => handleChange('title', val)}\n            />\n            {errors.title && <Text style={styles.errorText}>{errors.title}</Text>}\n          </View>\n\n          {/* Repeat similar pattern for other text inputs */}\n          {['company', 'location', 'salary', 'experience', 'description'].map((field) => (\n            <View key={field} style={styles.inputGroup}>\n              <TextInput\n       "}, {"index": 1005, "path": "client/components/jobs/NewJob.jsx", "chunk": "ield) => (\n            <View key={field} style={styles.inputGroup}>\n              <TextInput\n                style={[styles.input, errors[field] && styles.errorInput]}\n                placeholder={`${field.charAt(0).toUpperCase() + field.slice(1)} *`}\n                placeholderTextColor=\"#999\"\n                value={formData[field]}\n                onChangeText={(val) => handleChange(field, val)}\n              />\n              {errors[field] && <Text style={styles.errorText}>{errors[field]}</Te"}, {"index": 1006, "path": "client/components/jobs/NewJob.jsx", "chunk": "\n              />\n              {errors[field] && <Text style={styles.errorText}>{errors[field]}</Text>}\n            </View>\n          ))}\n\n          {/* Dynamic Array Inputs */}\n          {renderArrayInput('Skills', currentSkill, setCurrentSkill, 'skills', 'Add a skill', true)}\n\n          {renderArrayInput(\n            'Benefits',\n            currentBenefit,\n            setCurrentBenefit,\n            'benefits',\n            'Add a benefit'\n          )}\n\n          {renderArrayInput(\n            "}, {"index": 1007, "path": "client/components/jobs/NewJob.jsx", "chunk": "     'benefits',\n            'Add a benefit'\n          )}\n\n          {renderArrayInput(\n            'Requirements',\n            currentRequirement,\n            setCurrentRequirement,\n            'requirements',\n            'Add a requirement',\n            true\n          )}\n\n          {/* File Upload */}\n          <TouchableOpacity style={styles.uploadButton} onPress={handleFileUpload}>\n            <Ionicons name=\"cloud-upload\" size={24} color=\"white\" />\n            <Text style={styles.uploadButt"}, {"index": 1008, "path": "client/components/jobs/NewJob.jsx", "chunk": " <Ionicons name=\"cloud-upload\" size={24} color=\"white\" />\n            <Text style={styles.uploadButtonText}>\n              {formData.jdPdf ? 'PDF Uploaded' : 'Upload Job Description'}\n            </Text>\n          </TouchableOpacity>\n\n          {/* Submit Button */}\n          <Pressable\n            style={({ pressed }) => [\n              styles.submitButton,\n              pressed && styles.submitButtonPressed,\n              isSubmitting && styles.submitButtonDisabled,\n            ]}\n            "}, {"index": 1009, "path": "client/components/jobs/NewJob.jsx", "chunk": "uttonPressed,\n              isSubmitting && styles.submitButtonDisabled,\n            ]}\n            disabled={isSubmitting}\n            onPress={handleSubmit}>\n            {isSubmitting ? (\n              <ActivityIndicator color=\"white\" />\n            ) : (\n              <Text style={styles.submitButtonText}>Post Job</Text>\n            )}\n          </Pressable>\n        </View>\n        <View style={styles.bottomSpacing} />\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n};\n\nconst styles = St"}, {"index": 1010, "path": "client/components/jobs/NewJob.jsx", "chunk": "{styles.bottomSpacing} />\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F5F7FB',\n  },\n  scrollViewContent: {\n    flexGrow: 1,\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    paddingBottom: 50, // Add extra padding at bottom\n  },\n  formContainer: {\n    backgroundColor: 'white',\n    borderRadius: 15,\n    padding: 20,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 4 },\n    shadow"}, {"index": 1011, "path": "client/components/jobs/NewJob.jsx", "chunk": " 15,\n    padding: 20,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.1,\n    shadowRadius: 6,\n    elevation: 5,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: '#333',\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  inputGroup: {\n    marginBottom: 15,\n  },\n  input: {\n    backgroundColor: '#F9FAFB',\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n    borderRadius: 10,\n    paddingVertical: 12,\n    paddingHorizontal: 15,\n    fontSiz"}, {"index": 1012, "path": "client/components/jobs/NewJob.jsx", "chunk": "or: '#E5E7EB',\n    borderRadius: 10,\n    paddingVertical: 12,\n    paddingHorizontal: 15,\n    fontSize: 16,\n  },\n  errorInput: {\n    borderColor: '#EF4444',\n  },\n  errorText: {\n    color: '#EF4444',\n    fontSize: 12,\n    marginTop: 5,\n  },\n  arrayInputContainer: {\n    marginBottom: 20,\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: '600',\n    marginBottom: 8,\n    color: '#333',\n  },\n  requiredLabel: {\n    color: '#EF4444',\n  },\n  arrayInputWrapper: {\n    flexDirection: 'row',\n    alignItems: '"}, {"index": 1013, "path": "client/components/jobs/NewJob.jsx", "chunk": "bel: {\n    color: '#EF4444',\n  },\n  arrayInputWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n  arrayInput: {\n    flex: 1,\n    height: 50,\n    backgroundColor: '#F9FAFB',\n    borderWidth: 1,\n    borderColor: '#E5E7EB',\n    borderRadius: 10,\n    paddingHorizontal: 15,\n    fontSize: 16,\n    marginRight: 10,\n  },\n  addButton: {\n    width: 50,\n    height: 50,\n    backgroundColor: '#3B82F6',\n    borderRadius: 10,\n    justifyContent: 'center',\n    alignItems: "}, {"index": 1014, "path": "client/components/jobs/NewJob.jsx", "chunk": "    backgroundColor: '#3B82F6',\n    borderRadius: 10,\n    justifyContent: 'center',\n    alignItems: 'center',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5,\n  },\n  addButtonPressed: {\n    backgroundColor: '#2563EB',\n    transform: [{ scale: 0.98 }],\n  },\n  addButtonDisabled: {\n    backgroundColor: '#94A3B8',\n    opacity: 0.5,\n  },\n  addButtonContent: {\n    width: 24,\n    height: 24,\n    justi"}, {"index": 1015, "path": "client/components/jobs/NewJob.jsx", "chunk": "or: '#94A3B8',\n    opacity: 0.5,\n  },\n  addButtonContent: {\n    width: 24,\n    height: 24,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  plusIcon: {\n    color: 'white',\n    fontSize: 30,\n    fontWeight: 'bold',\n    lineHeight: 30,\n  },\n  tagContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginTop: 10,\n  },\n  tag: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#3B82F6',\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVerti"}, {"index": 1016, "path": "client/components/jobs/NewJob.jsx", "chunk": "r',\n    backgroundColor: '#3B82F6',\n    borderRadius: 8,\n    paddingHorizontal: 12,\n    paddingVertical: 8,\n    marginRight: 8,\n    marginBottom: 8,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 1.41,\n    elevation: 2,\n  },\n  tagText: {\n    color: 'white',\n    marginRight: 8,\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  uploadButton: {\n    flexDirection: 'row',\n    backgroundColor: '#10B981',\n    borderRadius: 12"}, {"index": 1017, "path": "client/components/jobs/NewJob.jsx", "chunk": " },\n  uploadButton: {\n    flexDirection: 'row',\n    backgroundColor: '#10B981',\n    borderRadius: 12,\n    paddingVertical: 15,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  uploadButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '600',\n    marginLeft: 10,\n  },\n  submitButton: {\n    backgroundColor: '#3B82F6',\n    borderRadius: 12,\n    paddingVertical: 15,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  submit"}, {"index": 1018, "path": "client/components/jobs/NewJob.jsx", "chunk": "rtical: 15,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  submitButtonText: {\n    color: 'white',\n    fontSize: 18,\n    fontWeight: '700',\n  },\n  submitButtonPressed: {\n    transform: [{ scale: 0.98 }],\n    backgroundColor: '#2563EB',\n  },\n  submitButtonDisabled: {\n    backgroundColor: '#94A3B8',\n    opacity: 0.7,\n  },\n  bottomSpacing: {\n    height: 100, // Extra space at bottom\n  },\n});\n\nexport default NewJob;\n"}, {"index": 1019, "path": "client/components/jobs/NewJob.jsx", "chunk": "a space at bottom\n  },\n});\n\nexport default NewJob;\n"}, {"index": 1020, "path": "client/components/message/DateSeparator.jsx", "chunk": "import { View, Text } from 'react-native';\n\nconst DateSeparator = ({ date }) => {\n  return (\n    <View className=\"my-2 flex flex-row items-center justify-center\">\n      <View className=\"h-[1px] flex-1 bg-gray-300\" />\n      <Text className=\"mx-4 text-sm text-gray-500\">{date}</Text>\n      <View className=\"h-[1px] flex-1 bg-gray-300\" />\n    </View>\n  );\n};\n\nexport default DateSeparator;\n"}, {"index": 1021, "path": "client/components/message/InputBar.jsx", "chunk": "import { Ionicons } from '@expo/vector-icons';\nimport { useState } from 'react';\nimport { View, TextInput, TouchableOpacity } from 'react-native';\nimport EmojiKeyboard from 'rn-emoji-keyboard';\n\nconst InputBar = ({\n  message,\n  setMessage,\n  handleSend,\n  handleAttachment,\n  handleImagePicker,\n  isRecording,\n  startRecording,\n  stopRecording,\n}) => {\n  const [isEmojiPickerOpen, setIsEmojiPickerOpen] = useState(false);\n\n  const handleEmojiSelect = (emoji) => {\n    setMessage((prev) => prev + emoj"}, {"index": 1022, "path": "client/components/message/InputBar.jsx", "chunk": "n] = useState(false);\n\n  const handleEmojiSelect = (emoji) => {\n    setMessage((prev) => prev + emoji.emoji);\n  };\n\n  return (\n    <View className=\"border-accent/10 border-t bg-white\">\n      <EmojiKeyboard\n        open={isEmojiPickerOpen}\n        onClose={() => setIsEmojiPickerOpen(false)}\n        onEmojiSelected={handleEmojiSelect}\n        enableSearchBar\n        enableRecentlyUsed\n        categoryPosition=\"top\"\n        height={300}\n      />\n\n      <View className=\"flex-row items-center gap-2 p"}, {"index": 1023, "path": "client/components/message/InputBar.jsx", "chunk": "ryPosition=\"top\"\n        height={300}\n      />\n\n      <View className=\"flex-row items-center gap-2 p-2.5\">\n        <View className=\"bg-accent/5 flex-1 flex-row items-center gap-3 rounded-2xl px-4 py-2\">\n          <TouchableOpacity onPress={() => setIsEmojiPickerOpen(true)}>\n            <Ionicons name=\"happy-outline\" size={22} className=\"text-text\" />\n          </TouchableOpacity>\n          <TextInput\n            className=\"max-h-[100px] min-h-[36px] flex-1 text-[15px] leading-[20px] text-text\"\n "}, {"index": 1024, "path": "client/components/message/InputBar.jsx", "chunk": "put\n            className=\"max-h-[100px] min-h-[36px] flex-1 text-[15px] leading-[20px] text-text\"\n            placeholder=\"Type a message...\"\n            placeholderTextColor=\"#94A3B8\"\n            value={message}\n            onChangeText={setMessage}\n            multiline\n            style={{ paddingTop: 8, paddingBottom: 8 }}\n          />\n          <TouchableOpacity onPress={handleAttachment}>\n            <Ionicons name=\"attach\" size={22} className=\"text-text\" />\n          </TouchableOpacity>\n"}, {"index": 1025, "path": "client/components/message/InputBar.jsx", "chunk": "           <Ionicons name=\"attach\" size={22} className=\"text-text\" />\n          </TouchableOpacity>\n        </View>\n\n        {message.trim().length > 0 ? (\n          <TouchableOpacity className=\"rounded-full bg-primary p-3\" onPress={handleSend}>\n            <Ionicons name=\"send\" size={20} className=\"text-white\" />\n          </TouchableOpacity>\n        ) : (\n          <View className=\"flex-row gap-2\">\n            <TouchableOpacity\n              className=\"bg-accent/5 rounded-full p-3\"\n           "}, {"index": 1026, "path": "client/components/message/InputBar.jsx", "chunk": "2\">\n            <TouchableOpacity\n              className=\"bg-accent/5 rounded-full p-3\"\n              onPress={() => handleImagePicker(true)}>\n              <Ionicons name=\"camera\" size={20} className=\"text-text\" />\n            </TouchableOpacity>\n            <TouchableOpacity\n              className=\"bg-accent/5 rounded-full p-3\"\n              onPress={isRecording ? stopRecording : startRecording}>\n              <Ionicons\n                name={isRecording ? 'radio-button-on' : 'mic'}\n         "}, {"index": 1027, "path": "client/components/message/InputBar.jsx", "chunk": "g}>\n              <Ionicons\n                name={isRecording ? 'radio-button-on' : 'mic'}\n                size={20}\n                className={isRecording ? 'text-primary' : 'text-text'}\n              />\n            </TouchableOpacity>\n          </View>\n        )}\n      </View>\n    </View>\n  );\n};\n\nexport default InputBar;\n"}, {"index": 1028, "path": "client/components/message/MessageBubble.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport { Ionicons } from '@expo/vector-icons';\nimport { Audio } from 'expo-av';\nimport * as FileSystem from 'expo-file-system';\nimport * as Haptics from 'expo-haptics';\nimport * as MediaLibrary from 'expo-media-library';\nimport * as Sharing from 'expo-sharing';\nimport { useState, useEffect } from 'react';\nimport { View, Text, Image, TouchableOpacity, Alert, ActivityIndicator } from 'react-native';\nimport Markdown, { MarkdownIt } from 'react-native-markdown-disp"}, {"index": 1029, "path": "client/components/message/MessageBubble.jsx", "chunk": "ityIndicator } from 'react-native';\nimport Markdown, { MarkdownIt } from 'react-native-markdown-display';\nimport Animated, {\n  withSpring,\n  useAnimatedStyle,\n  useSharedValue,\n  withSequence,\n} from 'react-native-reanimated';\n\nimport { useAuth } from '../../providers/AuthProvider';\nimport { formatMessageTime } from '../../utils/dateUtils';\n\nconst MessageBubble = ({\n  type,\n  text,\n  sender,\n  senderName,\n  timestamp,\n  uri,\n  fileName,\n  fileSize,\n  mimeType,\n  isUploading,\n  uploadFailed,\n  sh"}, {"index": 1030, "path": "client/components/message/MessageBubble.jsx", "chunk": "derName,\n  timestamp,\n  uri,\n  fileName,\n  fileSize,\n  mimeType,\n  isUploading,\n  uploadFailed,\n  showSenderName = false,\n}) => {\n  const [sound, setSound] = useState();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [downloadProgress, setDownloadProgress] = useState(0);\n  const [isDownloading, setIsDownloading] = useState(false);\n  const [isLiked, setIsLiked] = useState(false);\n  const [lastTap, setLastTap] = useState(null);\n  c"}, {"index": 1031, "path": "client/components/message/MessageBubble.jsx", "chunk": "  const [isLiked, setIsLiked] = useState(false);\n  const [lastTap, setLastTap] = useState(null);\n  const { user } = useAuth();\n  const scale = useSharedValue(0);\n  const opacity = useSharedValue(0);\n\n  useEffect(() => {\n    return sound ? () => sound.unloadAsync() : undefined;\n  }, [sound]);\n\n  const handleAudioPlayback = async () => {\n    if (sound) {\n      if (isPlaying) {\n        await sound.pauseAsync();\n        setIsPlaying(false);\n      } else {\n        await sound.playAsync();\n        set"}, {"index": 1032, "path": "client/components/message/MessageBubble.jsx", "chunk": "useAsync();\n        setIsPlaying(false);\n      } else {\n        await sound.playAsync();\n        setIsPlaying(true);\n      }\n    } else {\n      setIsLoading(true);\n      try {\n        const downloadResumable = FileSystem.createDownloadResumable(\n          `${SERVER_URL}/media/audio/${uri}`,\n          FileSystem.documentDirectory + 'temp_audio.m4a'\n        );\n\n        const { uri: audioUri } = await downloadResumable.downloadAsync();\n        const { sound: audioSound } = await Audio.Sound.createA"}, {"index": 1033, "path": "client/components/message/MessageBubble.jsx", "chunk": "t downloadResumable.downloadAsync();\n        const { sound: audioSound } = await Audio.Sound.createAsync({ uri: audioUri });\n        setSound(audioSound);\n        await audioSound.playAsync();\n        setIsPlaying(true);\n\n        // Handle playback finished\n        audioSound.setOnPlaybackStatusUpdate((status) => {\n          if (status.didJustFinish) {\n            setIsPlaying(false);\n          }\n        });\n      } catch (error) {\n        console.log('Error loading audio:', error);\n      }\n    "}, {"index": 1034, "path": "client/components/message/MessageBubble.jsx", "chunk": "        });\n      } catch (error) {\n        console.log('Error loading audio:', error);\n      }\n      setIsLoading(false);\n    }\n  };\n\n  const handleDocumentPress = async () => {\n    if (isDownloading) return;\n\n    try {\n      setIsDownloading(true);\n      const permissions = await MediaLibrary.requestPermissionsAsync();\n\n      if (!permissions.granted) {\n        Alert.alert('Permission needed', 'Please allow access to save files');\n        return;\n      }\n\n      const callback = (downloadProgre"}, {"index": 1035, "path": "client/components/message/MessageBubble.jsx", "chunk": "Please allow access to save files');\n        return;\n      }\n\n      const callback = (downloadProgress) => {\n        const progress =\n          (downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite) * 100;\n        setDownloadProgress(progress);\n      };\n\n      const localUri = `${FileSystem.documentDirectory}${fileName}`;\n      const downloadResumable = FileSystem.createDownloadResumable(\n        `${SERVER_URL}/media/document/${uri}`,\n        localUri,\n        {},\n    "}, {"index": 1036, "path": "client/components/message/MessageBubble.jsx", "chunk": "DownloadResumable(\n        `${SERVER_URL}/media/document/${uri}`,\n        localUri,\n        {},\n        callback\n      );\n\n      const { uri: fileUri } = await downloadResumable.downloadAsync();\n\n      if (await Sharing.isAvailableAsync()) {\n        await Sharing.shareAsync(fileUri, {\n          mimeType: mimeType || 'application/octet-stream',\n          dialogTitle: 'Open with...',\n        });\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Could not download the file. Please try again"}, {"index": 1037, "path": "client/components/message/MessageBubble.jsx", "chunk": "   }\n    } catch (error) {\n      Alert.alert('Error', 'Could not download the file. Please try again.');\n    } finally {\n      setIsDownloading(false);\n      setDownloadProgress(0);\n    }\n  };\n\n  const handleDoubleTap = () => {\n    const now = Date.now();\n    const DOUBLE_PRESS_DELAY = 300;\n\n    if (lastTap && now - lastTap < DOUBLE_PRESS_DELAY) {\n      const newLikeState = !isLiked;\n      setIsLiked(newLikeState);\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n\n      if (newLike"}, {"index": 1038, "path": "client/components/message/MessageBubble.jsx", "chunk": "ked(newLikeState);\n      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n\n      if (newLikeState) {\n        scale.value = withSequence(withSpring(1.5), withSpring(1));\n        opacity.value = withSpring(1);\n      } else {\n        opacity.value = withSpring(0);\n      }\n    }\n    setLastTap(now);\n  };\n\n  const animatedStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: scale.value }],\n    opacity: opacity.value,\n  }));\n\n  const renderUploadingState = () => {\n    if (isUploading) {\n"}, {"index": 1039, "path": "client/components/message/MessageBubble.jsx", "chunk": ",\n    opacity: opacity.value,\n  }));\n\n  const renderUploadingState = () => {\n    if (isUploading) {\n      return (\n        <View className=\"absolute right-2 top-2\">\n          <ActivityIndicator size=\"small\" color={sender === user.email ? 'white' : '#0000ff'} />\n        </View>\n      );\n    }\n    if (uploadFailed) {\n      return (\n        <View className=\"absolute right-2 top-2\">\n          <Ionicons name=\"alert-circle\" size={20} color=\"red\" />\n        </View>\n      );\n    }\n    return null;\n  };\n"}, {"index": 1040, "path": "client/components/message/MessageBubble.jsx", "chunk": "s name=\"alert-circle\" size={20} color=\"red\" />\n        </View>\n      );\n    }\n    return null;\n  };\n\n  const renderSenderName = () => {\n    if (showSenderName && sender !== user.email) {\n      return <Text className=\"text-sm font-medium text-black\">{senderName}</Text>;\n    }\n    return null;\n  };\n\n  return (\n    <TouchableOpacity onPress={handleDoubleTap} activeOpacity={0.9}>\n      <View\n        className={`relative mb-2 max-w-[80%] ${\n          sender === user.email ? 'self-end bg-primary' : 's"}, {"index": 1041, "path": "client/components/message/MessageBubble.jsx", "chunk": "lassName={`relative mb-2 max-w-[80%] ${\n          sender === user.email ? 'self-end bg-primary' : 'self-start bg-white'\n        } rounded-2xl px-4 py-2.5 shadow-sm ${sender !== user.email && 'border-accent/10 border'}`}>\n        {renderUploadingState()}\n        {type === 'text' && (\n          <>\n            {renderSenderName()}\n            <Markdown\n              markdownit={MarkdownIt({ linkify: true }).disable([\n                'hr',\n                'blockquote',\n                'fence',\n     "}, {"index": 1042, "path": "client/components/message/MessageBubble.jsx", "chunk": "true }).disable([\n                'hr',\n                'blockquote',\n                'fence',\n                'table',\n                'image',\n              ])}\n              style={{\n                text: {\n                  fontSize: 15,\n                },\n                body: {\n                  fontSize: 15,\n                },\n                paragraph: {\n                  flexWrap: 'wrap',\n                  flexDirection: 'row',\n                  alignItems: 'flex-start',\n               "}, {"index": 1043, "path": "client/components/message/MessageBubble.jsx", "chunk": "\n                  flexDirection: 'row',\n                  alignItems: 'flex-start',\n                  marginBottom: 4,\n                },\n                link: {\n                  color: '#2563eb',\n                  textDecorationLine: 'underline',\n                },\n                heading1: {\n                  marginTop: 4,\n                  marginBottom: 4,\n                  fontSize: 20,\n                  fontWeight: 'bold',\n                },\n                heading2: {\n                  m"}, {"index": 1044, "path": "client/components/message/MessageBubble.jsx", "chunk": "              fontWeight: 'bold',\n                },\n                heading2: {\n                  marginTop: 4,\n                  marginBottom: 4,\n                  fontSize: 18,\n                  fontWeight: 'bold',\n                },\n                code_block: {\n                  padding: 4,\n                  borderRadius: 4,\n                  fontFamily: 'monospace',\n                },\n                bullet_list: {\n                  color: '#fff',\n                },\n                ordered"}, {"index": 1045, "path": "client/components/message/MessageBubble.jsx", "chunk": "          bullet_list: {\n                  color: '#fff',\n                },\n                ordered_list: {\n                  color: '#fff',\n                },\n              }}\n              rules={{\n                textgroup: (node, children) => {\n                  return (\n                    <Text\n                      className={`${sender === user.email ? 'text-white' : 'text-text'} `}\n                      key={node.key}>\n                      {children}\n                    </Text>\n       "}, {"index": 1046, "path": "client/components/message/MessageBubble.jsx", "chunk": "                key={node.key}>\n                      {children}\n                    </Text>\n                  );\n                },\n                text: (node) => {\n                  return <Text key={node.key}>{node.content}</Text>;\n                },\n              }}>\n              {text}\n            </Markdown>\n          </>\n        )}\n        {type === 'image' && (\n          <>\n            {renderSenderName()}\n            <Image\n              source={{ uri: `${SERVER_URL}/media/image/${uri"}, {"index": 1047, "path": "client/components/message/MessageBubble.jsx", "chunk": "renderSenderName()}\n            <Image\n              source={{ uri: `${SERVER_URL}/media/image/${uri}` }}\n              className=\"h-48 w-48 rounded-lg\"\n              resizeMode=\"cover\"\n            />\n          </>\n        )}\n        {type === 'document' && (\n          <>\n            {renderSenderName()}\n            <TouchableOpacity\n              className=\"flex-row items-center gap-2\"\n              onPress={handleDocumentPress}\n              disabled={isDownloading}>\n              <View classN"}, {"index": 1048, "path": "client/components/message/MessageBubble.jsx", "chunk": "    onPress={handleDocumentPress}\n              disabled={isDownloading}>\n              <View className=\"relative\">\n                <Ionicons\n                  name=\"document-outline\"\n                  size={24}\n                  className={sender === user.email ? 'text-white' : 'text-text'}\n                />\n                {isDownloading && (\n                  <View className=\"absolute inset-0 flex items-center justify-center\">\n                    <View className=\"h-5 w-5 animate-spin rounded"}, {"index": 1049, "path": "client/components/message/MessageBubble.jsx", "chunk": "flex items-center justify-center\">\n                    <View className=\"h-5 w-5 animate-spin rounded-full border-2 border-accent border-t-primary\" />\n                  </View>\n                )}\n              </View>\n              <View>\n                <Text className={sender === user.email ? 'text-white' : 'text-text'}>{fileName}</Text>\n                <Text\n                  className={`text-xs ${sender === user.email ? 'text-white/70' : 'text-highlight/70'}`}>\n                  {isDownloadin"}, {"index": 1050, "path": "client/components/message/MessageBubble.jsx", "chunk": " ${sender === user.email ? 'text-white/70' : 'text-highlight/70'}`}>\n                  {isDownloading\n                    ? `Downloading... ${downloadProgress.toFixed(0)}%`\n                    : `${(fileSize / 1024).toFixed(1)} KB`}\n                </Text>\n              </View>\n            </TouchableOpacity>\n          </>\n        )}\n        {type === 'audio' && (\n          <>\n            {renderSenderName()}\n            <View className=\"flex-row items-center gap-3\">\n              <TouchableOpac"}, {"index": 1051, "path": "client/components/message/MessageBubble.jsx", "chunk": "enderName()}\n            <View className=\"flex-row items-center gap-3\">\n              <TouchableOpacity\n                onPress={handleAudioPlayback}\n                disabled={isLoading}\n                className=\"bg-accent/10 rounded-full p-2\">\n                {isLoading ? (\n                  <View className=\"h-5 w-5 animate-spin rounded-full border-2 border-accent border-t-primary\" />\n                ) : (\n                  <Ionicons\n                    name={isPlaying ? 'pause' : 'play'}\n    "}, {"index": 1052, "path": "client/components/message/MessageBubble.jsx", "chunk": "      ) : (\n                  <Ionicons\n                    name={isPlaying ? 'pause' : 'play'}\n                    size={20}\n                    className={sender === user.email ? 'text-white' : 'text-text'}\n                  />\n                )}\n              </TouchableOpacity>\n              <Text className={sender === user.email ? 'text-white' : 'text-text'}>\n                Voice message\n              </Text>\n            </View>\n          </>\n        )}\n        <View className=\"flex-row it"}, {"index": 1053, "path": "client/components/message/MessageBubble.jsx", "chunk": "           </Text>\n            </View>\n          </>\n        )}\n        <View className=\"flex-row items-center justify-end gap-1\">\n          <Animated.View style={animatedStyle}>\n            <Ionicons\n              name=\"heart\"\n              size={16}\n              color={sender === user.email ? '#ffffff' : '#FF0000'}\n            />\n          </Animated.View>\n          <Text\n            className={`text-xs ${sender === user.email ? 'text-white/70' : 'text-highlight/70'} mt-1`}>\n            {form"}, {"index": 1054, "path": "client/components/message/MessageBubble.jsx", "chunk": "{`text-xs ${sender === user.email ? 'text-white/70' : 'text-highlight/70'} mt-1`}>\n            {formatMessageTime(timestamp)}\n          </Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport default MessageBubble;\n"}, {"index": 1055, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\nimport { useState, useCallback } from 'react';\nimport { View, FlatList, Text, TouchableOpacity, Button } from 'react-native';\n\nimport { useAuth } from '../../providers/AuthProvider';\n\nconst Notifications = () => {\n  // State to manage active tab (either 'invitations' or 'notifications')\n  const [activeTab, setActiveTab] = useState(true);\n  const [isPressed, setIsPre"}, {"index": 1056, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": "or 'notifications')\n  const [activeTab, setActiveTab] = useState(true);\n  const [isPressed, setIsPressed] = useState(false); // Prevent multiple rapid clicks\n  const { user, setUser } = useAuth();\n\n  const handleAccept = async (invitationId) => {\n    const token = await AsyncStorage.getItem('token');\n    if (!token) {\n      throw new Error('Token not found');\n    }\n    try {\n      const response = await axios.post(\n        `${SERVER_URL}/connections/accept`,\n        { requesterId: invitationId }"}, {"index": 1057, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": " await axios.post(\n        `${SERVER_URL}/connections/accept`,\n        { requesterId: invitationId },\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      alert(response.data.message || 'Invitation accepted!');\n      setUser(response.data.user);\n    } catch (error) {\n      console.error('Error accepting invitation:', error);\n      alert('Failed to accept invitation.');\n    }\n  };\n\n  const handleReject = async (invitationId) => {\n    const token = await Asyn"}, {"index": 1058, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": "tation.');\n    }\n  };\n\n  const handleReject = async (invitationId) => {\n    const token = await AsyncStorage.getItem('token');\n    if (!token) {\n      throw new Error('Token not found');\n    }\n    try {\n      const response = await axios.post(\n        `${SERVER_URL}/connections/reject`,\n        { requesterId: invitationId },\n        {\n          headers: { Authorization: `Bearer ${token}` },\n        }\n      );\n      alert(response.data.message || 'Invitation rejected!');\n      setUser(response.da"}, {"index": 1059, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": "  }\n      );\n      alert(response.data.message || 'Invitation rejected!');\n      setUser(response.data.user);\n    } catch (error) {\n      console.error('Error rejecting invitation:', error);\n      alert('Failed to reject invitation.');\n    }\n  };\n  // Debounced tab press handler\n  const handleTabPress = useCallback(\n    (isInvitation) => {\n      if (!isPressed) {\n        setIsPressed(true); // Disable rapid clicking\n        setActiveTab(isInvitation);\n        setTimeout(() => setIsPressed(false)"}, {"index": 1060, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": "able rapid clicking\n        setActiveTab(isInvitation);\n        setTimeout(() => setIsPressed(false), 300); // Re-enable after a short delay\n      }\n    },\n    [isPressed]\n  );\n\n  return (\n    <View className=\"flex-1 bg-gray-100 p-4\">\n      {/* Tab Buttons */}\n      <View className=\"mb-6 flex-row\">\n        <TouchableOpacity\n          onPress={() => handleTabPress(true)}\n          style={{\n            flex: 1,\n            paddingVertical: 16, // Increased vertical padding\n            backgroundCo"}, {"index": 1061, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": "    flex: 1,\n            paddingVertical: 16, // Increased vertical padding\n            backgroundColor: activeTab ? '#1e40af' : '#d1d5db', // Blue when active\n            borderRadius: 5,\n            marginRight: 8,\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}>\n          <Text\n            style={{\n              color: activeTab ? 'white' : 'black',\n              fontWeight: 'bold',\n              fontSize: 18, // Increased font size\n            }}>\n       "}, {"index": 1062, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": "      fontWeight: 'bold',\n              fontSize: 18, // Increased font size\n            }}>\n            Invitations\n          </Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          onPress={() => handleTabPress(false)}\n          style={{\n            flex: 1,\n            paddingVertical: 16, // Increased vertical padding\n            backgroundColor: !activeTab ? '#1e40af' : '#d1d5db', // Blue when active\n            borderRadius: 5,\n            justifyContent: 'center',\n       "}, {"index": 1063, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": "5db', // Blue when active\n            borderRadius: 5,\n            justifyContent: 'center',\n            alignItems: 'center',\n          }}>\n          <Text\n            style={{\n              color: !activeTab ? 'white' : 'black',\n              fontWeight: 'bold',\n              fontSize: 18, // Increased font size\n            }}>\n            Notifications\n          </Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Conditional Rendering of Invitations Section */}\n      {activeTab ? (\n "}, {"index": 1064, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": "ty>\n      </View>\n\n      {/* Conditional Rendering of Invitations Section */}\n      {activeTab ? (\n        <View className=\"mb-6\">\n          {user.receivedRequests.length > 0 ? (\n            <FlatList\n              data={user.receivedRequests}\n              keyExtractor={(item) => item._id}\n              renderItem={({ item }) => (\n                <View className=\"mb-4 rounded-lg bg-white p-4 shadow-md\">\n                  <TouchableOpacity>\n                    <Text className=\"text-base font-bol"}, {"index": 1065, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": "ow-md\">\n                  <TouchableOpacity>\n                    <Text className=\"text-base font-bold\">{item.fullName}</Text>\n                    <Text className=\"text-sm text-gray-600\">{item.bio}</Text>\n                  </TouchableOpacity>\n                  <View className=\"mt-2 flex-row justify-between\">\n                    <Button title=\"Accept\" onPress={() => handleAccept(item._id)} color=\"green\" />\n                    <Button title=\"Reject\" onPress={() => handleReject(item._id)} color=\"red"}, {"index": 1066, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": "een\" />\n                    <Button title=\"Reject\" onPress={() => handleReject(item._id)} color=\"red\" />\n                  </View>\n                </View>\n              )}\n            />\n          ) : (\n            <Text className=\"text-center text-gray-500\">No invitations available</Text>\n          )}\n        </View>\n      ) : (\n        <View className=\"mb-6\">\n          {user.notifications.length > 0 ? (\n            <FlatList\n              data={user.notifications}\n              keyExtractor={("}, {"index": 1067, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": " > 0 ? (\n            <FlatList\n              data={user.notifications}\n              keyExtractor={(_, index) => index.toString()}\n              renderItem={({ item, index }) => <Text className=\"text-base font-bold\">{item}</Text>}\n            />\n          ) : (\n            <Text className=\"text-center text-gray-500\">No notifications available</Text>\n          )}\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport default Notifications;\n"}, {"index": 1068, "path": "client/components/notifications/AlumniNotifications.jsx", "chunk": ">\n  );\n};\n\nexport default Notifications;\n"}, {"index": 1069, "path": "client/components/notifications/CollegeNotifications.jsx", "chunk": "import { View, FlatList, TouchableOpacity, Text } from 'react-native';\n\nconst notifications = [\n  { id: '1', name: 'Company Updates', message: 'New company updates available' },\n  { id: '2', name: 'Event Reminder', message: 'Alumni event is coming up soon' },\n  { id: '3', name: 'Job Opportunity', message: 'New job posting match found' },\n  { id: '4', name: 'System Maintenance', message: 'Scheduled maintenance for tomorrow' },\n  { id: '5', name: 'Security Alert', message: 'Account security update"}, {"index": 1070, "path": "client/components/notifications/CollegeNotifications.jsx", "chunk": " maintenance for tomorrow' },\n  { id: '5', name: 'Security Alert', message: 'Account security update required' },\n  { id: '6', name: 'New Message', message: 'You have received a new message from HR' },\n  { id: '7', name: 'Password Reset', message: 'Your password was successfully reset' },\n];\n\nconst CollegeNotifications = () => {\n  const handleNotificationPress = (item) => {\n    console.log('Notification pressed:', item);\n  };\n  return (\n    <>\n      <Text className=\"mb-4 text-2xl font-semibold\">"}, {"index": 1071, "path": "client/components/notifications/CollegeNotifications.jsx", "chunk": "cation pressed:', item);\n  };\n  return (\n    <>\n      <Text className=\"mb-4 text-2xl font-semibold\">College Notifications</Text>\n      <View className=\"mb-6\">\n        {notifications.length > 0 ? (\n          <FlatList\n            data={notifications}\n            keyExtractor={(item) => item.id}\n            renderItem={({ item }) => (\n              <TouchableOpacity\n                className=\"mb-4 rounded-lg bg-white p-4 shadow-md\"\n                onPress={() => handleNotificationPress(item)}>\n   "}, {"index": 1072, "path": "client/components/notifications/CollegeNotifications.jsx", "chunk": "ounded-lg bg-white p-4 shadow-md\"\n                onPress={() => handleNotificationPress(item)}>\n                <Text className=\"text-base font-bold\">{item.name}</Text>\n                <Text className=\"text-sm text-gray-600\">{item.message}</Text>\n              </TouchableOpacity>\n            )}\n          />\n        ) : (\n          <Text className=\"text-center text-gray-500\">No notifications available</Text>\n        )}\n      </View>\n    </>\n  );\n};\n\nexport default CollegeNotifications;\n"}, {"index": 1073, "path": "client/components/notifications/CollegeNotifications.jsx", "chunk": "able</Text>\n        )}\n      </View>\n    </>\n  );\n};\n\nexport default CollegeNotifications;\n"}, {"index": 1074, "path": "client/components/profile/Badge.jsx", "chunk": "import { Text, Pressable } from 'react-native';\n\nconst Badge = ({ children, onPress }) => (\n  <Pressable onPress={onPress} className=\"bg-accent/10 rounded-full px-4 py-2\">\n    <Text className=\"text-sm font-medium text-text\">{children}</Text>\n  </Pressable>\n);\n\nexport default Badge;\n"}, {"index": 1075, "path": "client/components/profile/Card.jsx", "chunk": "import { View, Text, Pressable } from 'react-native';\n\nconst Card = ({ icon, title, subtitle, meta, description, onPress, className = '' }) => (\n  <Pressable onPress={onPress}>\n    <View\n      className={`mb-3 flex-row items-start rounded-lg border border-gray-100 bg-white p-4 shadow-md ${className}`}>\n      <View className=\"bg-primary/10 mr-4 h-10 w-10 items-center justify-center rounded-lg\">\n        {icon}\n      </View>\n      <View className=\"flex-1 space-y-1\">\n        <Text className=\"text-lg"}, {"index": 1076, "path": "client/components/profile/Card.jsx", "chunk": "     {icon}\n      </View>\n      <View className=\"flex-1 space-y-1\">\n        <Text className=\"text-lg font-bold text-text\">{title}</Text>\n        <Text className=\"text-text/60 text-base font-medium\">{subtitle}</Text>\n        <Text className=\"text-text/50 text-sm italic\">{meta}</Text>\n        {description && <Text className=\"text-text/60 mt-2 text-sm leading-5\">{description}</Text>}\n      </View>\n    </View>\n  </Pressable>\n);\n\nexport default Card;\n"}, {"index": 1077, "path": "client/components/profile/Card.jsx", "chunk": "  </View>\n  </Pressable>\n);\n\nexport default Card;\n"}, {"index": 1078, "path": "client/components/profile/LinkText.jsx", "chunk": "import { Text, Linking } from 'react-native';\n\nconst LinkText = ({ text, className }) => {\n  const urlRegex = /(https?:\\/\\/[^\\s]+)|(www\\.[^\\s]+)|([\\w\\d-]+\\.[a-z]{2,}\\/?[^\\s]*)/g;\n  const parts = text.split(urlRegex);\n\n  return parts.map((part, index) => {\n    if (part && urlRegex.test(part)) {\n      return (\n        <Text\n          key={index}\n          className=\"text-secondary underline\"\n          onPress={() => Linking.openURL(part.startsWith('http') ? part : `https://${part}`)}>\n          {p"}, {"index": 1079, "path": "client/components/profile/LinkText.jsx", "chunk": "   onPress={() => Linking.openURL(part.startsWith('http') ? part : `https://${part}`)}>\n          {part}\n        </Text>\n      );\n    }\n    return (\n      <Text key={index} className={className}>\n        {part}\n      </Text>\n    );\n  });\n};\n\nexport default LinkText;\n"}, {"index": 1080, "path": "client/components/profile/ReadMore.jsx", "chunk": "import { useState, useRef } from 'react';\nimport { Text, View, TouchableOpacity, Animated } from 'react-native';\n\nconst ReadMore = ({ children, numberOfLines, className }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const animation = useRef(new Animated.Value(0)).current;\n\n  const toggleExpand = () => {\n    setIsExpanded(!isExpanded);\n    Animated.spring(animation, {\n      toValue: isExpanded ? 0 : 1,\n      useNativeDriver: true,\n      tension: 40,\n      friction: 7,\n    }).sta"}, {"index": 1081, "path": "client/components/profile/ReadMore.jsx", "chunk": "e: isExpanded ? 0 : 1,\n      useNativeDriver: true,\n      tension: 40,\n      friction: 7,\n    }).start();\n  };\n\n  return (\n    <View>\n      <Animated.View\n        style={{\n          transform: [\n            {\n              scale: animation.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 1.02],\n              }),\n            },\n          ],\n        }}>\n        <Text numberOfLines={isExpanded ? undefined : numberOfLines} className={className}>\n          {children}"}, {"index": 1082, "path": "client/components/profile/ReadMore.jsx", "chunk": "t numberOfLines={isExpanded ? undefined : numberOfLines} className={className}>\n          {children}\n        </Text>\n      </Animated.View>\n      {children.length > 150 && (\n        <TouchableOpacity onPress={toggleExpand} className=\"mt-2\">\n          <Text className=\"text-base font-semibold text-secondary\">\n            {isExpanded ? '\u25b2 Show less' : '\u25bc Read more'}\n          </Text>\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n};\n\nexport default ReadMore;\n"}, {"index": 1083, "path": "client/components/profile/ReadMore.jsx", "chunk": "bleOpacity>\n      )}\n    </View>\n  );\n};\n\nexport default ReadMore;\n"}, {"index": 1084, "path": "client/components/profile/StatItem.jsx", "chunk": "import { Feather } from '@expo/vector-icons';\nimport { View, Text } from 'react-native';\n\nconst StatItem = ({ icon: iconName, count, label }) => (\n  <View className=\"items-center space-y-1\">\n    <View className=\"flex-row items-center space-x-1\">\n      <Feather name={iconName} size={14} className=\"text-text/60\" />\n      <Text className=\"text-base font-bold text-text\">{count}</Text>\n    </View>\n    <Text className=\"text-text/60 text-xs\">{label}</Text>\n  </View>\n);\n\nexport default StatItem;\n"}, {"index": 1085, "path": "client/components/profile/StatItem.jsx", "chunk": "<Text className=\"text-text/60 text-xs\">{label}</Text>\n  </View>\n);\n\nexport default StatItem;\n"}, {"index": 1086, "path": "client/constants/alumni/alumniMapData.js", "chunk": "import profileImg from '../../assets/profile.jpg';\n\nexport const alumniMapData = [\n  // Users in India\n  {\n    id: 1,\n    name: 'Ravi Kumar',\n    latitude: 28.6139,\n    longitude: 77.209,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 2,\n    name: 'Priya Sharma',\n    latitude: 19.076,\n    longitude: 72.8777,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 3,\n    name: 'Amit Patel',\n    latitude: 12.9716,\n    longitude: 77.5946,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 4,\n    name: 'Neha Gup"}, {"index": 1087, "path": "client/constants/alumni/alumniMapData.js", "chunk": ".9716,\n    longitude: 77.5946,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 4,\n    name: 'Neha Gupta',\n    latitude: 22.5726,\n    longitude: 88.3639,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 5,\n    name: 'Anjali Mehta',\n    latitude: 13.0827,\n    longitude: 80.2707,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 6,\n    name: 'Vikram Singh',\n    latitude: 17.385044,\n    longitude: 78.486671,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 7,\n    name: 'Kavita Rao',\n    latitude: 23.0225,\n "}, {"index": 1088, "path": "client/constants/alumni/alumniMapData.js", "chunk": ",\n    profilePhoto: profileImg,\n  },\n  {\n    id: 7,\n    name: 'Kavita Rao',\n    latitude: 23.0225,\n    longitude: 72.5714,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 8,\n    name: 'Suresh Reddy',\n    latitude: 26.8467,\n    longitude: 80.9462,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 9,\n    name: 'Rahul Verma',\n    latitude: 28.7041,\n    longitude: 77.1025,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 10,\n    name: 'Pooja Desai',\n    latitude: 19.2183,\n    longitude: 84.7915,\n    profi"}, {"index": 1089, "path": "client/constants/alumni/alumniMapData.js", "chunk": "},\n  {\n    id: 10,\n    name: 'Pooja Desai',\n    latitude: 19.2183,\n    longitude: 84.7915,\n    profilePhoto: profileImg,\n  },\n  // Users outside of India\n  {\n    id: 11,\n    name: 'Arjun Nair',\n    latitude: 31.5497,\n    longitude: 74.3436,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 12,\n    name: 'Meera Iyer',\n    latitude: 51.5074,\n    longitude: -0.1278,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 13,\n    name: 'Rohan Das',\n    latitude: 40.7128,\n    longitude: -74.006,\n    profilePhoto"}, {"index": 1090, "path": "client/constants/alumni/alumniMapData.js", "chunk": "{\n    id: 13,\n    name: 'Rohan Das',\n    latitude: 40.7128,\n    longitude: -74.006,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 14,\n    name: 'Sneha Kapoor',\n    latitude: 48.8566,\n    longitude: 2.3522,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 15,\n    name: 'Vivek Malhotra',\n    latitude: 34.0522,\n    longitude: -118.2437,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 16,\n    name: 'Nisha Jain',\n    latitude: 52.52,\n    longitude: 13.405,\n    profilePhoto: profileImg,\n  },\n  {\n    id:"}, {"index": 1091, "path": "client/constants/alumni/alumniMapData.js", "chunk": "ha Jain',\n    latitude: 52.52,\n    longitude: 13.405,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 17,\n    name: 'Rajesh Singh',\n    latitude: 40.7306,\n    longitude: -73.9352,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 18,\n    name: 'Pallavi Rao',\n    latitude: 43.65107,\n    longitude: -79.347015,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 19,\n    name: 'Karan Mehta',\n    latitude: -33.8688,\n    longitude: 151.2093,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 20,\n    name: 'Ritika "}, {"index": 1092, "path": "client/constants/alumni/alumniMapData.js", "chunk": "8688,\n    longitude: 151.2093,\n    profilePhoto: profileImg,\n  },\n  {\n    id: 20,\n    name: 'Ritika Sharma',\n    latitude: 35.6895,\n    longitude: 139.6917,\n    profilePhoto: profileImg,\n  },\n];\n"}, {"index": 1093, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": "export const alumniRecommendations = [\n  {\n    id: 1,\n    name: 'Ravi Kumar',\n    photo: 'https://randomuser.me/api/portraits/men/1.jpg',\n    company: 'Google',\n    position: 'Senior Software Engineer',\n    batch: {\n      joining: '2014',\n      graduation: '2018',\n    },\n    department: 'CSE',\n    location: 'Bangalore, India',\n    industry: 'Technology',\n    skills: ['React', 'Node.js', 'Cloud Computing'],\n    isConnected: false,\n    connection: '173',\n  },\n  {\n    id: 2,\n    name: 'Priya Sharma"}, {"index": 1094, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": "puting'],\n    isConnected: false,\n    connection: '173',\n  },\n  {\n    id: 2,\n    name: 'Priya Sharma',\n    photo: 'https://randomuser.me/api/portraits/women/2.jpg',\n    company: 'Microsoft',\n    position: 'Product Manager',\n    batch: {\n      joining: '2015',\n      graduation: '2019',\n    },\n    department: 'IT',\n    location: 'Hyderabad, India',\n    industry: 'Software',\n    skills: ['Product Management', 'Agile', 'Data Analytics'],\n    isConnected: true,\n    connection: '299',\n  },\n  {\n    id:"}, {"index": 1095, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": "agement', 'Agile', 'Data Analytics'],\n    isConnected: true,\n    connection: '299',\n  },\n  {\n    id: 3,\n    name: 'Amit Patel',\n    photo: 'https://randomuser.me/api/portraits/men/3.jpg',\n    company: 'Amazon',\n    position: 'Data Scientist',\n    batch: {\n      joining: '2013',\n      graduation: '2017',\n    },\n    department: 'CSE',\n    location: 'Mumbai, India',\n    industry: 'E-commerce',\n    skills: ['Python', 'Machine Learning', 'Data Analysis'],\n    isConnected: false,\n    connection: '87',"}, {"index": 1096, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": "ills: ['Python', 'Machine Learning', 'Data Analysis'],\n    isConnected: false,\n    connection: '87',\n  },\n  {\n    id: 4,\n    name: 'Neha Gupta',\n    photo: 'https://randomuser.me/api/portraits/women/4.jpg',\n    company: 'Flipkart',\n    position: 'Backend Developer',\n    batch: {\n      joining: '2016',\n      graduation: '2020',\n    },\n    department: 'CE',\n    location: 'Delhi, India',\n    industry: 'E-commerce',\n    skills: ['Java', 'Spring Boot', 'Microservices'],\n    isConnected: true,\n    con"}, {"index": 1097, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": ": 'E-commerce',\n    skills: ['Java', 'Spring Boot', 'Microservices'],\n    isConnected: true,\n    connection: '42',\n  },\n  {\n    id: 5,\n    name: 'Anjali Mehta',\n    photo: 'https://randomuser.me/api/portraits/women/5.jpg',\n    company: 'TCS',\n    position: 'Project Manager',\n    batch: {\n      joining: '2012',\n      graduation: '2016',\n    },\n    department: 'IT',\n    location: 'Pune, India',\n    industry: 'IT Services',\n    skills: ['Project Management', 'Agile', 'Scrum'],\n    isConnected: fals"}, {"index": 1098, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": "industry: 'IT Services',\n    skills: ['Project Management', 'Agile', 'Scrum'],\n    isConnected: false,\n    connection: '150',\n  },\n  {\n    id: 6,\n    name: 'Vikram Singh',\n    photo: 'https://randomuser.me/api/portraits/men/6.jpg',\n    company: 'Infosys',\n    position: 'Full Stack Developer',\n    batch: {\n      joining: '2015',\n      graduation: '2019',\n    },\n    department: 'CSE',\n    location: 'Chennai, India',\n    industry: 'IT Services',\n    skills: ['JavaScript', 'React', 'Node.js'],\n    i"}, {"index": 1099, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": "'Chennai, India',\n    industry: 'IT Services',\n    skills: ['JavaScript', 'React', 'Node.js'],\n    isConnected: true,\n    connection: '200',\n  },\n  {\n    id: 7,\n    name: 'Kavita Rao',\n    photo: 'https://randomuser.me/api/portraits/women/7.jpg',\n    company: 'Wipro',\n    position: 'UI/UX Designer',\n    batch: {\n      joining: '2014',\n      graduation: '2018',\n    },\n    department: 'EXTC',\n    location: 'Bangalore, India',\n    industry: 'IT Services',\n    skills: ['Sketch', 'Figma', 'User Resea"}, {"index": 1100, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": "cation: 'Bangalore, India',\n    industry: 'IT Services',\n    skills: ['Sketch', 'Figma', 'User Research'],\n    isConnected: false,\n    connection: '120',\n  },\n  {\n    id: 8,\n    name: 'Suresh Reddy',\n    photo: 'https://randomuser.me/api/portraits/men/8.jpg',\n    company: 'HCL',\n    position: 'DevOps Engineer',\n    batch: {\n      joining: '2013',\n      graduation: '2017',\n    },\n    department: 'ENTC',\n    location: 'Noida, India',\n    industry: 'IT Services',\n    skills: ['Docker', 'Kubernetes'"}, {"index": 1101, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": "NTC',\n    location: 'Noida, India',\n    industry: 'IT Services',\n    skills: ['Docker', 'Kubernetes', 'AWS'],\n    isConnected: true,\n    connection: '180',\n  },\n  {\n    id: 9,\n    name: 'Rahul Verma',\n    photo: 'https://randomuser.me/api/portraits/men/9.jpg',\n    company: 'Tech Mahindra',\n    position: 'Business Analyst',\n    batch: {\n      joining: '2012',\n      graduation: '2016',\n    },\n    department: 'ETRX',\n    location: 'Hyderabad, India',\n    industry: 'IT Services',\n    skills: ['Busin"}, {"index": 1102, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": "partment: 'ETRX',\n    location: 'Hyderabad, India',\n    industry: 'IT Services',\n    skills: ['Business Analysis', 'SQL', 'Data Visualization'],\n    isConnected: false,\n    connection: '90',\n  },\n  {\n    id: 10,\n    name: 'Pooja Desai',\n    photo: 'https://randomuser.me/api/portraits/women/10.jpg',\n    company: 'Capgemini',\n    position: 'Cloud Architect',\n    batch: {\n      joining: '2011',\n      graduation: '2015',\n    },\n    department: 'CSE',\n    location: 'Pune, India',\n    industry: 'IT Se"}, {"index": 1103, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": " graduation: '2015',\n    },\n    department: 'CSE',\n    location: 'Pune, India',\n    industry: 'IT Services',\n    skills: ['AWS', 'Azure', 'Cloud Architecture'],\n    isConnected: true,\n    connection: '110',\n  },\n];\n\nexport const getAlumniFilters = (data) => {\n  const filters = {\n    joiningYear: [...new Set(data.map((alumni) => alumni.batch.joining))].sort(),\n    graduationYear: [...new Set(data.map((alumni) => alumni.batch.graduation))].sort(),\n    location: [...new Set(data.map((alumni) => alu"}, {"index": 1104, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": "ap((alumni) => alumni.batch.graduation))].sort(),\n    location: [...new Set(data.map((alumni) => alumni.location))],\n    industry: [...new Set(data.map((alumni) => alumni.industry))],\n    department: [...new Set(data.map((alumni) => alumni.department))],\n    skills: [...new Set(data.flatMap((alumni) => alumni.skills))].sort(),\n  };\n\n  return {\n    'Joining Year': filters.joiningYear,\n    'Graduation Year': filters.graduationYear,\n    Location: filters.location,\n    Industry: filters.industry,\n  "}, {"index": 1105, "path": "client/constants/alumni/alumniRecommendations.js", "chunk": "on Year': filters.graduationYear,\n    Location: filters.location,\n    Industry: filters.industry,\n    Department: filters.department,\n    Skills: filters.skills,\n  };\n};\n"}, {"index": 1106, "path": "client/constants/chatData.js", "chunk": "export const chatData = [\n  {\n    id: '1',\n    name: 'Arjun Patel',\n    lastMessage: 'Kaise ho bhai?',\n    timestamp: '10:30 AM',\n    unread: 2,\n    avatar: 'https://randomuser.me/api/portraits/men/11.jpg',\n    isOnline: true,\n  },\n  {\n    id: '2',\n    name: 'Priya Sharma',\n    lastMessage: 'Meeting ka schedule bhej do',\n    timestamp: '2:45 PM',\n    unread: 0,\n    avatar: 'https://randomuser.me/api/portraits/women/12.jpg',\n    isOnline: false,\n  },\n  {\n    id: '3',\n    name: 'Rahul Verma',\n    "}, {"index": 1107, "path": "client/constants/chatData.js", "chunk": "pi/portraits/women/12.jpg',\n    isOnline: false,\n  },\n  {\n    id: '3',\n    name: 'Rahul Verma',\n    lastMessage: 'Project complete ho gaya',\n    timestamp: 'Yesterday',\n    unread: 1,\n    avatar: 'https://randomuser.me/api/portraits/men/13.jpg',\n    isOnline: true,\n  },\n  {\n    id: '4',\n    name: 'Deepika Kumar',\n    lastMessage: 'Thanks yaar!',\n    timestamp: 'Yesterday',\n    unread: 0,\n    avatar: 'https://randomuser.me/api/portraits/women/14.jpg',\n    isOnline: false,\n  },\n];\n"}, {"index": 1108, "path": "client/constants/chatData.js", "chunk": "r: 'https://randomuser.me/api/portraits/women/14.jpg',\n    isOnline: false,\n  },\n];\n"}, {"index": 1109, "path": "client/constants/donations/demoDonationSchema.js", "chunk": "const mongoose = require('mongoose');\n\nconst updateSchema = new mongoose.Schema({\n  date: { type: Date, required: true },\n  message: { type: String, required: true },\n  image: { type: String },\n});\n\nconst testimonialSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  message: { type: String, required: true },\n  image: { type: String },\n  year: { type: String },\n});\n\nconst campaignManagerSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  role: { type"}, {"index": 1110, "path": "client/constants/donations/demoDonationSchema.js", "chunk": "mpaignManagerSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  role: { type: String, required: true },\n  contact: { type: String, required: true },\n});\n\nconst donationCampaignSchema = new mongoose.Schema({\n  id: { type: String, required: true, unique: true },\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  goal: { type: Number, required: true },\n  raised: { type: Number, default: 0 },\n  donors: { type: Number, default: 0 },\n "}, {"index": 1111, "path": "client/constants/donations/demoDonationSchema.js", "chunk": " required: true },\n  raised: { type: Number, default: 0 },\n  donors: { type: Number, default: 0 },\n  image: { type: String, required: true },\n  deadline: { type: Date, required: true },\n  impact: { type: String, required: true },\n  category: { type: String, required: true },\n  updates: [updateSchema],\n  testimonials: [testimonialSchema],\n  campaignManager: { type: campaignManagerSchema, required: true },\n  taxBenefits: { type: String },\n  minimumDonation: { type: Number, required: true },\n  sugg"}, {"index": 1112, "path": "client/constants/donations/demoDonationSchema.js", "chunk": "true },\n  taxBenefits: { type: String },\n  minimumDonation: { type: Number, required: true },\n  suggestedDonations: { type: [Number], required: true },\n});\n\nmodule.exports = mongoose.model('DonationCampaign', donationCampaignSchema);\n"}, {"index": 1113, "path": "client/constants/donations/donationData.js", "chunk": "export const donationCampaigns = [\n  {\n    id: '0',\n    title: 'College Development Fund',\n    description: 'Support the growth and development of our institution.',\n    goal: 10000000,\n    raised: 5000000,\n    donors: 1250,\n    image: 'https://images.unsplash.com/photo-1562774053-701939374585',\n    deadline: '2024-12-31',\n    impact: 'Will support college infrastructure and student facilities',\n    category: 'Institution',\n    updates: [\n      {\n        date: '2024-01-01',\n        message: 'New"}, {"index": 1114, "path": "client/constants/donations/donationData.js", "chunk": "   category: 'Institution',\n    updates: [\n      {\n        date: '2024-01-01',\n        message: 'New computer lab equipment purchased',\n        image: 'https://images.unsplash.com/photo-1571260899304-425eee4c7efc',\n      },\n    ],\n    testimonials: [\n      {\n        name: 'Prof. Sharma',\n        message: 'The new facilities have greatly enhanced our teaching capabilities...',\n        image: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e',\n        year: '2024',\n      },\n    ],\n    "}, {"index": 1115, "path": "client/constants/donations/donationData.js", "chunk": "://images.unsplash.com/photo-1500648767791-00dcc994a43e',\n        year: '2024',\n      },\n    ],\n    campaignManager: {\n      name: 'Dr. Rajan Verma',\n      role: 'Development Committee Head',\n      contact: 'rajan.verma@college.edu',\n    },\n    taxBenefits: '80G tax exemption available',\n    minimumDonation: 1000,\n    suggestedDonations: [1000, 5000, 10000, 50000],\n  },\n  {\n    id: '1',\n    title: 'Student Scholarship Fund 2024',\n    description: 'Help underprivileged students pursue their dream"}, {"index": 1116, "path": "client/constants/donations/donationData.js", "chunk": " 'Student Scholarship Fund 2024',\n    description: 'Help underprivileged students pursue their dreams through education.',\n    goal: 2500000,\n    raised: 1500000,\n    donors: 234,\n    image: 'https://images.unsplash.com/photo-1523580494863-6f3031224c94',\n    deadline: '2024-12-31',\n    impact: 'Will support 50 students',\n    category: 'Education',\n    updates: [\n      {\n        date: '2024-01-15',\n        message: '25 students already selected for first phase',\n        image: 'https://images.uns"}, {"index": 1117, "path": "client/constants/donations/donationData.js", "chunk": "\n        message: '25 students already selected for first phase',\n        image: 'https://images.unsplash.com/photo-1577896851231-70ef18881754',\n      },\n    ],\n    testimonials: [\n      {\n        name: 'Rahul Kumar',\n        message: 'This scholarship changed my life...',\n        image: 'https://images.unsplash.com/photo-1531545514256-b1400bc00f31',\n        year: '2023',\n      },\n    ],\n    campaignManager: {\n      name: 'Dr. Priya Singh',\n      role: 'Education Committee Head',\n      contact: "}, {"index": 1118, "path": "client/constants/donations/donationData.js", "chunk": "ignManager: {\n      name: 'Dr. Priya Singh',\n      role: 'Education Committee Head',\n      contact: 'priya.singh@edu.in',\n    },\n    taxBenefits: '80G tax exemption available',\n    minimumDonation: 1000,\n    suggestedDonations: [1000, 5000, 10000, 25000],\n  },\n  {\n    id: '2',\n    title: 'Rural Healthcare Initiative',\n    description: 'Bringing medical facilities and healthcare services to remote villages.',\n    goal: 3500000,\n    raised: 2100000,\n    donors: 312,\n    image: 'https://images.unsp"}, {"index": 1119, "path": "client/constants/donations/donationData.js", "chunk": "villages.',\n    goal: 3500000,\n    raised: 2100000,\n    donors: 312,\n    image: 'https://images.unsplash.com/photo-1584820927498-cfe5211fd8bf',\n    deadline: '2024-10-30',\n    impact: 'Will serve 5 remote villages',\n    category: 'Healthcare',\n    updates: [\n      {\n        date: '2024-02-01',\n        message: 'First mobile clinic launched successfully',\n        image: 'https://images.unsplash.com/photo-1576091160550-2173dba999ef',\n      },\n    ],\n    testimonials: [\n      {\n        name: 'Meena"}, {"index": 1120, "path": "client/constants/donations/donationData.js", "chunk": "/photo-1576091160550-2173dba999ef',\n      },\n    ],\n    testimonials: [\n      {\n        name: 'Meena Devi',\n        message: 'Our village finally has access to basic healthcare...',\n        image: 'https://images.unsplash.com/photo-1573496359142-b8d87734a5a2',\n        year: '2024',\n      },\n    ],\n    campaignManager: {\n      name: 'Dr. Ajay Verma',\n      role: 'Medical Program Director',\n      contact: 'ajay.verma@healthcare.org',\n    },\n    taxBenefits: '80G tax exemption available',\n    minim"}, {"index": 1121, "path": "client/constants/donations/donationData.js", "chunk": "ntact: 'ajay.verma@healthcare.org',\n    },\n    taxBenefits: '80G tax exemption available',\n    minimumDonation: 500,\n    suggestedDonations: [500, 2000, 5000, 15000],\n  },\n  {\n    id: '3',\n    title: 'Clean Water Project',\n    description: 'Installing water purification systems in drought-affected regions.',\n    goal: 1800000,\n    raised: 800000,\n    donors: 156,\n    image: 'https://images.unsplash.com/photo-1518398046578-8cca57782e17',\n    deadline: '2024-09-15',\n    impact: 'Will provide clean"}, {"index": 1122, "path": "client/constants/donations/donationData.js", "chunk": "h.com/photo-1518398046578-8cca57782e17',\n    deadline: '2024-09-15',\n    impact: 'Will provide clean water to 2000 families',\n    category: 'Environment',\n    updates: [\n      {\n        date: '2024-01-30',\n        message: 'First water plant installation completed',\n        image: 'https://images.unsplash.com/photo-1544476915-ed1370594142',\n      },\n    ],\n    testimonials: [\n      {\n        name: 'Suresh Patel',\n        message: 'Clean drinking water has reduced illness in our community...',\n  "}, {"index": 1123, "path": "client/constants/donations/donationData.js", "chunk": " 'Suresh Patel',\n        message: 'Clean drinking water has reduced illness in our community...',\n        image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d',\n        year: '2024',\n      },\n    ],\n    campaignManager: {\n      name: 'Anjali Sharma',\n      role: 'Project Coordinator',\n      contact: 'anjali.sharma@waterproject.org',\n    },\n    taxBenefits: '80G tax exemption available',\n    minimumDonation: 750,\n    suggestedDonations: [750, 3000, 7500, 20000],\n  },\n];\n"}, {"index": 1124, "path": "client/constants/donations/donationData.js", "chunk": "ble',\n    minimumDonation: 750,\n    suggestedDonations: [750, 3000, 7500, 20000],\n  },\n];\n"}, {"index": 1125, "path": "client/constants/events/demoEventSchema.js", "chunk": "const mongoose = require('mongoose');\n\nconst speakerSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  role: { type: String, required: true },\n  company: { type: String, required: true },\n  image: { type: String, required: true },\n});\n\nconst eventSchema = new mongoose.Schema({\n  id: { type: String, required: true },\n  title: { type: String, required: true },\n  location: { type: String, required: true },\n  date: { type: String, required: true },\n  time: { type: String, req"}, {"index": 1126, "path": "client/constants/events/demoEventSchema.js", "chunk": "ype: String, required: true },\n  date: { type: String, required: true },\n  time: { type: String, required: true },\n  type: { type: String, required: true },\n  price: { type: String, required: true },\n  image: { type: String, required: true },\n  speakers: [speakerSchema],\n  agenda: { type: String, required: true },\n  sponsors: [{ type: String }],\n  registeredCount: { type: Number, required: true },\n  maxCapacity: { type: Number, required: true },\n});\n\nconst Event = mongoose.model('Event', eventSc"}, {"index": 1127, "path": "client/constants/events/demoEventSchema.js", "chunk": "\n  maxCapacity: { type: Number, required: true },\n});\n\nconst Event = mongoose.model('Event', eventSchema);\n\nmodule.exports = Event;\n"}, {"index": 1128, "path": "client/constants/events/eventData.js", "chunk": "export const eventsData = [\n  {\n    id: '1',\n    title: 'Global Tech Summit 2024',\n    location: 'Mumbai Convention Center',\n    date: '25th December 2024',\n    time: '10:00 AM - 6:00 PM',\n    type: 'Conference',\n    price: 'Free for Alumni',\n    image: 'https://via.placeholder.com/400x250?text=Tech+Summit+2024', // Placeholder image\n    speakers: [\n      {\n        name: 'Sundar Pichai',\n        role: 'CEO, Google',\n        company: 'Google',\n        image: 'https://via.placeholder.com/150?text="}, {"index": 1129, "path": "client/constants/events/eventData.js", "chunk": "ole: 'CEO, Google',\n        company: 'Google',\n        image: 'https://via.placeholder.com/150?text=Sundar+Pichai', // Placeholder image\n      },\n      {\n        name: 'Satya Nadella',\n        role: 'CEO, Microsoft',\n        company: 'Microsoft',\n        image: 'https://via.placeholder.com/150?text=Satya+Nadella', // Placeholder image\n      },\n    ],\n    agenda:\n      'The summit will cover keynotes on emerging technologies, with speeches from global leaders on AI, Cloud Computing, and the Futur"}, {"index": 1130, "path": "client/constants/events/eventData.js", "chunk": "es on emerging technologies, with speeches from global leaders on AI, Cloud Computing, and the Future of Tech.',\n    sponsors: ['Google', 'Microsoft', 'Amazon'],\n    registeredCount: 1500,\n    maxCapacity: 2000,\n  },\n  {\n    id: '2',\n    title: 'Sustainability Summit 2024',\n    location: 'New Delhi Expo Center',\n    date: '15th January 2025',\n    time: '9:00 AM - 4:00 PM',\n    type: 'Seminar',\n    price: '\u20b91000',\n    image: 'https://via.placeholder.com/400x250?text=Sustainability+Summit+2024', /"}, {"index": 1131, "path": "client/constants/events/eventData.js", "chunk": " price: '\u20b91000',\n    image: 'https://via.placeholder.com/400x250?text=Sustainability+Summit+2024', // Placeholder image\n    speakers: [\n      {\n        name: 'Greta Thunberg',\n        role: 'Environmental Activist',\n        company: 'Fridays for Future',\n        image: 'https://via.placeholder.com/150?text=Greta+Thunberg', // Placeholder image\n      },\n      {\n        name: 'Elon Musk',\n        role: 'CEO, Tesla',\n        company: 'Tesla',\n        image: 'https://via.placeholder.com/150?text=Elo"}, {"index": 1132, "path": "client/constants/events/eventData.js", "chunk": "le: 'CEO, Tesla',\n        company: 'Tesla',\n        image: 'https://via.placeholder.com/150?text=Elon+Musk', // Placeholder image\n      },\n    ],\n    agenda:\n      'The seminar will focus on climate change and the future of electric vehicles, with discussions on sustainable energy practices.',\n    sponsors: ['Tesla', 'IKEA', 'UNICEF'],\n    registeredCount: 800,\n    maxCapacity: 1000,\n  },\n  {\n    id: '3',\n    title: 'Blockchain World Expo 2025',\n    location: 'Hyderabad Tech Arena',\n    date: '5"}, {"index": 1133, "path": "client/constants/events/eventData.js", "chunk": "id: '3',\n    title: 'Blockchain World Expo 2025',\n    location: 'Hyderabad Tech Arena',\n    date: '5th February 2025',\n    time: '11:00 AM - 6:00 PM',\n    type: 'Expo',\n    price: '\u20b91500',\n    image: 'https://via.placeholder.com/400x250?text=Blockchain+World+Expo', // Placeholder image\n    speakers: [\n      {\n        name: 'Vitalik Buterin',\n        role: 'Co-founder',\n        company: 'Ethereum',\n        image: 'https://via.placeholder.com/150?text=Vitalik+Buterin', // Placeholder image\n      }"}, {"index": 1134, "path": "client/constants/events/eventData.js", "chunk": "\n        image: 'https://via.placeholder.com/150?text=Vitalik+Buterin', // Placeholder image\n      },\n      {\n        name: 'Changpeng Zhao',\n        role: 'CEO',\n        company: 'Binance',\n        image: 'https://via.placeholder.com/150?text=Changpeng+Zhao', // Placeholder image\n      },\n    ],\n    agenda:\n      'The expo will cover Ethereum 2.0 updates and discuss the future of cryptocurrency exchanges, with insights into blockchain scalability and security.',\n    sponsors: ['Ethereum Foundat"}, {"index": 1135, "path": "client/constants/events/eventData.js", "chunk": "xchanges, with insights into blockchain scalability and security.',\n    sponsors: ['Ethereum Foundation', 'Binance', 'Coinbase'],\n    registeredCount: 900,\n    maxCapacity: 1200,\n  },\n  {\n    id: '4',\n    title: 'Design Thinking Workshop',\n    location: 'Bangalore Creative Hub',\n    date: '10th March 2025',\n    time: '10:00 AM - 5:00 PM',\n    type: 'Workshop',\n    price: '\u20b9500',\n    image: 'https://via.placeholder.com/400x250?text=Design+Thinking+Workshop', // Placeholder image\n    speakers: [\n "}, {"index": 1136, "path": "client/constants/events/eventData.js", "chunk": "//via.placeholder.com/400x250?text=Design+Thinking+Workshop', // Placeholder image\n    speakers: [\n      {\n        name: 'Don Norman',\n        role: 'Author, Design of Everyday Things',\n        company: 'Nielsen Norman Group',\n        image: 'https://via.placeholder.com/150?text=Don+Norman', // Placeholder image\n      },\n      {\n        name: 'Tim Brown',\n        role: 'Chairman',\n        company: 'IDEO',\n        image: 'https://via.placeholder.com/150?text=Tim+Brown', // Placeholder image\n     "}, {"index": 1137, "path": "client/constants/events/eventData.js", "chunk": " 'IDEO',\n        image: 'https://via.placeholder.com/150?text=Tim+Brown', // Placeholder image\n      },\n    ],\n    agenda:\n      'The workshop will explore the principles of Design Thinking, offering practical methods for solving business problems through creative innovation.',\n    sponsors: ['IDEO', 'Adobe', 'Figma'],\n    registeredCount: 600,\n    maxCapacity: 800,\n  },\n  {\n    id: '5',\n    title: 'Future of Space Exploration',\n    location: 'ISRO Headquarters, Bangalore',\n    date: '20th April"}, {"index": 1138, "path": "client/constants/events/eventData.js", "chunk": ": 'Future of Space Exploration',\n    location: 'ISRO Headquarters, Bangalore',\n    date: '20th April 2025',\n    time: '9:00 AM - 3:00 PM',\n    type: 'Conference',\n    price: '\u20b91200',\n    image: 'https://via.placeholder.com/400x250?text=Space+Exploration', // Placeholder image\n    speakers: [\n      {\n        name: 'Dr. K. Sivan',\n        role: 'Former Chairman',\n        company: 'ISRO',\n        image: 'https://via.placeholder.com/150?text=K+Sivan', // Placeholder image\n      },\n      {\n        na"}, {"index": 1139, "path": "client/constants/events/eventData.js", "chunk": "ge: 'https://via.placeholder.com/150?text=K+Sivan', // Placeholder image\n      },\n      {\n        name: 'Chris Hadfield',\n        role: 'Astronaut',\n        company: 'Canadian Space Agency',\n        image: 'https://via.placeholder.com/150?text=Chris+Hadfield', // Placeholder image\n      },\n    ],\n    agenda:\n      'The conference will explore India\u2019s space achievements and offer insights into the future and challenges of Mars exploration.',\n    sponsors: ['ISRO', 'NASA', 'SpaceX'],\n    registere"}, {"index": 1140, "path": "client/constants/events/eventData.js", "chunk": "future and challenges of Mars exploration.',\n    sponsors: ['ISRO', 'NASA', 'SpaceX'],\n    registeredCount: 700,\n    maxCapacity: 1000,\n  },\n];\n"}, {"index": 1141, "path": "client/constants/jobs/demoJobSchema.js", "chunk": "const mongoose = require('mongoose');\n\nconst jobSchema = new mongoose.Schema({\n  id: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  title: {\n    type: String,\n    required: true,\n  },\n  company: {\n    type: String,\n    required: true,\n  },\n  logo: {\n    type: String,\n    required: true,\n  },\n  location: {\n    type: String,\n    required: true,\n  },\n  salary: {\n    type: String,\n    required: true,\n  },\n  type: {\n    type: String,\n    enum: ['Full-time', 'Part-time', 'Contract', "}, {"index": 1142, "path": "client/constants/jobs/demoJobSchema.js", "chunk": "  required: true,\n  },\n  type: {\n    type: String,\n    enum: ['Full-time', 'Part-time', 'Contract', 'Internship'], // Example values\n    required: true,\n  },\n  experience: {\n    type: String,\n    required: true,\n  },\n  skills: {\n    type: [String],\n    required: true,\n  },\n  benefits: {\n    type: [String],\n    default: [],\n  },\n  description: {\n    type: String,\n    required: true,\n  },\n  postedDate: {\n    type: Date,\n    required: true,\n  },\n  department: {\n    type: String,\n    default: null,\n"}, {"index": 1143, "path": "client/constants/jobs/demoJobSchema.js", "chunk": "te: {\n    type: Date,\n    required: true,\n  },\n  department: {\n    type: String,\n    default: null,\n    required: true,\n  },\n  vacancies: {\n    type: Number,\n    default: 1,\n  },\n  requirements: {\n    type: [String],\n    default: [],\n  },\n  jdPdf: {\n    type: String,\n    required: false,\n  },\n  postedBy: {\n    name: {\n      type: String,\n      required: true,\n    },\n  },\n});\n\nmodule.exports = mongoose.model('Job', jobSchema);\n"}, {"index": 1144, "path": "client/constants/jobs/demoJobSchema.js", "chunk": "oose.model('Job', jobSchema);\n"}, {"index": 1145, "path": "client/constants/jobs/jobData.js", "chunk": "export const jobsData = [\n  {\n    id: '1',\n    title: 'Senior Software Engineer',\n    company: 'Google India',\n    logo: 'https://logo.clearbit.com/google.com',\n    location: 'Bangalore, India (Hybrid)',\n    salary: '\u20b935,00,000 - \u20b955,00,000',\n    type: 'Full-time',\n    experience: '5-8 years',\n    skills: ['React Native', 'JavaScript', 'Python', 'AWS', 'UI/UX Design'],\n    benefits: ['Health Insurance', 'Stock Options', 'Flexible Hours', 'Remote Work'],\n    description: 'Join our core engineerin"}, {"index": 1146, "path": "client/constants/jobs/jobData.js", "chunk": "ance', 'Stock Options', 'Flexible Hours', 'Remote Work'],\n    description: 'Join our core engineering team to build next-gen cloud products...',\n    postedDate: '2024-01-15',\n    department: 'Engineering',\n    vacancies: 3,\n    requirements: [\n      'B.Tech/M.Tech in Computer Science',\n      'Experience with distributed systems',\n      'Strong problem-solving skills',\n    ],\n    jdPdf: 'https://library.spit.ac.in/AS2021-22/aiml-sem-1-4-2021.pdf',\n    postedBy: {\n      name: 'John Doe',\n    },\n  "}, {"index": 1147, "path": "client/constants/jobs/jobData.js", "chunk": "brary.spit.ac.in/AS2021-22/aiml-sem-1-4-2021.pdf',\n    postedBy: {\n      name: 'John Doe',\n    },\n  },\n  {\n    id: '2',\n    title: 'AI/ML Research Scientist',\n    company: 'Microsoft Research',\n    logo: 'https://logo.clearbit.com/microsoft.com',\n    location: 'Hyderabad, India',\n    salary: '\u20b945,00,000 - \u20b975,00,000',\n    type: 'Full-time',\n    experience: '3-6 years',\n    skills: ['Python', 'PyTorch', 'TensorFlow', 'NLP', 'Computer Vision'],\n    benefits: ['Relocation Assistance', 'Research Bud"}, {"index": 1148, "path": "client/constants/jobs/jobData.js", "chunk": "rch', 'TensorFlow', 'NLP', 'Computer Vision'],\n    benefits: ['Relocation Assistance', 'Research Budget', 'Conference Travel'],\n    postedDate: '2024-01-20',\n    department: 'Research & Development',\n    jdPdf: 'https://takeuforward.org/strivers-a2z-dsa-course/strivers-a2z-dsa-course-sheet-2',\n    postedBy: {\n      name: 'Alice Smith',\n    },\n  },\n  {\n    id: '3',\n    title: 'Data Scientist',\n    company: 'Amazon India',\n    logo: 'https://logo.clearbit.com/amazon.com',\n    location: 'Bangalore,"}, {"index": 1149, "path": "client/constants/jobs/jobData.js", "chunk": "company: 'Amazon India',\n    logo: 'https://logo.clearbit.com/amazon.com',\n    location: 'Bangalore, India',\n    salary: '\u20b925,00,000 - \u20b950,00,000',\n    type: 'Full-time',\n    experience: '2-5 years',\n    skills: ['Machine Learning', 'Python', 'SQL', 'Data Visualization'],\n    benefits: ['Health Insurance', 'Paid Time Off', 'Team Outings'],\n    description: 'Join our Data Science team to work on cutting-edge projects...',\n    postedDate: '2024-02-10',\n    department: 'Data Science',\n    vacancies"}, {"index": 1150, "path": "client/constants/jobs/jobData.js", "chunk": "tting-edge projects...',\n    postedDate: '2024-02-10',\n    department: 'Data Science',\n    vacancies: 2,\n    requirements: [\n      'B.Tech/M.Tech in Data Science or related field',\n      'Proven experience in statistical modeling and data analysis',\n    ],\n    jdPdf: 'https://example.com/jd/amazon-data-scientist.pdf',\n    postedBy: {\n      name: 'Bob Johnson',\n    },\n  },\n  {\n    id: '4',\n    title: 'Frontend Developer',\n    company: 'Adobe Systems',\n    logo: 'https://logo.clearbit.com/adobe.co"}, {"index": 1151, "path": "client/constants/jobs/jobData.js", "chunk": "e: 'Frontend Developer',\n    company: 'Adobe Systems',\n    logo: 'https://logo.clearbit.com/adobe.com',\n    location: 'Noida, India',\n    salary: '\u20b915,00,000 - \u20b930,00,000',\n    type: 'Full-time',\n    experience: '3-5 years',\n    skills: ['JavaScript', 'React', 'CSS', 'HTML'],\n    benefits: ['Stock Options', 'Paid Leave', 'Flexible Work Hours'],\n    description: 'Looking for a passionate Frontend Developer to join our team...',\n    postedDate: '2024-02-25',\n    department: 'Engineering',\n    vaca"}, {"index": 1152, "path": "client/constants/jobs/jobData.js", "chunk": "eveloper to join our team...',\n    postedDate: '2024-02-25',\n    department: 'Engineering',\n    vacancies: 4,\n    requirements: [\n      'Experience with frontend technologies (React, HTML, CSS)',\n      'Strong understanding of UX/UI principles',\n    ],\n    jdPdf: 'https://example.com/jd/adobe-frontend-developer.pdf',\n    postedBy: {\n      name: 'Charlie Lee',\n    },\n  },\n  {\n    id: '5',\n    title: 'Backend Developer',\n    company: 'Flipkart',\n    logo: 'https://logo.clearbit.com/flipkart.com',\n"}, {"index": 1153, "path": "client/constants/jobs/jobData.js", "chunk": ": 'Backend Developer',\n    company: 'Flipkart',\n    logo: 'https://logo.clearbit.com/flipkart.com',\n    location: 'Bangalore, India',\n    salary: '\u20b920,00,000 - \u20b945,00,000',\n    type: 'Full-time',\n    experience: '4-6 years',\n    skills: ['Java', 'Spring Boot', 'Microservices', 'AWS'],\n    benefits: ['Health Insurance', 'Work From Home', 'Annual Bonus'],\n    description: 'Join our Backend team to scale high-performance systems...',\n    postedDate: '2024-03-05',\n    department: 'Engineering',\n    "}, {"index": 1154, "path": "client/constants/jobs/jobData.js", "chunk": "cale high-performance systems...',\n    postedDate: '2024-03-05',\n    department: 'Engineering',\n    vacancies: 5,\n    requirements: [\n      'Experience with Java, Spring Boot, and Microservices architecture',\n      'Familiarity with cloud platforms like AWS or Azure',\n    ],\n    jdPdf: 'https://example.com/jd/flipkart-backend-developer.pdf',\n    postedBy: {\n      name: 'David Williams',\n    },\n  },\n  {\n    id: '6',\n    title: 'Product Manager',\n    company: 'LinkedIn',\n    logo: 'https://logo.cl"}, {"index": 1155, "path": "client/constants/jobs/jobData.js", "chunk": ",\n  {\n    id: '6',\n    title: 'Product Manager',\n    company: 'LinkedIn',\n    logo: 'https://logo.clearbit.com/linkedin.com',\n    location: 'Mumbai, India',\n    salary: '\u20b940,00,000 - \u20b970,00,000',\n    type: 'Full-time',\n    experience: '5-10 years',\n    skills: ['Product Strategy', 'Agile Methodology', 'Market Research'],\n    benefits: ['Relocation Support', 'Health Benefits', 'Work-Life Balance'],\n    description: 'Lead our product development and innovation initiatives...',\n    postedDate: '202"}, {"index": 1156, "path": "client/constants/jobs/jobData.js", "chunk": "\n    description: 'Lead our product development and innovation initiatives...',\n    postedDate: '2024-03-10',\n    department: 'Product',\n    vacancies: 2,\n    requirements: [\n      'MBA or equivalent experience in Product Management',\n      'Strong communication and leadership skills',\n    ],\n    jdPdf: 'https://example.com/jd/linkedin-product-manager.pdf',\n    postedBy: {\n      name: 'Eve Davis',\n    },\n  },\n  {\n    id: '7',\n    title: 'UX/UI Designer',\n    company: 'Airbnb',\n    logo: 'https:/"}, {"index": 1157, "path": "client/constants/jobs/jobData.js", "chunk": "\n    },\n  },\n  {\n    id: '7',\n    title: 'UX/UI Designer',\n    company: 'Airbnb',\n    logo: 'https://logo.clearbit.com/airbnb.com',\n    location: 'Delhi, India',\n    salary: '\u20b925,00,000 - \u20b950,00,000',\n    type: 'Full-time',\n    experience: '3-6 years',\n    skills: ['Sketch', 'Figma', 'User Research', 'Prototyping'],\n    benefits: ['Stock Options', 'Paid Time Off', 'Collaborative Team Environment'],\n    description: 'Join our design team to create world-class user experiences...',\n    postedDate:"}, {"index": 1158, "path": "client/constants/jobs/jobData.js", "chunk": ",\n    description: 'Join our design team to create world-class user experiences...',\n    postedDate: '2024-03-15',\n    department: 'Design',\n    vacancies: 3,\n    requirements: ['Proven experience in UX/UI design', 'Strong portfolio showcasing design work'],\n    jdPdf: 'https://example.com/jd/airbnb-ux-ui-designer.pdf',\n    postedBy: {\n      name: 'Frank Moore',\n    },\n  },\n  {\n    id: '8',\n    title: 'Full Stack Developer',\n    company: 'Zomato',\n    logo: 'https://logo.clearbit.com/zomato.com'"}, {"index": 1159, "path": "client/constants/jobs/jobData.js", "chunk": "tle: 'Full Stack Developer',\n    company: 'Zomato',\n    logo: 'https://logo.clearbit.com/zomato.com',\n    location: 'Gurugram, India',\n    salary: '\u20b925,00,000 - \u20b940,00,000',\n    type: 'Full-time',\n    experience: '3-6 years',\n    skills: ['React', 'Node.js', 'Express', 'MongoDB'],\n    benefits: ['Paid Sick Leave', 'Health Benefits', 'Flexible Work Schedule'],\n    description: 'Work on building scalable and efficient full-stack systems...',\n    postedDate: '2024-03-20',\n    department: 'Engineeri"}, {"index": 1160, "path": "client/constants/jobs/jobData.js", "chunk": "lable and efficient full-stack systems...',\n    postedDate: '2024-03-20',\n    department: 'Engineering',\n    vacancies: 4,\n    requirements: [\n      'Experience with JavaScript, React, Node.js, and MongoDB',\n      'Strong understanding of both frontend and backend technologies',\n    ],\n    jdPdf: 'https://example.com/jd/zomato-full-stack-developer.pdf',\n    postedBy: {\n      name: 'Grace Taylor',\n    },\n  },\n  {\n    id: '9',\n    title: 'DevOps Engineer',\n    company: 'Twitter',\n    logo: 'https:"}, {"index": 1161, "path": "client/constants/jobs/jobData.js", "chunk": "    },\n  },\n  {\n    id: '9',\n    title: 'DevOps Engineer',\n    company: 'Twitter',\n    logo: 'https://logo.clearbit.com/twitter.com',\n    location: 'Bangalore, India',\n    salary: '\u20b930,00,000 - \u20b960,00,000',\n    type: 'Full-time',\n    experience: '4-8 years',\n    skills: ['Docker', 'Kubernetes', 'AWS', 'CI/CD'],\n    benefits: ['Work From Home', 'Annual Bonus', 'Professional Development'],\n    description: 'Build and maintain our CI/CD pipelines and infrastructure...',\n    postedDate: '2024-04-01'"}, {"index": 1162, "path": "client/constants/jobs/jobData.js", "chunk": "iption: 'Build and maintain our CI/CD pipelines and infrastructure...',\n    postedDate: '2024-04-01',\n    department: 'Engineering',\n    vacancies: 3,\n    requirements: [\n      'Experience with containerization and orchestration tools like Docker and Kubernetes',\n      'Strong knowledge of AWS and cloud technologies',\n    ],\n    jdPdf: 'https://example.com/jd/twitter-devops-engineer.pdf',\n    postedBy: {\n      name: 'Henry Brown',\n    },\n  },\n  {\n    id: '10',\n    title: 'Cloud Solutions Archite"}, {"index": 1163, "path": "client/constants/jobs/jobData.js", "chunk": "edBy: {\n      name: 'Henry Brown',\n    },\n  },\n  {\n    id: '10',\n    title: 'Cloud Solutions Architect',\n    company: 'Oracle',\n    logo: 'https://logo.clearbit.com/oracle.com',\n    location: 'Hyderabad, India',\n    salary: '\u20b940,00,000 - \u20b980,00,000',\n    type: 'Full-time',\n    experience: '5-10 years',\n    skills: ['Cloud Computing', 'AWS', 'Azure', 'Terraform'],\n    benefits: ['Paid Time Off', 'Health Insurance', 'Remote Work Opportunities'],\n    description: 'Design and implement cloud archite"}, {"index": 1164, "path": "client/constants/jobs/jobData.js", "chunk": "ealth Insurance', 'Remote Work Opportunities'],\n    description: 'Design and implement cloud architectures for enterprise solutions...',\n    postedDate: '2024-04-05',\n    department: 'Engineering',\n    vacancies: 2,\n    requirements: [\n      'Experience designing cloud solutions with AWS or Azure',\n      'Strong knowledge of infrastructure as code using Terraform',\n    ],\n    jdPdf: 'https://example.com/jd/oracle-cloud-solutions-architect.pdf',\n    postedBy: {\n      name: 'Ivy Green',\n    },\n  }"}, {"index": 1165, "path": "client/constants/jobs/jobData.js", "chunk": "le.com/jd/oracle-cloud-solutions-architect.pdf',\n    postedBy: {\n      name: 'Ivy Green',\n    },\n  },\n];\n"}, {"index": 1166, "path": "client/constants/messageData.js", "chunk": "export const sampleMessages = [\n  {\n    id: 1,\n    type: 'text',\n    text: 'Hey! How are you?',\n    sender: 'them',\n    timestamp: new Date('2024-01-10T10:00:00').getTime(),\n  },\n  {\n    id: 2,\n    type: 'text',\n    text: \"I'm doing great! Just got back from my trip.\",\n    sender: 'me',\n    timestamp: new Date('2024-01-10T10:01:00').getTime(),\n  },\n  {\n    id: 3,\n    type: 'image',\n    uri: 'https://picsum.photos/400/300',\n    sender: 'me',\n    timestamp: new Date('2024-01-10T10:02:00').getTime("}, {"index": 1167, "path": "client/constants/messageData.js", "chunk": "://picsum.photos/400/300',\n    sender: 'me',\n    timestamp: new Date('2024-01-10T10:02:00').getTime(),\n  },\n  {\n    id: 4,\n    type: 'text',\n    text: 'Wow, that looks amazing! Where was this taken?',\n    sender: 'them',\n    timestamp: new Date('2024-01-10T10:03:00').getTime(),\n  },\n  {\n    id: 5,\n    type: 'audio',\n    uri: 'https://www2.cs.uic.edu/~i101/SoundFiles/StarWars60.wav',\n    sender: 'them',\n    timestamp: new Date('2024-01-10T10:04:00').getTime(),\n  },\n  {\n    id: 6,\n    type: 'docum"}, {"index": 1168, "path": "client/constants/messageData.js", "chunk": "hem',\n    timestamp: new Date('2024-01-10T10:04:00').getTime(),\n  },\n  {\n    id: 6,\n    type: 'document',\n    fileName: 'Trip_Itinerary.pdf',\n    fileSize: 2048 * 1024, // 2MB\n    uri: 'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf',\n    sender: 'me',\n    timestamp: new Date('2024-01-10T10:05:00').getTime(),\n  },\n  {\n    id: 7,\n    type: 'text',\n    text: \"Here's another photo from the beach \ud83c\udfd6\ufe0f\",\n    sender: 'me',\n    timestamp: new Date('2024-01-10T10:06:00').getTime()"}, {"index": 1169, "path": "client/constants/messageData.js", "chunk": "photo from the beach \ud83c\udfd6\ufe0f\",\n    sender: 'me',\n    timestamp: new Date('2024-01-10T10:06:00').getTime(),\n  },\n  {\n    id: 8,\n    type: 'image',\n    uri: 'https://picsum.photos/400/301',\n    sender: 'me',\n    timestamp: new Date('2024-01-10T10:07:00').getTime(),\n  },\n  {\n    id: 9,\n    type: 'audio',\n    uri: 'https://www2.cs.uic.edu/~i101/SoundFiles/CantinaBand60.wav',\n    sender: 'me',\n    timestamp: new Date('2024-01-10T10:08:00').getTime(),\n  },\n  {\n    id: 10,\n    type: 'document',\n    fileName"}, {"index": 1170, "path": "client/constants/messageData.js", "chunk": ": new Date('2024-01-10T10:08:00').getTime(),\n  },\n  {\n    id: 10,\n    type: 'document',\n    fileName: 'Travel_Expenses.xlsx',\n    fileSize: 1536 * 1024, // 1.5MB\n    uri: 'https://file-examples.com/storage/fe8c7eef0c6364f6c9504cc/2017/02/file_example_XLSX_50.xlsx',\n    sender: 'them',\n    timestamp: new Date('2024-01-10T10:09:00').getTime(),\n  },\n];\n"}, {"index": 1171, "path": "client/constants/posts/demoPostSchema.js", "chunk": "const mongoose = require('mongoose');\nconst { Schema } = mongoose;\n\n// Schema for Comments\nconst CommentSchema = new Schema({\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  text: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now },\n});\n\n// Main Post Schema\nconst PostSchema = new Schema({\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true }, // User who created the post\n  text: { type: String, required: true }, // Post text"}, {"index": 1172, "path": "client/constants/posts/demoPostSchema.js", "chunk": "equired: true }, // User who created the post\n  text: { type: String, required: true }, // Post text\n  media: [\n    {\n      type: { type: String, enum: ['image', 'video'], required: true },\n      url: { type: String, required: true }, // URL of the media\n    },\n  ],\n  likes: [\n    {\n      userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n    },\n  ],\n  comments: [CommentSchema], // Embedded comments\n  shares: { type: Number, default: 0 }, // Number\n  createdAt: { type: Date, d"}, {"index": 1173, "path": "client/constants/posts/demoPostSchema.js", "chunk": " // Embedded comments\n  shares: { type: Number, default: 0 }, // Number\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\n// Create and export the Post model\nconst Post = mongoose.model('Post', PostSchema);\n\nmodule.exports = Post;\n"}, {"index": 1174, "path": "client/constants/posts/myPost.js", "chunk": "export const myPost = [\n  {\n    userId: '60fbbf8c61bcd043c4f9b448',\n    text: 'Had an amazing time at the tech conference today! Learned a lot about the future of AI and met some incredible people.',\n    media: [\n      {\n        type: 'image',\n        url: 'https://example.com/tech-conference.jpg',\n        description: 'Tech Conference Highlights',\n      },\n    ],\n    likes: [{ userId: '60fbbf8c61bcd043c4f9b449' }, { userId: '60fbbf8c61bcd043c4f9b450' }],\n    comments: [\n      {\n        userId: "}, {"index": 1175, "path": "client/constants/posts/myPost.js", "chunk": "bcd043c4f9b449' }, { userId: '60fbbf8c61bcd043c4f9b450' }],\n    comments: [\n      {\n        userId: '60fbbf8c61bcd043c4f9b451',\n        text: \"That sounds amazing! Can't wait to attend next year.\",\n        likes: [{ userId: '60fbbf8c61bcd043c4f9b450' }],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        userId: '60fbbf8c61bcd043c4f9b452',\n        text: 'AI is definitely the future! Glad you enjoyed it.',\n        likes: [],\n        createdAt: new Date(),\n     "}, {"index": 1176, "path": "client/constants/posts/myPost.js", "chunk": "efinitely the future! Glad you enjoyed it.',\n        likes: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ],\n    reactions: [\n      { userId: '60fbbf8c61bcd043c4f9b449', type: 'like' },\n      { userId: '60fbbf8c61bcd043c4f9b450', type: 'love' },\n    ],\n    shares: [{ userId: '60fbbf8c61bcd043c4f9b453', sharedAt: new Date() }],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    userId: '60fbbf8c61bcd043c4f9b454',\n    text: 'Just finished reading a "}, {"index": 1177, "path": "client/constants/posts/myPost.js", "chunk": "At: new Date(),\n  },\n  {\n    userId: '60fbbf8c61bcd043c4f9b454',\n    text: 'Just finished reading a great book on machine learning. Highly recommend it to anyone interested in AI.',\n    media: [\n      {\n        type: 'image',\n        url: 'https://example.com/machine-learning-book.jpg',\n        description: 'Machine Learning Book',\n      },\n    ],\n    likes: [{ userId: '60fbbf8c61bcd043c4f9b455' }, { userId: '60fbbf8c61bcd043c4f9b456' }],\n    comments: [\n      {\n        userId: '60fbbf8c61bcd043"}, {"index": 1178, "path": "client/constants/posts/myPost.js", "chunk": ", { userId: '60fbbf8c61bcd043c4f9b456' }],\n    comments: [\n      {\n        userId: '60fbbf8c61bcd043c4f9b457',\n        text: \"I have this book! It's amazing.\",\n        likes: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ],\n    reactions: [\n      { userId: '60fbbf8c61bcd043c4f9b455', type: 'like' },\n      { userId: '60fbbf8c61bcd043c4f9b456', type: 'love' },\n    ],\n    shares: [{ userId: '60fbbf8c61bcd043c4f9b458', sharedAt: new Date() }],\n    createdAt: new Date"}, {"index": 1179, "path": "client/constants/posts/myPost.js", "chunk": "\n    shares: [{ userId: '60fbbf8c61bcd043c4f9b458', sharedAt: new Date() }],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    userId: '60fbbf8c61bcd043c4f9b459',\n    text: \"Excited to start a new project on AI-powered chatbots. Can't wait to see how it turns out!\",\n    media: [\n      {\n        type: 'image',\n        url: 'https://example.com/ai-chatbot.jpg',\n        description: 'AI Chatbot Project',\n      },\n    ],\n    likes: [{ userId: '60fbbf8c61bcd043c4f9b460' }, { userId: "}, {"index": 1180, "path": "client/constants/posts/myPost.js", "chunk": "'AI Chatbot Project',\n      },\n    ],\n    likes: [{ userId: '60fbbf8c61bcd043c4f9b460' }, { userId: '60fbbf8c61bcd043c4f9b461' }],\n    comments: [\n      {\n        userId: '60fbbf8c61bcd043c4f9b462',\n        text: 'Sounds like a great project! Good luck!',\n        likes: [{ userId: '60fbbf8c61bcd043c4f9b461' }],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ],\n    reactions: [\n      { userId: '60fbbf8c61bcd043c4f9b460', type: 'like' },\n      { userId: '60fbbf8c61bcd04"}, {"index": 1181, "path": "client/constants/posts/myPost.js", "chunk": "ions: [\n      { userId: '60fbbf8c61bcd043c4f9b460', type: 'like' },\n      { userId: '60fbbf8c61bcd043c4f9b461', type: 'love' },\n    ],\n    shares: [{ userId: '60fbbf8c61bcd043c4f9b463', sharedAt: new Date() }],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    userId: '60fbbf8c61bcd043c4f9b464',\n    text: 'Just published my latest blog post on the role of AI in healthcare. Check it out!',\n    media: [\n      {\n        type: 'image',\n        url: 'https://example.com/ai-healthcare"}, {"index": 1182, "path": "client/constants/posts/myPost.js", "chunk": "t out!',\n    media: [\n      {\n        type: 'image',\n        url: 'https://example.com/ai-healthcare.jpg',\n        description: 'AI in Healthcare Blog Post',\n      },\n    ],\n    likes: [{ userId: '60fbbf8c61bcd043c4f9b465' }, { userId: '60fbbf8c61bcd043c4f9b466' }],\n    comments: [\n      {\n        userId: '60fbbf8c61bcd043c4f9b467',\n        text: \"I'll definitely check it out. I'm interested in how AI is being used in healthcare.\",\n        likes: [],\n        createdAt: new Date(),\n        update"}, {"index": 1183, "path": "client/constants/posts/myPost.js", "chunk": "w AI is being used in healthcare.\",\n        likes: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ],\n    reactions: [\n      { userId: '60fbbf8c61bcd043c4f9b465', type: 'like' },\n      { userId: '60fbbf8c61bcd043c4f9b466', type: 'love' },\n    ],\n    shares: [{ userId: '60fbbf8c61bcd043c4f9b468', sharedAt: new Date() }],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n];\n"}, {"index": 1184, "path": "client/constants/posts/myPost.js", "chunk": "ate(),\n  },\n];\n"}, {"index": 1185, "path": "client/constants/posts/postData.js", "chunk": "export const posts = [\n  {\n    userId: '60fbbf8c61bcd043c4f9b431', // Example user ID\n    text: '# h1 Heading\\n## h2 Heading\\n### h3 Heading\\n#### h4 Heading\\n##### h5 Heading\\n###### h6 Heading\\n\\nSome text above\\n___\\n\\nSome text in the middle\\n\\n---\\n\\nSome text below\\n\\n**This is bold text**\\n\\n__This is bold text__\\n\\n*This is italic text*\\n\\n_This is italic text_\\n\\n~~Strikethrough~~\\n\\n> Blockquotes can also be nested...\\n>> ...by using additional greater-than signs right next to each oth"}, {"index": 1186, "path": "client/constants/posts/postData.js", "chunk": "ockquotes can also be nested...\\n>> ...by using additional greater-than signs right next to each other...\\n> > > ...or with spaces between arrows.\\n\\nUnordered Lists\\n+ Create a list by starting a line with +, -, or *\\n+ Sub-lists are made by indenting 2 spaces:\\n  - Marker character change forces new list start:\\n    * Ac tristique libero volutpat at\\n    + Facilisis in pretium nisl aliquet. This is a very long list item that will surely wrap onto the next line.\\n    - Nulla volutpat aliquam ve"}, {"index": 1187, "path": "client/constants/posts/postData.js", "chunk": " is a very long list item that will surely wrap onto the next line.\\n    - Nulla volutpat aliquam velit\\n+ Very easy!\\n\\nOrdered Lists\\n1. Lorem ipsum dolor sit amet\\n2. Consectetur adipiscing elit. This is a very long list item that will surely wrap onto the next line.\\n3. Integer molestie lorem at massa\\n\\nStart numbering with offset:\\n57. foo\\n58. bar\\n\\nInline `code`\\n\\nIndented code\\n    \\/\\/ Some comments\\n    line 1 of code\\n    line 2 of code\\n    line 3 of code\\n\\nBlock code \\\"fences\\\"\\"}, {"index": 1188, "path": "client/constants/posts/postData.js", "chunk": " Some comments\\n    line 1 of code\\n    line 2 of code\\n    line 3 of code\\n\\nBlock code \\\"fences\\\"\\n```\\nSample text here...\\n```\\n\\nSyntax highlighting\\n```js\\nvar foo = function (bar) {\\n    return bar++;\\n};\\nconsole.log(foo(5));\\n```\\n\\n| Option | Description |\\n| ------ | ----------- |\\n| data   | path to data files to supply the data that will be passed into templates. |\\n| engine | engine to be used for processing templates. Handlebars is the default. |\\n| ext    | extension to be used f"}, {"index": 1189, "path": "client/constants/posts/postData.js", "chunk": "to be used for processing templates. Handlebars is the default. |\\n| ext    | extension to be used for dest files. |\\n\\nRight aligned columns\\n| Option | Description |\\n| ------:| -----------:|\\n| data   | path to data files to supply the data that will be passed into templates. |\\n| engine | engine to be used for processing templates. Handlebars is the default. |\\n| ext    | extension to be used for dest files. |\\n\\n[link text](https:\\/\\/www.google.com)\\n\\n[link with title](https:\\/\\/www.google"}, {"index": 1190, "path": "client/constants/posts/postData.js", "chunk": "for dest files. |\\n\\n[link text](https:\\/\\/www.google.com)\\n\\n[link with title](https:\\/\\/www.google.com \\\"title text!\\\")\\n\\nAutoconverted link https:\\/\\/www.google.com (enable linkify to see)',\n    media: [\n      {\n        type: 'image',\n        url: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSihkidiHiRhlnlL4a9OusGoj7XMP-aY03-8g&s',\n        description: 'Project Launch Image',\n      },\n    ],\n    likes: [\n      { userId: '60fbbf8c61bcd043c4f9b432' }, // User 1\n      { userId: '60fbb"}, {"index": 1191, "path": "client/constants/posts/postData.js", "chunk": ",\n    ],\n    likes: [\n      { userId: '60fbbf8c61bcd043c4f9b432' }, // User 1\n      { userId: '60fbbf8c61bcd043c4f9b433' }, // User 2\n    ],\n    comments: [\n      {\n        userId: '60fbbf8c61bcd043c4f9b434', // User 3\n        text: \"Can't wait to see it!\",\n        likes: [\n          { userId: '60fbbf8c61bcd043c4f9b433' }, // User 2 liked the comment\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        userId: '60fbbf8c61bcd043c4f9b435', // User 4\n   "}, {"index": 1192, "path": "client/constants/posts/postData.js", "chunk": "   updatedAt: new Date(),\n      },\n      {\n        userId: '60fbbf8c61bcd043c4f9b435', // User 4\n        text: 'Awesome, keep up the great work!',\n        likes: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ],\n    reactions: [\n      { userId: '60fbbf8c61bcd043c4f9b432', type: 'like' }, // User 1 liked the post\n      { userId: '60fbbf8c61bcd043c4f9b433', type: 'love' }, // User 2 loved the post\n    ],\n    shares: [\n      { userId: '60fbbf8c61bcd043c4f9b436', shar"}, {"index": 1193, "path": "client/constants/posts/postData.js", "chunk": "e' }, // User 2 loved the post\n    ],\n    shares: [\n      { userId: '60fbbf8c61bcd043c4f9b436', sharedAt: new Date() }, // User 5 shared the post\n    ],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    userId: '60fbbf8c61bcd043c4f9b437', // Example user ID\n    text: 'Just received an offer from XYZ Corp! Looking forward to this new chapter in my career.',\n    media: [\n      {\n        type: 'image',\n        url: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSihkidiHiRhl"}, {"index": 1194, "path": "client/constants/posts/postData.js", "chunk": "     type: 'image',\n        url: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSihkidiHiRhlnlL4a9OusGoj7XMP-aY03-8g&s',\n        description: 'Offer Letter',\n      },\n      {\n        type: 'video',\n        url: 'https://static.vecteezy.com/system/resources/previews/027/939/550/mp4/earphone-and-mobile-phone-3d-rendering-video.mp4',\n        description: 'Celebration Video',\n      },\n    ],\n    likes: [\n      { userId: '60fbbf8c61bcd043c4f9b438' }, // User 6\n      { userId: '60fbbf8c61bcd04"}, {"index": 1195, "path": "client/constants/posts/postData.js", "chunk": "   likes: [\n      { userId: '60fbbf8c61bcd043c4f9b438' }, // User 6\n      { userId: '60fbbf8c61bcd043c4f9b439' }, // User 7\n    ],\n    comments: [\n      {\n        userId: '60fbbf8c61bcd043c4f9b440', // User 8\n        text: 'Congrats! Well deserved!',\n        likes: [\n          { userId: '60fbbf8c61bcd043c4f9b438' }, // User 6 liked the comment\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ],\n    reactions: [\n      { userId: '60fbbf8c61bcd043c4f9b439', type"}, {"index": 1196, "path": "client/constants/posts/postData.js", "chunk": "tedAt: new Date(),\n      },\n    ],\n    reactions: [\n      { userId: '60fbbf8c61bcd043c4f9b439', type: 'wow' }, // User 7 was wowed by the post\n      { userId: '60fbbf8c61bcd043c4f9b438', type: 'like' }, // User 6 liked the post\n    ],\n    shares: [\n      { userId: '60fbbf8c61bcd043c4f9b441', sharedAt: new Date() }, // User 9 shared the post\n    ],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n  {\n    userId: '60fbbf8c61bcd043c4f9b442', // Example user ID\n    text: 'Completed my firs"}, {"index": 1197, "path": "client/constants/posts/postData.js", "chunk": "(),\n  },\n  {\n    userId: '60fbbf8c61bcd043c4f9b442', // Example user ID\n    text: 'Completed my first marathon today! A huge milestone in my fitness journey.',\n    media: [\n      {\n        type: 'image',\n        url: 'https://example.com/marathon-photo.jpg',\n        description: 'Marathon Finish Line',\n      },\n    ],\n    likes: [\n      { userId: '60fbbf8c61bcd043c4f9b443' }, // User 10\n      { userId: '60fbbf8c61bcd043c4f9b444' }, // User 11\n    ],\n    comments: [\n      {\n        userId: '60fbb"}, {"index": 1198, "path": "client/constants/posts/postData.js", "chunk": "erId: '60fbbf8c61bcd043c4f9b444' }, // User 11\n    ],\n    comments: [\n      {\n        userId: '60fbbf8c61bcd043c4f9b445', // User 12\n        text: 'Incredible, well done!',\n        likes: [\n          { userId: '60fbbf8c61bcd043c4f9b444' }, // User 11 liked the comment\n        ],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        userId: '60fbbf8c61bcd043c4f9b446', // User 13\n        text: 'Such an inspiring accomplishment!',\n        likes: [],\n        createdA"}, {"index": 1199, "path": "client/constants/posts/postData.js", "chunk": "', // User 13\n        text: 'Such an inspiring accomplishment!',\n        likes: [],\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ],\n    reactions: [\n      { userId: '60fbbf8c61bcd043c4f9b443', type: 'love' }, // User 10 loved the post\n      { userId: '60fbbf8c61bcd043c4f9b444', type: 'like' }, // User 11 liked the post\n    ],\n    shares: [\n      { userId: '60fbbf8c61bcd043c4f9b447', sharedAt: new Date() }, // User 14 shared the post\n    ],\n    createdAt: new Date(),"}, {"index": 1200, "path": "client/constants/posts/postData.js", "chunk": "cd043c4f9b447', sharedAt: new Date() }, // User 14 shared the post\n    ],\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  },\n];\n"}, {"index": 1201, "path": "client/constants/profileData.js", "chunk": "export const DEFAULT_ALUMNI_DATA = {\n  name: 'Rajesh Kumar',\n  username: '@rajeshk',\n  profilePicture: 'https://picsum.photos/200',\n  coverPhoto: 'https://picsum.photos/800/200',\n  bio: 'Passionate alumnus and tech enthusiast with over 5 years of experience in software development. Currently leading innovative projects at TCS. Dedicated to mentoring young developers and contributing to open-source projects. Check out my work at github.com/rajeshk',\n  followers: 1234,\n  following: 567,\n  posts: 4"}, {"index": 1202, "path": "client/constants/profileData.js", "chunk": " projects. Check out my work at github.com/rajeshk',\n  followers: 1234,\n  following: 567,\n  posts: 42,\n  recentPosts: [\n    { id: '1', image: 'https://picsum.photos/400?random=1', likes: 234 },\n    { id: '2', image: 'https://picsum.photos/400?random=2', likes: 187 },\n    { id: '3', image: 'https://picsum.photos/400?random=3', likes: 342 },\n  ],\n  workExperience: [\n    {\n      company: 'Tata Consultancy Services',\n      position: 'Senior Software Engineer',\n      duration: '2020 - Present',\n     "}, {"index": 1203, "path": "client/constants/profileData.js", "chunk": "tancy Services',\n      position: 'Senior Software Engineer',\n      duration: '2020 - Present',\n      description:\n        'Leading a team of 12 developers working on cutting-edge cloud solutions. Implemented microservices architecture that reduced deployment time by 60%. Mentoring junior developers and establishing best practices for code quality and testing.',\n    },\n    {\n      company: 'Infosys',\n      position: 'Software Developer',\n      duration: '2018 - 2020',\n      description: 'Develope"}, {"index": 1204, "path": "client/constants/profileData.js", "chunk": "',\n      position: 'Software Developer',\n      duration: '2018 - 2020',\n      description: 'Developed enterprise applications and web services',\n    },\n  ],\n  education: [\n    {\n      degree: 'M.Tech in Computer Science',\n      graduationYear: 2021,\n      university: 'Indian Institute of Technology, Delhi',\n      gpa: '9.2/10.0',\n    },\n    {\n      degree: 'B.Tech in Computer Science',\n      graduationYear: 2019,\n      university: 'National Institute of Technology, Trichy',\n      gpa: '9.4/10.0'"}, {"index": 1205, "path": "client/constants/profileData.js", "chunk": "ationYear: 2019,\n      university: 'National Institute of Technology, Trichy',\n      gpa: '9.4/10.0',\n    },\n  ],\n  skills: ['React Native', 'JavaScript', 'Python', 'AWS', 'UI/UX Design'],\n  certifications: [\n    { name: 'AWS Certified Developer', year: 2023 },\n    { name: 'Google Cloud Professional', year: 2022 },\n  ],\n  location: {\n    city: 'Bangalore',\n    state: 'Karnataka',\n    country: 'India',\n  },\n  joinedYear: 2018,\n  batch: '2019-2023',\n  department: 'Computer Science & Engineering',\n"}, {"index": 1206, "path": "client/constants/profileData.js", "chunk": "ia',\n  },\n  joinedYear: 2018,\n  batch: '2019-2023',\n  department: 'Computer Science & Engineering',\n  rollNumber: 'CS19B023',\n  languages: [\n    { name: 'English', level: 'Professional' },\n    { name: 'Hindi', level: 'Native' },\n    { name: 'Kannada', level: 'Intermediate' },\n  ],\n  achievements: [\n    {\n      title: 'Best Graduate Thesis',\n      year: 2023,\n      description: 'Awarded for research in AI/ML applications',\n    },\n    {\n      title: \"Dean's List\",\n      year: '2020-2023',\n      de"}, {"index": 1207, "path": "client/constants/profileData.js", "chunk": "h in AI/ML applications',\n    },\n    {\n      title: \"Dean's List\",\n      year: '2020-2023',\n      description: 'Maintained top 5% academic standing',\n    },\n    {\n      title: 'Hackathon Winner',\n      year: 2022,\n      description: 'First place in University Tech Challenge',\n    },\n  ],\n  projects: [\n    {\n      name: 'Smart Campus App',\n      role: 'Team Lead',\n      year: 2023,\n      technologies: ['React Native', 'Node.js', 'MongoDB'],\n      description: \"Led development of university's offi"}, {"index": 1208, "path": "client/constants/profileData.js", "chunk": "es: ['React Native', 'Node.js', 'MongoDB'],\n      description: \"Led development of university's official mobile app\",\n      link: 'github.com/project',\n    },\n    {\n      name: 'AI Research Assistant',\n      role: 'Developer',\n      year: 2022,\n      technologies: ['Python', 'TensorFlow', 'AWS'],\n      description: 'Built ML model for academic paper analysis',\n      link: 'github.com/project2',\n    },\n  ],\n  socialLinks: {\n    linkedin: 'linkedin.com/johndoe',\n    github: 'github.com/johndoe',\n "}, {"index": 1209, "path": "client/constants/profileData.js", "chunk": "  },\n  ],\n  socialLinks: {\n    linkedin: 'linkedin.com/johndoe',\n    github: 'github.com/johndoe',\n    portfolio: 'johndoe.dev',\n    twitter: 'twitter.com/johndoe',\n  },\n  interests: ['Machine Learning', 'Open Source', 'Tech Mentoring', 'Robotics'],\n  volunteerWork: [\n    {\n      organization: 'Code for Good',\n      role: 'Technical Mentor',\n      duration: '2021 - Present',\n      description: 'Mentoring undergrad students in web development',\n    },\n  ],\n  position: 'Senior Software Engineer @ "}, {"index": 1210, "path": "client/constants/profileData.js", "chunk": "ntoring undergrad students in web development',\n    },\n  ],\n  position: 'Senior Software Engineer @ Tata Consultancy Services',\n  email: 'rajesh.kumar@tcs.com',\n  phone: '+91 98765 43210',\n  availability: 'Open to mentoring',\n  stats: {\n    posts: 42,\n    followers: 1234,\n    following: 567,\n    connections: 892,\n  },\n  quickLinks: {\n    resume: 'https://resume.com/johndoe',\n    portfolio: 'https://johndoe.dev',\n    calendar: 'https://cal.com/johndoe',\n  },\n};\n"}, {"index": 1211, "path": "client/constants/profileData.js", "chunk": "//johndoe.dev',\n    calendar: 'https://cal.com/johndoe',\n  },\n};\n"}, {"index": 1212, "path": "client/constants/users/demoCollegeSchema.js", "chunk": "const mongoose = require('mongoose');\n\nconst collegeSchema = new mongoose.Schema({\n  name: { type: String, required: true }, // College name\n  email: { type: String, required: true, unique: true }, // Login email for the college\n  password: { type: String, required: true }, // Hashed password for secure login\n  logo: { type: String }, // URL or path to the college logo\n  address: { type: String }, // College address\n  website: { type: String }, // Official website URL\n  contactNumber: { type: St"}, {"index": 1213, "path": "client/constants/users/demoCollegeSchema.js", "chunk": " // College address\n  website: { type: String }, // Official website URL\n  contactNumber: { type: String }, // College contact number\n\n  // Prestigious Information\n  accreditation: { type: String }, // Accreditation info (e.g., NAAC, NBA)\n  ranking: { type: String }, // College ranking info\n  establishedYear: { type: Number }, // Year the college was established\n  coursesOffered: { type: [String] }, // List of courses offered\n\n  // Branding\n  missionStatement: { type: String }, // Mission statem"}, {"index": 1214, "path": "client/constants/users/demoCollegeSchema.js", "chunk": "}, // List of courses offered\n\n  // Branding\n  missionStatement: { type: String }, // Mission statement of the college\n  visionStatement: { type: String }, // Vision statement of the college\n  tagline: { type: String }, // College tagline\n  banners: [{ type: String }], // URLs of promotional banners or images\n\n  // Connection with Alumni System\n  alumniCount: { type: Number, default: 0 }, // Total number of alumni\n  registeredAlumni: [\n    { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, /"}, {"index": 1215, "path": "client/constants/users/demoCollegeSchema.js", "chunk": " number of alumni\n  registeredAlumni: [\n    { type: mongoose.Schema.Types.ObjectId, ref: 'User' }, // Linked alumni users\n  ],\n\n  createdAt: { type: Date, default: Date.now },\n});\n\nmodule.exports = mongoose.model('College', collegeSchema);\n"}, {"index": 1216, "path": "client/constants/users/demoUserSchema.js", "chunk": "const mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  fullName: { type: String, required: true }, // Full name of the user\n  email: { type: String, required: true, unique: true }, // Unique email\n  password: { type: String, required: true }, // The actual password (hashed)\n  isUniversityGeneratedPassword: { type: Boolean, default: true }, // Tracks if the password is still the default\n  profilePhoto: { type: String }, // URL or path to profile photo\n\n  // Resume-relat"}, {"index": 1217, "path": "client/constants/users/demoUserSchema.js", "chunk": "ill the default\n  profilePhoto: { type: String }, // URL or path to profile photo\n\n  // Resume-related fields\n  phone: { type: String }, // Phone number\n  address: { type: String }, // Address extracted from the resume\n  education: [\n    {\n      degree: { type: String },\n      institution: { type: String },\n      yearOfGraduation: { type: Number, default: null }, // null indicates ongoing\n    },\n  ],\n  workExperience: [\n    {\n      companyName: { type: String },\n      role: { type: String },\n   "}, {"index": 1218, "path": "client/constants/users/demoUserSchema.js", "chunk": " ],\n  workExperience: [\n    {\n      companyName: { type: String },\n      role: { type: String },\n      startDate: { type: Date },\n      endDate: { type: Date, default: null }, // null indicates ongoing\n      description: { type: String },\n    },\n  ],\n  skills: { type: [String] }, // Array of skills\n  projects: [\n    {\n      title: { type: String },\n      description: { type: String },\n      link: { type: String },\n    },\n  ],\n  certifications: [\n    {\n      name: { type: String },\n      issuingO"}, {"index": 1219, "path": "client/constants/users/demoUserSchema.js", "chunk": "{ type: String },\n    },\n  ],\n  certifications: [\n    {\n      name: { type: String },\n      issuingOrganization: { type: String },\n      issueDate: { type: Date },\n    },\n  ],\n  languages: { type: [String] }, // Languages the user knows\n\n  // Location\n  location: {\n    latitude: { type: Number },\n    longitude: { type: Number },\n  },\n\n  // Connections and requests\n  connections: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }], // List of connected users\n  receivedRequests: [{ type: mongo"}, {"index": 1220, "path": "client/constants/users/demoUserSchema.js", "chunk": "Schema.Types.ObjectId, ref: 'User' }], // List of connected users\n  receivedRequests: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }], // Users who sent connection requests\n  sentRequests: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }], // Users to whom requests were sent\n\n  notifications: { type: [String] }, // Array of notification messages\n\n  bio: { type: String }, // Short bio or summary\n  interests: { type: [String] }, // List of interests\n  website: { type: String }, // Pe"}, {"index": 1221, "path": "client/constants/users/demoUserSchema.js", "chunk": " or summary\n  interests: { type: [String] }, // List of interests\n  website: { type: String }, // Personal or professional website\n\n  createdAt: { type: Date, default: Date.now }, // Date of account creation\n});\n\nmodule.exports = mongoose.model('User', userSchema);\n"}, {"index": 1222, "path": "client/eas.json", "chunk": "{\n  \"cli\": {\n    \"version\": \">= 12.6.2\",\n    \"appVersionSource\": \"remote\"\n  },\n  \"build\": {\n    \"development\": {\n      \"developmentClient\": true,\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    },\n    \"preview\": {\n      \"distribution\": \"internal\",\n      \"android\": {\n        \"buildType\": \"apk\"\n      }\n    },\n    \"production\": {\n      \"autoIncrement\": true\n    }\n  },\n  \"submit\": {\n    \"production\": {}\n  }\n}\n"}, {"index": 1223, "path": "client/eas.json", "chunk": "\n    }\n  },\n  \"submit\": {\n    \"production\": {}\n  }\n}\n"}, {"index": 1224, "path": "client/global.css", "chunk": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n"}, {"index": 1225, "path": "client/i18n/i18n.js", "chunk": "import AsyncStorage from '@react-native-async-storage/async-storage';\nimport i18 from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport en from './locales/en';\nimport hi from './locales/hi';\n\nexport const LANGUAGES = [\n  { code: 'en', label: 'English' },\n  { code: 'hi', label: '\u0939\u093f\u0902\u0926\u0940' },\n];\n\ni18.use(initReactI18next).init({\n  compatibilityJSON: 'v3',\n  resources: {\n    en: { translation: en },\n    hi: { translation: hi },\n  },\n  lng: 'en',\n  fallbackLng: 'en',\n  interpolation:"}, {"index": 1226, "path": "client/i18n/i18n.js", "chunk": "nslation: en },\n    hi: { translation: hi },\n  },\n  lng: 'en',\n  fallbackLng: 'en',\n  interpolation: {\n    escapeValue: false,\n  },\n  react: {\n    useSuspense: false,\n  },\n});\n\nexport const changeLanguage = async (language) => {\n  try {\n    await AsyncStorage.setItem('user-language', language);\n    await i18.changeLanguage(language);\n  } catch (error) {\n    console.log('Error changing language:', error);\n  }\n};\n\nexport default i18;\n"}, {"index": 1227, "path": "client/i18n/i18n.js", "chunk": "error);\n  }\n};\n\nexport default i18;\n"}, {"index": 1228, "path": "client/i18n/locales/en.js", "chunk": "export default {\n  common: {\n    search: 'Search...',\n  },\n  auth: {\n    login: 'Login',\n    register: 'Register',\n    email: 'Email',\n    password: 'Password',\n    name: 'Name',\n    noAccount: \"Don't have an account? Register\",\n    haveAccount: 'Already have an account? Login',\n    registerButton: 'Register',\n    loginButton: 'Login',\n  },\n  home: {\n    welcome: 'Welcome to Alumni Connect',\n    network: 'Network & Opportunities',\n    events: 'Events & Updates',\n  },\n  profile: {\n    edit: 'Edit"}, {"index": 1229, "path": "client/i18n/locales/en.js", "chunk": "etwork: 'Network & Opportunities',\n    events: 'Events & Updates',\n  },\n  profile: {\n    edit: 'Edit Profile',\n    connect: 'Connect',\n    message: 'Message',\n  },\n};\n"}, {"index": 1230, "path": "client/i18n/locales/hi.js", "chunk": "export default {\n  common: {\n    search: '\u0916\u094b\u091c\u0947\u0902...',\n  },\n  auth: {\n    login: '\u0932\u0949\u0917 \u0907\u0928',\n    register: '\u092a\u0902\u091c\u0940\u0915\u0930\u0923',\n    email: '\u0908\u092e\u0947\u0932',\n    password: '\u092a\u093e\u0938\u0935\u0930\u094d\u0921',\n    name: '\u0928\u093e\u092e',\n    noAccount: '\u0916\u093e\u0924\u093e \u0928\u0939\u0940\u0902 \u0939\u0948? \u092a\u0902\u091c\u0940\u0915\u0930\u0923 \u0915\u0930\u0947\u0902',\n    haveAccount: '\u092a\u0939\u0932\u0947 \u0938\u0947 \u0916\u093e\u0924\u093e \u0939\u0948? \u0932\u0949\u0917 \u0907\u0928 \u0915\u0930\u0947\u0902',\n    registerButton: '\u092a\u0902\u091c\u0940\u0915\u0930\u0923 \u0915\u0930\u0947\u0902',\n    loginButton: '\u0932\u0949\u0917 \u0907\u0928 \u0915\u0930\u0947\u0902',\n  },\n  home: {\n    welcome: '\u090f\u0932\u0941\u092e\u0928\u0940 \u0915\u0928\u0947\u0915\u094d\u091f \u092e\u0947\u0902 \u0906\u092a\u0915\u093e \u0938\u094d\u0935\u093e\u0917\u0924 \u0939\u0948',\n    network: '\u0928\u0947\u091f\u0935\u0930\u094d\u0915 \u0914\u0930 \u0905\u0935\u0938\u0930',\n    events: '\u0915\u093e\u0930\u094d\u092f\u0915\u094d\u0930\u092e \u0914\u0930 \u0905\u092a\u0921\u0947\u091f',\n  },\n  profile: {\n    edit: '\u092a\u094d\u0930\u094b"}, {"index": 1231, "path": "client/i18n/locales/hi.js", "chunk": "\n    network: '\u0928\u0947\u091f\u0935\u0930\u094d\u0915 \u0914\u0930 \u0905\u0935\u0938\u0930',\n    events: '\u0915\u093e\u0930\u094d\u092f\u0915\u094d\u0930\u092e \u0914\u0930 \u0905\u092a\u0921\u0947\u091f',\n  },\n  profile: {\n    edit: '\u092a\u094d\u0930\u094b\u092b\u093c\u093e\u0907\u0932 \u0938\u0902\u092a\u093e\u0926\u093f\u0924 \u0915\u0930\u0947\ufffd\ufffd',\n    connect: '\u0915\u0928\u0947\u0915\u094d\u091f \u0915\u0930\u0947\u0902',\n    message: '\u0938\u0902\u0926\u0947\u0936',\n  },\n};\n"}, {"index": 1232, "path": "client/metro.config.js", "chunk": "const { getDefaultConfig } = require('expo/metro-config');\nconst { withNativeWind } = require('nativewind/metro');\n\n// eslint-disable-next-line no-undef\nconst config = getDefaultConfig(__dirname);\n\nmodule.exports = withNativeWind(config, { input: './global.css' });\n"}, {"index": 1233, "path": "client/nativewind-env.d.ts", "chunk": "/// <reference types=\"nativewind/types\" />\n\n// NOTE: This file should not be edited and should be committed with your source code. It is generated by NativeWind."}, {"index": 1234, "path": "client/navigation/AppNavigator.js", "chunk": "import { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useState } from 'react';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nimport AuthNavigator from './AuthNavigator';\nimport DrawerNavigator from './DrawerNavigator';\nimport NewJob from '../components/jobs/NewJob';\nimport { useAuth } from '../providers/AuthProvider';\nimport All from '../screens/All';\nimport AlumniDirectory from '../screens/AlumniDirectory';\nimport Call from '../screens/C"}, {"index": 1235, "path": "client/navigation/AppNavigator.js", "chunk": "reens/All';\nimport AlumniDirectory from '../screens/AlumniDirectory';\nimport Call from '../screens/Call';\nimport Chat from '../screens/Chat';\nimport CommunityChat from '../screens/CommunityChat';\nimport LoadingScreen from '../screens/LoadingScreen';\nimport Message from '../screens/Message';\nimport Notifications from '../screens/Notifications';\nimport MessageHeader from './components/MessageHeader';\n// import Map from '../screens/Map';\nimport ExplanationScreen from '../screens/ExplanationScreen';"}, {"index": 1236, "path": "client/navigation/AppNavigator.js", "chunk": ";\n// import Map from '../screens/Map';\nimport ExplanationScreen from '../screens/ExplanationScreen';\nimport ProfileScreen from '../screens/Profile';\nimport RegisterScreen from '../screens/Register';\n\nconst Stack = createNativeStackNavigator();\n\nconst screenConfig = {\n  headerlessScreens: { headerShown: false },\n  headerScreens: {\n    headerShown: true,\n    headerStyle: {\n      backgroundColor: '#FFFFFF',\n      elevation: 0,\n      shadowColor: '#000000',\n      shadowOffset: { width: 0, height: 2 "}, {"index": 1237, "path": "client/navigation/AppNavigator.js", "chunk": "FFFFF',\n      elevation: 0,\n      shadowColor: '#000000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.1,\n      shadowRadius: 5,\n    },\n    headerTintColor: '#000000',\n    headerTitleStyle: {\n      fontSize: 18,\n      fontWeight: '600',\n    },\n    headerShadowVisible: false,\n  },\n  messageScreen: {\n    headerShown: true,\n    header: (props) => <MessageHeader {...props} />,\n    headerStyle: {\n      height: 0, // Remove default header space\n    },\n    headerShadowVisible: fa"}, {"index": 1238, "path": "client/navigation/AppNavigator.js", "chunk": "   headerStyle: {\n      height: 0, // Remove default header space\n    },\n    headerShadowVisible: false,\n  },\n};\n\nexport default function AppNavigator() {\n  const { isLoggedIn } = useAuth();\n  const [loading, setLoading] = useState(true);\n\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <Stack.Navigator screenOptions={screenConfig.headerlessScreens}>\n        {!isLoggedIn ? (\n          <Stack.Screen name=\"Auth\" component={AuthNavigator} />\n        ) : (\n          <>\n            "}, {"index": 1239, "path": "client/navigation/AppNavigator.js", "chunk": "      <Stack.Screen name=\"Auth\" component={AuthNavigator} />\n        ) : (\n          <>\n            {loading ? (\n              <Stack.Screen\n                name=\"Loading\"\n                children={() => <LoadingScreen loading={loading} setLoading={setLoading} />}\n              />\n            ) : (\n              <>\n                <Stack.Screen name=\"MainDrawer\" component={DrawerNavigator} />\n                <Stack.Screen name=\"Chats\" component={Chat} options={screenConfig.headerScreens} />\n    "}, {"index": 1240, "path": "client/navigation/AppNavigator.js", "chunk": "            <Stack.Screen name=\"Chats\" component={Chat} options={screenConfig.headerScreens} />\n                <Stack.Screen name=\"Community Chats\" component={CommunityChat} options={screenConfig.headerScreens} />\n                <Stack.Screen\n                  name=\"Message\"\n                  component={Message}\n                  options={screenConfig.messageScreen}\n                />\n                <Stack.Screen\n                  name=\"Call\"\n                  component={Call}\n               "}, {"index": 1241, "path": "client/navigation/AppNavigator.js", "chunk": "      <Stack.Screen\n                  name=\"Call\"\n                  component={Call}\n                  options={{\n                    ...screenConfig.headerlessScreens,\n                    animation: 'fade',\n                  }}\n                />\n                <Stack.Screen\n                  name=\"Alerts\"\n                  component={Notifications}\n                  options={screenConfig.headerScreens}\n                />\n                <Stack.Screen\n                  name=\"NewJob\"\n          "}, {"index": 1242, "path": "client/navigation/AppNavigator.js", "chunk": "Screens}\n                />\n                <Stack.Screen\n                  name=\"NewJob\"\n                  component={NewJob}\n                  options={{\n                    ...screenConfig.headerScreens,\n                    title: 'Post a New Job',\n                  }}\n                />\n                <Stack.Screen\n                  name=\"Directory\"\n                  component={AlumniDirectory}\n                  options={{\n                    ...screenConfig.headerScreens,\n                 "}, {"index": 1243, "path": "client/navigation/AppNavigator.js", "chunk": "y}\n                  options={{\n                    ...screenConfig.headerScreens,\n                    title: 'Alumni Directory',\n                  }}\n                />\n                <Stack.Screen\n                  name=\"All\"\n                  component={All}\n                  options={{\n                    ...screenConfig.headerScreens,\n                    title: 'All',\n                  }}\n                />\n                <Stack.Screen\n                  name=\"Profile\"\n                  co"}, {"index": 1244, "path": "client/navigation/AppNavigator.js", "chunk": "              />\n                <Stack.Screen\n                  name=\"Profile\"\n                  component={ProfileScreen}\n                  options={{\n                    ...screenConfig.headerScreens,\n                    title: 'Profile',\n                  }}\n                />\n                {/* <Stack.Screen\n                  name=\"Map\"\n                  component={Map}\n                  options={{\n                    ...screenConfig.headerScreens,\n                    title: 'Map',\n       "}, {"index": 1245, "path": "client/navigation/AppNavigator.js", "chunk": "ions={{\n                    ...screenConfig.headerScreens,\n                    title: 'Map',\n                  }}\n                /> */}\n              </>\n            )}\n          </>\n        )}\n      </Stack.Navigator>\n    </GestureHandlerRootView>\n  );\n}\n"}, {"index": 1246, "path": "client/navigation/AuthNavigator.js", "chunk": "import { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { useState, useEffect } from 'react';\nimport { View, Text } from 'react-native';\n\nimport LoadingComponent from '../components/LoadingComponent';\nimport ConfirmRegistration from '../screens/ConfirmRegistration';\nimport ExplanationScreen from '../screens/ExplanationScreen';\nimport LoginScreen from '../screens/Login';\nimport Manual from '../screens/Manual';\nimport OnboardingPage from '../screens/Onboarding';\nimport "}, {"index": 1247, "path": "client/navigation/AuthNavigator.js", "chunk": "\nimport Manual from '../screens/Manual';\nimport OnboardingPage from '../screens/Onboarding';\nimport RegisterScreen from '../screens/Register';\n// import Register from '../screens/Register';\n\nconst Stack = createNativeStackNavigator();\n\nexport default function AuthNavigator() {\n  const [isReady, setIsReady] = useState(false);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsReady(true);\n    }, 1000); // Delay of 2000ms or 2 seconds\n    return () => clearTimeout(timer);\n  }, [])"}, {"index": 1248, "path": "client/navigation/AuthNavigator.js", "chunk": "(true);\n    }, 1000); // Delay of 2000ms or 2 seconds\n    return () => clearTimeout(timer);\n  }, []);\n\n  if (!isReady) {\n    return <LoadingComponent />;\n  }\n\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Onboarding\" component={OnboardingPage} />\n      <Stack.Screen name=\"Login\" component={LoginScreen} />\n      {/* <Stack.Screen name=\"Register\" component={Register} /> */}\n      <Stack.Screen name=\"Explanation\" component={ExplanationScreen} />\n "}, {"index": 1249, "path": "client/navigation/AuthNavigator.js", "chunk": "omponent={Register} /> */}\n      <Stack.Screen name=\"Explanation\" component={ExplanationScreen} />\n      <Stack.Screen name=\"Register\" component={RegisterScreen} />\n      <Stack.Screen name=\"Manual\" component={Manual} />\n      <Stack.Screen name=\"ConfirmRegistration\" component={ConfirmRegistration} />\n    </Stack.Navigator>\n  );\n}\n"}, {"index": 1250, "path": "client/navigation/DrawerNavigator.js", "chunk": "import { Ionicons } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Picker } from '@react-native-picker/picker';\nimport {\n  createDrawerNavigator,\n  DrawerContentScrollView,\n  DrawerItemList,\n} from '@react-navigation/drawer';\nimport { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { View, TouchableOpacity, Text } from 'react-native';\n\nimport TabNavigator from './TabNavigator';\nimport { LANGUAGE"}, {"index": 1251, "path": "client/navigation/DrawerNavigator.js", "chunk": "leOpacity, Text } from 'react-native';\n\nimport TabNavigator from './TabNavigator';\nimport { LANGUAGES } from '../i18n/i18n';\nimport Events from '../screens/Events';\nimport ProfileScreen from '../screens/MyProfile';\nimport Settings from '../screens/Settings';\n\nconst Drawer = createDrawerNavigator();\n\nconst drawerConfig = {\n  screenOptions: {\n    headerShown: false,\n    drawerStyle: {\n      backgroundColor: '#FFFFFF',\n      width: 280,\n      borderTopRightRadius: 25,\n      borderBottomRightRadius:"}, {"index": 1252, "path": "client/navigation/DrawerNavigator.js", "chunk": "ndColor: '#FFFFFF',\n      width: 280,\n      borderTopRightRadius: 25,\n      borderBottomRightRadius: 25,\n      paddingTop: 30,\n      paddingHorizontal: 8,\n      elevation: 15,\n      shadowColor: '#000000',\n      shadowOffset: { width: 5, height: 0 },\n      shadowOpacity: 0.15,\n      shadowRadius: 15,\n    },\n    drawerItemStyle: {\n      borderRadius: 12,\n      paddingVertical: 5,\n      marginVertical: 4,\n      marginHorizontal: 8,\n      paddingLeft: 4,\n    },\n    drawerLabelStyle: {\n      fontSiz"}, {"index": 1253, "path": "client/navigation/DrawerNavigator.js", "chunk": "al: 4,\n      marginHorizontal: 8,\n      paddingLeft: 4,\n    },\n    drawerLabelStyle: {\n      fontSize: 15,\n      fontWeight: '600',\n      marginLeft: 8,\n      paddingVertical: 8,\n    },\n    drawerIconStyle: {\n      marginRight: 2,\n      marginLeft: -4,\n    },\n    drawerActiveBackgroundColor: '#F0F7FF',\n    drawerActiveTintColor: '#0066FF',\n    drawerInactiveTintColor: '#404040',\n    drawerPressColor: '#E6EFFF',\n    drawerItemPressOpacity: 0.7,\n  },\n};\n\nconst getDrawerIcon =\n  (name) =>\n  ({ focu"}, {"index": 1254, "path": "client/navigation/DrawerNavigator.js", "chunk": "or: '#E6EFFF',\n    drawerItemPressOpacity: 0.7,\n  },\n};\n\nconst getDrawerIcon =\n  (name) =>\n  ({ focused, color, size }) => (\n    <Ionicons\n      name={name}\n      size={24}\n      color={color}\n      style={{\n        transform: [{ scale: focused ? 1.1 : 1 }],\n        opacity: focused ? 1 : 0.85,\n      }}\n    />\n  );\n\nconst CustomDrawerItem = ({ label, icon, onPress, focused }) => {\n  return (\n    <TouchableOpacity\n      onPress={onPress}\n      style={{\n        backgroundColor: focused ? '#F0F7FF'"}, {"index": 1255, "path": "client/navigation/DrawerNavigator.js", "chunk": "TouchableOpacity\n      onPress={onPress}\n      style={{\n        backgroundColor: focused ? '#F0F7FF' : 'transparent',\n        borderRadius: 12,\n        paddingVertical: 12,\n        paddingHorizontal: 16,\n        marginVertical: 4,\n        marginHorizontal: 8,\n      }}>\n      <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n        {icon({ focused, color: focused ? '#0066FF' : '#404040', size: 24 })}\n        <Text\n          style={{\n            marginLeft: 8,\n            color: focus"}, {"index": 1256, "path": "client/navigation/DrawerNavigator.js", "chunk": "', size: 24 })}\n        <Text\n          style={{\n            marginLeft: 8,\n            color: focused ? '#0066FF' : '#404040',\n            fontSize: 15,\n            fontWeight: '600',\n          }}>\n          {label}\n        </Text>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport default function DrawerNavigator() {\n  const { i18n } = useTranslation();\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n\n  useEffect(() => {\n    loadStoredLanguage();\n  }, []);\n\n  const loadSto"}, {"index": 1257, "path": "client/navigation/DrawerNavigator.js", "chunk": "anguage] = useState('en');\n\n  useEffect(() => {\n    loadStoredLanguage();\n  }, []);\n\n  const loadStoredLanguage = async () => {\n    try {\n      const storedLang = await AsyncStorage.getItem('user-language');\n      if (storedLang) {\n        setSelectedLanguage(storedLang);\n      }\n    } catch (error) {\n      console.error('Error loading language:', error);\n    }\n  };\n\n  const handleLanguageChange = async (lang) => {\n    try {\n      await AsyncStorage.setItem('user-language', lang);\n      setSelec"}, {"index": 1258, "path": "client/navigation/DrawerNavigator.js", "chunk": " async (lang) => {\n    try {\n      await AsyncStorage.setItem('user-language', lang);\n      setSelectedLanguage(lang);\n      await i18n.changeLanguage(lang);\n    } catch (error) {\n      console.error('Error changing language:', error);\n    }\n  };\n\n  const CustomDrawerContent = (props) => {\n    const currentRoute = props.state.routeNames[props.state.index];\n    \n    const handleNavigation = (routeName) => {\n      props.navigation.closeDrawer();\n      if (currentRoute !== routeName) {\n        prop"}, {"index": 1259, "path": "client/navigation/DrawerNavigator.js", "chunk": "ame) => {\n      props.navigation.closeDrawer();\n      if (currentRoute !== routeName) {\n        props.navigation.reset({\n          index: 0,\n          routes: [{ name: routeName }],\n        });\n      }\n    };\n\n    return (\n      <View style={{ flex: 1 }}>\n        <DrawerContentScrollView {...props}>\n          <CustomDrawerItem\n            label=\"Home\"\n            icon={getDrawerIcon('home')}\n            onPress={() => handleNavigation('MainTabs')}\n            focused={currentRoute === 'MainTabs'"}, {"index": 1260, "path": "client/navigation/DrawerNavigator.js", "chunk": "       onPress={() => handleNavigation('MainTabs')}\n            focused={currentRoute === 'MainTabs'}\n          />\n          <CustomDrawerItem\n            label=\"My Profile\"\n            icon={getDrawerIcon('person')}\n            onPress={() => handleNavigation('MyProfile')}\n            focused={currentRoute === 'MyProfile'}\n          />\n          <CustomDrawerItem\n            label=\"Events\"\n            icon={getDrawerIcon('calendar')}\n            onPress={() => handleNavigation('Events')}\n      "}, {"index": 1261, "path": "client/navigation/DrawerNavigator.js", "chunk": "      icon={getDrawerIcon('calendar')}\n            onPress={() => handleNavigation('Events')}\n            focused={currentRoute === 'Events'}\n          />\n          <CustomDrawerItem\n            label=\"Settings\"\n            icon={getDrawerIcon('settings')}\n            onPress={() => handleNavigation('Settings')}\n            focused={currentRoute === 'Settings'}\n          />\n        </DrawerContentScrollView>\n\n        {/* Language Selector */}\n        <View className=\"border-t border-gray-200 p-4"}, {"index": 1262, "path": "client/navigation/DrawerNavigator.js", "chunk": "ScrollView>\n\n        {/* Language Selector */}\n        <View className=\"border-t border-gray-200 p-4\">\n          <Picker\n            selectedValue={selectedLanguage}\n            onValueChange={handleLanguageChange}\n            className=\"rounded-xl bg-gray-50\">\n            {LANGUAGES.map((lang) => (\n              <Picker.Item key={lang.code} label={lang.label} value={lang.code} />\n            ))}\n          </Picker>\n        </View>\n      </View>\n    );\n  };\n\n  return (\n    <Drawer.Navigator\n    "}, {"index": 1263, "path": "client/navigation/DrawerNavigator.js", "chunk": "          </Picker>\n        </View>\n      </View>\n    );\n  };\n\n  return (\n    <Drawer.Navigator\n      screenOptions={drawerConfig.screenOptions}\n      drawerContent={(props) => <CustomDrawerContent {...props} />}>\n      <Drawer.Screen\n        name=\"MainTabs\"\n        component={TabNavigator}\n        options={{\n          title: 'Home',\n          headerShown: false,\n        }}\n      />\n      <Drawer.Screen\n        name=\"MyProfile\"\n        component={ProfileScreen}\n        options={{\n          heade"}, {"index": 1264, "path": "client/navigation/DrawerNavigator.js", "chunk": "Screen\n        name=\"MyProfile\"\n        component={ProfileScreen}\n        options={{\n          headerShown: true,\n          title: 'My Profile',\n        }}\n      />\n      <Drawer.Screen\n        name=\"Events\"\n        component={Events}\n        options={{\n          headerShown: true,\n        }}\n      />\n      <Drawer.Screen\n        name=\"Settings\"\n        component={Settings}\n        options={{\n          headerShown: true,\n        }}\n      />\n    </Drawer.Navigator>\n  );\n}\n"}, {"index": 1265, "path": "client/navigation/DrawerNavigator.js", "chunk": "      headerShown: true,\n        }}\n      />\n    </Drawer.Navigator>\n  );\n}\n"}, {"index": 1266, "path": "client/navigation/TabNavigator.js", "chunk": "import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport * as Haptics from 'expo-haptics';\nimport { TouchableOpacity, StyleSheet, Platform, Dimensions } from 'react-native';\n\nimport MainHeader from './components/MainHeader';\nimport Connections from '../screens/Connections';\nimport Donations from '../screens/Donations';\nimport HallofFame from '../screens/HallofFame';\nimport Home from '../screens/Home';\nimport Jobs from '../scr"}, {"index": 1267, "path": "client/navigation/TabNavigator.js", "chunk": "allofFame from '../screens/HallofFame';\nimport Home from '../screens/Home';\nimport Jobs from '../screens/Jobs';\n\nconst Tab = createBottomTabNavigator();\n\nconst { width } = Dimensions.get('window');\nconst isSmallDevice = width < 375;\nconst isLargeDevice = width >= 768;\n\nconst tabConfig = {\n  screenOptions: ({ navigation }) => ({\n    header: () => <MainHeader />,\n    tabBarShowLabel: false,\n    tabBarHideOnKeyboard: true,\n    tabBarStyle: {\n      backgroundColor: '#000',\n      height: isSmallDevic"}, {"index": 1268, "path": "client/navigation/TabNavigator.js", "chunk": "arHideOnKeyboard: true,\n    tabBarStyle: {\n      backgroundColor: '#000',\n      height: isSmallDevice ? 50 : isLargeDevice ? 70 : 60,\n      shadowColor: '#000',\n      shadowOpacity: 0.1,\n      shadowOffset: {\n        width: 0,\n        height: -2,\n      },\n      shadowRadius: 4,\n      borderTopWidth: 0,\n      paddingHorizontal: 10,\n      paddingBottom: Platform.OS === 'ios' ? 20 : 0,\n    },\n    tabBarActiveTintColor: '#fff',\n    tabBarInactiveTintColor: '#7A7A7A',\n    tabBarButton: (props) => (\n "}, {"index": 1269, "path": "client/navigation/TabNavigator.js", "chunk": "BarActiveTintColor: '#fff',\n    tabBarInactiveTintColor: '#7A7A7A',\n    tabBarButton: (props) => (\n      <TouchableOpacity\n        activeOpacity={0.6}\n        {...props}\n        style={[props.style, styles.tabButton]}\n        onPress={(e) => {\n          if (Platform.OS === 'web') {\n            e.preventDefault();\n          }\n\n          // Handle haptics only on mobile\n          if (Platform.OS !== 'web') {\n            if (props.accessibilityState?.selected) {\n              Haptics.impactAsync(Ha"}, {"index": 1270, "path": "client/navigation/TabNavigator.js", "chunk": " 'web') {\n            if (props.accessibilityState?.selected) {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n            } else {\n              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);\n            }\n          }\n\n          // Navigate to the screen\n          const screen = props?.children?.props?.href?.split('/').pop();\n          if (screen) {\n            navigation.navigate(screen);\n          }\n\n          props.onPress?.(e);\n        }}\n      />\n    ),\n  }"}, {"index": 1271, "path": "client/navigation/TabNavigator.js", "chunk": "vigation.navigate(screen);\n          }\n\n          props.onPress?.(e);\n        }}\n      />\n    ),\n  }),\n};\n\nconst getTabIcon =\n  (name) =>\n  ({ focused, color, size }) => {\n    const iconSize = isSmallDevice ? size : isLargeDevice ? size * 1.3 : size + 4;\n    return (\n      <Ionicons\n        name={focused ? name : `${name}-outline`}\n        size={focused ? iconSize + 6 : iconSize + 2}\n        color={color}\n        style={[styles.icon, focused && styles.activeIcon]}\n      />\n    );\n  };\n\nconst sty"}, {"index": 1272, "path": "client/navigation/TabNavigator.js", "chunk": "={color}\n        style={[styles.icon, focused && styles.activeIcon]}\n      />\n    );\n  };\n\nconst styles = StyleSheet.create({\n  tabButton: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: isSmallDevice ? 8 : isLargeDevice ? 14 : 10,\n    minHeight: 44, // Minimum touch target size\n  },\n  icon: {\n    transform: [{ scale: 1 }],\n  },\n  activeIcon: {\n    transform: [{ scale: isSmallDevice ? 1.05 : 1.1 }],\n  },\n});\n\nconst tabs = [\n  { name: 'Home', component: Home, i"}, {"index": 1273, "path": "client/navigation/TabNavigator.js", "chunk": " scale: isSmallDevice ? 1.05 : 1.1 }],\n  },\n});\n\nconst tabs = [\n  { name: 'Home', component: Home, icon: 'home' },\n  { name: 'Donations', component: Donations, icon: 'gift' },\n  { name: 'Jobs', component: Jobs, icon: 'briefcase' },\n  { name: 'Connect', component: Connections, icon: 'people' },\n  { name: 'HallofFame', component: HallofFame, icon: 'trophy' },\n];\n\nconst TabNavigator = () => {\n  return (\n    <Tab.Navigator screenOptions={tabConfig.screenOptions}>\n      {tabs.map(({ name, component, "}, {"index": 1274, "path": "client/navigation/TabNavigator.js", "chunk": "n (\n    <Tab.Navigator screenOptions={tabConfig.screenOptions}>\n      {tabs.map(({ name, component, icon }) => (\n        <Tab.Screen\n          key={name}\n          name={name}\n          component={component}\n          options={{\n            tabBarIcon: getTabIcon(icon),\n          }}\n        />\n      ))}\n    </Tab.Navigator>\n  );\n};\n\nexport default TabNavigator;\n"}, {"index": 1275, "path": "client/navigation/components/MainHeader.jsx", "chunk": "import React, { useState } from 'react';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useNavigation } from '@react-navigation/native';\nimport { View, TextInput, TouchableOpacity, Text } from 'react-native';\n\nimport { useAuth } from '../../providers/AuthProvider';\n\nexport default function MainHeader() {\n  const { role, user } = useAuth();\n  const navigation = useNavigation();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleChatPress = () => navigation.navigate('Cha"}, {"index": 1276, "path": "client/navigation/components/MainHeader.jsx", "chunk": "archQuery, setSearchQuery] = useState('');\n\n  const handleChatPress = () => navigation.navigate('Chats');\n  const handleNotificationsPress = () => navigation.navigate('Alerts');\n  const handleProfilePress = () => navigation.openDrawer();\n  const handleSearch = () => {\n    // Implement search functionality\n    console.log('Searching for:', searchQuery);\n  };\n\n  return (\n    <View className=\"flex-row items-center justify-between border-b border-gray-200 bg-white px-4 py-3 shadow-sm\">\n      {/* Pro"}, {"index": 1277, "path": "client/navigation/components/MainHeader.jsx", "chunk": "w items-center justify-between border-b border-gray-200 bg-white px-4 py-3 shadow-sm\">\n      {/* Profile/Menu Button */}\n      <TouchableOpacity \n        onPress={handleProfilePress} \n        className=\"p-1 flex-row items-center\"\n      >\n        <Ionicons \n          name=\"person-circle-outline\" \n          size={32} \n          color=\"#333\" \n        />\n        {user?.name && (\n          <Text className=\"ml-2 text-gray-700 font-semibold text-sm\">\n            {user.name.split(' ')[0]}\n          </Te"}, {"index": 1278, "path": "client/navigation/components/MainHeader.jsx", "chunk": "ame=\"ml-2 text-gray-700 font-semibold text-sm\">\n            {user.name.split(' ')[0]}\n          </Text>\n        )}\n      </TouchableOpacity>\n\n      {/* Search Input */}\n      <View className=\"mx-4 flex-1 flex-row items-center\">\n        <View className=\"flex-1 relative\">\n          <TextInput\n            className=\"rounded-lg bg-gray-100 px-4 py-2 pl-10 text-gray-800\"\n            placeholder=\"Search...\"\n            placeholderTextColor=\"#9ca3af\"\n            value={searchQuery}\n            onChange"}, {"index": 1279, "path": "client/navigation/components/MainHeader.jsx", "chunk": "...\"\n            placeholderTextColor=\"#9ca3af\"\n            value={searchQuery}\n            onChangeText={setSearchQuery}\n            onSubmitEditing={handleSearch}\n            returnKeyType=\"search\"\n          />\n          <View className=\"absolute left-0 top-0 bottom-0 justify-center pl-3\">\n            <Ionicons \n              name=\"search-outline\" \n              size={20} \n              color=\"#9ca3af\" \n            />\n          </View>\n        </View>\n      </View>\n\n      {/* Action Buttons */"}, {"index": 1280, "path": "client/navigation/components/MainHeader.jsx", "chunk": "9ca3af\" \n            />\n          </View>\n        </View>\n      </View>\n\n      {/* Action Buttons */}\n      <View className=\"flex-row items-center space-x-3\">\n        {role === 'alumni' && (\n          <TouchableOpacity \n            onPress={handleChatPress} \n            className=\"p-1\"\n          >\n            <Ionicons \n              name=\"chatbubbles-outline\" \n              size={24} \n              color=\"#333\" \n            />\n          </TouchableOpacity>\n        )}\n        \n        <Touchable"}, {"index": 1281, "path": "client/navigation/components/MainHeader.jsx", "chunk": "   color=\"#333\" \n            />\n          </TouchableOpacity>\n        )}\n        \n        <TouchableOpacity \n          onPress={handleNotificationsPress} \n          className=\"p-1\"\n        >\n          <Ionicons \n            name=\"notifications-outline\" \n            size={24} \n            color=\"#333\" \n          />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}"}, {"index": 1282, "path": "client/navigation/components/MessageHeader.js", "chunk": "import { Ionicons } from '@expo/vector-icons';\nimport { View, Text, Image, TouchableOpacity } from 'react-native';\n\nconst MessageHeader = ({ navigation, route }) => {\n  const { chatData } = route.params;\n  const defaultImage = 'https://via.placeholder.com/40';\n\n  const handleVideoCall = () => {\n    navigation.navigate('Call', {\n      chatData,\n      roomId: `${chatData?.id}-video` || 'default-room',\n    });\n  };\n\n  return (\n    <View className=\"border-accent/10 flex-row items-center justify-betw"}, {"index": 1283, "path": "client/navigation/components/MessageHeader.js", "chunk": "',\n    });\n  };\n\n  return (\n    <View className=\"border-accent/10 flex-row items-center justify-between border-b bg-white px-4 py-3\">\n      <View className=\"flex-1 flex-row items-center\">\n        <TouchableOpacity onPress={() => navigation.goBack()} className=\"mr-3\">\n          <Ionicons name=\"arrow-back\" size={24} color=\"#2C3F4A\" />\n        </TouchableOpacity>\n        <Image\n          source={{\n            uri: chatData.profilePhoto || defaultImage,\n          }}\n          className=\"h-10 w-10 ro"}, {"index": 1284, "path": "client/navigation/components/MessageHeader.js", "chunk": "          uri: chatData.profilePhoto || defaultImage,\n          }}\n          className=\"h-10 w-10 rounded-full\"\n        />\n        <View className=\"ml-3\">\n          <Text className=\"text-lg font-semibold text-text\">{chatData.otherParticipantName}</Text>\n          {/* TODO */}\n          {/* <Text className=\"text-highlight/70 text-xs\">Online</Text> */}\n        </View>\n      </View>\n      <View className=\"flex-row gap-4\">\n        <TouchableOpacity className=\"bg-primary/5 rounded-full p-2\" onPress={"}, {"index": 1285, "path": "client/navigation/components/MessageHeader.js", "chunk": "Name=\"flex-row gap-4\">\n        <TouchableOpacity className=\"bg-primary/5 rounded-full p-2\" onPress={handleVideoCall}>\n          <Ionicons name=\"videocam\" size={20} color=\"#2C3E8D\" />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default MessageHeader;\n"}, {"index": 1286, "path": "client/package.json", "chunk": "{\n  \"name\": \"vidya-setu\",\n  \"version\": \"1.0.0\",\n  \"main\": \"node_modules/expo/AppEntry.js\",\n  \"private\": true,\n  \"packageManager\": \"yarn@4.5.3\",\n  \"scripts\": {\n    \"upgrade:expo\": \"expo install expo@latest\",\n    \"fix:expo\": \"expo install --fix\",\n    \"web\": \"expo start --web\",\n    \"android\": \"expo start --android\",\n    \"ios\": \"expo start --ios\",\n    \"start\": \"expo start\",\n    \"prebuild\": \"npx expo prebuild --clean\",\n    \"build\": \"eas build -p android --profile development --local\",\n    \"lint\": \"es"}, {"index": 1287, "path": "client/package.json", "chunk": "rebuild --clean\",\n    \"build\": \"eas build -p android --profile development --local\",\n    \"lint\": \"eslint \\\"{App,components,constants,navigation,screens,utils,providers,i18n}/**/*.{js,jsx,ts,tsx}\\\" && prettier -c \\\"{App,components,constants,navigation,screens,utils,providers,i18n}/**/*.{js,jsx,ts,tsx,json}\\\"\",\n    \"format\": \"eslint \\\"{App,components,constants,navigation,screens,utils,providers,i18n}/**/*.{js,jsx,ts,tsx}\\\" --fix && prettier \\\"{App,components,constants,navigation,screens,utils,prov"}, {"index": 1288, "path": "client/package.json", "chunk": "}/**/*.{js,jsx,ts,tsx}\\\" --fix && prettier \\\"{App,components,constants,navigation,screens,utils,providers,i18n}/**/*.{js,jsx,ts,tsx,json}\\\" --write\"\n  },\n  \"dependencies\": {\n    \"@expo/metro-runtime\": \"~4.0.0\",\n    \"@expo/vector-icons\": \"^14.0.4\",\n    \"@react-native-async-storage/async-storage\": \"1.23.1\",\n    \"@react-native-picker/picker\": \"2.9.0\",\n    \"@react-navigation/drawer\": \"^7.0.0\",\n    \"@react-navigation/native\": \"^7.0.0\",\n    \"@react-navigation/stack\": \"^7.0.4\",\n    \"axios\": \"^1.7.9\",\n "}, {"index": 1289, "path": "client/package.json", "chunk": "eact-navigation/native\": \"^7.0.0\",\n    \"@react-navigation/stack\": \"^7.0.4\",\n    \"axios\": \"^1.7.9\",\n    \"expo\": \"^52.0.17\",\n    \"expo-av\": \"~15.0.1\",\n    \"expo-camera\": \"^16.0.9\",\n    \"expo-constants\": \"~17.0.3\",\n    \"expo-document-picker\": \"^13.0.1\",\n    \"expo-font\": \"~13.0.1\",\n    \"expo-haptics\": \"^14.0.0\",\n    \"expo-image\": \"~2.0.3\",\n    \"expo-image-picker\": \"^16.0.3\",\n    \"expo-linear-gradient\": \"^14.0.1\",\n    \"expo-linking\": \"~7.0.3\",\n    \"expo-location\": \"~18.0.3\",\n    \"expo-media-library\":"}, {"index": 1290, "path": "client/package.json", "chunk": ": \"^14.0.1\",\n    \"expo-linking\": \"~7.0.3\",\n    \"expo-location\": \"~18.0.3\",\n    \"expo-media-library\": \"^17.0.3\",\n    \"expo-router\": \"~4.0.11\",\n    \"expo-sharing\": \"^13.0.0\",\n    \"expo-system-ui\": \"^4.0.5\",\n    \"expo-video-thumbnails\": \"^9.0.2\",\n    \"expo-web-browser\": \"^14.0.1\",\n    \"i18next\": \"^24.0.5\",\n    \"jwt-decode\": \"^4.0.0\",\n    \"lucide-react-native\": \"^0.468.0\",\n    \"nativewind\": \"^4.1.23\",\n    \"react\": \"18.3.1\",\n    \"react-dom\": \"18.3.1\",\n    \"react-i18next\": \"^15.1.3\",\n    \"react-native"}, {"index": 1291, "path": "client/package.json", "chunk": "\n    \"react\": \"18.3.1\",\n    \"react-dom\": \"18.3.1\",\n    \"react-i18next\": \"^15.1.3\",\n    \"react-native\": \"0.76.3\",\n    \"react-native-dotenv\": \"^3.4.11\",\n    \"react-native-gesture-handler\": \"~2.20.2\",\n    \"react-native-maps\": \"1.18.0\",\n    \"react-native-markdown-display\": \"^7.0.2\",\n    \"react-native-reanimated\": \"^3.16.3\",\n    \"react-native-safe-area-context\": \"4.12.0\",\n    \"react-native-screens\": \"~4.1.0\",\n    \"react-native-svg\": \"15.8.0\",\n    \"react-native-timeline-flatlist\": \"^0.8.0\",\n    \"react"}, {"index": 1292, "path": "client/package.json", "chunk": "4.1.0\",\n    \"react-native-svg\": \"15.8.0\",\n    \"react-native-timeline-flatlist\": \"^0.8.0\",\n    \"react-native-web\": \"~0.19.13\",\n    \"rn-emoji-keyboard\": \"^1.7.0\",\n    \"socket.io-client\": \"^4.8.1\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.20.12\",\n    \"@types/react\": \"~18.3.13\",\n    \"@types/react-dom\": \"^18\",\n    \"@types/react-native-web\": \"^0\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.7.0\",\n    \"@typescript-eslint/parser\": \"^7.7.0\",\n    \"eslint\": \"^8.57.1\",\n    \"eslint-config-universe\":"}, {"index": 1293, "path": "client/package.json", "chunk": "\",\n    \"@typescript-eslint/parser\": \"^7.7.0\",\n    \"eslint\": \"^8.57.1\",\n    \"eslint-config-universe\": \"^12.1.0\",\n    \"eslint-plugin-import\": \"^2.31.0\",\n    \"expo-doctor\": \"^1.12.4\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-plugin-tailwindcss\": \"^0.6.9\",\n    \"tailwindcss\": \"^3.4.16\",\n    \"typescript\": \"~5.5.4\"\n  },\n  \"resolutions\": {\n    \"@react-native/gradle-plugin\": \"0.76.3\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"universe/native\",\n    \"root\": true\n  }\n}\n"}, {"index": 1294, "path": "client/package.json", "chunk": "{\n    \"extends\": \"universe/native\",\n    \"root\": true\n  }\n}\n"}, {"index": 1295, "path": "client/prettier.config.js", "chunk": "module.exports = {\n  printWidth: 100,\n  tabWidth: 2,\n  singleQuote: true,\n  bracketSameLine: true,\n  trailingComma: 'es5',\n\n  plugins: [require.resolve('prettier-plugin-tailwindcss')],\n  tailwindAttributes: ['className'],\n\n  endOfLine: \"crlf\"\n};\n"}, {"index": 1296, "path": "client/providers/AuthProvider.jsx", "chunk": "import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { jwtDecode } from 'jwt-decode';\nimport { createContext, useState, useEffect, useContext } from 'react';\nimport { View, ActivityIndicator, Text } from 'react-native';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ "}, {"index": 1297, "path": "client/providers/AuthProvider.jsx", "chunk": "uth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [role, setRole] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [reqSet, setReqSet] = useState(new Set());\n\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const loggedInValu"}, {"index": 1298, "path": "client/providers/AuthProvider.jsx", "chunk": "  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const loggedInValue = await AsyncStorage.getItem('isLoggedIn');\n        const roleValue = await AsyncStorage.getItem('role');\n        const token = await AsyncStorage.getItem('token');\n        setIsLoggedIn(loggedInValue === 'true');\n        if (token) {\n          const decodedToken = jwtDecode(token);\n          const currentTime = Date.now() / 1000;\n          if (decodedToken.exp < currentTime) {\n            setIs"}, {"index": 1299, "path": "client/providers/AuthProvider.jsx", "chunk": "t currentTime = Date.now() / 1000;\n          if (decodedToken.exp < currentTime) {\n            setIsLoggedIn(false);\n            setToken(null);\n            await AsyncStorage.removeItem('token');\n          } else {\n            setToken(token);\n          }\n        }\n        setRole(roleValue || null);\n        setLoading(false);\n      } catch (e) {\n        console.error('Error reading AsyncStorage:', e);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  const updateUser = async (updatedUserData"}, {"index": 1300, "path": "client/providers/AuthProvider.jsx", "chunk": "', e);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  const updateUser = async (updatedUserData) => {\n    try {\n      setUser(updatedUserData);\n      return true;\n    } catch (error) {\n      console.error('Error updating user:', error);\n      throw error;\n    }\n  };\n\n  if (loading) {\n    return (\n      <View className=\"h-full w-full bg-white\">\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n        <Text>Loading .....</Text>\n      </View>\n    );\n  }\n\n  return (\n    <AuthContext.P"}, {"index": 1301, "path": "client/providers/AuthProvider.jsx", "chunk": "000ff\" />\n        <Text>Loading .....</Text>\n      </View>\n    );\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn,\n        setIsLoggedIn,\n        role,\n        setRole,\n        reqSet,\n        setReqSet,\n        user,\n        setUser,\n        token,\n        setToken,\n        updateUser,\n      }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"}, {"index": 1302, "path": "client/providers/CustomProvider.jsx", "chunk": "import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useEffect } from 'react';\nimport { I18nextProvider } from 'react-i18next';\n\nimport { AuthProvider } from './AuthProvider';\nimport { SocketProvider } from './SocketProvider';\nimport i18n from '../i18n/i18n';\n\nconst Providers = ({ children }) => {\n  useEffect(() => {\n    const initializeLanguage = async () => {\n      try {\n        const storedLang = await AsyncStorage.getItem('user-language');\n        if (storedLang) {\n"}, {"index": 1303, "path": "client/providers/CustomProvider.jsx", "chunk": "{\n        const storedLang = await AsyncStorage.getItem('user-language');\n        if (storedLang) {\n          await i18n.changeLanguage(storedLang);\n        }\n      } catch (error) {\n        console.error('Error initializing language:', error);\n      }\n    };\n\n    initializeLanguage();\n  }, []);\n\n  return (\n    <AuthProvider>\n      <SocketProvider>\n        <I18nextProvider i18n={i18n}>{children}</I18nextProvider>\n      </SocketProvider>\n    </AuthProvider>\n  );\n};\n\nexport default Providers;\n"}, {"index": 1304, "path": "client/providers/CustomProvider.jsx", "chunk": "I18nextProvider>\n      </SocketProvider>\n    </AuthProvider>\n  );\n};\n\nexport default Providers;\n"}, {"index": 1305, "path": "client/providers/SocketProvider.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\n\nimport { useAuth } from './AuthProvider';\n\nconst SocketContext = createContext();\n\nexport const useSocket = () => {\n  const context = useContext(SocketContext);\n  if (!context) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\nexport const SocketProvider = ({ children }) => {\n  const [socket, setSocket]"}, {"index": 1306, "path": "client/providers/SocketProvider.jsx", "chunk": "\n  return context;\n};\n\nexport const SocketProvider = ({ children }) => {\n  const [socket, setSocket] = useState(null);\n  const { token } = useAuth();\n\n  useEffect(() => {\n    const initSocket = async () => {\n      try {\n        const socketInstance = io(SERVER_URL, {\n          auth: { token },\n        });\n\n        socketInstance.on('connect', () => {\n          console.log('Socket connected');\n        });\n\n        socketInstance.on('error', (error) => {\n          console.error('Socket error:', er"}, {"index": 1307, "path": "client/providers/SocketProvider.jsx", "chunk": "    });\n\n        socketInstance.on('error', (error) => {\n          console.error('Socket error:', error);\n        });\n\n        setSocket(socketInstance);\n\n        return () => socketInstance.disconnect();\n      } catch (error) {\n        console.error('Socket initialization error:', error);\n      }\n    };\n\n    initSocket();\n  }, [token]);\n\n  return <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>;\n};\n"}, {"index": 1308, "path": "client/providers/SocketProvider.jsx", "chunk": "/SocketContext.Provider>;\n};\n"}, {"index": 1309, "path": "client/screens/All.jsx", "chunk": "import { SERVER_URL } from '@env'; // Import the SERVER_URL from .env file\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useNavigation } from '@react-navigation/native';\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { View, Text, FlatList, Button, TouchableOpacity, ActivityIndicator } from 'react-native';\n\nimport { useAuth } from '../providers/AuthProvider';\nimport { connectHandler } from '../utils/connectHandler';\n\nconst UsersLis"}, {"index": 1310, "path": "client/screens/All.jsx", "chunk": "./providers/AuthProvider';\nimport { connectHandler } from '../utils/connectHandler';\n\nconst UsersListPage = () => {\n  const { user, setUser, reqSet, setReqSet } = useAuth();\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const token = await AsyncStorage.getItem('token');\n\n      if (!token) {\n        throw new Error('Token not found');\n      }\n\n      try"}, {"index": 1311, "path": "client/screens/All.jsx", "chunk": "etItem('token');\n\n      if (!token) {\n        throw new Error('Token not found');\n      }\n\n      try {\n        const response = await axios.get(`${SERVER_URL}/users/getAllexCon`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        setUsers(response.data); // Assuming the response contains an array of users\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, []"}, {"index": 1312, "path": "client/screens/All.jsx", "chunk": "rs:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  const handleConnect = async (userId) => {\n    try {\n      const updatedUser = await connectHandler(userId);\n      setUser(updatedUser);\n      setReqSet(new Set(updatedUser.sentRequests));\n    } catch (error) {\n      console.error('Error sending connection request:', error);\n      alert('Failed to send connection request');\n    }\n  };\n\n  const renderUserItem = ({ item }) => (\n    <View\n      "}, {"index": 1313, "path": "client/screens/All.jsx", "chunk": " to send connection request');\n    }\n  };\n\n  const renderUserItem = ({ item }) => (\n    <View\n      style={{\n        flexDirection: 'row',\n        justifyContent: 'space-between',\n        padding: 10,\n        borderBottomWidth: 1,\n        borderColor: '#ccc',\n      }}>\n      <Text style={{ fontSize: 16, fontWeight: 'bold' }}>{item.fullName}</Text>\n      <View style={{ flexDirection: 'row' }}>\n        <TouchableOpacity\n          style={{\n            backgroundColor: '#007BFF',\n            padding"}, {"index": 1314, "path": "client/screens/All.jsx", "chunk": "    <TouchableOpacity\n          style={{\n            backgroundColor: '#007BFF',\n            padding: 20,\n            borderRadius: 5,\n            marginRight: 10,\n          }}\n          onPress={() => navigation.navigate('Profile', { _id: item._id })}>\n          <Text style={{ color: '#fff', fontWeight: 'bold' }}>View Profile</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={{\n            backgroundColor: reqSet && reqSet.has(item._id) ? '#6c757d' : '#28A745',\n     "}, {"index": 1315, "path": "client/screens/All.jsx", "chunk": " style={{\n            backgroundColor: reqSet && reqSet.has(item._id) ? '#6c757d' : '#28A745',\n            padding: 20,\n            borderRadius: 5,\n          }}\n          onPress={() => {\n            if (!reqSet.has(item._id)) {\n              handleConnect(item._id);\n            }\n          }}>\n          <Text style={{ color: '#fff', fontWeight: 'bold' }}>\n            {reqSet && reqSet.has(item._id) ? 'Pending' : 'Connect'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>"}, {"index": 1316, "path": "client/screens/All.jsx", "chunk": "id) ? 'Pending' : 'Connect'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  if (loading) {\n    return (\n      <View\n        style={{\n          flex: 1,\n          justifyContent: 'center',\n          alignItems: 'center',\n          backgroundColor: '#f8f9fa',\n        }}>\n        <ActivityIndicator size=\"large\" color=\"#007BFF\" />\n        <Text style={{ marginTop: 10, fontSize: 16 }}>Loading Users...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={{ flex"}, {"index": 1317, "path": "client/screens/All.jsx", "chunk": "fontSize: 16 }}>Loading Users...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={{ flex: 1, backgroundColor: '#f8f9fa' }}>\n      <FlatList\n        data={users}\n        keyExtractor={(item) => item._id}\n        renderItem={renderUserItem}\n        contentContainerStyle={{ padding: 10 }}\n      />\n    </View>\n  );\n};\n\nexport default UsersListPage;\n"}, {"index": 1318, "path": "client/screens/AlumniDirectory.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport { Ionicons } from '@expo/vector-icons';\nimport axios from 'axios';\nimport { useState, useCallback, useMemo, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  FlatList,\n  TouchableOpacity,\n  ScrollView,\n  Modal,\n  ActivityIndicator,\n  RefreshControl,\n} from 'react-native';\n\nimport { useAuth } from '../providers/AuthProvider';\nimport UserCard from '../utils/UserCard';\n\n// const AlumniCard = ({ alumni, onConnect }) => (\n//   <View className="}, {"index": 1319, "path": "client/screens/AlumniDirectory.jsx", "chunk": " from '../utils/UserCard';\n\n// const AlumniCard = ({ alumni, onConnect }) => (\n//   <View className=\"border-overlay/20 m-1.5 flex-1 rounded-xl border bg-background p-4 shadow-md\">\n//     <View className=\"mb-2 flex-row items-center justify-end\">\n//       <View className=\"bg-primary/10 rounded-full px-2 py-0.5\">\n//         <Text className=\"text-2xs text-primary\">{alumni.department}</Text>\n//       </View>\n//     </View>\n//     <Image\n//       source={{ uri: alumni.photo }}\n//       className=\"bord"}, {"index": 1320, "path": "client/screens/AlumniDirectory.jsx", "chunk": "/View>\n//     </View>\n//     <Image\n//       source={{ uri: alumni.photo }}\n//       className=\"border-primary/20 h-20 w-20 self-center rounded-full border-2\"\n//     />\n//     <Text className=\"mt-2 text-center text-sm font-bold text-text\" numberOfLines={1}>\n//       {alumni.name}\n//     </Text>\n//     <Text className=\"text-primary/80 text-center text-xs\" numberOfLines={1}>\n//       {alumni.position}\n//     </Text>\n//     <Text className=\"text-text/60 text-center text-xs\" numberOfLines={1}>\n//   "}, {"index": 1321, "path": "client/screens/AlumniDirectory.jsx", "chunk": "n}\n//     </Text>\n//     <Text className=\"text-text/60 text-center text-xs\" numberOfLines={1}>\n//       {alumni.company}\n//     </Text>\n//     <Text className=\"text-2xs text-text/40 text-center\">\n//       {alumni.batch.joining} - {alumni.batch.graduation}\n//     </Text>\n//     <TouchableOpacity\n//       className={`mt-3 rounded-full px-4 py-2 shadow-sm ${alumni.isConnected ? 'bg-overlay' : 'bg-gradient-to-r from-primary to-secondary'\n//         }`}\n//       onPress={() => onConnect(alumni.id)}\n/"}, {"index": 1322, "path": "client/screens/AlumniDirectory.jsx", "chunk": "dient-to-r from-primary to-secondary'\n//         }`}\n//       onPress={() => onConnect(alumni.id)}\n//       disabled={alumni.isConnected}\n//       activeOpacity={0.7}>\n//       <Text\n//         className={`text-center text-xs font-medium ${alumni.isConnected ? 'text-text/60' : 'text-background'}`}>\n//         {alumni.isConnected ? 'Connected' : 'Connect'}\n//       </Text>\n//     </TouchableOpacity>\n//   </View>\n// );\n\nconst getAlumniFilters = (data) => {\n  const filters = {\n    graduationYear: ["}, {"index": 1323, "path": "client/screens/AlumniDirectory.jsx", "chunk": ">\n//   </View>\n// );\n\nconst getAlumniFilters = (data) => {\n  const filters = {\n    graduationYear: [...new Set(data.map((alumni) => alumni.education[0].yearOfGraduation))].sort(),\n    city: [...new Set(data.map((alumni) => alumni.city))],\n    skills: [...new Set(data.flatMap((alumni) => alumni.skills))].sort(),\n    company: [\n      ...new Set(\n        data.flatMap((alumni) => alumni.workExperience?.map((work) => work.company) || [])\n      ),\n    ]\n      .filter(Boolean)\n      .sort(),\n  };\n\n  re"}, {"index": 1324, "path": "client/screens/AlumniDirectory.jsx", "chunk": "?.map((work) => work.company) || [])\n      ),\n    ]\n      .filter(Boolean)\n      .sort(),\n  };\n\n  return {\n    'Graduation Year': filters.graduationYear,\n    City: filters.city,\n    Company: filters.company,\n    Skills: filters.skills,\n  };\n};\n\nconst FilterDropdown = ({ title, options, selected = [], onSelect, onClear }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleSelect = (option) => {\n    const newSelected = selected.includes(option)\n      ? selected.filter((item) => ite"}, {"index": 1325, "path": "client/screens/AlumniDirectory.jsx", "chunk": "option) => {\n    const newSelected = selected.includes(option)\n      ? selected.filter((item) => item !== option)\n      : [...selected, option];\n    onSelect(newSelected);\n  };\n\n  return (\n    <View className=\"z-50 mr-1.5\">\n      <TouchableOpacity\n        onPress={() => setIsOpen(!isOpen)}\n        className={`flex-row items-center rounded-lg px-3.5 py-2.5 ${\n          selected.length > 0 ? 'bg-accent/10' : 'bg-overlay'\n        }`}\n        activeOpacity={0.7}\n        hitSlop={{ top: 8, bottom: 8,"}, {"index": 1326, "path": "client/screens/AlumniDirectory.jsx", "chunk": "ent/10' : 'bg-overlay'\n        }`}\n        activeOpacity={0.7}\n        hitSlop={{ top: 8, bottom: 8, left: 8, right: 8 }}>\n        <Text\n          className={`mr-2 text-xs font-semibold ${\n            selected.length > 0 ? 'text-accent' : 'text-text/70'\n          }`}>\n          {title} {selected.length > 0 && `(${selected.length})`}\n        </Text>\n        <Ionicons\n          name={isOpen ? 'chevron-up' : 'chevron-down'}\n          size={14}\n          className={selected.length > 0 ? 'text-accent"}, {"index": 1327, "path": "client/screens/AlumniDirectory.jsx", "chunk": "on-up' : 'chevron-down'}\n          size={14}\n          className={selected.length > 0 ? 'text-accent' : 'text-text/50'}\n        />\n      </TouchableOpacity>\n\n      {isOpen && (\n        <Modal\n          visible={isOpen}\n          transparent\n          animationType=\"fade\"\n          onRequestClose={() => setIsOpen(false)}\n          statusBarTranslucent>\n          <TouchableOpacity\n            className=\"bg-overlay/80 absolute inset-0 flex-1\"\n            activeOpacity={1}\n            onPress={() =>"}, {"index": 1328, "path": "client/screens/AlumniDirectory.jsx", "chunk": "ame=\"bg-overlay/80 absolute inset-0 flex-1\"\n            activeOpacity={1}\n            onPress={() => setIsOpen(false)}>\n            <View className=\"mx-4 mt-20 rounded-2xl bg-background p-4 shadow-xl\">\n              <View className=\"mb-4 flex-row items-center justify-between\">\n                <Text className=\"text-lg font-bold text-text\">{title}</Text>\n                {selected.length > 0 && (\n                  <TouchableOpacity\n                    className=\"bg-accent/10 rounded-full px-3 py-1\""}, {"index": 1329, "path": "client/screens/AlumniDirectory.jsx", "chunk": "               <TouchableOpacity\n                    className=\"bg-accent/10 rounded-full px-3 py-1\"\n                    onPress={() => {\n                      onClear();\n                      setIsOpen(false);\n                    }}>\n                    <Text className=\"text-xs font-medium text-accent\">Clear</Text>\n                  </TouchableOpacity>\n                )}\n              </View>\n\n              <ScrollView className=\"max-h-80\">\n                {options.map((option, index) => (\n    "}, {"index": 1330, "path": "client/screens/AlumniDirectory.jsx", "chunk": "            <ScrollView className=\"max-h-80\">\n                {options.map((option, index) => (\n                  <TouchableOpacity\n                    key={`${option}-${index}`}\n                    className={`mb-2 rounded-lg p-3 ${\n                      selected.includes(option) ? 'bg-accent' : 'bg-overlay/5'\n                    }`}\n                    onPress={() => handleSelect(option)}>\n                    <Text className={selected.includes(option) ? 'text-background' : 'text-text'}>\n      "}, {"index": 1331, "path": "client/screens/AlumniDirectory.jsx", "chunk": "               <Text className={selected.includes(option) ? 'text-background' : 'text-text'}>\n                      {option}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </ScrollView>\n            </View>\n          </TouchableOpacity>\n        </Modal>\n      )}\n    </View>\n  );\n};\n\nconst EmptyStateMessage = () => (\n  <View className=\"flex-1 items-center justify-center px-6\">\n    <Ionicons name=\"people-outline\" size={68} className=\"text-accent/"}, {"index": 1332, "path": "client/screens/AlumniDirectory.jsx", "chunk": "s-center justify-center px-6\">\n    <Ionicons name=\"people-outline\" size={68} className=\"text-accent/20 mb-6\" />\n    <Text className=\"text-text/80 mb-3 text-center text-xl font-semibold\">No Alumni Found</Text>\n    <Text className=\"text-text/50 max-w-[280px] text-center text-sm leading-5\">\n      Try adjusting your filters or search terms to find more alumni\n    </Text>\n  </View>\n);\n\nconst AlumniDirectory = () => {\n  const [search, setSearch] = useState('');\n  const [filteredData, setFilteredData] "}, {"index": 1333, "path": "client/screens/AlumniDirectory.jsx", "chunk": "ctory = () => {\n  const [search, setSearch] = useState('');\n  const [filteredData, setFilteredData] = useState([]);\n  const [activeFilters, setActiveFilters] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [alumniData, setAlumniData] = useState([]);\n  const [refreshing, setRefreshing] = useState(false);\n  const { token } = useAuth();\n\n  const fetchAlumni = useCallback(async () => {\n    try {\n      setLoading(true);\n      const r"}, {"index": 1334, "path": "client/screens/AlumniDirectory.jsx", "chunk": "();\n\n  const fetchAlumni = useCallback(async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`${SERVER_URL}/users/getAll`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      setAlumniData(response.data);\n      setFilteredData(response.data);\n      setError(null);\n    } catch (err) {\n      setError('Failed to fetch alumni data');\n      console.error('Error fetching alumni:', err);\n    } finally {\n      setLoading(false);\n  "}, {"index": 1335, "path": "client/screens/AlumniDirectory.jsx", "chunk": "a');\n      console.error('Error fetching alumni:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const onRefresh = useCallback(async () => {\n    setRefreshing(true);\n    try {\n      await fetchAlumni();\n    } finally {\n      setRefreshing(false);\n    }\n  }, [fetchAlumni]);\n\n  const filters = useMemo(() => getAlumniFilters(alumniData), [alumniData]);\n\n  const updateFilters = useCallback((key, values) => {\n    setActiveFilters((prev) => {\n      const newFilters = { ...prev };\n "}, {"index": 1336, "path": "client/screens/AlumniDirectory.jsx", "chunk": "Callback((key, values) => {\n    setActiveFilters((prev) => {\n      const newFilters = { ...prev };\n      if (!values || values.length === 0) {\n        delete newFilters[key];\n      } else {\n        newFilters[key] = values;\n      }\n      return newFilters;\n    });\n  }, []);\n\n  const filterAlumni = useCallback(() => {\n    let results = [...alumniData];\n\n    // Apply search filter\n    if (search) {\n      const searchLower = search.toLowerCase();\n      results = results.filter(\n        (alumni) =>\n"}, {"index": 1337, "path": "client/screens/AlumniDirectory.jsx", "chunk": "      const searchLower = search.toLowerCase();\n      results = results.filter(\n        (alumni) =>\n          alumni.fullName.toLowerCase().includes(searchLower) ||\n          alumni.bio.toLowerCase().includes(searchLower) ||\n          (alumni.workExperience &&\n            alumni.workExperience.some((work) =>\n              work.company?.toLowerCase().includes(searchLower)\n            )) ||\n          (alumni.city && alumni.city.toLowerCase().includes(searchLower))\n      );\n    }\n\n    // Apply othe"}, {"index": 1338, "path": "client/screens/AlumniDirectory.jsx", "chunk": "  (alumni.city && alumni.city.toLowerCase().includes(searchLower))\n      );\n    }\n\n    // Apply other filters\n    results = results.filter((alumni) => {\n      return Object.entries(activeFilters).every(([key, values]) => {\n        if (!values || values.length === 0) return true;\n        switch (key) {\n          case 'City':\n            return values.some((value) => alumni.city?.includes(value));\n          case 'Company':\n            return values.some((value) =>\n              alumni.workExperien"}, {"index": 1339, "path": "client/screens/AlumniDirectory.jsx", "chunk": "         case 'Company':\n            return values.some((value) =>\n              alumni.workExperience?.some((work) => work.company === value)\n            );\n          case 'Graduation Year':\n            return values.some((value) => alumni.education[0]?.yearOfGraduation === value);\n          case 'Skills':\n            return values.some((value) => alumni.skills?.includes(value));\n          default:\n            return true;\n        }\n      });\n    });\n\n    setFilteredData(results);\n  }, [search,"}, {"index": 1340, "path": "client/screens/AlumniDirectory.jsx", "chunk": "t:\n            return true;\n        }\n      });\n    });\n\n    setFilteredData(results);\n  }, [search, activeFilters, alumniData]);\n\n  const clearAllFilters = useCallback(() => {\n    setActiveFilters({});\n    setSearch('');\n  }, []);\n\n  const renderItem = useCallback(({ item }) => <UserCard alumni={item} />, []);\n\n  useEffect(() => {\n    fetchAlumni();\n  }, []);\n\n  // Update filtered data whenever search or filters change\n  useEffect(() => {\n    filterAlumni();\n  }, [filterAlumni]);\n\n  if (loading"}, {"index": 1341, "path": "client/screens/AlumniDirectory.jsx", "chunk": "earch or filters change\n  useEffect(() => {\n    filterAlumni();\n  }, [filterAlumni]);\n\n  if (loading) {\n    return (\n      <View className=\"flex-1 items-center justify-center bg-background\">\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n        <Text className=\"text-text/60 mt-4\">Loading alumni...</Text>\n      </View>\n    );\n  }\n\n  if (error) {\n    return (\n      <View className=\"flex-1 items-center justify-center bg-background px-4\">\n        <Text className=\"mb-4 text-center text-r"}, {"index": 1342, "path": "client/screens/AlumniDirectory.jsx", "chunk": "-1 items-center justify-center bg-background px-4\">\n        <Text className=\"mb-4 text-center text-red-500\">{error}</Text>\n        <TouchableOpacity className=\"rounded-lg bg-blue-500 px-4 py-2\" onPress={fetchAlumni}>\n          <Text className=\"text-white\">Retry</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View className=\"flex-1 bg-background\">\n      <View className=\"border-overlay/10 space-y-3.5 border-b bg-background px-4 pb-3 pt-3.5 shadow-sm\">\n        <View cla"}, {"index": 1343, "path": "client/screens/AlumniDirectory.jsx", "chunk": "\"border-overlay/10 space-y-3.5 border-b bg-background px-4 pb-3 pt-3.5 shadow-sm\">\n        <View className=\"bg-overlay/5 flex-row items-center rounded-xl px-4 py-2.5\">\n          <Ionicons name=\"search\" size={20} className=\"text-text/30\" />\n          <TextInput\n            className=\"ml-3 flex-1 text-base text-text\"\n            placeholder=\"Search alumni...\"\n            value={search}\n            onChangeText={setSearch}\n            placeholderTextColor=\"text-text/40\"\n          />\n          {sear"}, {"index": 1344, "path": "client/screens/AlumniDirectory.jsx", "chunk": "nChangeText={setSearch}\n            placeholderTextColor=\"text-text/40\"\n          />\n          {search && (\n            <TouchableOpacity\n              onPress={() => setSearch('')}\n              className=\"bg-overlay/10 rounded-full p-2\"\n              activeOpacity={0.7}\n              hitSlop={{ top: 12, bottom: 12, left: 12, right: 12 }}>\n              <Ionicons name=\"close\" size={16} className=\"text-text/50\" />\n            </TouchableOpacity>\n          )}\n        </View>\n\n        <View classN"}, {"index": 1345, "path": "client/screens/AlumniDirectory.jsx", "chunk": "\"text-text/50\" />\n            </TouchableOpacity>\n          )}\n        </View>\n\n        <View className=\"flex-row items-center justify-between\">\n          <Text className=\"text-text/50 text-xs font-medium\">\n            {Object.keys(activeFilters).length} filters applied\n          </Text>\n          {Object.keys(activeFilters).length > 0 && (\n            <TouchableOpacity\n              onPress={clearAllFilters}\n              className=\"bg-accent/10 rounded-lg px-2.5 py-1\"\n              activeOpaci"}, {"index": 1346, "path": "client/screens/AlumniDirectory.jsx", "chunk": "rAllFilters}\n              className=\"bg-accent/10 rounded-lg px-2.5 py-1\"\n              activeOpacity={0.7}>\n              <Text className=\"text-xs font-medium text-accent\">Clear All</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n\n        <ScrollView\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          className=\"-mx-1 flex-row space-x-1.5 py-0.5\"\n          contentContainerStyle={{ paddingHorizontal: 4 }}>\n          {Object.entries(filters).map((["}, {"index": 1347, "path": "client/screens/AlumniDirectory.jsx", "chunk": "         contentContainerStyle={{ paddingHorizontal: 4 }}>\n          {Object.entries(filters).map(([key, values]) => (\n            <FilterDropdown\n              key={key}\n              title={key}\n              options={values}\n              selected={activeFilters[key]}\n              onSelect={(value) => updateFilters(key, value)}\n              onClear={() => updateFilters(key, null)}\n            />\n          ))}\n        </ScrollView>\n      </View>\n\n      <FlatList\n        data={filteredData}\n "}, {"index": 1348, "path": "client/screens/AlumniDirectory.jsx", "chunk": " />\n          ))}\n        </ScrollView>\n      </View>\n\n      <FlatList\n        data={filteredData}\n        renderItem={renderItem}\n        keyExtractor={(item) => item._id}\n        numColumns={2}\n        contentContainerStyle={{\n          padding: 8,\n          paddingBottom: 24,\n          flexGrow: 1,\n          paddingHorizontal: 12,\n        }}\n        columnWrapperStyle={{\n          gap: 12,\n          marginBottom: 12,\n          justifyContent: 'space-evenly',\n          width: '100%',\n        }"}, {"index": 1349, "path": "client/screens/AlumniDirectory.jsx", "chunk": "      marginBottom: 12,\n          justifyContent: 'space-evenly',\n          width: '100%',\n        }}\n        showsVerticalScrollIndicator={false}\n        initialNumToRender={6}\n        maxToRenderPerBatch={8}\n        windowSize={5}\n        removeClippedSubviews\n        ListEmptyComponent={EmptyStateMessage}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n            tintColor=\"#0000ff\"\n            colors={['#0000ff']}\n    "}, {"index": 1350, "path": "client/screens/AlumniDirectory.jsx", "chunk": "         onRefresh={onRefresh}\n            tintColor=\"#0000ff\"\n            colors={['#0000ff']}\n          />\n        }\n      />\n    </View>\n  );\n};\n\nexport default AlumniDirectory;\n"}, {"index": 1351, "path": "client/screens/Call.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport { MaterialIcons, Ionicons } from '@expo/vector-icons';\nimport { CameraView, useCameraPermissions } from 'expo-camera';\nimport { useState, useRef, useEffect } from 'react';\nimport { View, Text, Image, TouchableOpacity, Platform } from 'react-native';\nimport io from 'socket.io-client';\n\nconst VideoCallScreen = ({ route, navigation }) => {\n  const [permission, requestPermission] = useCameraPermissions();\n  const [isCameraOn, setIsCameraOn] = useState(true);"}, {"index": 1352, "path": "client/screens/Call.jsx", "chunk": ", requestPermission] = useCameraPermissions();\n  const [isCameraOn, setIsCameraOn] = useState(true);\n  const [remoteFrame, setRemoteFrame] = useState(null);\n  const socket = useRef(null);\n  const cameraRef = useRef(null);\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const frameInterval = useRef(null);\n  const [facing] = useState('front');\n\n  const { chatData, roomId } = route.params;\n\n  useEffect(() => {\n    socket.current = io(SERVER_URL);\n    socket.current.on('videoFra"}, {"index": 1353, "path": "client/screens/Call.jsx", "chunk": "te.params;\n\n  useEffect(() => {\n    socket.current = io(SERVER_URL);\n    socket.current.on('videoFrame', (data) => setRemoteFrame(data.frame));\n    socket.current.emit('joinRoom', roomId);\n\n    if (Platform.OS === 'web') {\n      initWebCamera();\n    }\n\n    startCapturingFrames();\n\n    return () => {\n      stopCapturingFrames();\n      socket.current?.disconnect();\n    };\n  }, []);\n\n  const initWebCamera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ vid"}, {"index": 1354, "path": "client/screens/Call.jsx", "chunk": "amera = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n    } catch (err) {\n      console.error('Camera error:', err);\n    }\n  };\n\n  const captureAndSendFrame = async () => {\n    if (!isCameraOn) return;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (!videoRef.current || !canvasRef.current) return;\n        const canvas = canvasRef.current;\n       "}, {"index": 1355, "path": "client/screens/Call.jsx", "chunk": " (!videoRef.current || !canvasRef.current) return;\n        const canvas = canvasRef.current;\n        const video = videoRef.current;\n\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        const frame = canvas.toDataURL('image/jpeg', 0.5).split(',')[1];\n        socket.current?.emit('videoFrame', { roomId, frame });\n      } else {\n        if (!cameraRe"}, {"index": 1356, "path": "client/screens/Call.jsx", "chunk": "\n        socket.current?.emit('videoFrame', { roomId, frame });\n      } else {\n        if (!cameraRef.current) return;\n\n        try {\n          const photo = await cameraRef.current.takePictureAsync({\n            base64: true,\n            skipProcessing: true,\n            shutterSound: false,\n          });\n\n          if (!photo?.base64) {\n            console.warn('Camera capture returned empty data');\n            return;\n          }\n\n          socket.current?.emit('videoFrame', { roomId, frame: "}, {"index": 1357, "path": "client/screens/Call.jsx", "chunk": "a');\n            return;\n          }\n\n          socket.current?.emit('videoFrame', { roomId, frame: photo.base64 });\n        } catch (captureError) {\n          console.warn('Frame capture failed, retrying...', captureError);\n          // Wait briefly before next capture attempt\n          await new Promise((resolve) => setTimeout(resolve, 100));\n        }\n      }\n    } catch (error) {\n      console.error('Frame capture error:', error);\n    }\n  };\n\n  const startCapturingFrames = () => {\n    stopCa"}, {"index": 1358, "path": "client/screens/Call.jsx", "chunk": ".error('Frame capture error:', error);\n    }\n  };\n\n  const startCapturingFrames = () => {\n    stopCapturingFrames(); // Clear any existing interval\n    frameInterval.current = setInterval(captureAndSendFrame, 500); // Increased interval for stability\n  };\n\n  const stopCapturingFrames = () => {\n    if (frameInterval.current) {\n      clearInterval(frameInterval.current);\n      frameInterval.current = null;\n    }\n  };\n\n  const toggleCamera = () => {\n    setIsCameraOn(!isCameraOn);\n  };\n\n  if (!perm"}, {"index": 1359, "path": "client/screens/Call.jsx", "chunk": "= null;\n    }\n  };\n\n  const toggleCamera = () => {\n    setIsCameraOn(!isCameraOn);\n  };\n\n  if (!permission?.granted) {\n    return (\n      <View className=\"flex-1 items-center justify-center p-4\">\n        <Text className=\"mb-4 text-center\">Camera permission required</Text>\n        <TouchableOpacity onPress={requestPermission} className=\"rounded-full bg-primary px-6 py-3\">\n          <Text className=\"text-white\">Grant Permission</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return "}, {"index": 1360, "path": "client/screens/Call.jsx", "chunk": "\"text-white\">Grant Permission</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View className=\"flex-1 bg-[#1a1a1a]\">\n      {/* Remote Video */}\n      <View className=\"flex-1 items-center justify-center\">\n        {remoteFrame ? (\n          <Image\n            source={{ uri: `data:image/jpeg;base64,${remoteFrame}` }}\n            className=\"h-full w-full\"\n          />\n        ) : (\n          <View className=\"items-center justify-center\">\n            <MaterialIcons name=\"p"}, {"index": 1361, "path": "client/screens/Call.jsx", "chunk": "   ) : (\n          <View className=\"items-center justify-center\">\n            <MaterialIcons name=\"person-outline\" size={64} color=\"#666\" />\n            <Text className=\"text-gray-500\">Waiting for other user...</Text>\n          </View>\n        )}\n      </View>\n\n      {/* Local Video */}\n      <View className=\"w-30 absolute right-5 top-24 h-44 overflow-hidden rounded-xl border-2 border-white\">\n        {Platform.OS === 'web' ? (\n          <video ref={videoRef} autoPlay playsInline className=\"h-ful"}, {"index": 1362, "path": "client/screens/Call.jsx", "chunk": "    {Platform.OS === 'web' ? (\n          <video ref={videoRef} autoPlay playsInline className=\"h-full w-full object-cover\" />\n        ) : (\n          <CameraView\n            ref={cameraRef}\n            className=\"h-full w-full\"\n            facing={facing}\n            active={isCameraOn}\n          />\n        )}\n      </View>\n\n      {Platform.OS === 'web' && <canvas ref={canvasRef} style={{ display: 'none' }} />}\n\n      {/* Controls */}\n      <View className=\"absolute bottom-10 w-full flex-row jus"}, {"index": 1363, "path": "client/screens/Call.jsx", "chunk": " 'none' }} />}\n\n      {/* Controls */}\n      <View className=\"absolute bottom-10 w-full flex-row justify-center space-x-5\">\n        <TouchableOpacity\n          className={`w-15 h-15 items-center justify-center rounded-full ${\n            isCameraOn ? 'bg-green-500' : 'bg-red-500'\n          }`}\n          onPress={toggleCamera}>\n          <Ionicons name={isCameraOn ? 'videocam' : 'videocam-off'} size={28} color=\"#fff\" />\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          className=\"w"}, {"index": 1364, "path": "client/screens/Call.jsx", "chunk": "e={28} color=\"#fff\" />\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          className=\"w-15 h-15 items-center justify-center rounded-full bg-red-500\"\n          onPress={() => navigation.goBack()}>\n          <MaterialIcons name=\"call-end\" size={28} color=\"#fff\" />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default VideoCallScreen;\n"}, {"index": 1365, "path": "client/screens/Chat.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport { useNavigation } from '@react-navigation/native';\nimport axios from 'axios';\nimport { useCallback, useState, useEffect } from 'react';\nimport {\n  View,\n  FlatList,\n  Text,\n  TouchableOpacity,\n  Image,\n  RefreshControl,\n  ActivityIndicator,\n} from 'react-native';\n\nimport { useAuth } from '../providers/AuthProvider';\nimport { FontAwesome6 } from '@expo/vector-icons';\n\nconst MAX_RETRIES = 3;\nconst INITIAL_RETRY_DELAY = 1000;\n\nconst ChatScreen = () => {\n  c"}, {"index": 1366, "path": "client/screens/Chat.jsx", "chunk": "or-icons';\n\nconst MAX_RETRIES = 3;\nconst INITIAL_RETRY_DELAY = 1000;\n\nconst ChatScreen = () => {\n  const navigation = useNavigation();\n  const [refreshing, setRefreshing] = useState(false);\n  const [chats, setChats] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const { token } = useAuth();\n\n  const fetchChats = async (attempt = 0) => {\n    try {\n      if (!token) {\n        navigatio"}, {"index": 1367, "path": "client/screens/Chat.jsx", "chunk": "th();\n\n  const fetchChats = async (attempt = 0) => {\n    try {\n      if (!token) {\n        navigation.navigate('Login');\n        return;\n      }\n\n      const {\n        data: { data },\n      } = await axios.get(`${SERVER_URL}/chat/fetch`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      setChats(data);\n      setError(null);\n      setRetryCount(0);\n    } catch (err) {\n      if (attempt < MAX_RETRIES) {\n        const delay = INITIAL_RETRY_DELAY * Math.pow"}, {"index": 1368, "path": "client/screens/Chat.jsx", "chunk": "atch (err) {\n      if (attempt < MAX_RETRIES) {\n        const delay = INITIAL_RETRY_DELAY * Math.pow(2, attempt);\n        setError(`Failed to fetch chats. Retrying in ${delay / 1000} seconds...`);\n        setTimeout(() => {\n          setRetryCount(attempt + 1);\n          fetchChats(attempt + 1);\n        }, delay);\n      } else {\n        setError(`Failed to fetch chats after ${MAX_RETRIES} attempts. Please try again.`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() ="}, {"index": 1369, "path": "client/screens/Chat.jsx", "chunk": ". Please try again.`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchChats();\n  }, []);\n\n  const onRefresh = useCallback(async () => {\n    setRefreshing(true);\n    await fetchChats();\n    setRefreshing(false);\n  }, []);\n\n  const handleChatPress = (item) => {\n    navigation.navigate('Message', { chatData: item });\n  };\n\n  if (loading && !refreshing) {\n    return (\n      <View className=\"flex-1 items-center justify-center\">\n        <ActivityIndicator siz"}, {"index": 1370, "path": "client/screens/Chat.jsx", "chunk": " return (\n      <View className=\"flex-1 items-center justify-center\">\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n      </View>\n    );\n  }\n\n  return (\n    <View className=\"flex-1 bg-background\">\n      {error ? (\n        <View className=\"flex-1 items-center justify-center p-4\">\n          <Text className=\"mb-4 text-red-500\">{error}</Text>\n          {retryCount >= MAX_RETRIES && (\n            <TouchableOpacity\n              className=\"rounded-lg bg-primary px-4 py-2\"\n              on"}, {"index": 1371, "path": "client/screens/Chat.jsx", "chunk": "        <TouchableOpacity\n              className=\"rounded-lg bg-primary px-4 py-2\"\n              onPress={() => {\n                setLoading(true);\n                setRetryCount(0);\n                fetchChats(0);\n              }}>\n              <Text className=\"text-white\">Retry</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n      ) : (\n        <>\n          <TouchableOpacity\n            className=\"flex-row items-center justify-between border bg-white p-4\"\n            onPres"}, {"index": 1372, "path": "client/screens/Chat.jsx", "chunk": "            className=\"flex-row items-center justify-between border bg-white p-4\"\n            onPress={() => { navigation.navigate('Community Chats'); }}>\n            <Text className=\"text-lg font-semibold text-text\">\n              Go to Communities\n            </Text>\n            <FontAwesome6\n              name='chevron-right'\n              size={14}\n              color=\"#1f2937\"\n            />\n          </TouchableOpacity>\n          <FlatList\n            data={chats.filter((chat) => !chat.cha"}, {"index": 1373, "path": "client/screens/Chat.jsx", "chunk": "          </TouchableOpacity>\n          <FlatList\n            data={chats.filter((chat) => !chat.chatType)}\n            keyExtractor={(item) => item.chatId}\n            refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n            renderItem={({ item }) => (\n              <TouchableOpacity\n                className=\"flex-row items-center border bg-white p-4\"\n                onPress={() => handleChatPress(item)}>\n                <View className=\"relative\">\n        "}, {"index": 1374, "path": "client/screens/Chat.jsx", "chunk": "         onPress={() => handleChatPress(item)}>\n                <View className=\"relative\">\n                  <Image\n                    source={{\n                      uri: item.profilePhoto || 'https://via.placeholder.com/50',\n                    }}\n                    className=\"h-12 w-12 rounded-full\"\n                  />\n                </View>\n                <View className=\"ml-4 flex-1\">\n                  <Text className=\"text-lg font-semibold text-text\" numberOfLines={1}>\n              "}, {"index": 1375, "path": "client/screens/Chat.jsx", "chunk": "                 <Text className=\"text-lg font-semibold text-text\" numberOfLines={1}>\n                    {item.otherParticipantName}\n                  </Text>\n                  <Text className=\"mt-1 text-highlight\" numberOfLines={1}>\n                    {item.lastMessage}\n                  </Text>\n                </View>\n                <View className=\"items-end\">\n                  <Text className=\"text-sm text-highlight\">\n                    {new Date(item.lastMessageTimestamp).toLocaleDateSt"}, {"index": 1376, "path": "client/screens/Chat.jsx", "chunk": "me=\"text-sm text-highlight\">\n                    {new Date(item.lastMessageTimestamp).toLocaleDateString()}\n                  </Text>\n                </View>\n              </TouchableOpacity>\n            )}\n          />\n        </>\n      )}\n    </View>\n  );\n};\n\nexport default ChatScreen;\n"}, {"index": 1377, "path": "client/screens/CommunityChat.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport { useNavigation } from '@react-navigation/native';\nimport axios from 'axios';\nimport { useCallback, useState, useEffect } from 'react';\nimport {\n  View,\n  FlatList,\n  Text,\n  TouchableOpacity,\n  Image,\n  RefreshControl,\n  ActivityIndicator,\n} from 'react-native';\n\nimport { useAuth } from '../providers/AuthProvider';\n\nconst MAX_RETRIES = 3;\nconst INITIAL_RETRY_DELAY = 1000;\n\nconst CommunityChatScreen = () => {\n  const navigation = useNavigation();\n  const"}, {"index": 1378, "path": "client/screens/CommunityChat.jsx", "chunk": "TRY_DELAY = 1000;\n\nconst CommunityChatScreen = () => {\n  const navigation = useNavigation();\n  const [refreshing, setRefreshing] = useState(false);\n  const [chats, setChats] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [retryCount, setRetryCount] = useState(0);\n  const { token } = useAuth();\n\n  const fetchChats = async (attempt = 0) => {\n    try {\n      if (!token) {\n        navigation.navigate('Login');\n        return;\n     "}, {"index": 1379, "path": "client/screens/CommunityChat.jsx", "chunk": " = 0) => {\n    try {\n      if (!token) {\n        navigation.navigate('Login');\n        return;\n      }\n\n      const {\n        data: { data },\n      } = await axios.get(`${SERVER_URL}/chat/fetch`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      setChats(data);\n      setError(null);\n      setRetryCount(0);\n    } catch (err) {\n      if (attempt < MAX_RETRIES) {\n        const delay = INITIAL_RETRY_DELAY * Math.pow(2, attempt);\n        setError(`Failed to "}, {"index": 1380, "path": "client/screens/CommunityChat.jsx", "chunk": "ES) {\n        const delay = INITIAL_RETRY_DELAY * Math.pow(2, attempt);\n        setError(`Failed to fetch chats. Retrying in ${delay / 1000} seconds...`);\n        setTimeout(() => {\n          setRetryCount(attempt + 1);\n          fetchChats(attempt + 1);\n        }, delay);\n      } else {\n        setError(`Failed to fetch chats after ${MAX_RETRIES} attempts. Please try again.`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchChats();\n  }, []);\n\n  const o"}, {"index": 1381, "path": "client/screens/CommunityChat.jsx", "chunk": "ly {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchChats();\n  }, []);\n\n  const onRefresh = useCallback(async () => {\n    setRefreshing(true);\n    await fetchChats();\n    setRefreshing(false);\n  }, []);\n\n  const handleChatPress = (item) => {\n    navigation.navigate('Message', { chatData: item });\n  };\n\n  if (loading && !refreshing) {\n    return (\n      <View className=\"flex-1 items-center justify-center\">\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n      </View>"}, {"index": 1382, "path": "client/screens/CommunityChat.jsx", "chunk": "ems-center justify-center\">\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n      </View>\n    );\n  }\n\n  return (\n    <View className=\"flex-1 bg-background\">\n      {error ? (\n        <View className=\"flex-1 items-center justify-center p-4\">\n          <Text className=\"mb-4 text-red-500\">{error}</Text>\n          {retryCount >= MAX_RETRIES && (\n            <TouchableOpacity\n              className=\"rounded-lg bg-primary px-4 py-2\"\n              onPress={() => {\n                setLoading("}, {"index": 1383, "path": "client/screens/CommunityChat.jsx", "chunk": "assName=\"rounded-lg bg-primary px-4 py-2\"\n              onPress={() => {\n                setLoading(true);\n                setRetryCount(0);\n                fetchChats(0);\n              }}>\n              <Text className=\"text-white\">Retry</Text>\n            </TouchableOpacity>\n          )}\n        </View>\n      ) : (\n        <FlatList\n          data={chats.filter((chat) => chat.chatType)}\n          keyExtractor={(item) => item.chatId}\n          refreshControl={<RefreshControl refreshing={refresh"}, {"index": 1384, "path": "client/screens/CommunityChat.jsx", "chunk": "  keyExtractor={(item) => item.chatId}\n          refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\n          renderItem={({ item }) => (\n            <TouchableOpacity\n              className=\"flex-row items-center border bg-white p-4\"\n              onPress={() => handleChatPress(item)}>\n              <View className=\"relative\">\n                <Image\n                  source={{\n                    uri: item.profilePhoto || 'https://via.placeholder.com/50',\n       "}, {"index": 1385, "path": "client/screens/CommunityChat.jsx", "chunk": "   source={{\n                    uri: item.profilePhoto || 'https://via.placeholder.com/50',\n                  }}\n                  className=\"h-12 w-12 rounded-full\"\n                />\n              </View>\n              <View className=\"ml-4 flex-1\">\n                <Text className=\"text-lg font-semibold text-text\" numberOfLines={1}>\n                  {item.otherParticipantName}\n                </Text>\n                <Text className=\"mt-1 text-highlight\" numberOfLines={1}>\n                  {"}, {"index": 1386, "path": "client/screens/CommunityChat.jsx", "chunk": "</Text>\n                <Text className=\"mt-1 text-highlight\" numberOfLines={1}>\n                  {item.lastMessage}\n                </Text>\n              </View>\n              <View className=\"items-end\">\n                <Text className=\"text-sm text-highlight\">\n                  {new Date(item.lastMessageTimestamp).toLocaleDateString()}\n                </Text>\n              </View>\n            </TouchableOpacity>\n          )}\n        />\n      )}\n    </View>\n  );\n};\n\nexport default CommunityCh"}, {"index": 1387, "path": "client/screens/CommunityChat.jsx", "chunk": "</TouchableOpacity>\n          )}\n        />\n      )}\n    </View>\n  );\n};\n\nexport default CommunityChatScreen;\n"}, {"index": 1388, "path": "client/screens/ConfirmRegistration.jsx", "chunk": "import { MaterialIcons } from '@expo/vector-icons';\nimport { View, Text, ScrollView, Linking, TouchableOpacity } from 'react-native';\n\nconst Section = ({ title, children }) => (\n  <View className=\"mb-6\">\n    <Text className=\"mb-3 text-xl font-bold text-gray-800\">{title}</Text>\n    {children}\n  </View>\n);\n\nconst ConfirmRegistration = ({ route }) => {\n  const { resumeData } = route.params;\n  console.log('Resume data:', resumeData);\n  const { personal_info, education, experience, projects, achievem"}, {"index": 1389, "path": "client/screens/ConfirmRegistration.jsx", "chunk": ".log('Resume data:', resumeData);\n  const { personal_info, education, experience, projects, achievements } = resumeData;\n\n  const handleLink = (url) => {\n    Linking.openURL(url);\n  };\n\n  return (\n    <ScrollView className=\"flex-1 bg-gray-50\">\n      <View className=\"p-6\">\n        {/* Personal Info */}\n        <Section title=\"Personal Information\">\n          <View className=\"rounded-xl bg-white p-4 shadow-sm\">\n            <Text className=\"text-2xl font-bold text-gray-900\">{personal_info.full_name"}, {"index": 1390, "path": "client/screens/ConfirmRegistration.jsx", "chunk": " shadow-sm\">\n            <Text className=\"text-2xl font-bold text-gray-900\">{personal_info.full_name}</Text>\n            <Text className=\"mt-2 text-gray-600\">{personal_info.email}</Text>\n            <Text className=\"text-gray-600\">{personal_info.phone}</Text>\n            <View className=\"mt-3 flex-row space-x-4\">\n              {personal_info.linkedin && (\n                <TouchableOpacity onPress={() => handleLink(personal_info.linkedin)}>\n                  <Text className=\"text-blue-500\">Linked"}, {"index": 1391, "path": "client/screens/ConfirmRegistration.jsx", "chunk": "{() => handleLink(personal_info.linkedin)}>\n                  <Text className=\"text-blue-500\">LinkedIn</Text>\n                </TouchableOpacity>\n              )}\n              {personal_info.github && (\n                <TouchableOpacity onPress={() => handleLink(personal_info.github)}>\n                  <Text className=\"text-blue-500\">GitHub</Text>\n                </TouchableOpacity>\n              )}\n            </View>\n          </View>\n        </Section>\n\n        {/* Education */}\n        <Se"}, {"index": 1392, "path": "client/screens/ConfirmRegistration.jsx", "chunk": "  )}\n            </View>\n          </View>\n        </Section>\n\n        {/* Education */}\n        <Section title=\"Education\">\n          {education.map((edu, index) => (\n            <View key={index} className=\"mb-3 rounded-xl bg-white p-4 shadow-sm\">\n              <Text className=\"text-lg font-semibold\">{edu.institution}</Text>\n              <Text className=\"text-gray-700\">\n                {edu.degree} \u2022 {edu.major}\n              </Text>\n              <Text className=\"text-gray-600\">{edu.graduati"}, {"index": 1393, "path": "client/screens/ConfirmRegistration.jsx", "chunk": "ree} \u2022 {edu.major}\n              </Text>\n              <Text className=\"text-gray-600\">{edu.graduation_year}</Text>\n              {edu.honors && <Text className=\"mt-1 text-gray-600\">{edu.honors}</Text>}\n            </View>\n          ))}\n        </Section>\n\n        {/* Experience */}\n        <Section title=\"Experience\">\n          {experience.map((exp, index) => (\n            <View key={index} className=\"mb-3 rounded-xl bg-white p-4 shadow-sm\">\n              <Text className=\"text-lg font-semibold\""}, {"index": 1394, "path": "client/screens/ConfirmRegistration.jsx", "chunk": "Name=\"mb-3 rounded-xl bg-white p-4 shadow-sm\">\n              <Text className=\"text-lg font-semibold\">{exp.company}</Text>\n              <Text className=\"text-gray-700\">{exp.position}</Text>\n              <Text className=\"text-gray-600\">\n                {exp.start_date} - {exp.end_date || 'Present'}\n              </Text>\n              <View className=\"mt-2\">\n                {exp.responsibilities.map((resp, idx) => (\n                  <View key={idx} className=\"mt-1 flex-row items-start\">\n        "}, {"index": 1395, "path": "client/screens/ConfirmRegistration.jsx", "chunk": "p((resp, idx) => (\n                  <View key={idx} className=\"mt-1 flex-row items-start\">\n                    <Text className=\"flex-1 text-gray-600\">{resp}</Text>\n                  </View>\n                ))}\n              </View>\n            </View>\n          ))}\n        </Section>\n\n        {/* Projects */}\n        <Section title=\"Projects\">\n          {projects.map((project, index) => (\n            <View key={index} className=\"mb-3 rounded-xl bg-white p-4 shadow-sm\">\n              <Text class"}, {"index": 1396, "path": "client/screens/ConfirmRegistration.jsx", "chunk": "     <View key={index} className=\"mb-3 rounded-xl bg-white p-4 shadow-sm\">\n              <Text className=\"text-lg font-semibold\">{project.name}</Text>\n              <Text className=\"mt-1 text-gray-600\">{project.description}</Text>\n              <View className=\"mt-2 flex-row flex-wrap\">\n                {project.technologies.map((tech, idx) => (\n                  <Text\n                    key={idx}\n                    className=\"mb-2 mr-2 rounded-full bg-gray-100 px-2 py-1 text-gray-600\">\n       "}, {"index": 1397, "path": "client/screens/ConfirmRegistration.jsx", "chunk": "\n                    className=\"mb-2 mr-2 rounded-full bg-gray-100 px-2 py-1 text-gray-600\">\n                    {tech}\n                  </Text>\n                ))}\n              </View>\n            </View>\n          ))}\n        </Section>\n\n        {/* Achievements */}\n        <Section title=\"Achievements\">\n          {achievements.map((achievement, index) => (\n            <View key={index} className=\"mb-3 rounded-xl bg-white p-4 shadow-sm\">\n              <Text className=\"text-lg font-semibold\">"}, {"index": 1398, "path": "client/screens/ConfirmRegistration.jsx", "chunk": "ame=\"mb-3 rounded-xl bg-white p-4 shadow-sm\">\n              <Text className=\"text-lg font-semibold\">{achievement.title}</Text>\n              <Text className=\"mt-1 text-gray-600\">{achievement.description}</Text>\n              {achievement.date && <Text className=\"mt-1 text-gray-500\">{achievement.date}</Text>}\n            </View>\n          ))}\n        </Section>\n      </View>\n    </ScrollView>\n  );\n};\n\nexport default ConfirmRegistration;\n"}, {"index": 1399, "path": "client/screens/ConfirmRegistration.jsx", "chunk": "};\n\nexport default ConfirmRegistration;\n"}, {"index": 1400, "path": "client/screens/Connections.jsx", "chunk": "import AlumniConnections from '../components/connections/AlumniConnections';\nimport CollegeConnections from '../components/connections/CollegeConnections';\nimport { useAuth } from '../providers/AuthProvider';\n\nconst Notifications = () => {\n  const { role } = useAuth();\n  if (role === 'alumni') {\n    return <AlumniConnections />;\n  } else {\n    return <CollegeConnections />;\n  }\n};\n\nexport default Notifications;\n"}, {"index": 1401, "path": "client/screens/Connections.jsx", "chunk": "Notifications;\n"}, {"index": 1402, "path": "client/screens/Donations.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  FlatList,\n  Image,\n  Animated,\n  Modal,\n} from 'react-native';\n\nimport PaymentModal from '../components/events/PaymentModal';\nimport { useAuth } from '../providers/AuthProvider';\n// import { donationCampaigns } from '../constants/donations/donationData';\n\nconst formatIndi"}, {"index": 1403, "path": "client/screens/Donations.jsx", "chunk": "ider';\n// import { donationCampaigns } from '../constants/donations/donationData';\n\nconst formatIndianNumber = (num) => {\n  if (num >= 10000000) {\n    // 1 crore or more\n    return `\u20b9${(num / 10000000).toFixed(2)} Cr`;\n  } else if (num >= 100000) {\n    // 1 lakh or more\n    return `\u20b9${(num / 100000).toFixed(2)} L`;\n  } else {\n    return `\u20b9${num.toLocaleString('en-IN')}`;\n  }\n};\n\n\n\nconst DonationPortal = ({ navigation }) => {\n  const [donationAmount, setDonationAmount] = useState('');\n  const [do"}, {"index": 1404, "path": "client/screens/Donations.jsx", "chunk": "rtal = ({ navigation }) => {\n  const [donationAmount, setDonationAmount] = useState('');\n  const [donationHistory, setDonationHistory] = useState([]);\n  const [showHistory, setShowHistory] = useState(false);\n  const [campaigns, setCampaigns] = useState([]);\n  const [selectedCause, setSelectedCause] = useState({});\n  const { token, role } = useAuth();\n  const [paymentModalOpen, setPaymentModalOpen] = useState(false);\n  const [showDonorsModal, setShowDonorsModal] = useState(false);\n  const [select"}, {"index": 1405, "path": "client/screens/Donations.jsx", "chunk": " = useState(false);\n  const [showDonorsModal, setShowDonorsModal] = useState(false);\n  const [selectedDonors, setSelectedDonors] = useState([]);\n  const [selectedCampaignDetails, setSelectedCampaignDetails] = useState(null);\n  const [isDonorsLoading, setIsDonorsLoading] = useState(false);\n\n\n  useEffect(() => {\n    const fetchRegisteredUsers = async () => {\n        try {\n          const response = await axios.get(`${SERVER_URL}/donationcampaigns/${id}/registered`, {\n            headers: {\n       "}, {"index": 1406, "path": "client/screens/Donations.jsx", "chunk": "await axios.get(`${SERVER_URL}/donationcampaigns/${id}/registered`, {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          });\n          if (response.data) {\n            console.log(response.data);\n            setRegisteredUsers(response.data); // Make sure to access response.data\n          }\n        } catch (error) {\n          console.error('Error fetching registered users:', error);\n          setRegisteredUsers([]); // Set to empty array on error\n    "}, {"index": 1407, "path": "client/screens/Donations.jsx", "chunk": "ng registered users:', error);\n          setRegisteredUsers([]); // Set to empty array on error\n        }\n    };\n  \n    fetchRegisteredUsers();\n  }, []);\n\n\n  \n  const fetchDonationHistory = async () => {\n    try {\n      const response = await axios.get(`${SERVER_URL}/users/donations`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      setDonationHistory(response.data);\n    } catch (error) {\n      console.error('Error fetching donation history:', error);\n "}, {"index": 1408, "path": "client/screens/Donations.jsx", "chunk": "ponse.data);\n    } catch (error) {\n      console.error('Error fetching donation history:', error);\n      alert('Failed to load donation history. Please try again later.');\n    }\n  };\n\n  const fetchDonors = async (id) => {\n    setIsDonorsLoading(true);\n    try {\n      const response = await axios.get(`${SERVER_URL}/donationcampaigns/${id}/getDonors`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        }\n      });\n      console.log('Donors data:', response.data);\n      return "}, {"index": 1409, "path": "client/screens/Donations.jsx", "chunk": "earer ${token}`,\n        }\n      });\n      console.log('Donors data:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching donors:', error);\n      return [];\n    } finally {\n      setIsDonorsLoading(false);\n    }\n  };\n\n\n  useEffect(() => {\n    const fetchCampaigns = async () => {\n      try {\n        const response = await axios.get(`${SERVER_URL}/donationcampaigns`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },"}, {"index": 1410, "path": "client/screens/Donations.jsx", "chunk": "onationcampaigns`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        setCampaigns(response.data);\n        setSelectedCause(response.data[0]);\n      } catch (error) {\n        console.error('Error fetching donation data:', error);\n        alert('Failed to load donation campaigns. Please try again later.');\n      }\n    };\n\n    fetchCampaigns();\n  }, []);\n\n  useEffect(() => {\n    fetchDonationHistory();\n  }, []);\n\n  const handleDonation = (amount) "}, {"index": 1411, "path": "client/screens/Donations.jsx", "chunk": " []);\n\n  useEffect(() => {\n    fetchDonationHistory();\n  }, []);\n\n  const handleDonation = (amount) => {\n    if (amount && !isNaN(amount) && amount > 0) {\n      setPaymentModalOpen(true);\n    } else {\n      alert('Please enter a valid donation amount');\n    }\n  };\n\n  const handlePaymentComplete = ({ amount, itemId, transaction }) => {\n    // Refresh donation history from server to get latest data\n    fetchDonationHistory();\n\n    // Update campaign data\n    setCampaigns((prevCampaigns) => {\n     "}, {"index": 1412, "path": "client/screens/Donations.jsx", "chunk": "    fetchDonationHistory();\n\n    // Update campaign data\n    setCampaigns((prevCampaigns) => {\n      return prevCampaigns.map((campaign) => {\n        if (campaign.id === itemId) {\n          return {\n            ...campaign,\n            raised: campaign.raised + Number(amount),\n            donors: campaign.donors + 1,\n          };\n        }\n        return campaign;\n      });\n    });\n\n    // Update selected cause\n    setSelectedCause((prev) => ({\n      ...prev,\n      raised: prev.raised + Number(a"}, {"index": 1413, "path": "client/screens/Donations.jsx", "chunk": "selected cause\n    setSelectedCause((prev) => ({\n      ...prev,\n      raised: prev.raised + Number(amount),\n      donors: prev.donors + 1,\n    }));\n\n    setDonationAmount('');\n    setPaymentModalOpen(false);\n  };\n\n  const selectCause = (item) => {\n    setSelectedCause(item);\n    setDonationAmount('');\n  };\n\n  const renderDonationGoal = ({ item }) => (\n    <Animated.View className=\"mb-4 overflow-hidden rounded-2xl bg-white shadow-lg\">\n      <Image source={{ uri: item.image }} className=\"h-48 w-fu"}, {"index": 1414, "path": "client/screens/Donations.jsx", "chunk": "dden rounded-2xl bg-white shadow-lg\">\n      <Image source={{ uri: item.image }} className=\"h-48 w-full\" resizeMode=\"cover\" />\n      <View className=\"absolute right-4 top-4 z-20 rounded-full bg-white/90 px-3 py-1\">\n        <Text className=\"text-xs font-medium text-gray-700\">{item.category}</Text>\n      </View>\n\n      <View className=\"px-4 py-5\">\n        <Text className=\"mb-2 text-xl font-bold text-gray-900\">{item.title}</Text>\n        <Text className=\"mb-4 text-base text-gray-600\">{item.descripti"}, {"index": 1415, "path": "client/screens/Donations.jsx", "chunk": "gray-900\">{item.title}</Text>\n        <Text className=\"mb-4 text-base text-gray-600\">{item.description}</Text>\n\n        {/* Progress Section */}\n        <View className=\"mb-4\">\n          <View className=\"mb-2 flex-row items-center justify-between\">\n            <View>\n              <Text className=\"text-2xl font-bold text-blue-600\">\n                {formatIndianNumber(item.raised)}\n              </Text>\n              <Text className=\"text-xs text-gray-500\">\n                raised of {formatIndian"}, {"index": 1416, "path": "client/screens/Donations.jsx", "chunk": "Text>\n              <Text className=\"text-xs text-gray-500\">\n                raised of {formatIndianNumber(item.goal)} goal\n              </Text>\n            </View>\n            <View className=\"items-end\">\n              <Text className=\"text-lg font-semibold text-gray-800\">\n                {item.donors.toLocaleString('en-IN')}\n              </Text>\n              <Text className=\"text-xs text-gray-500\">supporters</Text>\n            </View>\n          </View>\n          <View className=\"h-2 w-full "}, {"index": 1417, "path": "client/screens/Donations.jsx", "chunk": "-500\">supporters</Text>\n            </View>\n          </View>\n          <View className=\"h-2 w-full rounded-full bg-gray-100\">\n            <View\n              className=\"h-2 rounded-full bg-blue-500\"\n              style={{ width: `${(item.raised / item.goal) * 100}%` }}\n            />\n          </View>\n        </View>\n\n        {/* Impact Card */}\n        <View className=\"mb-4 flex-row items-center rounded-xl bg-blue-50 p-3\">\n          <MaterialCommunityIcons name=\"target\" size={24} color=\"#2563E"}, {"index": 1418, "path": "client/screens/Donations.jsx", "chunk": " rounded-xl bg-blue-50 p-3\">\n          <MaterialCommunityIcons name=\"target\" size={24} color=\"#2563EB\" />\n          <Text className=\"ml-2 flex-1 text-sm text-blue-700\">{item.impact}</Text>\n        </View>\n\n        {/* Campaign Manager - Modern Design */}\n        <View className=\"mb-4 flex-row items-center rounded-xl bg-gray-50 p-3\">\n          <Image\n            source={{ uri: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e' }}\n            className=\"h-10 w-10 rounded-full\"\n        "}, {"index": 1419, "path": "client/screens/Donations.jsx", "chunk": "ash.com/photo-1472099645785-5658abf4ff4e' }}\n            className=\"h-10 w-10 rounded-full\"\n          />\n          <View className=\"ml-3 flex-1\">\n            <Text className=\"text-sm font-semibold text-gray-900\">{item.campaignManager.name}</Text>\n            <Text className=\"text-xs text-gray-500\">{item.campaignManager.role}</Text>\n          </View>\n          <TouchableOpacity className=\"rounded-full bg-white p-2 shadow\">\n            <MaterialCommunityIcons name=\"email-outline\" size={20} color=\""}, {"index": 1420, "path": "client/screens/Donations.jsx", "chunk": "ull bg-white p-2 shadow\">\n            <MaterialCommunityIcons name=\"email-outline\" size={20} color=\"#4B5563\" />\n          </TouchableOpacity>\n        </View>\n\n        {role === 'alumni' &&\n          <View className=\"mb-4\">\n            <View className=\"flex-row flex-wrap gap-2\">\n              {item.suggestedDonations.map((amount, index) => (\n                <TouchableOpacity\n                  key={index}\n                  className=\"rounded-xl border border-blue-100 bg-blue-50 px-4 py-3\"\n        "}, {"index": 1421, "path": "client/screens/Donations.jsx", "chunk": "index}\n                  className=\"rounded-xl border border-blue-100 bg-blue-50 px-4 py-3\"\n                  onPress={() => setDonationAmount(amount.toString())}>\n                  <Text className=\"text-base font-medium text-blue-600\">\n                    {formatIndianNumber(amount)}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n          </View>\n        }\n        <Text className=\"mb-4 text-sm font-medium text-emerald-600\">{item.taxBenefits}"}, {"index": 1422, "path": "client/screens/Donations.jsx", "chunk": "ew>\n        }\n        <Text className=\"mb-4 text-sm font-medium text-emerald-600\">{item.taxBenefits}</Text>\n\n        {role === 'alumni' &&\n          <TouchableOpacity\n            className=\"rounded-xl bg-blue-500 px-4 py-3\"\n            onPress={() => selectCause(item)}>\n            <Text className=\"text-center text-base font-bold text-white\">Select This Cause</Text>\n          </TouchableOpacity>\n        }\n\n        {\n          role !== 'alumni' && (\n            <TouchableOpacity\n              cla"}, {"index": 1423, "path": "client/screens/Donations.jsx", "chunk": "       }\n\n        {\n          role !== 'alumni' && (\n            <TouchableOpacity\n              className=\"rounded-xl bg-blue-500 px-4 py-3\"\n              onPress={async () => {\n                const donors = await fetchDonors(item._id);\n                if (donors && donors.length > 0) {\n                  setSelectedDonors(donors);\n                  setSelectedCampaignDetails(item);\n                  setShowDonorsModal(true);\n                } else {\n                  alert('No donors found for"}, {"index": 1424, "path": "client/screens/Donations.jsx", "chunk": "     setShowDonorsModal(true);\n                } else {\n                  alert('No donors found for this campaign');\n                }\n              }}>\n              <Text className=\"text-center text-base font-bold text-white\">View Details</Text>\n            </TouchableOpacity>\n          )\n\n        }\n\n\n\n      </View>\n    </Animated.View>\n  );\n\n  const renderDonationHistory = ({ item }) => (\n    <View className=\"mb-2 rounded-lg bg-white p-4 shadow-md\">\n      <Text className=\"font-bold text-gree"}, {"index": 1425, "path": "client/screens/Donations.jsx", "chunk": "<View className=\"mb-2 rounded-lg bg-white p-4 shadow-md\">\n      <Text className=\"font-bold text-green-600\">{formatIndianNumber(Number(item.amount))}</Text>\n      <View className=\"mt-1 flex-row justify-between\">\n        <Text className=\"text-xs text-gray-500\">\n          {new Date(item.transactionDate).toLocaleString()}\n        </Text>\n        <View className=\"rounded-full bg-blue-100 px-2 py-1\">\n          <Text className=\"text-xs font-medium text-blue-700\">{item.transactionMethod}</Text>\n        "}, {"index": 1426, "path": "client/screens/Donations.jsx", "chunk": "        <Text className=\"text-xs font-medium text-blue-700\">{item.transactionMethod}</Text>\n        </View>\n      </View>\n      <Text className=\"mt-1 text-xs text-gray-500\">Transaction ID: {item.user}</Text>\n    </View>\n  );\n\n  const renderDonorItem = ({ item }) => (\n    <View className=\"mb-2 rounded-lg bg-white p-4 shadow-sm\">\n      <View className=\"flex-row items-center justify-between\">\n        <View className=\"flex-row items-center flex-1\">\n          <Image\n            source={{ \n           "}, {"index": 1427, "path": "client/screens/Donations.jsx", "chunk": " <View className=\"flex-row items-center flex-1\">\n          <Image\n            source={{ \n              uri: item.user?.profilePhoto || \n                   'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e' \n            }}\n            className=\"h-10 w-10 rounded-full\"\n          />\n          <View className=\"ml-3 flex-1\">\n            <Text className=\"font-semibold text-gray-900\">\n              {item.user?.fullName || item.name}\n            </Text>\n            <Text className=\"text-lg "}, {"index": 1428, "path": "client/screens/Donations.jsx", "chunk": "        {item.user?.fullName || item.name}\n            </Text>\n            <Text className=\"text-lg font-bold text-blue-600\">\n              {formatIndianNumber(item.amount)}\n            </Text>\n            <View className=\"flex-row items-center mt-1\">\n              <Text className=\"text-xs text-gray-500\">\n                {new Date(item.transactionDate).toLocaleDateString()}\n              </Text>\n              <View className=\"mx-2 h-1 w-1 rounded-full bg-gray-300\" />\n              <Text classNam"}, {"index": 1429, "path": "client/screens/Donations.jsx", "chunk": "             <View className=\"mx-2 h-1 w-1 rounded-full bg-gray-300\" />\n              <Text className=\"text-xs font-medium text-blue-500\">\n                {item.transactionMethod}\n              </Text>\n            </View>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n\n  return (\n    <View className=\"flex-1 bg-gray-50\">\n      {/* Modern Donation Input with Indian Format */}\n      <View className=\"px-4 pb-2 pt-4\">\n        {role === 'alumni' ? (\n          <View className=\"rounded"}, {"index": 1430, "path": "client/screens/Donations.jsx", "chunk": " <View className=\"px-4 pb-2 pt-4\">\n        {role === 'alumni' ? (\n          <View className=\"rounded-xl border border-gray-100 bg-white p-3 shadow-lg\">\n            <View className=\"mb-2 flex-row items-center justify-between\">\n              <Text className=\"text-lg font-bold text-gray-900\">Make a Donation</Text>\n              <TouchableOpacity\n                className=\"rounded-lg bg-gray-100 p-2\"\n                onPress={() => setShowHistory(true)}>\n                <MaterialCommunityIcons name=\""}, {"index": 1431, "path": "client/screens/Donations.jsx", "chunk": "                onPress={() => setShowHistory(true)}>\n                <MaterialCommunityIcons name=\"history\" size={20} color=\"#4B5563\" />\n              </TouchableOpacity>\n            </View>\n            <View className=\"flex-row gap-2\">\n              <View className=\"flex-1 flex-row items-center justify-between rounded-lg border border-gray-200 bg-gray-50 px-3\">\n                <View className=\"flex-row items-center\">\n                  <Text className=\"text-xl text-gray-400\">\u20b9</Text>\n          "}, {"index": 1432, "path": "client/screens/Donations.jsx", "chunk": "lex-row items-center\">\n                  <Text className=\"text-xl text-gray-400\">\u20b9</Text>\n                  <TextInput\n                    className=\"ml-2 h-12 w-36 text-xl font-medium text-gray-900\"\n                    placeholder=\"Enter Amount\"\n                    keyboardType=\"numeric\"\n                    value={donationAmount}\n                    onChangeText={(text) => setDonationAmount(text)}\n                  />\n                </View>\n                {donationAmount ? (\n                 "}, {"index": 1433, "path": "client/screens/Donations.jsx", "chunk": "}\n                  />\n                </View>\n                {donationAmount ? (\n                  <Text className=\"text-sm text-gray-500\">\n                    {formatIndianNumber(Number(donationAmount))}\n                  </Text>\n                ) : null}\n              </View>\n              <TouchableOpacity\n                className=\"rounded-lg bg-blue-500 px-4\"\n                onPress={() => handleDonation(donationAmount)}>\n                <View className=\"h-12 items-center justify-center\">"}, {"index": 1434, "path": "client/screens/Donations.jsx", "chunk": "handleDonation(donationAmount)}>\n                <View className=\"h-12 items-center justify-center\">\n                  <Text className=\"text-md font-bold text-white\">Donate</Text>\n                </View>\n              </TouchableOpacity>\n            </View>\n          </View>\n        ) : (\n          <TouchableOpacity\n            onPress={() => { }}\n            className=\"mx-4 my-4 rounded-lg bg-blue-600 px-5 py-3\">\n            <Text className=\"text-center font-bold text-white\">Post a New Donation"}, {"index": 1435, "path": "client/screens/Donations.jsx", "chunk": "e-600 px-5 py-3\">\n            <Text className=\"text-center font-bold text-white\">Post a New Donation</Text>\n          </TouchableOpacity>\n        )}\n\n        {/* Add Selected Cause Display */}\n        {selectedCause.id && (\n          <View className=\"mt-3 rounded-xl border border-blue-100 bg-blue-50 p-3\">\n            <Text className=\"mb-1 text-sm font-medium text-gray-600\">Selected Campaign:</Text>\n            <View className=\"flex-row items-center justify-between\">\n              <View className"}, {"index": 1436, "path": "client/screens/Donations.jsx", "chunk": ">\n            <View className=\"flex-row items-center justify-between\">\n              <View className=\"flex-1\">\n                <Text className=\"text-base font-bold text-gray-900\">{selectedCause.title}</Text>\n                <Text className=\"text-sm text-gray-600\">\n                  {formatIndianNumber(selectedCause.raised)} raised of{' '}\n                  {formatIndianNumber(selectedCause.goal)}\n                </Text>\n              </View>\n              <TouchableOpacity\n                onPres"}, {"index": 1437, "path": "client/screens/Donations.jsx", "chunk": "                </Text>\n              </View>\n              <TouchableOpacity\n                onPress={() => setSelectedCause({})}\n                className=\"rounded-full bg-white p-2\">\n                <MaterialCommunityIcons name=\"close\" size={16} color=\"#4B5563\" />\n              </TouchableOpacity>\n            </View>\n          </View>\n        )}\n      </View>\n\n      {/* Donation History Modal */}\n      <Modal\n        animationType=\"slide\"\n        transparent\n        visible={showHistory}\n    "}, {"index": 1438, "path": "client/screens/Donations.jsx", "chunk": "/}\n      <Modal\n        animationType=\"slide\"\n        transparent\n        visible={showHistory}\n        onRequestClose={() => setShowHistory(false)}>\n        <View className=\"flex-1 justify-end bg-black/50\">\n          <View className=\"h-3/4 rounded-t-3xl bg-white p-6\">\n            <View className=\"mb-6 flex-row items-center justify-between\">\n              <Text className=\"text-2xl font-bold text-gray-900\">Your Donations</Text>\n              <TouchableOpacity\n                onPress={() => setSho"}, {"index": 1439, "path": "client/screens/Donations.jsx", "chunk": "ray-900\">Your Donations</Text>\n              <TouchableOpacity\n                onPress={() => setShowHistory(false)}\n                className=\"rounded-full bg-gray-100 p-2\">\n                <MaterialCommunityIcons name=\"close\" size={24} color=\"#4B5563\" />\n              </TouchableOpacity>\n            </View>\n            {donationHistory.length > 0 ? (\n              <FlatList\n                data={donationHistory}\n                renderItem={renderDonationHistory}\n                keyExtractor={("}, {"index": 1440, "path": "client/screens/Donations.jsx", "chunk": "{donationHistory}\n                renderItem={renderDonationHistory}\n                keyExtractor={(_, index) => index.toString()}\n                showsVerticalScrollIndicator={false}\n                contentContainerClassName=\"pb-6\"\n                decelerationRate=\"normal\"\n                bounces\n                removeClippedSubviews\n                maxToRenderPerBatch={10}\n                initialNumToRender={5}\n              />\n            ) : (\n              <View className=\"flex-1 items-cent"}, {"index": 1441, "path": "client/screens/Donations.jsx", "chunk": "lNumToRender={5}\n              />\n            ) : (\n              <View className=\"flex-1 items-center justify-center\">\n                <MaterialCommunityIcons name=\"gift-outline\" size={48} color=\"#9CA3AF\" />\n                <Text className=\"mt-4 text-center text-gray-500\">No donations yet</Text>\n              </View>\n            )}\n          </View>\n        </View>\n      </Modal>\n\n      {/* Campaigns Section */}\n      <View className=\"flex-1 px-4\">\n        <Text className=\"my-4 text-2xl font-bo"}, {"index": 1442, "path": "client/screens/Donations.jsx", "chunk": "igns Section */}\n      <View className=\"flex-1 px-4\">\n        <Text className=\"my-4 text-2xl font-bold text-gray-900\">Featured Campaigns</Text>\n        <FlatList\n          data={campaigns}\n          renderItem={renderDonationGoal}\n          keyExtractor={(item) => item.id}\n          showsVerticalScrollIndicator={false}\n          decelerationRate=\"normal\"\n          bounces\n          bouncesZoom\n          maintainVisibleContentPosition={{\n            minIndexForVisible: 0,\n          }}\n          r"}, {"index": 1443, "path": "client/screens/Donations.jsx", "chunk": "       maintainVisibleContentPosition={{\n            minIndexForVisible: 0,\n          }}\n          removeClippedSubviews\n          maxToRenderPerBatch={5}\n          windowSize={5}\n          initialNumToRender={3}\n        />\n      </View>\n\n      {/* Donors Modal */}\n      <Modal\n        animationType=\"slide\"\n        transparent\n        visible={showDonorsModal}\n        onRequestClose={() => setShowDonorsModal(false)}>\n        <View className=\"flex-1 justify-end bg-black/50\">\n          <View class"}, {"index": 1444, "path": "client/screens/Donations.jsx", "chunk": "DonorsModal(false)}>\n        <View className=\"flex-1 justify-end bg-black/50\">\n          <View className=\"h-3/4 rounded-t-3xl bg-white p-6\">\n            <View className=\"mb-6 flex-row items-center justify-between\">\n              <View>\n                <Text className=\"text-2xl font-bold text-gray-900\">Campaign Donors</Text>\n                {selectedCampaignDetails && (\n                  <Text className=\"text-sm text-gray-600\">{selectedCampaignDetails.title}</Text>\n                )}\n            "}, {"index": 1445, "path": "client/screens/Donations.jsx", "chunk": "sName=\"text-sm text-gray-600\">{selectedCampaignDetails.title}</Text>\n                )}\n              </View>\n              <TouchableOpacity\n                onPress={() => setShowDonorsModal(false)}\n                className=\"rounded-full bg-gray-100 p-2\">\n                <MaterialCommunityIcons name=\"close\" size={24} color=\"#4B5563\" />\n              </TouchableOpacity>\n            </View>\n            {isDonorsLoading ? (\n              <View className=\"flex-1 items-center justify-center\">\n     "}, {"index": 1446, "path": "client/screens/Donations.jsx", "chunk": "      {isDonorsLoading ? (\n              <View className=\"flex-1 items-center justify-center\">\n                <Text>Loading donors...</Text>\n              </View>\n            ) : selectedDonors.length > 0 ? (\n              <FlatList\n                data={selectedDonors}\n                renderItem={renderDonorItem}\n                keyExtractor={(item) => item._id?.toString() || Math.random().toString()}\n                showsVerticalScrollIndicator={false}\n                contentContainerClassNam"}, {"index": 1447, "path": "client/screens/Donations.jsx", "chunk": "ing()}\n                showsVerticalScrollIndicator={false}\n                contentContainerClassName=\"pb-6\"\n                decelerationRate=\"normal\"\n                bounces\n              />\n            ) : (\n              <View className=\"flex-1 items-center justify-center\">\n                <MaterialCommunityIcons name=\"account-group-outline\" size={48} color=\"#9CA3AF\" />\n                <Text className=\"mt-4 text-center text-gray-500\">No donors yet</Text>\n              </View>\n            )}\n "}, {"index": 1448, "path": "client/screens/Donations.jsx", "chunk": "assName=\"mt-4 text-center text-gray-500\">No donors yet</Text>\n              </View>\n            )}\n          </View>\n        </View>\n      </Modal>\n\n      <PaymentModal\n        open={paymentModalOpen}\n        onClose={() => setPaymentModalOpen(false)}\n        onPaymentComplete={handlePaymentComplete}\n        type=\"donation\"\n        amount={donationAmount}\n        title={selectedCause.title}\n        itemId={selectedCause.id}\n      />\n    </View>\n  );\n};\n\nexport default DonationPortal;\n"}, {"index": 1449, "path": "client/screens/Donations.jsx", "chunk": "  itemId={selectedCause.id}\n      />\n    </View>\n  );\n};\n\nexport default DonationPortal;\n"}, {"index": 1450, "path": "client/screens/Events.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { View, Text, ScrollView, ActivityIndicator, TouchableOpacity } from 'react-native';\n\nimport EventCard from '../components/events/EventCard';\nimport EventModal from '../components/events/EventModal';\nimport { useAuth } from '../providers/AuthProvider';\n// import { eventsData } from '../constants/events/eventData';\n"}, {"index": 1451, "path": "client/screens/Events.jsx", "chunk": " } from '../providers/AuthProvider';\n// import { eventsData } from '../constants/events/eventData';\n\nconst EventsPage = () => {\n  const [eventsData, setEventsData] = useState([]);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [loading, setLoading] = useState(true); // To handle loading state\n  const [error, setError] = useState(null); // To handle errors\n  const { role } = useAuth();\n  \n\n  const fetchEvents = async () => {\n    \n    try {\n      const token = await AsyncStora"}, {"index": 1452, "path": "client/screens/Events.jsx", "chunk": "eAuth();\n  \n\n  const fetchEvents = async () => {\n    \n    try {\n      const token = await AsyncStorage.getItem('token');\n\n      if (!token) {\n        throw new Error('Token not found');\n      }\n      setLoading(true);\n      const response = await axios.get(`${SERVER_URL}/events`, {\n        headers: {\n          Authorization: `Bearer ${token}`, // Add the token here\n        },\n      });\n      setEventsData(response.data); // Assuming the response has the correct structure\n      console.log('Data "}, {"index": 1453, "path": "client/screens/Events.jsx", "chunk": "entsData(response.data); // Assuming the response has the correct structure\n      console.log('Data received');\n    } catch (err) {\n      setError('Failed to fetch events. Please try again later.');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n\n  const handleCardClick = (event) => {\n    setSelectedEvent(event);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedEvent(null);\n  };\n\n  return (\n    <View classNam"}, {"index": 1454, "path": "client/screens/Events.jsx", "chunk": "\n\n  const handleCloseModal = () => {\n    setSelectedEvent(null);\n  };\n\n  return (\n    <View className=\"flex-1 bg-gray-100 px-4 py-6\">\n      {loading ? (\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n      ) : error ? (\n        <Text className=\"text-center text-red-500\">{error}</Text>\n      ) : (\n        <>\n          {role === 'college' && (\n            <TouchableOpacity\n              onPress={() => {}}\n              className=\"mx-4 mb-4 rounded-lg bg-blue-600 px-5 py-3\">\n           "}, {"index": 1455, "path": "client/screens/Events.jsx", "chunk": "onPress={() => {}}\n              className=\"mx-4 mb-4 rounded-lg bg-blue-600 px-5 py-3\">\n              <Text className=\"text-center font-bold text-white\">Host an Event</Text>\n            </TouchableOpacity>\n          )}\n          <Text className=\"mb-6 text-2xl font-bold text-gray-900\">Upcoming Events</Text>\n          <ScrollView>\n            {eventsData.map((event) => (\n              <EventCard key={event.id} event={event} onClick={() => handleCardClick(event)} />\n            ))}\n          </Scr"}, {"index": 1456, "path": "client/screens/Events.jsx", "chunk": "y={event.id} event={event} onClick={() => handleCardClick(event)} />\n            ))}\n          </ScrollView>\n        </>\n      )}\n      <EventModal open={!!selectedEvent} onClose={handleCloseModal} event={selectedEvent} role={role} />\n    </View>\n  );\n};\n\nexport default EventsPage;\n"}, {"index": 1457, "path": "client/screens/ExplanationScreen.jsx", "chunk": "import { MaterialIcons } from '@expo/vector-icons';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ScrollView,\n  useWindowDimensions,\n  Animated,\n} from 'react-native';\n\nimport Button from '../components/general/Button';\n\nconst ProcessStep = ({ icon, title, description, isLast = false }) => (\n  <View className=\"relative flex-row items-start space-x-2\">\n    <View className=\"z-10 rounded-full bg-white p-2 shadow-sm\">\n      <MaterialIcons name={icon} size={25} color=\"#909\" />\n    </View>\n    {!isLa"}, {"index": 1458, "path": "client/screens/ExplanationScreen.jsx", "chunk": "te p-2 shadow-sm\">\n      <MaterialIcons name={icon} size={25} color=\"#909\" />\n    </View>\n    {!isLast && <View className=\"absolute left-4 top-10 h-full w-0.5 bg-gray-100\" />}\n    <View className=\"flex-1 pb-4\">\n      <Text className=\"text-base font-bold text-gray-900\">{title}</Text>\n      <Text className=\"mt-1 text-sm leading-relaxed text-gray-600\">{description}</Text>\n    </View>\n  </View>\n);\n\nconst ExplanationScreen = ({ navigation }) => {\n  const { width } = useWindowDimensions();\n  const isP"}, {"index": 1459, "path": "client/screens/ExplanationScreen.jsx", "chunk": "nst ExplanationScreen = ({ navigation }) => {\n  const { width } = useWindowDimensions();\n  const isPad = width > 768;\n\n  return (\n    <View className=\"flex-1 bg-gray-50\">\n      {/* Header */}\n      <View className=\"bg-white px-4 pb-4 pt-8 shadow-sm\">\n        <Text className=\"text-center text-2xl font-bold tracking-tight text-gray-900\">\n          Create Your Profile\n        </Text>\n        <Text className=\"mt-1 text-center text-sm text-gray-600\">\n          Choose your preferred method to set up y"}, {"index": 1460, "path": "client/screens/ExplanationScreen.jsx", "chunk": "assName=\"mt-1 text-center text-sm text-gray-600\">\n          Choose your preferred method to set up your professional profile\n        </Text>\n      </View>\n\n      <ScrollView className=\"flex-1\">\n        <View className={`p-4 ${isPad ? 'max-w-2xl self-center' : ''}`}>\n          {/* AI Resume Upload Section */}\n          <TouchableOpacity\n            onPress={() => navigation.navigate('Register')}\n            className=\"mb-4 overflow-hidden rounded-2xl border-2 border-dashed bg-white p-4 shadow-sm\""}, {"index": 1461, "path": "client/screens/ExplanationScreen.jsx", "chunk": "          className=\"mb-4 overflow-hidden rounded-2xl border-2 border-dashed bg-white p-4 shadow-sm\">\n            <View className=\"mb-3\">\n              <Text className=\"text-sm font-semibold text-gray-900\">RECOMMENDED</Text>\n              <Text className=\"text-xl font-bold text-gray-900\">Smart Profile Creation</Text>\n            </View>\n\n            <ProcessStep\n              icon=\"description\"\n              title=\"Upload Your Resume\"\n              description=\"Simply upload your existing resume"}, {"index": 1462, "path": "client/screens/ExplanationScreen.jsx", "chunk": "            title=\"Upload Your Resume\"\n              description=\"Simply upload your existing resume in PDF or DOC format\"\n            />\n            <ProcessStep\n              icon=\"psychology\"\n              title=\"AI-Powered Analysis\"\n              description=\"Our advanced AI system extracts and organizes your professional information\"\n            />\n            <ProcessStep\n              icon=\"auto-awesome\"\n              title=\"Instant Profile\"\n              description=\"Get a complete profi"}, {"index": 1463, "path": "client/screens/ExplanationScreen.jsx", "chunk": "\"auto-awesome\"\n              title=\"Instant Profile\"\n              description=\"Get a complete profile ready in seconds with high accuracy\"\n              isLast\n            />\n          </TouchableOpacity>\n\n          {/* Divider */}\n          <View className=\"mb-4 flex-row items-center\">\n            <View className=\"h-0.5 flex-1 bg-gray-100\" />\n            <Text className=\"mx-2 text-sm font-medium text-gray-400\">OR</Text>\n            <View className=\"h-0.5 flex-1 bg-gray-100\" />\n          </View"}, {"index": 1464, "path": "client/screens/ExplanationScreen.jsx", "chunk": " text-gray-400\">OR</Text>\n            <View className=\"h-0.5 flex-1 bg-gray-100\" />\n          </View>\n\n          {/* Manual Entry Section */}\n          <TouchableOpacity\n            onPress={() => navigation.navigate('Manual', { resumeData: null })}\n            className=\"rounded-2xl border bg-white p-4 shadow-sm\">\n            <Text className=\"mb-2 text-xl font-bold text-gray-900\">Manual Setup</Text>\n            <ProcessStep\n              icon=\"edit\"\n              title=\"Step-by-Step Entry\"\n    "}, {"index": 1465, "path": "client/screens/ExplanationScreen.jsx", "chunk": "xt>\n            <ProcessStep\n              icon=\"edit\"\n              title=\"Step-by-Step Entry\"\n              description=\"Fill in your information manually with our guided form process\"\n              isLast\n            />\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n\n      {/* Login Section */}\n      <View className=\"border-t border-gray-100 bg-white p-6\">\n        <Text className=\"text-center text-base text-gray-600\">\n          Already have an account?{' '}\n          <Touch"}, {"index": 1466, "path": "client/screens/ExplanationScreen.jsx", "chunk": "Name=\"text-center text-base text-gray-600\">\n          Already have an account?{' '}\n          <TouchableOpacity onPress={() => navigation.navigate('Login')}>\n            <Text className=\"font-bold text-purple-600\"> Login</Text>\n          </TouchableOpacity>\n        </Text>\n      </View>\n    </View>\n  );\n};\n\nexport default ExplanationScreen;\n"}, {"index": 1467, "path": "client/screens/HallofFame.jsx", "chunk": "import { MaterialIcons } from '@expo/vector-icons';\nimport { LinearGradient } from 'expo-linear-gradient';\nimport { useState, useRef, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  Image,\n  TouchableOpacity,\n  Dimensions,\n  TextInput,\n  Animated,\n} from 'react-native';\nimport Timeline from 'react-native-timeline-flatlist';\n\nconst { width, height } = Dimensions.get('window');\nconst numColumns = 2;\n\nconst categories = ['All', 'Technology', 'Business', 'Science', 'Ar"}, {"index": 1468, "path": "client/screens/HallofFame.jsx", "chunk": "window');\nconst numColumns = 2;\n\nconst categories = ['All', 'Technology', 'Business', 'Science', 'Arts'];\n\nconst ALUMNI_DATA = [\n  {\n    id: '1',\n    name: 'Jane Doe',\n    graduationYear: 2010,\n    achievement: 'Global Tech Innovator',\n    category: 'Technology',\n    image: 'https://randomuser.me/api/portraits/women/68.jpg',\n    timeline: [\n      {\n        year: 2020,\n        title: 'Graduated College',\n        description: 'Completed B.Tech with honors',\n        icon: 'school',\n      },\n      {"}, {"index": 1469, "path": "client/screens/HallofFame.jsx", "chunk": "lege',\n        description: 'Completed B.Tech with honors',\n        icon: 'school',\n      },\n      {\n        year: 2022,\n        title: 'Started Tech Company',\n        description: 'Founded InnovateTech Solutions',\n        icon: 'business',\n      },\n      {\n        year: 2024,\n        title: 'Global Recognition',\n        description: 'Featured in Forbes 30 under 30',\n        icon: 'stars',\n      },\n    ],\n  },\n  {\n    id: '2',\n    name: 'John Smith',\n    graduationYear: 2012,\n    achievement: 'S"}, {"index": 1470, "path": "client/screens/HallofFame.jsx", "chunk": ",\n    ],\n  },\n  {\n    id: '2',\n    name: 'John Smith',\n    graduationYear: 2012,\n    achievement: 'Social Impact Leader',\n    category: 'Science',\n    image: 'https://randomuser.me/api/portraits/men/32.jpg',\n    timeline: [\n      {\n        year: 2012,\n        title: 'University Graduation',\n        description: 'Graduated with Masters in Social Sciences',\n        icon: 'school',\n      },\n      {\n        year: 2015,\n        title: 'NGO Foundation',\n        description: 'Started GlobalChange Initi"}, {"index": 1471, "path": "client/screens/HallofFame.jsx", "chunk": "       year: 2015,\n        title: 'NGO Foundation',\n        description: 'Started GlobalChange Initiative',\n        icon: 'people',\n      },\n      {\n        year: 2020,\n        title: 'UN Recognition',\n        description: 'Received UN Social Impact Award',\n        icon: 'military-tech',\n      },\n    ],\n  },\n  {\n    id: '3',\n    name: 'Emily Chang',\n    graduationYear: 2015,\n    achievement: 'Startup Founder',\n    category: 'Business',\n    image: 'https://randomuser.me/api/portraits/women/44.jpg"}, {"index": 1472, "path": "client/screens/HallofFame.jsx", "chunk": "tup Founder',\n    category: 'Business',\n    image: 'https://randomuser.me/api/portraits/women/44.jpg',\n    timeline: [\n      {\n        year: 2015,\n        title: 'Graduated College',\n        description: 'Completed BBA with honors',\n        icon: 'school',\n      },\n      {\n        year: 2017,\n        title: 'Founded Startup',\n        description: 'Started TechSavvy Inc.',\n        icon: 'business',\n      },\n      {\n        year: 2021,\n        title: 'Series A Funding',\n        description: 'Raise"}, {"index": 1473, "path": "client/screens/HallofFame.jsx", "chunk": "\n      },\n      {\n        year: 2021,\n        title: 'Series A Funding',\n        description: 'Raised $10M in Series A',\n        icon: 'attach-money',\n      },\n    ],\n  },\n  {\n    id: '4',\n    name: 'Michael Rodriguez',\n    graduationYear: 2008,\n    achievement: 'Environmental Sustainability Expert',\n    category: 'Science',\n    image: 'https://randomuser.me/api/portraits/men/85.jpg',\n    timeline: [\n      {\n        year: 2008,\n        title: 'Graduated College',\n        description: 'Completed "}, {"index": 1474, "path": "client/screens/HallofFame.jsx", "chunk": ": [\n      {\n        year: 2008,\n        title: 'Graduated College',\n        description: 'Completed Environmental Science degree',\n        icon: 'school',\n      },\n      {\n        year: 2010,\n        title: 'Joined Green Earth',\n        description: 'Started working at Green Earth Organization',\n        icon: 'nature',\n      },\n      {\n        year: 2018,\n        title: 'Published Research',\n        description: 'Published research on climate change',\n        icon: 'book',\n      },\n    ],\n  },\n "}, {"index": 1475, "path": "client/screens/HallofFame.jsx", "chunk": "   description: 'Published research on climate change',\n        icon: 'book',\n      },\n    ],\n  },\n  {\n    id: '5',\n    name: 'Sarah Kim',\n    graduationYear: 2018,\n    achievement: 'AI Research Pioneer',\n    category: 'Technology',\n    image: 'https://randomuser.me/api/portraits/women/79.jpg',\n    timeline: [\n      {\n        year: 2018,\n        title: 'Graduated College',\n        description: 'Completed Computer Science degree',\n        icon: 'school',\n      },\n      {\n        year: 2019,\n     "}, {"index": 1476, "path": "client/screens/HallofFame.jsx", "chunk": "mpleted Computer Science degree',\n        icon: 'school',\n      },\n      {\n        year: 2019,\n        title: 'Joined AI Lab',\n        description: 'Started working at AI Research Lab',\n        icon: 'computer',\n      },\n      {\n        year: 2022,\n        title: 'Breakthrough in AI',\n        description: 'Developed new AI algorithm',\n        icon: 'insights',\n      },\n    ],\n  },\n];\n\nconst HallOfFame = () => {\n  const [selectedAlumni, setSelectedAlumni] = useState(null);\n  const [searchQuery, s"}, {"index": 1477, "path": "client/screens/HallofFame.jsx", "chunk": "Fame = () => {\n  const [selectedAlumni, setSelectedAlumni] = useState(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('All');\n\n  // Filter alumni based on search and category\n  const filteredAlumni = ALUMNI_DATA.filter(\n    (alumni) =>\n      (selectedCategory === 'All' || alumni.category === selectedCategory) &&\n      (alumni.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        alumni.achievement.toLowerCase().i"}, {"index": 1478, "path": "client/screens/HallofFame.jsx", "chunk": "name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        alumni.achievement.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const renderHeader = () => (\n    <View style={styles.headerContainer}>\n      <Text style={styles.headerTitle}>Hall of Fame</Text>\n      <TextInput\n        style={styles.searchInput}\n        placeholder=\"Search alumni...\"\n        placeholderTextColor=\"#666\"\n        value={searchQuery}\n        onChangeText={setSearchQuery}\n      />\n      <FlatList\n        "}, {"index": 1479, "path": "client/screens/HallofFame.jsx", "chunk": "\n        value={searchQuery}\n        onChangeText={setSearchQuery}\n      />\n      <FlatList\n        horizontal\n        data={categories}\n        showsHorizontalScrollIndicator={false}\n        renderItem={({ item }) => (\n          <TouchableOpacity\n            onPress={() => setSelectedCategory(item)}\n            style={[styles.categoryTab, selectedCategory === item && styles.categoryTabActive]}>\n            <Text style={styles.categoryText}>{item}</Text>\n          </TouchableOpacity>\n        )}\n"}, {"index": 1480, "path": "client/screens/HallofFame.jsx", "chunk": "           <Text style={styles.categoryText}>{item}</Text>\n          </TouchableOpacity>\n        )}\n        style={styles.categoriesList}\n      />\n    </View>\n  );\n\n  const Modal = ({ alumni, onClose }) => {\n    const fadeAnim = useRef(new Animated.Value(0)).current;\n\n    useEffect(() => {\n      Animated.timing(fadeAnim, {\n        toValue: 1,\n        duration: 300,\n        useNativeDriver: true,\n      }).start();\n    }, []);\n\n    const timelineData =\n      alumni.timeline?.map((item) => ({\n     "}, {"index": 1481, "path": "client/screens/HallofFame.jsx", "chunk": "     }).start();\n    }, []);\n\n    const timelineData =\n      alumni.timeline?.map((item) => ({\n        time: item.year,\n        title: item.title,\n        description: item.description,\n        icon: (\n          <LinearGradient\n            colors={['#4A90E2', '#6A5ACD']}\n            style={styles.timelineIconGradient}\n            start={{ x: 0, y: 0 }}\n            end={{ x: 1, y: 1 }}>\n            <MaterialIcons name={item.icon} size={20} color=\"#fff\" />\n          </LinearGradient>\n        ),\n  "}, {"index": 1482, "path": "client/screens/HallofFame.jsx", "chunk": " <MaterialIcons name={item.icon} size={20} color=\"#fff\" />\n          </LinearGradient>\n        ),\n      })) || [];\n\n    return (\n      <Animated.View style={[styles.modalBackground, { opacity: fadeAnim }]}>\n        <LinearGradient\n          colors={['#1E1E2E', '#2D2D44']}\n          style={styles.detailModal}\n          start={{ x: 0, y: 0 }}\n          end={{ x: 1, y: 1 }}>\n          <View style={styles.modalHeader}>\n            <Image source={{ uri: alumni.image }} style={styles.modalImage} />\n  "}, {"index": 1483, "path": "client/screens/HallofFame.jsx", "chunk": "yles.modalHeader}>\n            <Image source={{ uri: alumni.image }} style={styles.modalImage} />\n            <View style={styles.modalHeaderText}>\n              <Text style={styles.modalName}>{alumni.name}</Text>\n              <Text style={styles.modalAchievement}>{alumni.achievement}</Text>\n            </View>\n          </View>\n\n          <View style={styles.timelineContainer}>\n            <Timeline\n              data={timelineData}\n              timeStyle={styles.timelineTime}\n              t"}, {"index": 1484, "path": "client/screens/HallofFame.jsx", "chunk": "line\n              data={timelineData}\n              timeStyle={styles.timelineTime}\n              titleStyle={styles.timelineTitle}\n              descriptionStyle={styles.timelineDescription}\n              columnFormat=\"single-column-left\"\n              lineColor=\"transparent\"\n              circleColor=\"transparent\"\n              listViewContainerStyle={styles.timelineList}\n              innerCircle=\"icon\"\n              separator={false}\n              detailContainerStyle={styles.timelineDetail"}, {"index": 1485, "path": "client/screens/HallofFame.jsx", "chunk": "cle=\"icon\"\n              separator={false}\n              detailContainerStyle={styles.timelineDetail}\n              renderDetail={(rowData, sectionID, rowID) => (\n                <Animated.View\n                  style={[\n                    styles.timelineDetailContainer,\n                    {\n                      transform: [\n                        {\n                          translateX: fadeAnim.interpolate({\n                            inputRange: [0, 1],\n                            outputR"}, {"index": 1486, "path": "client/screens/HallofFame.jsx", "chunk": "im.interpolate({\n                            inputRange: [0, 1],\n                            outputRange: [50, 0],\n                          }),\n                        },\n                      ],\n                    },\n                  ]}>\n                  <View style={styles.timelineDetailContent}>\n                    <Text style={styles.timelineYear}>{rowData.time}</Text>\n                    <Text style={styles.timelineTitle}>{rowData.title}</Text>\n                    <Text style={styles.ti"}, {"index": 1487, "path": "client/screens/HallofFame.jsx", "chunk": "<Text style={styles.timelineTitle}>{rowData.title}</Text>\n                    <Text style={styles.timelineDescription}>{rowData.description}</Text>\n                  </View>\n                </Animated.View>\n              )}\n            />\n          </View>\n\n          <TouchableOpacity style={styles.closeButton} onPress={onClose}>\n            <MaterialIcons name=\"close\" size={24} color=\"#fff\" />\n          </TouchableOpacity>\n        </LinearGradient>\n      </Animated.View>\n    );\n  };\n\n  const re"}, {"index": 1488, "path": "client/screens/HallofFame.jsx", "chunk": "        </TouchableOpacity>\n        </LinearGradient>\n      </Animated.View>\n    );\n  };\n\n  const renderAlumni = ({ item }) => (\n    <TouchableOpacity style={styles.gridCard} onPress={() => setSelectedAlumni(item)}>\n      <LinearGradient\n        colors={['#2A2D3E', '#1F1F2C']}\n        style={styles.cardContent}\n        start={{ x: 0, y: 0 }}\n        end={{ x: 1, y: 1 }}>\n        <Image source={{ uri: item.image }} style={styles.gridImage} />\n        <Text style={styles.gridName}>{item.name}</Tex"}, {"index": 1489, "path": "client/screens/HallofFame.jsx", "chunk": "ri: item.image }} style={styles.gridImage} />\n        <Text style={styles.gridName}>{item.name}</Text>\n        <Text style={styles.gridYear}>{item.graduationYear}</Text>\n      </LinearGradient>\n    </TouchableOpacity>\n  );\n\n  return (\n    <View style={styles.container}>\n      {renderHeader()}\n\n      <FlatList\n        data={filteredAlumni}\n        renderItem={renderAlumni}\n        keyExtractor={(item) => item.id}\n        numColumns={numColumns}\n        contentContainerStyle={styles.grid}\n        "}, {"index": 1490, "path": "client/screens/HallofFame.jsx", "chunk": "em) => item.id}\n        numColumns={numColumns}\n        contentContainerStyle={styles.grid}\n        showsVerticalScrollIndicator={false}\n        ListEmptyComponent={() => (\n          <View style={styles.emptyContainer}>\n            <Text style={styles.emptyText}>No alumni found</Text>\n          </View>\n        )}\n      />\n\n      {selectedAlumni && <Modal alumni={selectedAlumni} onClose={() => setSelectedAlumni(null)} />}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    "}, {"index": 1491, "path": "client/screens/HallofFame.jsx", "chunk": "electedAlumni(null)} />}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#090909',\n  },\n  headerContainer: {\n    padding: 20,\n    paddingTop: 40,\n    backgroundColor: '#111',\n  },\n  headerTitle: {\n    color: '#fff',\n    fontSize: 32,\n    fontWeight: '800',\n    marginBottom: 15,\n  },\n  searchInput: {\n    backgroundColor: '#222',\n    borderRadius: 12,\n    padding: 12,\n    color: '#fff',\n    marginBottom: 15,\n  },\n  categoriesList: {\n    mar"}, {"index": 1492, "path": "client/screens/HallofFame.jsx", "chunk": "dius: 12,\n    padding: 12,\n    color: '#fff',\n    marginBottom: 15,\n  },\n  categoriesList: {\n    marginBottom: 10,\n  },\n  categoryTab: {\n    paddingHorizontal: 20,\n    paddingVertical: 8,\n    marginRight: 10,\n    borderRadius: 20,\n    backgroundColor: '#222',\n  },\n  categoryTabActive: {\n    backgroundColor: '#fff',\n  },\n  categoryText: {\n    color: '#fff',\n    fontWeight: '600',\n  },\n  grid: {\n    padding: 10,\n  },\n  gridCard: {\n    flex: 1 / numColumns,\n    margin: 8,\n    height: 200,\n    borde"}, {"index": 1493, "path": "client/screens/HallofFame.jsx", "chunk": " padding: 10,\n  },\n  gridCard: {\n    flex: 1 / numColumns,\n    margin: 8,\n    height: 200,\n    borderRadius: 15,\n    overflow: 'hidden',\n  },\n  cardContent: {\n    flex: 1,\n    padding: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 15,\n  },\n  gridImage: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    marginBottom: 10,\n  },\n  gridName: {\n    color: '#fff',\n    fontSize: 16,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  gridYear: {\n    color: '#aa"}, {"index": 1494, "path": "client/screens/HallofFame.jsx", "chunk": "    fontSize: 16,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n  gridYear: {\n    color: '#aaa',\n    fontSize: 14,\n  },\n  emptyContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 50,\n  },\n  emptyText: {\n    color: '#666',\n    fontSize: 18,\n  },\n  modalBackground: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'rgba(0,0,0,0.9)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n "}, {"index": 1495, "path": "client/screens/HallofFame.jsx", "chunk": "  backgroundColor: 'rgba(0,0,0,0.9)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  detailModal: {\n    width: width * 0.85,\n    height: '80%',\n    backgroundColor: '#1a1a1a',\n    borderRadius: 20,\n    padding: 25,\n    alignItems: 'center',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    width: '100%',\n    marginBottom: 20,\n    paddingHorizontal: 10,\n  },\n  modalHeaderText: {\n    marginLeft: 15,\n    flex: 1,\n  },\n  modalImage: {\n    width: 80,\n    he"}, {"index": 1496, "path": "client/screens/HallofFame.jsx", "chunk": " },\n  modalHeaderText: {\n    marginLeft: 15,\n    flex: 1,\n  },\n  modalImage: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    borderWidth: 3,\n    borderColor: '#4A90E2',\n  },\n  modalName: {\n    color: 'white',\n    fontSize: 22,\n    fontWeight: 'bold',\n    marginBottom: 5,\n  },\n  modalAchievement: {\n    color: '#aaa',\n    fontSize: 16,\n  },\n  timelineContainer: {\n    flex: 1,\n    width: '100%',\n  },\n  timelineIconGradient: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    justi"}, {"index": 1497, "path": "client/screens/HallofFame.jsx", "chunk": "100%',\n  },\n  timelineIconGradient: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  timelineDetailContainer: {\n    marginBottom: 20,\n    marginLeft: 20,\n  },\n  timelineDetailContent: {\n    backgroundColor: 'rgba(74, 144, 226, 0.1)',\n    borderLeftWidth: 4,\n    borderLeftColor: '#4A90E2',\n    padding: 15,\n    borderRadius: 10,\n  },\n  timelineTime: {\n    color: '#4A90E2',\n    fontSize: 14,\n    fontWeight: 'bold',\n    marginBotto"}, {"index": 1498, "path": "client/screens/HallofFame.jsx", "chunk": "},\n  timelineTime: {\n    color: '#4A90E2',\n    fontSize: 14,\n    fontWeight: 'bold',\n    marginBottom: 5,\n  },\n  timelineTitle: {\n    color: '#fff',\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginBottom: 5,\n  },\n  timelineDescription: {\n    color: '#ccc',\n    fontSize: 14,\n  },\n  closeButton: {\n    position: 'absolute',\n    top: 20,\n    right: 20,\n    backgroundColor: 'rgba(255,255,255,0.2)',\n    borderRadius: 20,\n    padding: 10,\n  },\n});\n\nexport default HallOfFame;\n"}, {"index": 1499, "path": "client/screens/HallofFame.jsx", "chunk": "\n    borderRadius: 20,\n    padding: 10,\n  },\n});\n\nexport default HallOfFame;\n"}, {"index": 1500, "path": "client/screens/Home.jsx", "chunk": "import { ML_URL, SERVER_URL } from '@env';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { FlatList, StyleSheet, View, Text } from 'react-native';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport NewPost from '../components/home/NewPost';\nimport Post from '../components/home/Post';\n\nconst Home = () => {\n  const [posts, setPosts] = useState();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = asyn"}, {"index": 1501, "path": "client/screens/Home.jsx", "chunk": "te();\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      const token = await AsyncStorage.getItem('token');\n      if (!token) {\n        throw new Error('Token not found');\n      }\n      setLoading(true);\n      try {\n        // const email = 'raymond.salinas@company.com'; // Replace with the actual email\n        // const response = await axios.get(`${ML_URL}/api/quantum_recommend_posts`, {\n        //   params: { email },\n        // });\n\n "}, {"index": 1502, "path": "client/screens/Home.jsx", "chunk": "ios.get(`${ML_URL}/api/quantum_recommend_posts`, {\n        //   params: { email },\n        // });\n\n        const response2 = await axios.get(`${SERVER_URL}/posts`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        setPosts(response2.data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // TODO: Implement handleSubmitPost\n  const updatePostComment"}, {"index": 1503, "path": "client/screens/Home.jsx", "chunk": "\n    };\n\n    fetchData();\n  }, []);\n\n  // TODO: Implement handleSubmitPost\n  const updatePostComments = (postId, newComment) => {\n    setPosts((currentPosts) =>\n      currentPosts.map((post) =>\n        post.postId === postId\n          ? {\n            ...post,\n            comments: {\n              total: post.comments.total + 1,\n              details: [newComment, ...(post.comments?.details || [])],\n            },\n          }\n          : post\n      )\n    );\n  };\n\n  return (\n    <View>\n      <NewP"}, {"index": 1504, "path": "client/screens/Home.jsx", "chunk": ",\n            },\n          }\n          : post\n      )\n    );\n  };\n\n  return (\n    <View>\n      <NewPost />\n      {loading && <Text>Loading...</Text>}\n      {posts && (\n        <FlatList\n          data={posts}\n          renderItem={({ item: post }) => (\n            <Post key={post.postId} post={post} updateComments={updatePostComments} />\n          )}\n          keyExtractor={(item) => item.postId}\n          contentContainerStyle={styles.container}\n        />\n      )}\n    </View>\n  );\n};\n\nconst st"}, {"index": 1505, "path": "client/screens/Home.jsx", "chunk": "          contentContainerStyle={styles.container}\n        />\n      )}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 6,\n  },\n});\n\nexport default Home;\n"}, {"index": 1506, "path": "client/screens/Jobs.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\nimport { useState, useMemo, useEffect } from 'react';\nimport {\n  View,\n  FlatList,\n  TouchableOpacity,\n  Text,\n  ActivityIndicator,\n  RefreshControl,\n} from 'react-native';\n\nimport JobCard from '../components/jobs/JobCard';\nimport { DEFAULT_ALUMNI_DATA as profileData } from '../constants/profileData';\n\nconst JobPortal = ({ navigation }) => {\n  const [skills, setSkil"}, {"index": 1507, "path": "client/screens/Jobs.jsx", "chunk": "} from '../constants/profileData';\n\nconst JobPortal = ({ navigation }) => {\n  const [skills, setSkills] = useState(profileData.skills);\n  const [jobsData, setJobsData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false); // State to track refreshing\n\n  // Fetch jobs function\n  const fetchJobs = async () => {\n    try {\n      const token = await AsyncStorage.getItem('token');\n\n      if (!token) {\n        throw new Error('Token not f"}, {"index": 1508, "path": "client/screens/Jobs.jsx", "chunk": "ken = await AsyncStorage.getItem('token');\n\n      if (!token) {\n        throw new Error('Token not found');\n      }\n\n      setLoading(true);\n      const response = await axios.get(`${SERVER_URL}/jobs`, {\n        headers: {\n          Authorization: `Bearer ${token}`, // Add the token here\n        },\n      });\n      setJobsData(response.data); // Assuming the backend returns an array of jobs\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching jobs:', error);\n      se"}, {"index": 1509, "path": "client/screens/Jobs.jsx", "chunk": "etLoading(false);\n    } catch (error) {\n      console.error('Error fetching jobs:', error);\n      setLoading(false);\n    }\n  };\n\n  // Call fetchJobs on mount\n  useEffect(() => {\n    fetchJobs();\n  }, []);\n\n  // Pull to refresh handler\n  const onRefresh = () => {\n    setRefreshing(true);\n    fetchJobs().finally(() => setRefreshing(false)); // Reset refreshing state after fetching\n  };\n\n  const sortedJobs = useMemo(() => {\n    return [...jobsData].sort((a, b) => {\n      const aMatches = a.skills.f"}, {"index": 1510, "path": "client/screens/Jobs.jsx", "chunk": "edJobs = useMemo(() => {\n    return [...jobsData].sort((a, b) => {\n      const aMatches = a.skills.filter((skill) => skills.includes(skill)).length;\n      const bMatches = b.skills.filter((skill) => skills.includes(skill)).length;\n      return bMatches - aMatches;\n    });\n  }, [jobsData, skills]);\n\n  const renderJob = ({ item }) => <JobCard item={item} userSkills={skills} />;\n\n  const openPostJobPage = () => {\n    console.log('Open a new page to post a job');\n    navigation.navigate('NewJob');\n "}, {"index": 1511, "path": "client/screens/Jobs.jsx", "chunk": "age = () => {\n    console.log('Open a new page to post a job');\n    navigation.navigate('NewJob');\n  };\n\n  if (loading) {\n    return (\n      <View className=\"flex-1 items-center justify-center bg-gray-100\">\n        <ActivityIndicator size=\"large\" color=\"#000\" />\n        <Text className=\"mt-4 text-gray-600\">Loading jobs...</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View className=\"flex-1 bg-gray-100\">\n      {/* Button to Post a New Job */}\n      <TouchableOpacity\n        onPress={openPostJo"}, {"index": 1512, "path": "client/screens/Jobs.jsx", "chunk": "ray-100\">\n      {/* Button to Post a New Job */}\n      <TouchableOpacity\n        onPress={openPostJobPage}\n        className=\"mx-4 my-4 rounded-lg bg-blue-600 px-5 py-3\">\n        <Text className=\"text-center font-bold text-white\">Post a New Job</Text>\n      </TouchableOpacity>\n\n      {/* FlatList with Pull to Refresh */}\n      <FlatList\n        data={sortedJobs}\n        renderItem={renderJob}\n        keyExtractor={(item) => item.id}\n        contentContainerStyle={{ padding: 16 }}\n        refresh"}, {"index": 1513, "path": "client/screens/Jobs.jsx", "chunk": "    keyExtractor={(item) => item.id}\n        contentContainerStyle={{ padding: 16 }}\n        refreshControl={\n          <RefreshControl\n            refreshing={refreshing} // Display refresh spinner when refreshing\n            onRefresh={onRefresh} // Trigger onRefresh handler when user pulls to refresh\n          />\n        }\n      />\n    </View>\n  );\n};\n\nexport default JobPortal;\n"}, {"index": 1514, "path": "client/screens/LoadingScreen.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport { useEffect } from 'react';\n\nimport LoadingComponent from '../components/LoadingComponent';\nimport { useAuth } from '../providers/AuthProvider';\n\nconst LoadingScreen = ({ loading, setLoading }) => {\n  const { setUser, setIsLoggedIn, setReqSet } = useAuth();\n\n  const fetchUserData = async () => {\n    try {\n      const to"}, {"index": 1515, "path": "client/screens/LoadingScreen.jsx", "chunk": "IsLoggedIn, setReqSet } = useAuth();\n\n  const fetchUserData = async () => {\n    try {\n      const token = await AsyncStorage.getItem('token');\n      if (!token) {\n        throw new Error('Token not found');\n      }\n\n      const decodedToken = jwtDecode(token);\n      const id = decodedToken.id;\n\n      const response = await axios.get(`${SERVER_URL}/users/fetch/${id}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setUser(response.data);\n      setReqSet(new Set(response."}, {"index": 1516, "path": "client/screens/LoadingScreen.jsx", "chunk": "tion: `Bearer ${token}` },\n      });\n      setUser(response.data);\n      setReqSet(new Set(response.data.sentRequests));\n      setTimeout(() => setLoading(false), 1500);\n    } catch (err) {\n      setIsLoggedIn(false);\n      console.error('Error fetching user data:', err);\n    }\n  };\n\n  useEffect(() => {\n    fetchUserData();\n  }, []);\n\n  return <LoadingComponent />;\n};\n\nexport default LoadingScreen;\n"}, {"index": 1517, "path": "client/screens/LoadingScreen.jsx", "chunk": ";\n"}, {"index": 1518, "path": "client/screens/Login.jsx", "chunk": "// screens/LoginScreen.js\nimport { SERVER_URL } from '@env';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Picker } from '@react-native-picker/picker';\nimport { useNavigation } from '@react-navigation/native';\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\n\nimport { LANGUAGES, changeLanguage } from '../i18n/i18n';\nimport"}, {"index": 1519, "path": "client/screens/Login.jsx", "chunk": "ableOpacity } from 'react-native';\n\nimport { LANGUAGES, changeLanguage } from '../i18n/i18n';\nimport { useAuth } from '../providers/AuthProvider';\n\nconst LoginScreen = () => {\n  const navigation = useNavigation();\n  const { t, i18n } = useTranslation();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [selectedRole, setSelectedRole] = useState('alumni');\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n  const { setRole, setIsLogg"}, {"index": 1520, "path": "client/screens/Login.jsx", "chunk": "ni');\n  const [selectedLanguage, setSelectedLanguage] = useState('en');\n  const { setRole, setIsLoggedIn, setToken } = useAuth();\n\n  const ROLES = [\n    { label: 'Alumni', value: 'alumni' },\n    { label: 'College', value: 'college' },\n  ];\n\n  const handleRoleChange = (role) => {\n    setSelectedRole(role);\n  };\n\n  useEffect(() => {\n    loadStoredLanguage();\n  }, []);\n\n  const loadStoredLanguage = async () => {\n    try {\n      const storedLang = await AsyncStorage.getItem('user-language');\n      i"}, {"index": 1521, "path": "client/screens/Login.jsx", "chunk": "sync () => {\n    try {\n      const storedLang = await AsyncStorage.getItem('user-language');\n      if (storedLang) {\n        setSelectedLanguage(storedLang);\n        await handleLanguageChange(storedLang);\n      }\n    } catch (error) {\n      console.error('Error loading language:', error);\n    }\n  };\n\n  const handleLogin = async () => {\n    try {\n      const response = await axios.post(`${SERVER_URL}/auth/login`, {\n        email,\n        password,\n        role: selectedRole,\n      });\n      try "}, {"index": 1522, "path": "client/screens/Login.jsx", "chunk": "RL}/auth/login`, {\n        email,\n        password,\n        role: selectedRole,\n      });\n      try {\n        await AsyncStorage.setItem('isLoggedIn', 'true');\n        await AsyncStorage.setItem('role', selectedRole);\n        await AsyncStorage.setItem('user-language', selectedLanguage);\n        await AsyncStorage.setItem('token', response.data.token);\n        setToken(response.data.token);\n        setIsLoggedIn(true);\n        setRole(selectedRole);\n        console.log('Data saved in AsyncStorag"}, {"index": 1523, "path": "client/screens/Login.jsx", "chunk": "  setIsLoggedIn(true);\n        setRole(selectedRole);\n        console.log('Data saved in AsyncStorage');\n      } catch (e) {\n        console.error('Error saving data', e);\n      }\n    } catch (error) {\n      console.error('Error logging in:', error);\n    }\n  };\n\n  const handleLanguageChange = async (lang) => {\n    try {\n      await changeLanguage(lang);\n      setSelectedLanguage(lang);\n      await i18n.changeLanguage(lang);\n    } catch (error) {\n      console.error('Error changing language:', er"}, {"index": 1524, "path": "client/screens/Login.jsx", "chunk": " i18n.changeLanguage(lang);\n    } catch (error) {\n      console.error('Error changing language:', error);\n    }\n  };\n\n  return (\n    <View className=\"flex-1 bg-white\">\n      <View className=\"flex-1 justify-center p-6\">\n        <Text className=\"mb-8 text-center text-3xl font-bold text-gray-800\">{t('auth.login')}</Text>\n\n        {/* Consistent input styling */}\n        <TextInput\n          className=\"mb-4 w-full rounded-xl border border-gray-200 bg-gray-50 px-4 py-3\"\n          placeholder={t('auth"}, {"index": 1525, "path": "client/screens/Login.jsx", "chunk": "=\"mb-4 w-full rounded-xl border border-gray-200 bg-gray-50 px-4 py-3\"\n          placeholder={t('auth.email')}\n          value={email}\n          onChangeText={setEmail}\n        />\n        <TextInput\n          className=\"mb-6 w-full rounded-xl border border-gray-200 bg-gray-50 px-4 py-3\"\n          placeholder={t('auth.password')}\n          value={password}\n          secureTextEntry\n          onChangeText={setPassword}\n        />\n\n        <TouchableOpacity\n          className=\"mb-4 w-full rounded-x"}, {"index": 1526, "path": "client/screens/Login.jsx", "chunk": "eText={setPassword}\n        />\n\n        <TouchableOpacity\n          className=\"mb-4 w-full rounded-xl bg-blue-500 px-4 py-4\"\n          onPress={handleLogin}>\n          <Text className=\"text-center text-lg font-bold text-white\">{t('auth.loginButton')}</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          className=\"w-full rounded-xl px-4 py-4\"\n          onPress={() => navigation.navigate('Register')}>\n          <Text className=\"text-center font-semibold text-blue-500\">{t('auth.n"}, {"index": 1527, "path": "client/screens/Login.jsx", "chunk": "avigate('Register')}>\n          <Text className=\"text-center font-semibold text-blue-500\">{t('auth.noAccount')}</Text>\n        </TouchableOpacity>\n      </View>\n\n      {/* Compact language picker */}\n      <View className=\"border-t border-gray-200 p-4\">\n        <View className=\"mx-auto w-40\">\n          <Picker\n            selectedValue={selectedLanguage}\n            onValueChange={handleLanguageChange}\n            className=\"rounded-xl bg-gray-50\">\n            {LANGUAGES.map((lang) => (\n        "}, {"index": 1528, "path": "client/screens/Login.jsx", "chunk": "ange}\n            className=\"rounded-xl bg-gray-50\">\n            {LANGUAGES.map((lang) => (\n              <Picker.Item key={lang.code} label={lang.label} value={lang.code} />\n            ))}\n          </Picker>\n        </View>\n      </View>\n      <View className=\"border-t border-gray-200 p-4\">\n        <View className=\"mx-auto w-40\">\n          <Picker\n            selectedValue={selectedRole}\n            onValueChange={handleRoleChange}\n            className=\"rounded-xl bg-gray-50\">\n            {R"}, {"index": 1529, "path": "client/screens/Login.jsx", "chunk": "      onValueChange={handleRoleChange}\n            className=\"rounded-xl bg-gray-50\">\n            {ROLES.map((role) => (\n              <Picker.Item key={role.value} label={role.label} value={role.value} />\n            ))}\n          </Picker>\n        </View>\n      </View>\n    </View>\n  );\n};\n\nexport default LoginScreen;\n"}, {"index": 1530, "path": "client/screens/Manual.jsx", "chunk": "import React, { useState } from 'react';\nimport { View, Text, TextInput, TouchableOpacity, Image, ScrollView, StyleSheet, Alert } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport { CheckIcon, XIcon } from 'lucide-react-native';\nimport {SERVER_URL} from '@env';\n\nconst CITY_COORDINATES = {\n  'Mumbai': { latitude: 19.0760, longitude: 72.8777 },\n  'Delhi': { latitude: 28.6139, longitude: 77.2090 },\n  'Bangalore': { latitude: 12.9716, longitude: 77.5946 }\n};\n\nconst Manual"}, {"index": 1531, "path": "client/screens/Manual.jsx", "chunk": "139, longitude: 77.2090 },\n  'Bangalore': { latitude: 12.9716, longitude: 77.5946 }\n};\n\nconst Manual = ({route, navigation}) => { \n  const resumeData = route.params?.resumeData || null;\n  \n  // Initialize empty data structures for education and experience\n  const emptyEducation = [{\n    degree: '',\n    university: '',\n    graduationYear: '',\n    major: '',\n    honors: ''\n  }];\n\n  const emptyExperience = [{\n    company: '',\n    position: '',\n    startDate: '',\n    endDate: '',\n    description: ''"}, {"index": 1532, "path": "client/screens/Manual.jsx", "chunk": "ence = [{\n    company: '',\n    position: '',\n    startDate: '',\n    endDate: '',\n    description: ''\n  }];\n\n  // Process resumeData only if it exists\n  const newEDU = resumeData ? resumeData.education.map(edu => ({ \n    degree: edu.degree,\n    university: edu.institution, \n    graduationYear: edu.graduation_year,\n    major: edu.major,\n    honors: edu.honors\n  })) : emptyEducation;\n\n  const newJOB = resumeData ? resumeData.experience.map(exp => ({ \n    company: exp.company, \n    position: exp.pos"}, {"index": 1533, "path": "client/screens/Manual.jsx", "chunk": "= resumeData ? resumeData.experience.map(exp => ({ \n    company: exp.company, \n    position: exp.position, \n    startDate: exp.start_date,\n    endDate: exp.end_date, \n    description: exp.responsibilities[0]\n  })) : emptyExperience;\n\n  const [step, setStep] = useState(1);\n  const [formData, setFormData] = useState({\n    name: resumeData?.personal_info?.full_name || '',\n    profilePic: resumeData?.personal_info?.profile_picture || null,\n    bio: resumeData?.personal_info?.summary || '',\n    workE"}, {"index": 1534, "path": "client/screens/Manual.jsx", "chunk": "personal_info?.profile_picture || null,\n    bio: resumeData?.personal_info?.summary || '',\n    workExperience: newJOB,\n    education: newEDU,\n    skills: resumeData?.personal_info?.skills || [],\n    interests: resumeData?.personal_info?.interests || [],\n    currentPosition: resumeData?.personal_info?.current_position || '',\n    email: resumeData?.personal_info?.email || '',\n    phoneNumber: resumeData?.personal_info?.phone || '',\n    location: resumeData?.personal_info?.location || '',\n    count"}, {"index": 1535, "path": "client/screens/Manual.jsx", "chunk": "Data?.personal_info?.phone || '',\n    location: resumeData?.personal_info?.location || '',\n    country: resumeData?.personal_info?.country || '',\n    state: resumeData?.personal_info?.state || '',\n    city: resumeData?.personal_info?.city || '',\n    password: '',\n    confirmPassword: ''\n  });\n\n  const [passwordError, setPasswordError] = useState('');\n  \n  const skillSuggestions = [\n    'React', 'JavaScript', 'Python', 'Design', 'Marketing', \n    'Data Analysis', 'Machine Learning', 'UI/UX', 'Com"}, {"index": 1536, "path": "client/screens/Manual.jsx", "chunk": "avaScript', 'Python', 'Design', 'Marketing', \n    'Data Analysis', 'Machine Learning', 'UI/UX', 'Communication'\n  ];\n  const interestSuggestions = [\n    'Technology', 'Travel', 'Photography', 'Cooking', 'Sports', \n    'Music', 'Reading', 'Art', 'Fitness', 'Gaming'\n  ];\n\n  const convertImageToBase64 = async (uri) => {\n    try {\n      const response = await fetch(uri);\n      const blob = await response.blob();\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();"}, {"index": 1537, "path": "client/screens/Manual.jsx", "chunk": "nse.blob();\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = (error) => reject(error);\n        reader.readAsDataURL(blob);\n      });\n    } catch (error) {\n      console.error('Error converting image:', error);\n      return null;\n    }\n  };\n\n  const pickImage = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOption"}, {"index": 1538, "path": "client/screens/Manual.jsx", "chunk": "t result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\n      allowsEditing: true,\n      aspect: [4, 3],\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      const base64Image = await convertImageToBase64(result.assets[0].uri);\n      setFormData(prev => ({\n        ...prev,\n        profilePic: base64Image\n      }));\n    }\n  };\n\n  const checkUsernameAvailability = async (username) => {\n    return new Promise((resolve) => {\n      setTime"}, {"index": 1539, "path": "client/screens/Manual.jsx", "chunk": "heckUsernameAvailability = async (username) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(username.length >= 3);\n      }, 500);\n    });\n  };\n\n  const getRandomCityCoordinates = () => {\n    const cities = Object.values(CITY_COORDINATES);\n    return cities[Math.floor(Math.random() * cities.length)];\n  };\n\n  const prepareDataForSubmission = () => {\n    const coordinates = getRandomCityCoordinates();\n    \n    // Format the data according to the backend schema\n  "}, {"index": 1540, "path": "client/screens/Manual.jsx", "chunk": "dinates = getRandomCityCoordinates();\n    \n    // Format the data according to the backend schema\n    const formattedData = {\n      fullName: formData.name,\n      email: formData.email,\n      password: \"defaultPassword123\", // You might want to handle this differently\n      isUniversityGeneratedPassword: true,\n      profilePhoto: formData.profilePic,\n      phone: formData.phoneNumber,\n      address: formData.location,\n      country: formData.country,\n      state: formData.state,\n      city: form"}, {"index": 1541, "path": "client/screens/Manual.jsx", "chunk": "s: formData.location,\n      country: formData.country,\n      state: formData.state,\n      city: formData.city,\n      education: formData.education.map(edu => ({\n        degree: edu.degree,\n        institution: edu.university,\n        yearOfGraduation: parseInt(edu.graduationYear),\n      })),\n      workExperience: formData.workExperience.map(exp => ({\n        companyName: exp.company,\n        role: exp.position,\n        startDate: new Date(exp.startDate),\n        endDate: exp.endDate === 'Present"}, {"index": 1542, "path": "client/screens/Manual.jsx", "chunk": " exp.position,\n        startDate: new Date(exp.startDate),\n        endDate: exp.endDate === 'Present' ? null : new Date(exp.endDate),\n        description: exp.description,\n      })),\n      skills: formData.skills,\n      projects: [], // Add if you have project data\n      certifications: [], // Add if you have certification data\n      languages: [], // Add if you have language data\n      location: coordinates,\n      connections: [],\n      receivedRequests: [],\n      sentRequests: [],\n      notifi"}, {"index": 1543, "path": "client/screens/Manual.jsx", "chunk": "coordinates,\n      connections: [],\n      receivedRequests: [],\n      sentRequests: [],\n      notifications: [],\n      bio: formData.bio,\n      interests: formData.interests,\n      website: '', // Add if you have website data\n    };\n\n    return formattedData;\n  };\n\n  const handleSubmit = async () => {\n    if (formData.password !== formData.confirmPassword) {\n      setPasswordError('Passwords do not match');\n      setStep(2);\n      return;\n    }\n\n    try {\n      const coordinates = getRandomCityC"}, {"index": 1544, "path": "client/screens/Manual.jsx", "chunk": "t match');\n      setStep(2);\n      return;\n    }\n\n    try {\n      const coordinates = getRandomCityCoordinates();\n      \n      // Prepare data according to schema\n      const formattedData = {\n        fullName: formData.name,\n        email: formData.email,\n        password: formData.password,\n        isUniversityGeneratedPassword: false,\n        profilePhoto: formData.profilePic,\n        phone: formData.phoneNumber,\n        address: formData.location,\n        country: formData.country,\n        s"}, {"index": 1545, "path": "client/screens/Manual.jsx", "chunk": "rmData.phoneNumber,\n        address: formData.location,\n        country: formData.country,\n        state: formData.state,\n        city: formData.city,\n        education: formData.education.map(edu => ({\n          degree: edu.degree,\n          institution: edu.university,\n          yearOfGraduation: parseInt(edu.graduationYear) || null,\n        })),\n        workExperience: formData.workExperience.map(exp => ({\n          companyName: exp.company,\n          role: exp.position,\n          startDate: "}, {"index": 1546, "path": "client/screens/Manual.jsx", "chunk": "ap(exp => ({\n          companyName: exp.company,\n          role: exp.position,\n          startDate: exp.startDate ? new Date(exp.startDate) : null,\n          endDate: exp.endDate === 'Present' ? null : new Date(exp.endDate),\n          description: exp.description,\n        })),\n        skills: formData.skills || [],\n        projects: [],\n        certifications: [],\n        languages: [],\n        location: {\n          latitude: coordinates.latitude,\n          longitude: coordinates.longitude,\n    "}, {"index": 1547, "path": "client/screens/Manual.jsx", "chunk": "cation: {\n          latitude: coordinates.latitude,\n          longitude: coordinates.longitude,\n        },\n        bio: formData.bio || '',\n        interests: formData.interests || [],\n        website: '',\n      };\n\n      console.log('Sending data:', JSON.stringify(formattedData, null, 2));\n\n      const response = await fetch(`${SERVER_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },"}, {"index": 1548, "path": "client/screens/Manual.jsx", "chunk": ": {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n        body: JSON.stringify(formattedData),  // Make sure to stringify!\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Server error:', errorText);\n        throw new Error(`Registration failed: ${errorText}`);\n      }\n\n      const data = await response.json();\n      console.log('Registration successful:', data);\n      \n      // Navigat"}, {"index": 1549, "path": "client/screens/Manual.jsx", "chunk": " await response.json();\n      console.log('Registration successful:', data);\n      \n      // Navigate to login or next screen\n      navigation.navigate('Login');\n      \n    } catch (error) {\n      console.error('Registration error:', error);\n      Alert.alert(\n        'Registration Failed',\n        error.message || 'Please check your data and try again'\n      );\n    }\n  };\n\n  const renderStep = () => {\n    switch(step) {\n      case 1:\n        return (\n          <ScrollView className=\"p-4 space-y"}, {"index": 1550, "path": "client/screens/Manual.jsx", "chunk": " => {\n    switch(step) {\n      case 1:\n        return (\n          <ScrollView className=\"p-4 space-y-4\">\n            <Text style={styles.heading}>Basic Information</Text>\n            \n            <TouchableOpacity \n              onPress={pickImage}\n              style={styles.imagePickerContainer}\n            >\n              {formData.profilePic ? (\n                <Image \n                  source={{ uri: formData.profilePic }} \n                  style={styles.profileImage}\n                />\n  "}, {"index": 1551, "path": "client/screens/Manual.jsx", "chunk": "={{ uri: formData.profilePic }} \n                  style={styles.profileImage}\n                />\n              ) : (\n                <View style={styles.imagePlaceholder}>\n                  <Text style={styles.imagePlaceholderText}>Add Profile Picture</Text>\n                </View>\n              )}\n            </TouchableOpacity>\n\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>Full Name</Text>\n              <TextInput\n                placeholder=\"Enter"}, {"index": 1552, "path": "client/screens/Manual.jsx", "chunk": "xt style={styles.label}>Full Name</Text>\n              <TextInput\n                placeholder=\"Enter your full name\"\n                value={formData.name}\n                onChangeText={(text) => setFormData(prev => ({...prev, name: text}))}\n                style={styles.input}\n              />\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>Email</Text>\n              <TextInput\n                placeholder=\"Enter your email\"\n         "}, {"index": 1553, "path": "client/screens/Manual.jsx", "chunk": "abel}>Email</Text>\n              <TextInput\n                placeholder=\"Enter your email\"\n                value={formData.email}\n                onChangeText={(text) => setFormData(prev => ({...prev, email: text}))}\n                keyboardType=\"email-address\"\n                style={styles.input}\n              />\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>Phone Number</Text>\n              <TextInput\n                placeholder="}, {"index": 1554, "path": "client/screens/Manual.jsx", "chunk": "<Text style={styles.label}>Phone Number</Text>\n              <TextInput\n                placeholder=\"Enter your phone number\"\n                value={formData.phoneNumber}\n                onChangeText={(text) => {\n                  const cleaned = text.replace(/\\D/g, '');\n                  setFormData(prev => ({...prev, phoneNumber: cleaned.slice(0, 10)}));\n                }}\n                keyboardType=\"numeric\"\n                style={styles.input}\n              />\n            </View>\n\n        "}, {"index": 1555, "path": "client/screens/Manual.jsx", "chunk": "rdType=\"numeric\"\n                style={styles.input}\n              />\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>Country</Text>\n              <TextInput\n                placeholder=\"Enter your country\"\n                value={formData.country}\n                onChangeText={(text) => setFormData(prev => ({...prev, country: text}))}\n                style={styles.input}\n              />\n            </View>\n\n            <View style="}, {"index": 1556, "path": "client/screens/Manual.jsx", "chunk": "\n                style={styles.input}\n              />\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>State</Text>\n              <TextInput\n                placeholder=\"Enter your state\"\n                value={formData.state}\n                onChangeText={(text) => setFormData(prev => ({...prev, state: text}))}\n                style={styles.input}\n              />\n            </View>\n\n            <View style={styles.inputContainer}>"}, {"index": 1557, "path": "client/screens/Manual.jsx", "chunk": "styles.input}\n              />\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>City</Text>\n              <TextInput\n                placeholder=\"Enter your city\"\n                value={formData.city}\n                onChangeText={(text) => setFormData(prev => ({...prev, city: text}))}\n                style={styles.input}\n              />\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={"}, {"index": 1558, "path": "client/screens/Manual.jsx", "chunk": "/>\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>Location</Text>\n              <TextInput\n                placeholder=\"Where are you based?\"\n                value={formData.location}\n                onChangeText={(text) => setFormData(prev => ({...prev, location: text}))}\n                style={styles.input}\n              />\n            </View>\n          </ScrollView>\n        );\n      \n      case 2:\n        return (\n          <Scro"}, {"index": 1559, "path": "client/screens/Manual.jsx", "chunk": "    </View>\n          </ScrollView>\n        );\n      \n      case 2:\n        return (\n          <ScrollView className=\"p-4 space-y-4\">\n            <Text style={styles.heading}>Profile Details</Text>\n\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>Current Position</Text>\n              <TextInput\n                placeholder=\"What's your current role?\"\n                value={formData.currentPosition}\n                onChangeText={(text) => setFormData(prev "}, {"index": 1560, "path": "client/screens/Manual.jsx", "chunk": "          value={formData.currentPosition}\n                onChangeText={(text) => setFormData(prev => ({...prev, currentPosition: text}))}\n                style={styles.input}\n              />\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>New Password</Text>\n              <TextInput\n                placeholder=\"Enter new password\"\n                value={formData.password}\n                onChangeText={(text) => {\n                 "}, {"index": 1561, "path": "client/screens/Manual.jsx", "chunk": "               value={formData.password}\n                onChangeText={(text) => {\n                  setFormData(prev => ({...prev, password: text}));\n                  setPasswordError('');\n                }}\n                secureTextEntry\n                style={styles.input}\n              />\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>Confirm Password</Text>\n              <TextInput\n                placeholder=\"Confirm your pa"}, {"index": 1562, "path": "client/screens/Manual.jsx", "chunk": "label}>Confirm Password</Text>\n              <TextInput\n                placeholder=\"Confirm your password\"\n                value={formData.confirmPassword}\n                onChangeText={(text) => {\n                  setFormData(prev => ({...prev, confirmPassword: text}));\n                  setPasswordError('');\n                }}\n                secureTextEntry\n                style={[styles.input, passwordError ? styles.inputError : null]}\n              />\n              {passwordError ? (\n    "}, {"index": 1563, "path": "client/screens/Manual.jsx", "chunk": "t, passwordError ? styles.inputError : null]}\n              />\n              {passwordError ? (\n                <Text style={styles.errorText}>{passwordError}</Text>\n              ) : null}\n            </View>\n\n            <View style={styles.inputContainer}>\n              <Text style={styles.label}>Bio</Text>\n              <TextInput\n                placeholder=\"Tell us about yourself\"\n                value={formData.bio}\n                onChangeText={(text) => setFormData(prev => ({...prev, bi"}, {"index": 1564, "path": "client/screens/Manual.jsx", "chunk": "      value={formData.bio}\n                onChangeText={(text) => setFormData(prev => ({...prev, bio: text}))}\n                multiline\n                style={[styles.input, styles.textArea]}\n              />\n            </View>\n          </ScrollView>\n        );\n\n      case 3:\n        return (\n          <ScrollView className=\"p-4 space-y-4\">\n            <Text style={styles.heading}>Professional Details</Text>\n            \n            <View style={styles.section}>\n              <Text style={st"}, {"index": 1565, "path": "client/screens/Manual.jsx", "chunk": " Details</Text>\n            \n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Work Experience</Text>\n              {formData.workExperience.map((exp, index) => (\n                <View key={index} style={styles.experienceCard}>\n                  <TextInput\n                    placeholder=\"Company Name\"\n                    value={exp.company}\n                    onChangeText={(text) => {\n                      const newExp = [...formData.workExperience];\n   "}, {"index": 1566, "path": "client/screens/Manual.jsx", "chunk": "    onChangeText={(text) => {\n                      const newExp = [...formData.workExperience];\n                      newExp[index].company = text;\n                      setFormData(prev => ({...prev, workExperience: newExp}));\n                    }}\n                    style={styles.input}\n                  />\n                  <TextInput\n                    placeholder=\"Position\"\n                    value={exp.position}\n                    onChangeText={(text) => {\n                      const"}, {"index": 1567, "path": "client/screens/Manual.jsx", "chunk": "      value={exp.position}\n                    onChangeText={(text) => {\n                      const newExp = [...formData.workExperience];\n                      newExp[index].position = text;\n                      setFormData(prev => ({...prev, workExperience: newExp}));\n                    }}\n                    style={styles.input}\n                  />\n                  <TextInput\n                    placeholder=\"Start Date\"\n                    value={exp.startDate}\n                    onChan"}, {"index": 1568, "path": "client/screens/Manual.jsx", "chunk": "       placeholder=\"Start Date\"\n                    value={exp.startDate}\n                    onChangeText={(text) => {\n                      const newExp = [...formData.workExperience];\n                      newExp[index].duration = text;\n                      setFormData(prev => ({...prev, workExperience: newExp}));\n                    }}\n                    style={styles.input}\n                  />\n                  <TextInput\n                    placeholder=\"End Date\"\n                    val"}, {"index": 1569, "path": "client/screens/Manual.jsx", "chunk": "  />\n                  <TextInput\n                    placeholder=\"End Date\"\n                    value={exp.endDate}\n                    onChangeText={(text) => {\n                      const newExp = [...formData.workExperience];\n                      newExp[index].duration = text;\n                      setFormData(prev => ({...prev, workExperience: newExp}));\n                    }}\n                    style={styles.input}\n                  />\n                  <TextInput\n                    pla"}, {"index": 1570, "path": "client/screens/Manual.jsx", "chunk": "      style={styles.input}\n                  />\n                  <TextInput\n                    placeholder=\"Description\"\n                    value={exp.description}\n                    onChangeText={(text) => {\n                      const newExp = [...formData.workExperience];\n                      newExp[index].description = text;\n                      setFormData(prev => ({...prev, workExperience: newExp}));\n                    }}\n                    multiline\n                    style={[sty"}, {"index": 1571, "path": "client/screens/Manual.jsx", "chunk": "nce: newExp}));\n                    }}\n                    multiline\n                    style={[styles.input, styles.textArea]}\n                  />\n                </View>\n              ))}\n              <TouchableOpacity\n                onPress={() => {\n                  setFormData(prev => ({\n                    ...prev,\n                    workExperience: [...prev.workExperience, {\n                      company: '',\n                      position: '',\n                      duration: '',\n   "}, {"index": 1572, "path": "client/screens/Manual.jsx", "chunk": "            company: '',\n                      position: '',\n                      duration: '',\n                      description: ''\n                    }]\n                  }));\n                }}\n                style={styles.addButton}\n              >\n                <Text style={styles.addButtonText}>+ Add Work Experience</Text>\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Education</Text>\n "}, {"index": 1573, "path": "client/screens/Manual.jsx", "chunk": "    <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Education</Text>\n              {formData.education.map((edu, index) => (\n                <View key={index} style={styles.educationCard}>\n                  <TextInput\n                    placeholder=\"Degree\"\n                    value={edu.degree}\n                    onChangeText={(text) => {\n                      const newEdu = [...formData.education];\n                      newEdu[index].degree = text;\n             "}, {"index": 1574, "path": "client/screens/Manual.jsx", "chunk": "t newEdu = [...formData.education];\n                      newEdu[index].degree = text;\n                      setFormData(prev => ({...prev, education: newEdu}));\n                    }}\n                    style={styles.input}\n                  />\n                  <TextInput\n                    placeholder=\"Graduation Year\"\n                    value={edu.graduationYear}\n                    onChangeText={(text) => {\n                      const newEdu = [...formData.education];\n                   "}, {"index": 1575, "path": "client/screens/Manual.jsx", "chunk": "eText={(text) => {\n                      const newEdu = [...formData.education];\n                      newEdu[index].graduationYear = text;\n                      setFormData(prev => ({...prev, education: newEdu}));\n                    }}\n                    keyboardType=\"numeric\"\n                    style={styles.input}\n                  />\n                  <TextInput\n                    placeholder=\"University\"\n                    value={edu.university}\n                    onChangeText={(text)"}, {"index": 1576, "path": "client/screens/Manual.jsx", "chunk": "der=\"University\"\n                    value={edu.university}\n                    onChangeText={(text) => {\n                      const newEdu = [...formData.education];\n                      newEdu[index].university = text;\n                      setFormData(prev => ({...prev, education: newEdu}));\n                    }}\n                    style={styles.input}\n                  />\n                </View>\n              ))}\n              <TouchableOpacity\n                onPress={() => {\n          "}, {"index": 1577, "path": "client/screens/Manual.jsx", "chunk": "/View>\n              ))}\n              <TouchableOpacity\n                onPress={() => {\n                  setFormData(prev => ({\n                    ...prev,\n                    education: [...prev.education, {\n                      degree: '',\n                      graduationYear: '',\n                      university: '',\n                      cgpa: ''\n                    }]\n                  }));\n                }}\n                style={styles.addButton}\n              >\n                <Tex"}, {"index": 1578, "path": "client/screens/Manual.jsx", "chunk": "));\n                }}\n                style={styles.addButton}\n              >\n                <Text style={styles.addButtonText}>+ Add Education</Text>\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Skills</Text>\n              <View style={styles.chipContainer}>\n                {skillSuggestions.map((skill, index) => (\n                  <TouchableOpacity \n                    key={index}\n          "}, {"index": 1579, "path": "client/screens/Manual.jsx", "chunk": "((skill, index) => (\n                  <TouchableOpacity \n                    key={index}\n                    onPress={() => {\n                      if (!formData.skills.includes(skill)) {\n                        setFormData(prev => ({\n                          ...prev, \n                          skills: [...prev.skills, skill]\n                        }));\n                      }\n                    }}\n                    style={[\n                      styles.chip,\n                      formData"}, {"index": 1580, "path": "client/screens/Manual.jsx", "chunk": "   }}\n                    style={[\n                      styles.chip,\n                      formData.skills.includes(skill) && styles.chipSelected\n                    ]}\n                  >\n                    <Text style={[\n                      styles.chipText,\n                      formData.skills.includes(skill) && styles.chipTextSelected\n                    ]}>{skill}</Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n\n            <Vie"}, {"index": 1581, "path": "client/screens/Manual.jsx", "chunk": " </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n\n            <View style={styles.section}>\n              <Text style={styles.sectionTitle}>Interests</Text>\n              <View style={styles.chipContainer}>\n                {interestSuggestions.map((interest, index) => (\n                  <TouchableOpacity \n                    key={index}\n                    onPress={() => {\n                      if (!formData.interests.includes(interest)) {\n                     "}, {"index": 1582, "path": "client/screens/Manual.jsx", "chunk": "s={() => {\n                      if (!formData.interests.includes(interest)) {\n                        setFormData(prev => ({\n                          ...prev, \n                          interests: [...prev.interests, interest]\n                        }));\n                      }\n                    }}\n                    style={[\n                      styles.chip,\n                      formData.interests.includes(interest) && styles.chipSelected\n                    ]}\n                  >\n     "}, {"index": 1583, "path": "client/screens/Manual.jsx", "chunk": "interests.includes(interest) && styles.chipSelected\n                    ]}\n                  >\n                    <Text style={[\n                      styles.chipText,\n                      formData.interests.includes(interest) && styles.chipTextSelected\n                    ]}>{interest}</Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n          </ScrollView>\n        );\n    }\n  };\n\n  const additionalStyles = StyleSheet.create({\n    input"}, {"index": 1584, "path": "client/screens/Manual.jsx", "chunk": "       </ScrollView>\n        );\n    }\n  };\n\n  const additionalStyles = StyleSheet.create({\n    inputError: {\n      borderColor: '#ff4444',\n    },\n    errorText: {\n      color: '#ff4444',\n      fontSize: 12,\n      marginTop: 4,\n    },\n  });\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      backgroundColor: '#f5f5f5',\n    },\n    heading: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      color: '#1a1a1a',\n      marginBottom: 20,\n    },\n    inputContainer: {\n      margi"}, {"index": 1585, "path": "client/screens/Manual.jsx", "chunk": "ht: 'bold',\n      color: '#1a1a1a',\n      marginBottom: 20,\n    },\n    inputContainer: {\n      marginBottom: 16,\n    },\n    label: {\n      fontSize: 16,\n      fontWeight: '600',\n      color: '#4a4a4a',\n      marginBottom: 8,\n    },\n    input: {\n      backgroundColor: '#fff',\n      borderRadius: 8,\n      padding: 12,\n      borderWidth: 1,\n      borderColor: '#e0e0e0',\n      fontSize: 16,\n    },\n    textArea: {\n      height: 100,\n      textAlignVertical: 'top',\n    },\n    imagePickerContainer: {\n "}, {"index": 1586, "path": "client/screens/Manual.jsx", "chunk": " textArea: {\n      height: 100,\n      textAlignVertical: 'top',\n    },\n    imagePickerContainer: {\n      alignItems: 'center',\n      marginBottom: 20,\n    },\n    profileImage: {\n      width: 120,\n      height: 120,\n      borderRadius: 60,\n    },\n    imagePlaceholder: {\n      width: 120,\n      height: 120,\n      borderRadius: 60,\n      backgroundColor: '#e0e0e0',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n    imagePlaceholderText: {\n      color: '#666',\n      textAlign: 'c"}, {"index": 1587, "path": "client/screens/Manual.jsx", "chunk": "   alignItems: 'center',\n    },\n    imagePlaceholderText: {\n      color: '#666',\n      textAlign: 'center',\n      padding: 10,\n    },\n    section: {\n      marginBottom: 24,\n    },\n    sectionTitle: {\n      fontSize: 18,\n      fontWeight: '600',\n      marginBottom: 12,\n      color: '#1a1a1a',\n    },\n    chipContainer: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      gap: 8,\n    },\n    chip: {\n      paddingHorizontal: 12,\n      paddingVertical: 6,\n      borderRadius: 16,\n      backgroun"}, {"index": 1588, "path": "client/screens/Manual.jsx", "chunk": "ip: {\n      paddingHorizontal: 12,\n      paddingVertical: 6,\n      borderRadius: 16,\n      backgroundColor: '#e0e0e0',\n    },\n    chipSelected: {\n      backgroundColor: '#1a1a1a',\n    },\n    chipText: {\n      color: '#4a4a4a',\n    },\n    chipTextSelected: {\n      color: '#fff',\n    },\n    footer: {\n      padding: 16,\n      backgroundColor: '#fff',\n      borderTopWidth: 1,\n      borderTopColor: '#e0e0e0',\n    },\n    navigationButtons: {\n      flexDirection: 'row',\n      justifyContent: 'space-bet"}, {"index": 1589, "path": "client/screens/Manual.jsx", "chunk": "0e0e0',\n    },\n    navigationButtons: {\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      marginBottom: 8,\n    },\n    button: {\n      paddingVertical: 12,\n      paddingHorizontal: 24,\n      borderRadius: 8,\n      minWidth: 120,\n    },\n    backButton: {\n      backgroundColor: '#e0e0e0',\n    },\n    nextButton: {\n      backgroundColor: '#1a1a1a',\n    },\n    backButtonText: {\n      color: '#4a4a4a',\n      fontSize: 16,\n      fontWeight: '600',\n      textAlign: 'center',\n    },"}, {"index": 1590, "path": "client/screens/Manual.jsx", "chunk": "    color: '#4a4a4a',\n      fontSize: 16,\n      fontWeight: '600',\n      textAlign: 'center',\n    },\n    nextButtonText: {\n      color: '#fff',\n      fontSize: 16,\n      fontWeight: '600',\n      textAlign: 'center',\n    },\n    stepIndicator: {\n      textAlign: 'center',\n      color: '#666',\n    },\n    iconContainer: {\n      position: 'absolute',\n      right: 12,\n      top: 12,\n    },\n    experienceCard: {\n      backgroundColor: '#fff',\n      padding: 16,\n      borderRadius: 8,\n      marginBottom"}, {"index": 1591, "path": "client/screens/Manual.jsx", "chunk": "eCard: {\n      backgroundColor: '#fff',\n      padding: 16,\n      borderRadius: 8,\n      marginBottom: 16,\n      borderWidth: 1,\n      borderColor: '#e0e0e0',\n    },\n    \n    educationCard: {\n      backgroundColor: '#fff',\n      padding: 16,\n      borderRadius: 8,\n      marginBottom: 16,\n      borderWidth: 1,\n      borderColor: '#e0e0e0',\n    },\n    \n    addButton: {\n      backgroundColor: '#f0f0f0',\n      padding: 12,\n      borderRadius: 8,\n      alignItems: 'center',\n      marginTop: 8,\n    },\n"}, {"index": 1592, "path": "client/screens/Manual.jsx", "chunk": "',\n      padding: 12,\n      borderRadius: 8,\n      alignItems: 'center',\n      marginTop: 8,\n    },\n    \n    addButtonText: {\n      color: '#1a1a1a',\n      fontSize: 16,\n      fontWeight: '600',\n    },\n    ...additionalStyles,\n  });\n\n  return (\n    <View style={styles.container}>\n      {renderStep()}\n      <View style={styles.footer}>\n        <View style={styles.navigationButtons}>\n          {step > 1 && (\n            <TouchableOpacity \n              onPress={() => setStep(prev => prev - 1)}\n   "}, {"index": 1593, "path": "client/screens/Manual.jsx", "chunk": " > 1 && (\n            <TouchableOpacity \n              onPress={() => setStep(prev => prev - 1)}\n              style={[styles.button, styles.backButton]}\n            >\n              <Text style={styles.backButtonText}>Back</Text>\n            </TouchableOpacity>\n          )}\n          \n          <TouchableOpacity \n            onPress={() => {\n              if (step < 3) setStep(prev => prev + 1);\n              else {\n                handleSubmit();\n              }\n            }}\n            style"}, {"index": 1594, "path": "client/screens/Manual.jsx", "chunk": "             else {\n                handleSubmit();\n              }\n            }}\n            style={[styles.button, styles.nextButton]}\n          >\n            <Text style={styles.nextButtonText}>\n              {step === 3 ? 'Submit' : 'Next'}\n            </Text>\n          </TouchableOpacity>\n        </View>\n        <Text style={styles.stepIndicator}>Step {step} of 3</Text>\n      </View>\n    </View>\n  );\n};\n\nexport default Manual;"}, {"index": 1595, "path": "client/screens/Manual.jsx", "chunk": "iew>\n  );\n};\n\nexport default Manual;"}, {"index": 1596, "path": "client/screens/Map.jsx", "chunk": "import * as Location from 'expo-location';\nimport { useState, useEffect } from 'react';\nimport { View, Text, TouchableOpacity, StyleSheet, Image, Modal } from 'react-native';\nimport MapView, { Marker } from 'react-native-maps';\n\nimport { alumniMapData } from '../constants/alumni/alumniMapData';\n\nconst MapScreen = () => {\n  const [location, setLocation] = useState(null);\n  const [selectedUser, setSelectedUser] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const { status } = awai"}, {"index": 1597, "path": "client/screens/Map.jsx", "chunk": "electedUser] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await Location.requestForegroundPermissionsAsync();\n      if (status !== 'granted') return;\n\n      const location = await Location.getCurrentPositionAsync({});\n      setLocation(location.coords);\n    })();\n  }, []);\n\n  if (!location) return <Text>Loading...</Text>;\n\n  const handleMarkerPress = (user) => {\n    // console.log('User selected:', user);\n    setSelectedUser(user);\n  };\n\n  const handleCloseM"}, {"index": 1598, "path": "client/screens/Map.jsx", "chunk": " {\n    // console.log('User selected:', user);\n    setSelectedUser(user);\n  };\n\n  const handleCloseModal = () => {\n    setSelectedUser(null);\n    // console.log('Modal closed');\n  };\n\n  return (\n    <View style={{ flex: 1 }}>\n      <MapView\n        style={{ flex: 1 }}\n        provider={MapView.PROVIDER_OSM}\n        initialRegion={{\n          latitude: 21.1458, // Center of Nagpur\n          longitude: 79.0882, // Center of Nagpur // Center of India (New Delhi)\n          latitudeDelta: 23, // Incr"}, {"index": 1599, "path": "client/screens/Map.jsx", "chunk": "de: 79.0882, // Center of Nagpur // Center of India (New Delhi)\n          latitudeDelta: 23, // Increased to zoom out more\n          longitudeDelta: 23, // Increased to zoom out more\n        }}\n        showsUserLocation>\n        {alumniMapData.map((user) => (\n          <Marker\n            key={user.id}\n            coordinate={{\n              latitude: user.latitude,\n              longitude: user.longitude,\n            }}\n            onPress={() => handleMarkerPress(user)}>\n            <Image sou"}, {"index": 1600, "path": "client/screens/Map.jsx", "chunk": "ongitude,\n            }}\n            onPress={() => handleMarkerPress(user)}>\n            <Image source={user.profilePhoto} style={{ width: 40, height: 40, borderRadius: 20 }} />\n          </Marker>\n        ))}\n      </MapView>\n\n      <Modal\n        visible={!!selectedUser}\n        transparent\n        animationType=\"slide\"\n        onRequestClose={handleCloseModal}>\n        {selectedUser && (\n          <View style={styles.modalContainer}>\n            <View style={styles.modalContent}>\n           "}, {"index": 1601, "path": "client/screens/Map.jsx", "chunk": "     <View style={styles.modalContainer}>\n            <View style={styles.modalContent}>\n              <Image source={selectedUser.profilePhoto} style={styles.profileImage} />\n              <Text style={styles.userName}>{selectedUser.name}</Text>\n              <View style={styles.buttonContainer}>\n                <TouchableOpacity style={styles.button} onPress={() => console.log('View Profile')}>\n                  <Text style={styles.buttonText}>View Profile</Text>\n                </TouchableOpa"}, {"index": 1602, "path": "client/screens/Map.jsx", "chunk": "                  <Text style={styles.buttonText}>View Profile</Text>\n                </TouchableOpacity>\n                <TouchableOpacity style={styles.button} onPress={() => console.log('Connect')}>\n                  <Text style={styles.buttonText}>Connect</Text>\n                </TouchableOpacity>\n              </View>\n              <TouchableOpacity style={styles.closeButton} onPress={handleCloseModal}>\n                <Text style={styles.closeButtonText}>Close</Text>\n              </Toucha"}, {"index": 1603, "path": "client/screens/Map.jsx", "chunk": "loseModal}>\n                <Text style={styles.closeButtonText}>Close</Text>\n              </TouchableOpacity>\n            </View>\n          </View>\n        )}\n      </Modal>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  modalContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0,0,0,0.5)',\n  },\n  modalContent: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    alignItems: 'center',\n    width: '80%',\n   "}, {"index": 1604, "path": "client/screens/Map.jsx", "chunk": "lor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    alignItems: 'center',\n    width: '80%',\n    maxWidth: 300,\n  },\n  profileImage: {\n    width: 100,\n    height: 100,\n    borderRadius: 50,\n  },\n  userName: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    marginVertical: 10,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    marginVertical: 10,\n  },\n  button: {\n    backgroundColor: '#4CAF50',\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    margin: 5,\n    borderRadius: 5,\n  },\n  b"}, {"index": 1605, "path": "client/screens/Map.jsx", "chunk": "0',\n    paddingVertical: 10,\n    paddingHorizontal: 15,\n    margin: 5,\n    borderRadius: 5,\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 14,\n  },\n  closeButton: {\n    marginTop: 20,\n    padding: 10,\n  },\n  closeButtonText: {\n    color: 'blue',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n});\n\nexport default MapScreen;\n"}, {"index": 1606, "path": "client/screens/Message.jsx", "chunk": "import { SERVER_URL } from '@env';\nimport axios from 'axios';\nimport { Audio } from 'expo-av';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as MediaLibrary from 'expo-media-library';\nimport { useState, useRef, useEffect } from 'react';\nimport { View, ScrollView, Text } from 'react-native';\n\nimport DateSeparator from '../components/message/DateSeparator';\nimport InputBar from '../components/message/InputBar';\nimport MessageBubble from '../components/message/MessageBubble';\nimport { "}, {"index": 1607, "path": "client/screens/Message.jsx", "chunk": "onents/message/InputBar';\nimport MessageBubble from '../components/message/MessageBubble';\nimport { useAuth } from '../providers/AuthProvider';\nimport { useSocket } from '../providers/SocketProvider';\nimport { formatMessageDate, groupMessagesByDate } from '../utils/dateUtils';\nimport { MessageService } from '../utils/messageUtils';\n// import { sampleMessages } from '../constants/messageData';\n\nconst MessageScreen = ({ route }) => {\n  const { chatData } = route.params;\n  const socket = useSocket("}, {"index": 1608, "path": "client/screens/Message.jsx", "chunk": "st MessageScreen = ({ route }) => {\n  const { chatData } = route.params;\n  const socket = useSocket();\n  const { user, token } = useAuth();\n\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [page, setPage] = useState(1);\n  const [hasMore, setHasMore] = useState(true);\n  const [isRecording, setIsRecording] = useState(false);\n  const [recording, setRecording] = useState(null);\n  const [uploadingMes"}, {"index": 1609, "path": "client/screens/Message.jsx", "chunk": "ording] = useState(false);\n  const [recording, setRecording] = useState(null);\n  const [uploadingMessages, setUploadingMessages] = useState({}); // Track uploading messages\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [permissions, setPermissions] = useState({\n    camera: false,\n    audio: false,\n    mediaLibrary: false,\n  });\n  const scrollViewRef = useRef();\n\n  useEffect(() => {\n    if (!socket) return;\n\n    // Join chat room\n    socket.emit('joinChat', chatData.chatId)"}, {"index": 1610, "path": "client/screens/Message.jsx", "chunk": "() => {\n    if (!socket) return;\n\n    // Join chat room\n    socket.emit('joinChat', chatData.chatId);\n\n    // Listen for new messages\n    socket.on('receiveMessage', (newMessage) => {\n      setMessages((prev) => [...prev, newMessage]);\n    });\n\n    // Fetch chat history\n    fetchMessages();\n\n    requestPermissions();\n\n    return () => {\n      socket.emit('leaveChat', chatData.chatId);\n      socket.off('receiveMessage');\n    };\n  }, [socket, chatData.chatId]);\n\n  const requestPermissions = async "}, {"index": 1611, "path": "client/screens/Message.jsx", "chunk": ".off('receiveMessage');\n    };\n  }, [socket, chatData.chatId]);\n\n  const requestPermissions = async () => {\n    const cameraStatus = await ImagePicker.requestCameraPermissionsAsync();\n    const audioStatus = await Audio.requestPermissionsAsync();\n    const mediaStatus = await MediaLibrary.requestPermissionsAsync();\n\n    setPermissions({\n      camera: cameraStatus.granted,\n      audio: audioStatus.granted,\n      mediaLibrary: mediaStatus.granted,\n    });\n  };\n\n  const fetchMessages = async (pageN"}, {"index": 1612, "path": "client/screens/Message.jsx", "chunk": "granted,\n      mediaLibrary: mediaStatus.granted,\n    });\n  };\n\n  const fetchMessages = async (pageNum = page) => {\n    if (isLoadingMore || !hasMore) return;\n\n    setIsLoadingMore(true);\n    try {\n      const response = await axios.get(\n        `${SERVER_URL}/chat/${chatData.chatId}/messages?page=${pageNum}&limit=50`,\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      const { messages: chatMessages, pagination } = response.data.dat"}, {"index": 1613, "path": "client/screens/Message.jsx", "chunk": "        },\n        }\n      );\n      const { messages: chatMessages, pagination } = response.data.data;\n\n      if (pageNum === 1) setMessages(chatMessages);\n      else setMessages((prev) => [...chatMessages, ...prev]); // Prepend older messages\n\n      setHasMore(pagination.hasMore);\n      setPage(pageNum);\n    } catch (error) {\n      console.error('Error fetching messages:', error);\n    } finally {\n      setIsLoadingMore(false);\n      setLoading(false);\n    }\n  };\n\n  const handleScroll = (event) "}, {"index": 1614, "path": "client/screens/Message.jsx", "chunk": "\n      setIsLoadingMore(false);\n      setLoading(false);\n    }\n  };\n\n  const handleScroll = (event) => {\n    const { contentOffset, contentSize, layoutMeasurement } = event.nativeEvent;\n\n    // Check if user is near the top to load more messages\n    if (contentOffset.y < 100 && hasMore && !isLoadingMore) {\n      fetchMessages(page + 1);\n    }\n  };\n\n  const handleSend = () => {\n    if (message.trim().length === 0 || !socket) return;\n\n    const newMessage = {\n      type: 'text',\n      text: messag"}, {"index": 1615, "path": "client/screens/Message.jsx", "chunk": "().length === 0 || !socket) return;\n\n    const newMessage = {\n      type: 'text',\n      text: message,\n      sender: user.email,\n      timestamp: Date.now(),\n    };\n\n    socket.emit('sendMessage', {\n      chatId: chatData.chatId,\n      message: newMessage,\n    });\n\n    // Optimistically add message to UI\n    setMessages((prev) => [...prev, { ...newMessage, sender: user.email }]);\n    setMessage('');\n  };\n\n  const handleMediaSend = async (messagePromise, tempId, type) => {\n    // Add temporary me"}, {"index": 1616, "path": "client/screens/Message.jsx", "chunk": ");\n  };\n\n  const handleMediaSend = async (messagePromise, tempId, type) => {\n    // Add temporary message with uploading state\n    const tempMessage = {\n      id: tempId,\n      type,\n      uri: '',\n      fileName: 'Uploading...',\n      timestamp: Date.now(),\n      sender: user.email,\n      isUploading: true,\n      uploadFailed: false,\n    };\n    setMessages((prev) => [...prev, tempMessage]);\n    setUploadingMessages((prev) => ({ ...prev, [tempId]: true }));\n\n    try {\n      const newMessage = aw"}, {"index": 1617, "path": "client/screens/Message.jsx", "chunk": "etUploadingMessages((prev) => ({ ...prev, [tempId]: true }));\n\n    try {\n      const newMessage = await messagePromise;\n      if (newMessage) {\n        socket.emit('sendMessage', {\n          chatId: chatData.chatId,\n          message: newMessage,\n        });\n        // Replace temp message with actual message\n        setMessages((prev) =>\n          prev.map((msg) => (msg.id === tempId ? { ...newMessage, sender: user.email } : msg))\n        );\n      } else {\n        // Handle upload failure\n     "}, {"index": 1618, "path": "client/screens/Message.jsx", "chunk": "ssage, sender: user.email } : msg))\n        );\n      } else {\n        // Handle upload failure\n        setMessages((prev) =>\n          prev.map((msg) =>\n            msg.id === tempId ? { ...msg, uploadFailed: true, isUploading: false } : msg\n          )\n        );\n      }\n    } catch (error) {\n      // Handle error state\n      setMessages((prev) =>\n        prev.map((msg) =>\n          msg.id === tempId ? { ...msg, uploadFailed: true, isUploading: false } : msg\n        )\n      );\n    } finally {\n "}, {"index": 1619, "path": "client/screens/Message.jsx", "chunk": "mpId ? { ...msg, uploadFailed: true, isUploading: false } : msg\n        )\n      );\n    } finally {\n      setUploadingMessages((prev) => {\n        const newState = { ...prev };\n        delete newState[tempId];\n        return newState;\n      });\n    }\n  };\n\n  const handleAttachment = async () => {\n    if (!socket) return;\n\n    try {\n      const tempId = `temp-${Date.now()}`;\n      await handleMediaSend(MessageService.handleDocumentAttachment(), tempId, 'document');\n    } catch (error) {\n      cons"}, {"index": 1620, "path": "client/screens/Message.jsx", "chunk": "end(MessageService.handleDocumentAttachment(), tempId, 'document');\n    } catch (error) {\n      console.error('Error picking document:', error);\n    }\n  };\n\n  const handleImagePicker = async (useCamera = false) => {\n    if (useCamera && !permissions.camera) {\n      const { status } = await ImagePicker.requestCameraPermissionsAsync();\n      if (status !== 'granted') {\n        alert('Camera permission is required to take photos');\n        return;\n      }\n    }\n\n    if (!useCamera && !permissions.m"}, {"index": 1621, "path": "client/screens/Message.jsx", "chunk": "on is required to take photos');\n        return;\n      }\n    }\n\n    if (!useCamera && !permissions.mediaLibrary) {\n      const { status } = await MediaLibrary.requestPermissionsAsync();\n      if (status !== 'granted') {\n        alert('Media library permission is required to pick photos');\n        return;\n      }\n    }\n\n    const tempId = `temp-${Date.now()}`;\n    await handleMediaSend(MessageService.handleImagePicker(useCamera), tempId, 'image');\n  };\n\n  const startRecording = async () => {\n    "}, {"index": 1622, "path": "client/screens/Message.jsx", "chunk": "ce.handleImagePicker(useCamera), tempId, 'image');\n  };\n\n  const startRecording = async () => {\n    if (!permissions.audio) {\n      const { granted } = await Audio.requestPermissionsAsync();\n      if (!granted) {\n        alert('Audio recording permission is required');\n        return;\n      }\n      setPermissions((prev) => ({ ...prev, audio: true }));\n    }\n\n    const newRecording = await MessageService.startRecording();\n    if (newRecording) {\n      setRecording(newRecording);\n      setIsRecord"}, {"index": 1623, "path": "client/screens/Message.jsx", "chunk": "ervice.startRecording();\n    if (newRecording) {\n      setRecording(newRecording);\n      setIsRecording(true);\n    }\n  };\n\n  const stopRecording = async () => {\n    const tempId = `temp-${Date.now()}`;\n    await handleMediaSend(MessageService.stopRecording(recording), tempId, 'audio');\n    setRecording(null);\n    setIsRecording(false);\n  };\n\n  const renderMessages = () => {\n    const groupedMessages = groupMessagesByDate(messages);\n    return Object.entries(groupedMessages).map(([date, msgs]) =>"}, {"index": 1624, "path": "client/screens/Message.jsx", "chunk": "es = groupMessagesByDate(messages);\n    return Object.entries(groupedMessages).map(([date, msgs]) => (\n      <View key={`date-group-${date}`}>\n        <DateSeparator date={formatMessageDate(msgs[0].timestamp)} />\n        {msgs.map((msg) => (\n          <MessageBubble\n            key={msg._id || `temp-${msg.timestamp}`}\n            {...msg}\n            isUploading={!!uploadingMessages[msg._id]}\n            showSenderName={chatData.chatType}\n          />\n        ))}\n      </View>\n    ));\n  };\n\n  re"}, {"index": 1625, "path": "client/screens/Message.jsx", "chunk": "        showSenderName={chatData.chatType}\n          />\n        ))}\n      </View>\n    ));\n  };\n\n  return (\n    <View className=\"flex-1 bg-background\">\n      <ScrollView\n        ref={scrollViewRef}\n        className=\"flex-1 px-4\"\n        onScroll={handleScroll}\n        scrollEventThrottle={16} // Improve scroll performance\n        maintainVisibleContentPosition={{\n          minIndexForVisible: 0,\n        }}\n        onContentSizeChange={() => {\n          scrollViewRef.current?.scrollToEnd({ animat"}, {"index": 1626, "path": "client/screens/Message.jsx", "chunk": "       }}\n        onContentSizeChange={() => {\n          scrollViewRef.current?.scrollToEnd({ animated: false });\n        }}>\n        {isLoadingMore && (\n          <View className=\"items-center py-2\">\n            <Text>Loading...</Text>\n          </View>\n        )}\n        {renderMessages()}\n      </ScrollView>\n\n      <InputBar\n        message={message}\n        setMessage={setMessage}\n        handleSend={handleSend}\n        handleAttachment={handleAttachment}\n        handleImagePicker={handleIma"}, {"index": 1627, "path": "client/screens/Message.jsx", "chunk": "leSend={handleSend}\n        handleAttachment={handleAttachment}\n        handleImagePicker={handleImagePicker}\n        isRecording={isRecording}\n        startRecording={startRecording}\n        stopRecording={stopRecording}\n      />\n    </View>\n  );\n};\n\nexport default MessageScreen;\n"}, {"index": 1628, "path": "client/screens/MyProfile.jsx", "chunk": "import { Ionicons } from '@expo/vector-icons';\nimport { View, Text, ScrollView, Image, TextInput, TouchableOpacity, Alert, ToastAndroid } from 'react-native';\nimport { useState, useCallback } from 'react';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as FileSystem from 'expo-file-system';\nimport { useAuth } from '../providers/AuthProvider';\n\nconst MyProfile = () => {\n  const { user, updateUser } = useAuth();\n  const [editedUser, setEditedUser] = useState(user);\n  const [isEditing, "}, {"index": 1629, "path": "client/screens/MyProfile.jsx", "chunk": "updateUser } = useAuth();\n  const [editedUser, setEditedUser] = useState(user);\n  const [isEditing, setIsEditing] = useState({\n    basic: false,\n    education: false,\n    skills: false,\n    workExperience: false,\n    photo: false  // Add this line\n  });\n  const [newSkill, setNewSkill] = useState(''); // Add this line for local state\n\n  const showSaveReminder = useCallback(() => {\n    ToastAndroid.show('Remember to save your changes!', ToastAndroid.SHORT);\n  }, []);\n\n  const handleUserChange = (u"}, {"index": 1630, "path": "client/screens/MyProfile.jsx", "chunk": "show('Remember to save your changes!', ToastAndroid.SHORT);\n  }, []);\n\n  const handleUserChange = (updatedUser) => {\n    setEditedUser(updatedUser);\n    showSaveReminder();\n  };\n\n  const handleSave = async () => {\n    try {\n      console.log('Updated User Object:', editedUser); // Add this line to see the updated user object\n      await updateUser(editedUser);\n      setIsEditing({\n        basic: false,\n        education: false,\n        skills: false,\n        workExperience: false,\n        photo:"}, {"index": 1631, "path": "client/screens/MyProfile.jsx", "chunk": "alse,\n        education: false,\n        skills: false,\n        workExperience: false,\n        photo: false  // Add this line\n      });\n      // Alert.alert('Success', 'Profile updated successfully');\n    } catch (error) {\n      console.error('Error updating profile:', error); // Add error logging\n      Alert.alert('Error', 'Failed to update profile');\n    }\n  };\n\n  const pickImage = async () => {\n    try {\n      const result = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: Image"}, {"index": 1632, "path": "client/screens/MyProfile.jsx", "chunk": "    try {\n      const result = await ImagePicker.launchImageLibraryAsync({\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\n        allowsEditing: true,\n        aspect: [1, 1],\n        quality: 1,\n        base64: true, // Enable base64\n      });\n\n      if (!result.canceled) {\n        // Get base64 directly if available, otherwise read the file\n        let base64Image;\n        if (result.assets[0].base64) {\n          base64Image = `data:image/jpeg;base64,${result.assets[0].base64}`;\n     "}, {"index": 1633, "path": "client/screens/MyProfile.jsx", "chunk": "sets[0].base64) {\n          base64Image = `data:image/jpeg;base64,${result.assets[0].base64}`;\n        } else {\n          const base64 = await FileSystem.readAsStringAsync(result.assets[0].uri, {\n            encoding: FileSystem.EncodingType.Base64,\n          });\n          base64Image = `data:image/jpeg;base64,${base64}`;\n        }\n\n        handleUserChange({\n          ...editedUser,\n          profilePhoto: base64Image\n        });\n        setIsEditing(prev => ({ ...prev, photo: true })); // Add "}, {"index": 1634, "path": "client/screens/MyProfile.jsx", "chunk": "filePhoto: base64Image\n        });\n        setIsEditing(prev => ({ ...prev, photo: true })); // Add this line\n      }\n    } catch (error) {\n      console.error('Error picking image:', error);\n      ToastAndroid.show('Failed to process image', ToastAndroid.SHORT);\n    }\n  };\n\n  const Section = ({ title, children, editable, section }) => (\n    <View className=\"mb-4 rounded-xl bg-white p-4 shadow-md\">\n      <View className=\"flex-row justify-between items-center mb-3\">\n        <Text className=\"text-"}, {"index": 1635, "path": "client/screens/MyProfile.jsx", "chunk": ">\n      <View className=\"flex-row justify-between items-center mb-3\">\n        <Text className=\"text-xl font-semibold text-gray-800\">{title}</Text>\n        {editable && (\n          <TouchableOpacity \n            onPress={() => setIsEditing(prev => ({ ...prev, [section]: !prev[section] }))}\n          >\n            <Ionicons \n              name={isEditing[section] ? \"save-outline\" : \"create-outline\"} \n              size={24} \n              color=\"#666\" \n            />\n          </TouchableOpacity>\n"}, {"index": 1636, "path": "client/screens/MyProfile.jsx", "chunk": " \n              size={24} \n              color=\"#666\" \n            />\n          </TouchableOpacity>\n        )}\n      </View>\n      {children}\n    </View>\n  );\n\n  const InfoItem = ({ icon, text }) => (\n    <View className=\"mb-2 flex-row items-center\">\n      <Ionicons name={icon} size={20} color=\"#666\" className=\"mr-2\" />\n      <Text className=\"ml-2 text-gray-700\">{text}</Text>\n    </View>\n  );\n\n  const EditableField = ({ value, onChangeText, placeholder }) => (\n    <TextInput\n      value={value}\n"}, {"index": 1637, "path": "client/screens/MyProfile.jsx", "chunk": "onst EditableField = ({ value, onChangeText, placeholder }) => (\n    <TextInput\n      value={value}\n      onChangeText={onChangeText}\n      className=\"border border-gray-300 rounded-md p-2 mb-2\"\n      placeholder={placeholder}\n    />\n  );\n\n  return (\n    <ScrollView className=\"flex-1 bg-gray-100\">\n      {/* Cover Photo */}\n      <View className=\"h-40 bg-blue-500\" />\n\n      {/* Profile Header */}\n      <View className=\"-mt-20 px-4\">\n        <View className=\"rounded-xl bg-white p-4 shadow-lg\">\n   "}, {"index": 1638, "path": "client/screens/MyProfile.jsx", "chunk": "     <View className=\"-mt-20 px-4\">\n        <View className=\"rounded-xl bg-white p-4 shadow-lg\">\n          <View className=\"-mt-24 items-center\">\n            <TouchableOpacity onPress={pickImage}>\n              <Image\n                source={{ uri: editedUser.profilePhoto }}\n                className=\"mb-2 h-32 w-32 rounded-full border-4 border-white shadow-lg\"\n              />\n              <View className=\"absolute bottom-0 right-0 bg-blue-500 rounded-full p-2\">\n                <Ionicons name="}, {"index": 1639, "path": "client/screens/MyProfile.jsx", "chunk": " className=\"absolute bottom-0 right-0 bg-blue-500 rounded-full p-2\">\n                <Ionicons name=\"camera\" size={20} color=\"white\" />\n              </View>\n            </TouchableOpacity>\n\n            <Text className=\"mt-2 text-2xl font-bold text-gray-900\">{editedUser.fullName}</Text>\n            \n            {/* Add edit button for basic info */}\n            <View className=\"w-full items-end\">\n              <TouchableOpacity \n                onPress={() => setIsEditing(prev => ({ ...prev, bas"}, {"index": 1640, "path": "client/screens/MyProfile.jsx", "chunk": "              <TouchableOpacity \n                onPress={() => setIsEditing(prev => ({ ...prev, basic: !prev.basic }))}\n                className=\"p-2\"\n              >\n                <Ionicons \n                  name={isEditing.basic ? \"save-outline\" : \"create-outline\"} \n                  size={24} \n                  color=\"#666\" \n                />\n              </TouchableOpacity>\n            </View>\n\n            {isEditing.basic ? (\n              <View className=\"w-full px-4\">\n             "}, {"index": 1641, "path": "client/screens/MyProfile.jsx", "chunk": "</View>\n\n            {isEditing.basic ? (\n              <View className=\"w-full px-4\">\n                <EditableField\n                  value={editedUser.bio}\n                  onChangeText={(text) => handleUserChange({ ...editedUser, bio: text })}\n                  placeholder=\"Bio\"\n                />\n                <EditableField\n                  value={editedUser.phone}\n                  onChangeText={(text) => handleUserChange({ ...editedUser, phone: text })}\n                  placeholder="}, {"index": 1642, "path": "client/screens/MyProfile.jsx", "chunk": "angeText={(text) => handleUserChange({ ...editedUser, phone: text })}\n                  placeholder=\"Phone\"\n                />\n              </View>\n            ) : (\n              <View className=\"w-full px-4\">\n                <Text className=\"mt-1 text-center text-gray-600\">{editedUser.bio}</Text>\n                <View className=\"mt-4 flex-row justify-around border-t border-gray-200 pt-4\">\n                  <InfoItem icon=\"mail-outline\" text={editedUser.email} />\n                  <InfoItem ic"}, {"index": 1643, "path": "client/screens/MyProfile.jsx", "chunk": "             <InfoItem icon=\"mail-outline\" text={editedUser.email} />\n                  <InfoItem icon=\"call-outline\" text={editedUser.phone} />\n                </View>\n              </View>\n            )}\n          </View>\n        </View>\n      </View>\n\n      {/* Main Content */}\n      <View className=\"mt-4 px-4\">\n        {/* Education */}\n        <Section title=\"Education\" editable section=\"education\">\n          {isEditing.education ? (\n            <>\n              {editedUser.education.map((e"}, {"index": 1644, "path": "client/screens/MyProfile.jsx", "chunk": "ation\">\n          {isEditing.education ? (\n            <>\n              {editedUser.education.map((edu, index) => (\n                <View key={index} className=\"mb-3\">\n                  <EditableField\n                    value={edu.degree}\n                    onChangeText={(text) => {\n                      const newEducation = [...editedUser.education];\n                      newEducation[index] = { ...edu, degree: text };\n                      handleUserChange({ ...editedUser, education: newEduc"}, {"index": 1645, "path": "client/screens/MyProfile.jsx", "chunk": "{ ...edu, degree: text };\n                      handleUserChange({ ...editedUser, education: newEducation });\n                    }}\n                    placeholder=\"Degree\"\n                  />\n                  <EditableField\n                    value={edu.institution}\n                    onChangeText={(text) => {\n                      const newEducation = [...editedUser.education];\n                      newEducation[index] = { ...edu, institution: text };\n                      handleUserChang"}, {"index": 1646, "path": "client/screens/MyProfile.jsx", "chunk": "          newEducation[index] = { ...edu, institution: text };\n                      handleUserChange({ ...editedUser, education: newEducation });\n                    }}\n                    placeholder=\"Institution\"\n                  />\n                  <EditableField\n                    value={edu.yearOfGraduation.toString()}\n                    onChangeText={(text) => {\n                      const newEducation = [...editedUser.education];\n                      newEducation[index] = { ...edu, "}, {"index": 1647, "path": "client/screens/MyProfile.jsx", "chunk": "nst newEducation = [...editedUser.education];\n                      newEducation[index] = { ...edu, yearOfGraduation: text };\n                      handleUserChange({ ...editedUser, education: newEducation });\n                    }}\n                    placeholder=\"Year of Graduation\"\n                  />\n                  <TouchableOpacity\n                    onPress={() => {\n                      const newEducation = editedUser.education.filter((_, i) => i !== index);\n                      han"}, {"index": 1648, "path": "client/screens/MyProfile.jsx", "chunk": "  const newEducation = editedUser.education.filter((_, i) => i !== index);\n                      handleUserChange({ ...editedUser, education: newEducation });\n                    }}\n                    className=\"bg-red-500 p-2 rounded-md mt-2\"\n                  >\n                    <Text className=\"text-white text-center\">Remove</Text>\n                  </TouchableOpacity>\n                </View>\n              ))}\n              <TouchableOpacity\n                onPress={() => {\n               "}, {"index": 1649, "path": "client/screens/MyProfile.jsx", "chunk": ">\n              ))}\n              <TouchableOpacity\n                onPress={() => {\n                  handleUserChange({\n                    ...editedUser,\n                    education: [...editedUser.education, { degree: '', institution: '', yearOfGraduation: '' }]\n                  });\n                }}\n                className=\"bg-blue-500 p-2 rounded-md\"\n              >\n                <Text className=\"text-white text-center\">Add Education</Text>\n              </TouchableOpacity>\n       "}, {"index": 1650, "path": "client/screens/MyProfile.jsx", "chunk": "xt className=\"text-white text-center\">Add Education</Text>\n              </TouchableOpacity>\n            </>\n          ) : (\n            <>\n              {user.education.map((edu, index) => (\n                <View key={index} className=\"mb-3 border-b border-gray-100 pb-3\">\n                  <Text className=\"text-lg font-bold text-gray-800\">{edu.degree}</Text>\n                  <Text className=\"text-gray-600\">{edu.institution}</Text>\n                  <Text className=\"text-sm text-gray-500\">Class"}, {"index": 1651, "path": "client/screens/MyProfile.jsx", "chunk": "t-gray-600\">{edu.institution}</Text>\n                  <Text className=\"text-sm text-gray-500\">Class of {edu.yearOfGraduation}</Text>\n                </View>\n              ))}\n            </>\n          )}\n        </Section>\n\n        {/* Skills */}\n        <Section title=\"Skills\" editable section=\"skills\">\n          {isEditing.skills ? (\n            <>\n              <View className=\"-m-1 flex-row flex-wrap\">\n                {editedUser.skills.map((skill, index) => (\n                  <View key={i"}, {"index": 1652, "path": "client/screens/MyProfile.jsx", "chunk": "lex-wrap\">\n                {editedUser.skills.map((skill, index) => (\n                  <View key={index} className=\"m-1\">\n                    <View className=\"flex-row items-center bg-blue-100 rounded-full px-4 py-2\">\n                      <Text className=\"text-blue-800\">{skill}</Text>\n                      <TouchableOpacity\n                        onPress={() => {\n                          const newSkills = editedUser.skills.filter((_, i) => i !== index);\n                          handleUserCh"}, {"index": 1653, "path": "client/screens/MyProfile.jsx", "chunk": " newSkills = editedUser.skills.filter((_, i) => i !== index);\n                          handleUserChange({ ...editedUser, skills: newSkills });\n                        }}\n                        className=\"ml-2\"\n                      >\n                        <Ionicons name=\"close-circle\" size={20} color=\"red\" />\n                      </TouchableOpacity>\n                    </View>\n                  </View>\n                ))}\n              </View>\n              <View className=\"mt-2\">\n         "}, {"index": 1654, "path": "client/screens/MyProfile.jsx", "chunk": "   </View>\n                ))}\n              </View>\n              <View className=\"mt-2\">\n                <EditableField\n                  value={newSkill}\n                  onChangeText={(text) => {\n                    setNewSkill(text);\n                    if (text.endsWith(' ')) {\n                      const skillToAdd = text.trim();\n                      if (skillToAdd) {\n                        handleUserChange({\n                          ...editedUser,\n                          skills: [."}, {"index": 1655, "path": "client/screens/MyProfile.jsx", "chunk": "    handleUserChange({\n                          ...editedUser,\n                          skills: [...editedUser.skills, skillToAdd]\n                        });\n                        setNewSkill(''); // Reset the input after adding\n                      }\n                    }\n                  }}\n                  placeholder=\"Add skill (press space to add)\"\n                />\n              </View>\n            </>\n          ) : (\n            <View className=\"-m-1 flex-row flex-wrap\">\n        "}, {"index": 1656, "path": "client/screens/MyProfile.jsx", "chunk": "iew>\n            </>\n          ) : (\n            <View className=\"-m-1 flex-row flex-wrap\">\n              {user.skills.map((skill, index) => (\n                <View key={index} className=\"m-1 rounded-full bg-blue-100 px-4 py-2\">\n                  <Text className=\"text-blue-800\">{skill}</Text>\n                </View>\n              ))}\n            </View>\n          )}\n        </Section>\n\n        {/* Languages */}\n        <Section title=\"Languages\">\n          <View className=\"-m-1 flex-row flex-wra"}, {"index": 1657, "path": "client/screens/MyProfile.jsx", "chunk": " Languages */}\n        <Section title=\"Languages\">\n          <View className=\"-m-1 flex-row flex-wrap\">\n            {user.languages.map((language, index) => (\n              <View key={index} className=\"m-1 rounded-full bg-green-100 px-4 py-2\">\n                <Text className=\"text-green-800\">{language}</Text>\n              </View>\n            ))}\n          </View>\n        </Section>\n\n        {/* Interests */}\n        <Section title=\"Interests\">\n          <View className=\"-m-1 flex-row flex-wrap\""}, {"index": 1658, "path": "client/screens/MyProfile.jsx", "chunk": "nterests */}\n        <Section title=\"Interests\">\n          <View className=\"-m-1 flex-row flex-wrap\">\n            {user.interests.map((interest, index) => (\n              <View key={index} className=\"m-1 rounded-full bg-purple-100 px-4 py-2\">\n                <Text className=\"text-purple-800\">{interest}</Text>\n              </View>\n            ))}\n          </View>\n        </Section>\n\n        {/* Work Experience */}\n        <Section title=\"Work Experience\" editable section=\"workExperience\">\n     "}, {"index": 1659, "path": "client/screens/MyProfile.jsx", "chunk": "ork Experience */}\n        <Section title=\"Work Experience\" editable section=\"workExperience\">\n          {isEditing.workExperience ? (\n            <>\n              {editedUser.workExperience.map((work, index) => (\n                <View key={index} className=\"mb-3\">\n                  <EditableField\n                    value={work}\n                    onChangeText={(text) => {\n                      const newWork = [...editedUser.workExperience];\n                      newWork[index] = text;\n       "}, {"index": 1660, "path": "client/screens/MyProfile.jsx", "chunk": "const newWork = [...editedUser.workExperience];\n                      newWork[index] = text;\n                      handleUserChange({ ...editedUser, workExperience: newWork });\n                    }}\n                    placeholder=\"Work Experience\"\n                  />\n                  <TouchableOpacity\n                    onPress={() => {\n                      const newWork = editedUser.workExperience.filter((_, i) => i !== index);\n                      handleUserChange({ ...editedUser, workE"}, {"index": 1661, "path": "client/screens/MyProfile.jsx", "chunk": "erience.filter((_, i) => i !== index);\n                      handleUserChange({ ...editedUser, workExperience: newWork });\n                    }}\n                    className=\"bg-red-500 p-2 rounded-md mt-2\"\n                  >\n                    <Text className=\"text-white text-center\">Remove</Text>\n                  </TouchableOpacity>\n                </View>\n              ))}\n              <TouchableOpacity\n                onPress={() => {\n                  handleUserChange({\n              "}, {"index": 1662, "path": "client/screens/MyProfile.jsx", "chunk": "ouchableOpacity\n                onPress={() => {\n                  handleUserChange({\n                    ...editedUser,\n                    workExperience: [...editedUser.workExperience, '']\n                  });\n                }}\n                className=\"bg-blue-500 p-2 rounded-md\"\n              >\n                <Text className=\"text-white text-center\">Add Work Experience</Text>\n              </TouchableOpacity>\n            </>\n          ) : (\n            <>\n              {user.workExperie"}, {"index": 1663, "path": "client/screens/MyProfile.jsx", "chunk": "  </TouchableOpacity>\n            </>\n          ) : (\n            <>\n              {user.workExperience.length > 0 && (\n                <>\n                  {user.workExperience.map((work, index) => (\n                    <View key={index} className=\"mb-3 border-b border-gray-100 pb-3\">\n                      <Text className=\"text-gray-800\">{work}</Text>\n                    </View>\n                  ))}\n                </>\n              )}\n            </>\n          )}\n        </Section>\n      </Vi"}, {"index": 1664, "path": "client/screens/MyProfile.jsx", "chunk": " ))}\n                </>\n              )}\n            </>\n          )}\n        </Section>\n      </View>\n\n      {/* Save Button */}\n      {Object.values(isEditing).some(Boolean) && (\n        <View className=\"px-4 mb-10\">\n          <TouchableOpacity\n            onPress={handleSave}\n            className=\"bg-blue-500 p-4 rounded-xl\"\n          >\n            <Text className=\"text-white text-center font-bold text-lg\">Save Changes</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n\n      {/*"}, {"index": 1665, "path": "client/screens/MyProfile.jsx", "chunk": "-bold text-lg\">Save Changes</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n\n      {/* Bottom Padding */}\n      <View className=\"h-10\" />\n    </ScrollView>\n  );\n};\n\nexport default MyProfile;\n"}, {"index": 1666, "path": "client/screens/Notifications.jsx", "chunk": "import AlumniNotifications from '../components/notifications/AlumniNotifications';\nimport CollegeNotifications from '../components/notifications/CollegeNotifications';\nimport { useAuth } from '../providers/AuthProvider';\n\nconst Notifications = () => {\n  const { role } = useAuth();\n  if (role === 'alumni') {\n    return <AlumniNotifications />;\n  } else {\n    return <CollegeNotifications />;\n  }\n};\n\nexport default Notifications;\n"}, {"index": 1667, "path": "client/screens/Notifications.jsx", "chunk": "\nexport default Notifications;\n"}, {"index": 1668, "path": "client/screens/Onboarding.jsx", "chunk": "import { Image } from 'expo-image';\nimport { useState } from 'react';\nimport { Text, View, TouchableOpacity } from 'react-native';\n\nconst onboardingData = [\n  {\n    title: 'Welcome to Alumni Connect',\n    description: 'Stay connected with your alma mater and fellow graduates',\n    image: require('../assets/connect.gif'),\n  },\n  {\n    title: 'Network & Opportunities',\n    description: 'Discover career opportunities and expand your professional network',\n    image: require('../assets/network.gif')"}, {"index": 1669, "path": "client/screens/Onboarding.jsx", "chunk": "eer opportunities and expand your professional network',\n    image: require('../assets/network.gif'),\n  },\n  {\n    title: 'Events & Updates',\n    description: 'Stay updated with latest events, news and announcements',\n    image: require('../assets/events.gif'),\n  },\n];\n\nexport default function OnboardingPage({ navigation }) {\n  const [currentStep, setCurrentStep] = useState(0);\n  // console.log('Image source:', onboardingData[currentStep].image);\n\n  const handleNext = () => {\n    if (currentStep"}, {"index": 1670, "path": "client/screens/Onboarding.jsx", "chunk": "mage source:', onboardingData[currentStep].image);\n\n  const handleNext = () => {\n    if (currentStep === onboardingData.length - 1) {\n      navigation.navigate('Explanation');\n    } else {\n      setCurrentStep((prev) => prev + 1);\n    }\n  };\n\n  return (\n    <View className=\"flex-1 bg-white\">\n      <View className=\"flex-1 items-center justify-center px-4\">\n        <Image\n          source={onboardingData[currentStep].image}\n          style={{\n            width: 300,\n            height: 300,\n      "}, {"index": 1671, "path": "client/screens/Onboarding.jsx", "chunk": "gData[currentStep].image}\n          style={{\n            width: 300,\n            height: 300,\n            marginBottom: 32,\n          }}\n          contentFit=\"contain\"\n          onError={(e) => console.log('Error loading image:', e.nativeEvent.error)}\n        />\n\n        <Text className=\"mb-2 text-center text-2xl font-bold\">\n          {onboardingData[currentStep].title}\n        </Text>\n\n        <Text className=\"mb-8 text-center text-gray-600\">\n          {onboardingData[currentStep].description}\n"}, {"index": 1672, "path": "client/screens/Onboarding.jsx", "chunk": "ext className=\"mb-8 text-center text-gray-600\">\n          {onboardingData[currentStep].description}\n        </Text>\n\n        {/* Dots indicator */}\n        <View className=\"mb-8 flex-row space-x-2\">\n          {onboardingData.map((_, index) => (\n            <View\n              key={index}\n              className={`h-2 w-2 rounded-full ${\n                index === currentStep ? 'w-4 bg-blue-500' : 'bg-gray-300'\n              }`}\n            />\n          ))}\n        </View>\n      </View>\n\n      <Vi"}, {"index": 1673, "path": "client/screens/Onboarding.jsx", "chunk": "bg-gray-300'\n              }`}\n            />\n          ))}\n        </View>\n      </View>\n\n      <View className=\"p-4\">\n        <TouchableOpacity onPress={handleNext} className=\"rounded-full bg-primary p-4 text-dark\">\n          <Text className=\"text-center text-lg font-semibold text-white\">\n            {currentStep === onboardingData.length - 1 ? 'Get Started' : 'Next'}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n"}, {"index": 1674, "path": "client/screens/Onboarding.jsx", "chunk": "/TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n"}, {"index": 1675, "path": "client/screens/Profile.jsx", "chunk": "import React, { useState, useEffect } from 'react';\nimport { Ionicons } from '@expo/vector-icons';\nimport { View, Text, ScrollView, Image } from 'react-native';\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { SERVER_URL } from '@env';\n\nconst ProfileScreen = ({ route }) => {\n  const [user, setUser] = React.useState(null);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(null);\n\n  useEffect(()"}, {"index": 1676, "path": "client/screens/Profile.jsx", "chunk": "etLoading] = React.useState(true);\n  const [error, setError] = React.useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      const id = route.params._id;\n      const token = await AsyncStorage.getItem('token');\n      if (!token) {\n        throw new Error('Token not found');\n      }\n      try {\n        const response = await axios.get(`${SERVER_URL}/users/fetch/${id}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        con"}, {"index": 1677, "path": "client/screens/Profile.jsx", "chunk": "ers/fetch/${id}`, {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n        console.log('User data:', response.data);\n        setUser(response.data);\n      } catch (error) {\n        console.log('Error fetching user data:', error);\n        setError(\"Couldn't fetch user data\");\n      }\n      setLoading(false);\n    };\n\n    fetchData();\n  }, []);\n\n  const Section = ({ title, children }) => (\n    <View className=\"mb-4 rounded-xl bg-white p-4 shadow-md\">\n      <Text className=\"mb-"}, {"index": 1678, "path": "client/screens/Profile.jsx", "chunk": "ren }) => (\n    <View className=\"mb-4 rounded-xl bg-white p-4 shadow-md\">\n      <Text className=\"mb-3 text-xl font-semibold text-gray-800\">{title}</Text>\n      {children}\n    </View>\n  );\n\n  const InfoItem = ({ icon, text }) => (\n    <View className=\"mb-2 flex-row items-center\">\n      <Ionicons name={icon} size={20} color=\"#666\" className=\"mr-2\" />\n      <Text className=\"ml-2 text-gray-700\">{text}</Text>\n    </View>\n  );\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  if (error) {\n    "}, {"index": 1679, "path": "client/screens/Profile.jsx", "chunk": "</Text>\n    </View>\n  );\n\n  if (loading) {\n    return <Text>Loading</Text>;\n  }\n\n  if (error) {\n    return <Text>{error}</Text>;\n  }\n\n  return (\n    user && (\n      <ScrollView className=\"flex-1 bg-gray-100\">\n        {/* Cover Photo */}\n        <View className=\"h-40 bg-blue-500\" />\n\n        {/* Profile Header */}\n        <View className=\"-mt-20 px-4\">\n          <View className=\"rounded-xl bg-white p-4 shadow-lg\">\n            <View className=\"-mt-24 items-center\">\n              {user.profilePhoto"}, {"index": 1680, "path": "client/screens/Profile.jsx", "chunk": " p-4 shadow-lg\">\n            <View className=\"-mt-24 items-center\">\n              {user.profilePhoto && (\n                <Image\n                  source={{ uri: `${user.profilePhoto}` }}\n                  className=\"mb-2 h-32 w-32 rounded-full border-4 border-white shadow-lg\"\n                />\n              )}\n              <Text className=\"mt-2 text-2xl font-bold text-gray-900\">{user.fullName}</Text>\n              <Text className=\"mt-1 px-4 text-center text-gray-600\">{user.bio}</Text>\n       "}, {"index": 1681, "path": "client/screens/Profile.jsx", "chunk": "/Text>\n              <Text className=\"mt-1 px-4 text-center text-gray-600\">{user.bio}</Text>\n            </View>\n\n            {/* Quick Info */}\n            <View className=\"mt-4 flex-row justify-around border-t border-gray-200 pt-4\">\n              <InfoItem icon=\"mail-outline\" text={user.email} />\n              <InfoItem icon=\"call-outline\" text={user.phone} />\n            </View>\n          </View>\n        </View>\n\n        {/* Main Content */}\n        <View className=\"mt-4 px-4\">\n          {/* "}, {"index": 1682, "path": "client/screens/Profile.jsx", "chunk": "w>\n        </View>\n\n        {/* Main Content */}\n        <View className=\"mt-4 px-4\">\n          {/* Education */}\n          <Section title=\"Education\">\n            {user.education.map((edu, index) => (\n              <View key={index} className=\"mb-3 border-b border-gray-100 pb-3\">\n                <Text className=\"text-lg font-bold text-gray-800\">{edu.degree}</Text>\n                <Text className=\"text-gray-600\">{edu.institution}</Text>\n                <Text className=\"text-sm text-gray-500\">Cla"}, {"index": 1683, "path": "client/screens/Profile.jsx", "chunk": "\"text-gray-600\">{edu.institution}</Text>\n                <Text className=\"text-sm text-gray-500\">Class of {edu.yearOfGraduation}</Text>\n              </View>\n            ))}\n          </Section>\n\n          {/* Skills */}\n          <Section title=\"Skills\">\n            <View className=\"-m-1 flex-row flex-wrap\">\n              {user.skills.map((skill, index) => (\n                <View key={index} className=\"m-1 rounded-full bg-blue-100 px-4 py-2\">\n                  <Text className=\"text-blue-800\">{s"}, {"index": 1684, "path": "client/screens/Profile.jsx", "chunk": "sName=\"m-1 rounded-full bg-blue-100 px-4 py-2\">\n                  <Text className=\"text-blue-800\">{skill}</Text>\n                </View>\n              ))}\n            </View>\n          </Section>\n\n          {/* Languages */}\n          <Section title=\"Languages\">\n            <View className=\"-m-1 flex-row flex-wrap\">\n              {user.languages.map((language, index) => (\n                <View key={index} className=\"m-1 rounded-full bg-green-100 px-4 py-2\">\n                  <Text className=\"tex"}, {"index": 1685, "path": "client/screens/Profile.jsx", "chunk": "={index} className=\"m-1 rounded-full bg-green-100 px-4 py-2\">\n                  <Text className=\"text-green-800\">{language}</Text>\n                </View>\n              ))}\n            </View>\n          </Section>\n\n          {/* Interests */}\n          <Section title=\"Interests\">\n            <View className=\"-m-1 flex-row flex-wrap\">\n              {user.interests.map((interest, index) => (\n                <View key={index} className=\"m-1 rounded-full bg-purple-100 px-4 py-2\">\n                  <"}, {"index": 1686, "path": "client/screens/Profile.jsx", "chunk": "         <View key={index} className=\"m-1 rounded-full bg-purple-100 px-4 py-2\">\n                  <Text className=\"text-purple-800\">{interest}</Text>\n                </View>\n              ))}\n            </View>\n          </Section>\n\n          {/* Work Experience */}\n          {user.workExperience.length > 0 && (\n            <Section title=\"Work Experience\">\n              {user.workExperience.map((work, index) => (\n                <View key={index} className=\"mb-3 border-b border-gray-100 pb-3\""}, {"index": 1687, "path": "client/screens/Profile.jsx", "chunk": "((work, index) => (\n                <View key={index} className=\"mb-3 border-b border-gray-100 pb-3\">\n                  <Text className=\"text-gray-800\">{work}</Text>\n                </View>\n              ))}\n            </Section>\n          )}\n        </View>\n\n        {/* Bottom Padding */}\n        <View className=\"h-10\" />\n      </ScrollView>\n    ));\n};\n\nexport default ProfileScreen;\n"}, {"index": 1688, "path": "client/screens/Register.jsx", "chunk": "import { ML_URL } from '@env';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport * as DocumentPicker from 'expo-document-picker';\nimport { useState } from 'react';\nimport {\n  View,\n  Text,\n  TouchableOpacity,\n  ActivityIndicator,\n  Platform,\n  ToastAndroid,\n  Alert,\n} from 'react-native';\n\nconst RegisterScreen = ({ navigation }) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [response, setResponse] = useState(null);\n  // console.log('Server URL:', SERVER_URL);\n\n"}, {"index": 1689, "path": "client/screens/Register.jsx", "chunk": "e);\n  const [response, setResponse] = useState(null);\n  // console.log('Server URL:', SERVER_URL);\n\n  const showToast = (message) => {\n    if (Platform.OS === 'android') {\n      ToastAndroid.show(message, ToastAndroid.SHORT);\n    } else {\n      Alert.alert('Notice', message);\n    }\n  };\n\n  const handleResumeUpload = async () => {\n    try {\n      console.log('Starting file picker...');\n      const result = await DocumentPicker.getDocumentAsync({\n        type: ['application/pdf'],\n        copyToCa"}, {"index": 1690, "path": "client/screens/Register.jsx", "chunk": "result = await DocumentPicker.getDocumentAsync({\n        type: ['application/pdf'],\n        copyToCacheDirectory: true,\n        multiple: false,\n      });\n\n      console.log('Document picker result:', result);\n\n      if (!result.canceled && result.assets && result.assets.length > 0) {\n        setIsProcessing(true);\n        showToast('Processing your resume...');\n        const selectedFile = result.assets[0];\n        console.log('Selected file details:', selectedFile);\n\n        const formData = n"}, {"index": 1691, "path": "client/screens/Register.jsx", "chunk": ".assets[0];\n        console.log('Selected file details:', selectedFile);\n\n        const formData = new FormData();\n        formData.append('resume', {\n          uri: selectedFile.uri,\n          type: selectedFile.mimeType,\n          name: selectedFile.name,\n        });\n\n        try {\n          const response = await fetch(`${ML_URL}/api/upload-resume/`, {\n            method: 'POST',\n            body: formData,\n            headers: {\n              Accept: 'application/json',\n              'ngrok-"}, {"index": 1692, "path": "client/screens/Register.jsx", "chunk": "dy: formData,\n            headers: {\n              Accept: 'application/json',\n              'ngrok-skip-browser-warning': 'true',\n            },\n          });\n\n          console.log('Server response status:', response.status);\n\n          if (response.ok) {\n            const data = await response.json();\n            console.log('Server response:', data);\n            setResponse(data);\n            showToast('Resume uploaded successfully!');\n            navigation.navigate('Manual', { resumeData: "}, {"index": 1693, "path": "client/screens/Register.jsx", "chunk": "showToast('Resume uploaded successfully!');\n            navigation.navigate('Manual', { resumeData: data });\n          } else {\n            const errorText = await response.text();\n            showToast(`Upload failed: ${response.status}`);\n            console.error('Server error:', errorText);\n            setResponse({ error: `Server error: ${response.status}` });\n          }\n        } catch (error) {\n          showToast('Network request failed');\n          console.error('Network error:', error"}, {"index": 1694, "path": "client/screens/Register.jsx", "chunk": "or) {\n          showToast('Network request failed');\n          console.error('Network error:', error);\n          setResponse({ error: 'Network request failed' });\n        }\n      } else {\n        showToast('File selection cancelled');\n      }\n    } catch (error) {\n      showToast('Failed to pick file');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <View className=\"flex-1 bg-gray-50 p-6\">\n      <View className=\"flex-1 justify-center\">\n        {isProcessing ? (\n        "}, {"index": 1695, "path": "client/screens/Register.jsx", "chunk": "1 bg-gray-50 p-6\">\n      <View className=\"flex-1 justify-center\">\n        {isProcessing ? (\n          <View className=\"items-center\">\n            <ActivityIndicator size=\"large\" color=\"#000000\" />\n            <Text className=\"mt-4 text-center text-gray-600\">Processing your resume...</Text>\n          </View>\n        ) : (\n          <>\n            <TouchableOpacity\n              onPress={handleResumeUpload}\n              className=\"aspect-video items-center justify-center rounded-3xl border-2 bord"}, {"index": 1696, "path": "client/screens/Register.jsx", "chunk": "eUpload}\n              className=\"aspect-video items-center justify-center rounded-3xl border-2 border-black bg-white p-8 shadow-sm active:bg-gray-50\">\n              <MaterialIcons name=\"file-upload\" size={48} color=\"#000000\" />\n              <Text className=\"mt-4 text-center text-2xl font-bold text-gray-900\">\n                Upload Resume (PDF only)\n              </Text>\n            </TouchableOpacity>\n          </>\n        )}\n      </View>\n    </View>\n  );\n};\n\nexport default RegisterScreen;\n"}, {"index": 1697, "path": "client/screens/Register.jsx", "chunk": "acity>\n          </>\n        )}\n      </View>\n    </View>\n  );\n};\n\nexport default RegisterScreen;\n"}, {"index": 1698, "path": "client/screens/Settings.jsx", "chunk": "import React, { useState } from 'react';\nimport { \n  View, \n  Text, \n  StyleSheet, \n  ScrollView, \n  TouchableOpacity, \n  Switch,\n  SafeAreaView,\n  Linking,\n  Modal,\n  Pressable,\n  TextInput, \n  Alert\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Haptics from 'expo-haptics';\nimport axios from \"axios\"\nimport { useAuth } from '../providers/AuthProvider';\nimport { SERVER_URL } from '@env';\n\ncon"}, {"index": 1699, "path": "client/screens/Settings.jsx", "chunk": "\"axios\"\nimport { useAuth } from '../providers/AuthProvider';\nimport { SERVER_URL } from '@env';\n\nconst ChangePasswordModal = ({ \n  isVisible, \n  onClose, \n  onChangePassword,\n  onForgotPassword \n}) => {\n  const [oldPassword, setOldPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showOldPassword, setShowOldPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false"}, {"index": 1700, "path": "client/screens/Settings.jsx", "chunk": "etShowOldPassword] = useState(false);\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const handleChangePassword = async () => {\n    // Validate passwords match\n    if (newPassword !== confirmPassword) {\n      Alert.alert('Error', 'New passwords do not match');\n      return;\n    }\n  \n    try {\n      const token = await AsyncStorage.getItem('token');\n    \n      if (!token) {\n        Alert.alert('Error', '"}, {"index": 1701, "path": "client/screens/Settings.jsx", "chunk": "token = await AsyncStorage.getItem('token');\n    \n      if (!token) {\n        Alert.alert('Error', 'No authentication token found. Please log in again.');\n        return;\n      }\n    \n      const verifyResponse = await axios.post(`${SERVER_URL}/users/verifyPassword`, \n        { password: oldPassword },\n        { \n          headers: { \n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          } \n        }\n      );\n    \n      if (verifyResponse.data.s"}, {"index": 1702, "path": "client/screens/Settings.jsx", "chunk": "ntent-Type': 'application/json'\n          } \n        }\n      );\n    \n      if (verifyResponse.data.success) {\n        const changeResponse = await axios.post(`${SERVER_URL}/users/changePassword`, \n          { newPassword },\n          { \n            headers: { \n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            } \n          }\n        );\n    \n        if (changeResponse.data.success) {\n          Haptics.notificationAsync(Haptics.Notificati"}, {"index": 1703, "path": "client/screens/Settings.jsx", "chunk": "  \n        if (changeResponse.data.success) {\n          Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n          \n          Alert.alert(\n            'Success', \n            'Your password has been changed successfully',\n            [{ text: 'OK', onPress: () => onClose() }]\n          );\n  \n          // Reset password fields\n          setOldPassword('');\n          setNewPassword('');\n          setConfirmPassword('');\n        } else {\n          throw new Error('Password chang"}, {"index": 1704, "path": "client/screens/Settings.jsx", "chunk": "rd('');\n          setConfirmPassword('');\n        } else {\n          throw new Error('Password change failed');\n        }\n      }\n    } catch (error) {\n      console.error('Password change error:', error);\n    \n      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);\n      \n      if (error.response) {\n        switch (error.response.status) {\n          case 401:\n            Alert.alert('Error', 'Current password is incorrect');\n            break;\n          case 400:\n            Al"}, {"index": 1705, "path": "client/screens/Settings.jsx", "chunk": "ert('Error', 'Current password is incorrect');\n            break;\n          case 400:\n            Alert.alert('Error', 'Invalid password. Please try again.');\n            break;\n          default:\n            Alert.alert('Error', error.response.data.message || 'Failed to change password');\n        }\n      } else if (error.request) {\n        Alert.alert('Error', 'No response from server. Please check your connection.');\n      } else {\n        Alert.alert('Error', error.message || 'An unexpected e"}, {"index": 1706, "path": "client/screens/Settings.jsx", "chunk": "ck your connection.');\n      } else {\n        Alert.alert('Error', error.message || 'An unexpected error occurred');\n      }\n    }\n  };\n\n  const PasswordInput = ({ \n    placeholder, \n    value, \n    onChangeText, \n    showPassword, \n    onToggleVisibility \n  }) => (\n    <View style={styles.passwordInputContainer}>\n      <View style={styles.passwordInputWrapper}>\n        <Ionicons \n          name=\"lock-closed-outline\" \n          size={22} \n          color=\"#8E8E93\" \n          style={styles.inputI"}, {"index": 1707, "path": "client/screens/Settings.jsx", "chunk": "lock-closed-outline\" \n          size={22} \n          color=\"#8E8E93\" \n          style={styles.inputIcon}\n        />\n        <TextInput\n          placeholder={placeholder}\n          placeholderTextColor=\"#8E8E93\"\n          secureTextEntry={!showPassword}\n          value={value}\n          onChangeText={onChangeText}\n          style={styles.passwordInput}\n        />\n        <TouchableOpacity \n          onPress={onToggleVisibility}\n          style={styles.passwordVisibilityToggle}\n        >\n        "}, {"index": 1708, "path": "client/screens/Settings.jsx", "chunk": "   onPress={onToggleVisibility}\n          style={styles.passwordVisibilityToggle}\n        >\n          <Ionicons \n            name={showPassword ? \"eye-off-outline\" : \"eye-outline\"} \n            size={22} \n            color=\"#8E8E93\" \n          />\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n\n  return (\n    <Modal \n      visible={isVisible} \n      animationType=\"slide\" \n      presentationStyle=\"formSheet\"\n      transparent={true}\n    >\n      <View style={styles.modalOverlay}>\n      "}, {"index": 1709, "path": "client/screens/Settings.jsx", "chunk": "tionStyle=\"formSheet\"\n      transparent={true}\n    >\n      <View style={styles.modalOverlay}>\n        <View style={styles.modalContainer}>\n          <View style={styles.modalHeader}>\n            <TouchableOpacity \n              onPress={onClose} \n              style={styles.closeButton}\n            >\n              <Ionicons name=\"close\" size={24} color=\"#000\" />\n            </TouchableOpacity>\n            <Text style={styles.pageTitle}>Change Password</Text>\n          </View>\n\n          <View st"}, {"index": 1710, "path": "client/screens/Settings.jsx", "chunk": "         <Text style={styles.pageTitle}>Change Password</Text>\n          </View>\n\n          <View style={styles.modalContent}>\n            <PasswordInput \n              placeholder=\"Current Password\"\n              value={oldPassword}\n              onChangeText={setOldPassword}\n              showPassword={showOldPassword}\n              onToggleVisibility={() => setShowOldPassword(!showOldPassword)}\n            />\n\n            <View style={styles.softDivider} />\n\n            <PasswordInput \n      "}, {"index": 1711, "path": "client/screens/Settings.jsx", "chunk": "\n            />\n\n            <View style={styles.softDivider} />\n\n            <PasswordInput \n              placeholder=\"New Password\"\n              value={newPassword}\n              onChangeText={setNewPassword}\n              showPassword={showNewPassword}\n              onToggleVisibility={() => setShowNewPassword(!showNewPassword)}\n            />\n\n            <View style={styles.softDivider} />\n\n            <PasswordInput \n              placeholder=\"Confirm New Password\"\n              value={c"}, {"index": 1712, "path": "client/screens/Settings.jsx", "chunk": "\n            <PasswordInput \n              placeholder=\"Confirm New Password\"\n              value={confirmPassword}\n              onChangeText={setConfirmPassword}\n              showPassword={showConfirmPassword}\n              onToggleVisibility={() => setShowConfirmPassword(!showConfirmPassword)}\n            />\n\n            <TouchableOpacity \n              style={styles.changePasswordButton} \n              onPress={handleChangePassword}\n            >\n              <Text style={styles.changePass"}, {"index": 1713, "path": "client/screens/Settings.jsx", "chunk": "           onPress={handleChangePassword}\n            >\n              <Text style={styles.changePasswordButtonText}>\n                Change Password\n              </Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity \n              style={styles.forgotPasswordLink}\n              onPress={onForgotPassword}\n            >\n              <Text style={styles.forgotPasswordText}>\n                Forgot Password?\n              </Text>\n            </TouchableOpacity>\n          </View>\n  "}, {"index": 1714, "path": "client/screens/Settings.jsx", "chunk": "         Forgot Password?\n              </Text>\n            </TouchableOpacity>\n          </View>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\n// Add these styles to the existing styles object\nconst additionalStyles = {\n  modalOverlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0,0,0,0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  modalContainer: {\n    width: '90%',\n    backgroundColor: 'white',\n    borderRadius: 10,\n    shadowColor: '#000',\n    shadowOffset: { width:"}, {"index": 1715, "path": "client/screens/Settings.jsx", "chunk": " backgroundColor: 'white',\n    borderRadius: 10,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  modalContent: {\n    paddingHorizontal: 16,\n    paddingBottom: 20,\n  },\n  passwordInputContainer: {\n    marginVertical: 10,\n  },\n  passwordInputWrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'rgba(142, 142, 147, 0.12)',\n    borderRadius: 10,\n    paddingHorizontal: 12,\n    heig"}, {"index": 1716, "path": "client/screens/Settings.jsx", "chunk": "kgroundColor: 'rgba(142, 142, 147, 0.12)',\n    borderRadius: 10,\n    paddingHorizontal: 12,\n    height: 50,\n  },\n  inputIcon: {\n    marginRight: 10,\n  },\n  passwordInput: {\n    flex: 1,\n    fontSize: 16,\n    color: '#000',\n  },\n  passwordVisibilityToggle: {\n    padding: 5,\n  },\n  changePasswordButton: {\n    backgroundColor: '#0A84FF',\n    paddingVertical: 13,\n    borderRadius: 10,\n    alignItems: 'center',\n    marginTop: 20,\n  },\n  changePasswordButtonText: {\n    color: 'white',\n    fontSize: 16"}, {"index": 1717, "path": "client/screens/Settings.jsx", "chunk": "'center',\n    marginTop: 20,\n  },\n  changePasswordButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  forgotPasswordLink: {\n    alignItems: 'center',\n    marginTop: 15,\n  },\n  forgotPasswordText: {\n    color: '#0A84FF',\n    fontSize: 15,\n    fontWeight: '500',\n  },\n};\n\n// Merge the additional styles with the existing styles\n\n\n// Internal Terms of Service Component\nconst TermsOfServiceScreen = ({ isVisible, onClose }) => {\n  return (\n    <Modal \n      visible={isVisi"}, {"index": 1718, "path": "client/screens/Settings.jsx", "chunk": "st TermsOfServiceScreen = ({ isVisible, onClose }) => {\n  return (\n    <Modal \n      visible={isVisible} \n      animationType=\"slide\" \n      presentationStyle=\"formSheet\"\n    >\n      <SafeAreaView style={styles.container}>\n        <ScrollView \n          contentContainerStyle={styles.scrollViewContent}\n          showsVerticalScrollIndicator={false}\n        >\n          <View style={styles.modalHeader}>\n            <Pressable onPress={onClose} style={styles.closeButton}>\n              <Ionicons nam"}, {"index": 1719, "path": "client/screens/Settings.jsx", "chunk": "r}>\n            <Pressable onPress={onClose} style={styles.closeButton}>\n              <Ionicons name=\"close\" size={24} color=\"#000\" />\n            </Pressable>\n            <Text style={styles.pageTitle}>Terms of Service</Text>\n          </View>\n          \n          <View style={styles.contentSection}>\n            <Text style={styles.sectionTitle}>1. Acceptance of Terms</Text>\n            <Text style={styles.paragraph}>\n              By using this Alumni Network platform, you agree to these Term"}, {"index": 1720, "path": "client/screens/Settings.jsx", "chunk": "yle={styles.paragraph}>\n              By using this Alumni Network platform, you agree to these Terms of Service. Continued use constitutes acceptance of these terms.\n            </Text>\n\n            <Text style={styles.sectionTitle}>2. User Eligibility</Text>\n            <Text style={styles.paragraph}>\n              Platform access is strictly for verified alumni. Users must maintain account accuracy and confidentiality.\n            </Text>\n\n            <Text style={styles.sectionTitle}>3. Comm"}, {"index": 1721, "path": "client/screens/Settings.jsx", "chunk": "racy and confidentiality.\n            </Text>\n\n            <Text style={styles.sectionTitle}>3. Community Guidelines</Text>\n            <Text style={styles.paragraph}>\n              Users agree to:\n              - Engage in respectful communication\n              - Protect personal and others' privacy\n              - Avoid discriminatory or offensive content\n              - Use platform for professional networking\n            </Text>\n\n            <Text style={styles.sectionTitle}>4. Data Usage</T"}, {"index": 1722, "path": "client/screens/Settings.jsx", "chunk": "ional networking\n            </Text>\n\n            <Text style={styles.sectionTitle}>4. Data Usage</Text>\n            <Text style={styles.paragraph}>\n              User data is used for networking, communication, and platform improvements. Detailed usage outlined in our Privacy Policy.\n            </Text>\n          </View>\n        </ScrollView>\n      </SafeAreaView>\n    </Modal>\n  );\n};\n\n// Internal Privacy Policy Component\nconst PrivacyPolicyScreen = ({ isVisible, onClose }) => {\n  return (\n    "}, {"index": 1723, "path": "client/screens/Settings.jsx", "chunk": "l Privacy Policy Component\nconst PrivacyPolicyScreen = ({ isVisible, onClose }) => {\n  return (\n    <Modal \n      visible={isVisible} \n      animationType=\"slide\" \n      presentationStyle=\"formSheet\"\n    >\n      <SafeAreaView style={styles.container}>\n        <ScrollView \n          contentContainerStyle={styles.scrollViewContent}\n          showsVerticalScrollIndicator={false}\n        >\n          <View style={styles.modalHeader}>\n            <Pressable onPress={onClose} style={styles.closeButton}"}, {"index": 1724, "path": "client/screens/Settings.jsx", "chunk": "View style={styles.modalHeader}>\n            <Pressable onPress={onClose} style={styles.closeButton}>\n              <Ionicons name=\"close\" size={24} color=\"#000\" />\n            </Pressable>\n            <Text style={styles.pageTitle}>Privacy Policy</Text>\n          </View>\n          \n          <View style={styles.contentSection}>\n            <Text style={styles.sectionTitle}>1. Information Collection</Text>\n            <Text style={styles.paragraph}>\n              We collect:\n              - Pers"}, {"index": 1725, "path": "client/screens/Settings.jsx", "chunk": "on</Text>\n            <Text style={styles.paragraph}>\n              We collect:\n              - Personal contact information\n              - Professional background\n              - Educational history\n              - Communication preferences\n            </Text>\n\n            <Text style={styles.sectionTitle}>2. Data Usage</Text>\n            <Text style={styles.paragraph}>\n              Information is used for:\n              - Alumni networking\n              - Professional opportunities\n         "}, {"index": 1726, "path": "client/screens/Settings.jsx", "chunk": " is used for:\n              - Alumni networking\n              - Professional opportunities\n              - Platform personalization\n              - Communication of relevant updates\n            </Text>\n\n            <Text style={styles.sectionTitle}>3. Data Protection</Text>\n            <Text style={styles.paragraph}>\n              We implement:\n              - Encryption technologies\n              - Secure access controls\n              - Regular security audits\n              - Compliance with da"}, {"index": 1727, "path": "client/screens/Settings.jsx", "chunk": " - Secure access controls\n              - Regular security audits\n              - Compliance with data protection regulations\n            </Text>\n\n            <Text style={styles.sectionTitle}>4. User Rights</Text>\n            <Text style={styles.paragraph}>\n              Users can:\n              - Request data access\n              - Correct personal information\n              - Opt-out of communications\n              - Request data deletion\n            </Text>\n          </View>\n        </ScrollV"}, {"index": 1728, "path": "client/screens/Settings.jsx", "chunk": "ations\n              - Request data deletion\n            </Text>\n          </View>\n        </ScrollView>\n      </SafeAreaView>\n    </Modal>\n  );\n};\n\n// Internal Help & Support Component\nconst HelpAndSupportScreen = ({ isVisible, onClose }) => {\n  const supportOptions = [\n    {\n      icon: 'mail-outline',\n      title: 'Email Support',\n      description: 'alumni.support@institution.edu',\n      onPress: () => Linking.openURL('mailto:alumni.support@institution.edu')\n    },\n    {\n      icon: 'call-ou"}, {"index": 1729, "path": "client/screens/Settings.jsx", "chunk": "ss: () => Linking.openURL('mailto:alumni.support@institution.edu')\n    },\n    {\n      icon: 'call-outline',\n      title: 'Phone Support',\n      description: '+1 (555) 123-4567',\n      onPress: () => Linking.openURL('tel:+15551234567')\n    },\n    {\n      icon: 'chatbubble-ellipses-outline',\n      title: 'Live Chat',\n      description: 'Available 9 AM - 5 PM EST',\n      onPress: () => {/* Future implementation */}\n    }\n  ];\n\n  return (\n    <Modal \n      visible={isVisible} \n      animationType=\"s"}, {"index": 1730, "path": "client/screens/Settings.jsx", "chunk": "lementation */}\n    }\n  ];\n\n  return (\n    <Modal \n      visible={isVisible} \n      animationType=\"slide\" \n      presentationStyle=\"formSheet\"\n    >\n      <SafeAreaView style={styles.container}>\n        <View style={styles.modalHeader}>\n          <Pressable onPress={onClose} style={styles.closeButton}>\n            <Ionicons name=\"close\" size={24} color=\"#000\" />\n          </Pressable>\n          <Text style={styles.pageTitle}>Help & Support</Text>\n        </View>\n        \n        <ScrollView \n   "}, {"index": 1731, "path": "client/screens/Settings.jsx", "chunk": "ext style={styles.pageTitle}>Help & Support</Text>\n        </View>\n        \n        <ScrollView \n          contentContainerStyle={styles.scrollViewContent}\n          showsVerticalScrollIndicator={false}\n        >\n          <View style={styles.contentSection}>\n            {supportOptions.map((option, index) => (\n              <View key={option.title}>\n                <TouchableOpacity \n                  style={styles.supportItem} \n                  onPress={option.onPress}\n                >\n     "}, {"index": 1732, "path": "client/screens/Settings.jsx", "chunk": "      style={styles.supportItem} \n                  onPress={option.onPress}\n                >\n                  <View style={styles.supportItemContent}>\n                    <Ionicons \n                      name={option.icon} \n                      size={24} \n                      color=\"#8E8E93\" \n                      style={styles.supportIcon}\n                    />\n                    <View style={styles.supportTextContainer}>\n                      <Text style={styles.supportTitle}>{option.ti"}, {"index": 1733, "path": "client/screens/Settings.jsx", "chunk": "le={styles.supportTextContainer}>\n                      <Text style={styles.supportTitle}>{option.title}</Text>\n                      <Text style={styles.supportDescription}>\n                        {option.description}\n                      </Text>\n                    </View>\n                    <Ionicons \n                      name=\"chevron-forward\" \n                      size={20} \n                      color=\"rgba(142, 142, 147, 0.5)\" \n                    />\n                  </View>\n       "}, {"index": 1734, "path": "client/screens/Settings.jsx", "chunk": "          color=\"rgba(142, 142, 147, 0.5)\" \n                    />\n                  </View>\n                </TouchableOpacity>\n                {index < supportOptions.length - 1 && (\n                  <View style={styles.softDivider} />\n                )}\n              </View>\n            ))}\n          </View>\n        </ScrollView>\n      </SafeAreaView>\n    </Modal>\n  );\n};\n\n// Main Settings Component\nconst Settings = ({ navigation }) => {\n  const [settings, setSettings] = useState({\n    notif"}, {"index": 1735, "path": "client/screens/Settings.jsx", "chunk": "ponent\nconst Settings = ({ navigation }) => {\n  const [settings, setSettings] = useState({\n    notifications: {\n      push: true,\n      email: true,\n      marketing: false,\n    },\n    privacy: {\n      profileVisibility: false,\n      dataSharing: false,\n    },\n  });\n\n  const [modalStates, setModalStates] = useState({\n    termsOfService: false,\n    privacyPolicy: false,\n    helpSupport: false,\n    changePassword: false\n  });\n\n\n  const handlePasswordChange = async (oldPassword, newPassword) => {\n  "}, {"index": 1736, "path": "client/screens/Settings.jsx", "chunk": "hangePassword: false\n  });\n\n\n  const handlePasswordChange = async (oldPassword, newPassword) => {\n    try {\n\n      const token = await AsyncStorage.getItem('token')\n\n      if (!token) throw new Error('Token not found');\n\n      // First, verify the old password\n      const verifyResponse = await axios.post(`http://localhost:3000/user/verifyPassword`, \n        { password: oldPassword },\n        { \n          headers: { \n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'ap"}, {"index": 1737, "path": "client/screens/Settings.jsx", "chunk": "         headers: { \n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          } \n        }\n      );\n\n      console.log(verifyResponse)\n\n      // If verification is successful, proceed to change password\n      if (verifyResponse.data.success) {\n        const changeResponse = await axios.post(`http://localhost:3000/user/changePassword`, \n          { newPassword },\n          { \n            headers: { \n              'Authorization': `Bearer ${token}`,\n"}, {"index": 1738, "path": "client/screens/Settings.jsx", "chunk": "wPassword },\n          { \n            headers: { \n              'Authorization': `Bearer ${token}`,\n              'Content-Type': 'application/json'\n            } \n          }\n        );\n\n        // Success scenario\n        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);\n        \n        Alert.alert(\n          'Success', \n          'Your password has been changed successfully',\n          [{ text: 'OK', onPress: () => toggleModal('changePassword') }]\n        );\n      }\n    } "}, {"index": 1739, "path": "client/screens/Settings.jsx", "chunk": ",\n          [{ text: 'OK', onPress: () => toggleModal('changePassword') }]\n        );\n      }\n    } catch (error) {\n      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);\n      \n      // Handle different error scenarios\n      if (error.response) {\n        // The request was made and the server responded with a status code\n        // that falls out of the range of 2xx\n        switch (error.response.status) {\n          case 401:\n            Alert.alert('Error', 'Current password "}, {"index": 1740, "path": "client/screens/Settings.jsx", "chunk": "ch (error.response.status) {\n          case 401:\n            Alert.alert('Error', 'Current password is incorrect');\n            break;\n          case 400:\n            Alert.alert('Error', 'Invalid password. Please try again.');\n            break;\n          default:\n            Alert.alert('Error', 'Failed to change password. Please try again.');\n        }\n      } else if (error.request) {\n        // The request was made but no response was received\n        Alert.alert('Error', 'No response from "}, {"index": 1741, "path": "client/screens/Settings.jsx", "chunk": "// The request was made but no response was received\n        Alert.alert('Error', 'No response from server. Please check your connection.');\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        Alert.alert('Error', 'An unexpected error occurred.');\n      }\n    }\n  };\n\n  const { setRole, setIsLoggedIn, setToken } = useAuth();\n\n  const handleLogout = async () => {\n    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Warning);\n    \n    try"}, {"index": 1742, "path": "client/screens/Settings.jsx", "chunk": " async () => {\n    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Warning);\n    \n    try {\n      await AsyncStorage.clear();\n      setRole(null);\n      setIsLoggedIn(false);\n      setToken(null);\n    } catch (error) {\n      console.error('Logout failed', error);\n    }\n  };\n\n  const toggleSetting = (category, setting) => {\n    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);\n    \n    setSettings(prev => ({\n      ...prev,\n      [category]: {\n        ...prev[category],\n        [s"}, {"index": 1743, "path": "client/screens/Settings.jsx", "chunk": "\n    setSettings(prev => ({\n      ...prev,\n      [category]: {\n        ...prev[category],\n        [setting]: !prev[category][setting]\n      }\n    }));\n  };\n\n  const toggleModal = (modalName) => {\n    setModalStates(prev => ({\n      ...prev,\n      [modalName]: !prev[modalName]\n    }));\n  };\n\n  const SettingItem = ({ \n    icon, \n    title, \n    description, \n    onPress, \n    switchValue, \n    isSwitch = false \n  }) => (\n    <TouchableOpacity \n      style={styles.settingItem} \n      onPress={isSwi"}, {"index": 1744, "path": "client/screens/Settings.jsx", "chunk": "tch = false \n  }) => (\n    <TouchableOpacity \n      style={styles.settingItem} \n      onPress={isSwitch ? null : onPress}\n    >\n      <View style={styles.settingContent}>\n        <View style={styles.settingLeft}>\n          <View style={styles.iconContainer}>\n            <Ionicons \n              name={icon} \n              size={22} \n              color=\"#8E8E93\" \n              style={styles.settingIcon}\n            />\n          </View>\n          <View style={styles.textContainer}>\n            <Te"}, {"index": 1745, "path": "client/screens/Settings.jsx", "chunk": "Icon}\n            />\n          </View>\n          <View style={styles.textContainer}>\n            <Text style={styles.settingTitle}>{title}</Text>\n            {description && (\n              <Text style={styles.settingDescription} numberOfLines={1}>\n                {description}\n              </Text>\n            )}\n          </View>\n        </View>\n        {isSwitch ? (\n          <Switch \n            value={switchValue} \n            onValueChange={() => onPress()}\n            trackColor={{ \n     "}, {"index": 1746, "path": "client/screens/Settings.jsx", "chunk": "   value={switchValue} \n            onValueChange={() => onPress()}\n            trackColor={{ \n              false: \"rgba(142, 142, 147, 0.16)\", \n              true: \"rgba(10, 132, 255, 0.3)\" \n            }}\n            thumbColor={switchValue ? \"#0A84FF\" : \"#8E8E93\"}\n            ios_backgroundColor=\"rgba(142, 142, 147, 0.16)\"\n            style={styles.switchStyle}\n          />\n        ) : (\n          <Ionicons \n            name=\"chevron-forward\" \n            size={20} \n            color=\"rgba(1"}, {"index": 1747, "path": "client/screens/Settings.jsx", "chunk": "     <Ionicons \n            name=\"chevron-forward\" \n            size={20} \n            color=\"rgba(142, 142, 147, 0.5)\" \n          />\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n\n  const SettingsSection = ({ title, children }) => (\n    <View style={styles.sectionContainer}>\n      <Text style={styles.sectionTitle}>{title}</Text>\n      {children}\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n\n      <ScrollView \n        showsVerticalScrollIndicator={false}\n        conte"}, {"index": 1748, "path": "client/screens/Settings.jsx", "chunk": "e={styles.container}>\n\n      <ScrollView \n        showsVerticalScrollIndicator={false}\n        contentContainerStyle={styles.scrollViewContent}\n      >\n        {/* Account Section */}\n        <SettingsSection title=\"Account\">\n          <SettingItem \n            icon=\"person-outline\" \n            title=\"Edit Profile\" \n            description=\"Manage personal information\"\n            onPress={() => navigation.navigate('EditProfile')}\n          />\n          <View style={styles.softDivider} />\n     "}, {"index": 1749, "path": "client/screens/Settings.jsx", "chunk": "navigation.navigate('EditProfile')}\n          />\n          <View style={styles.softDivider} />\n          <SettingItem \n            icon=\"lock-closed-outline\" \n            title=\"Change Password\" \n            description=\"Manage account security\"\n            onPress={() => toggleModal('changePassword')}\n          />\n        </SettingsSection>\n\n        <ChangePasswordModal\n        isVisible={modalStates.changePassword}\n        onClose={() => toggleModal('changePassword')}\n        onChangePassword="}, {"index": 1750, "path": "client/screens/Settings.jsx", "chunk": "ates.changePassword}\n        onClose={() => toggleModal('changePassword')}\n        onChangePassword={handlePasswordChange}\n        onForgotPassword={() => {\n          // Close change password modal and open help & support\n          toggleModal('changePassword');\n          toggleModal('helpSupport');\n        }}\n      />\n\n        {/* Notifications Section */}\n        <SettingsSection title=\"Notifications\">\n          <SettingItem \n            icon=\"notifications-outline\"\n            title=\"Push Not"}, {"index": 1751, "path": "client/screens/Settings.jsx", "chunk": "tions\">\n          <SettingItem \n            icon=\"notifications-outline\"\n            title=\"Push Notifications\"\n            isSwitch\n            switchValue={settings.notifications.push}\n            onPress={() => toggleSetting('notifications', 'push')}\n          />\n          <View style={styles.softDivider} />\n          <SettingItem \n            icon=\"mail-outline\"\n            title=\"Email Updates\"\n            isSwitch\n            switchValue={settings.notifications.email}\n            onPress={"}, {"index": 1752, "path": "client/screens/Settings.jsx", "chunk": "s\"\n            isSwitch\n            switchValue={settings.notifications.email}\n            onPress={() => toggleSetting('notifications', 'email')}\n          />\n          <View style={styles.softDivider} />\n          <SettingItem \n            icon=\"megaphone-outline\"\n            title=\"Marketing Notifications\"\n            isSwitch\n            switchValue={settings.notifications.marketing}\n            onPress={() => toggleSetting('notifications', 'marketing')}\n          />\n        </SettingsSectio"}, {"index": 1753, "path": "client/screens/Settings.jsx", "chunk": "   onPress={() => toggleSetting('notifications', 'marketing')}\n          />\n        </SettingsSection>\n\n        {/* Privacy Section */}\n        <SettingsSection title=\"Privacy\">\n          <SettingItem \n            icon=\"eye-off-outline\"\n            title=\"Profile Visibility\"\n            isSwitch\n            switchValue={settings.privacy.profileVisibility}\n            onPress={() => toggleSetting('privacy', 'profileVisibility')}\n          />\n          <View style={styles.softDivider} />\n         "}, {"index": 1754, "path": "client/screens/Settings.jsx", "chunk": "privacy', 'profileVisibility')}\n          />\n          <View style={styles.softDivider} />\n          <SettingItem \n            icon=\"shield-checkmark-outline\"\n            title=\"Data Sharing\"\n            isSwitch\n            switchValue={settings.privacy.dataSharing}\n            onPress={() => toggleSetting('privacy', 'dataSharing')}\n          />\n        </SettingsSection>\n\n        {/* Legal Section */}\n        <SettingsSection title=\"Support\">\n          <SettingItem \n            icon=\"document-"}, {"index": 1755, "path": "client/screens/Settings.jsx", "chunk": "on */}\n        <SettingsSection title=\"Support\">\n          <SettingItem \n            icon=\"document-text-outline\"\n            title=\"Terms of Service\"\n            description=\"Review our terms\"\n            onPress={() => toggleModal('termsOfService')}\n          />\n          <View style={styles.softDivider} />\n          <SettingItem \n            icon=\"shield-outline\"\n            title=\"Privacy Policy\"\n            description=\"How we protect your data\"\n            onPress={() => toggleModal('priva"}, {"index": 1756, "path": "client/screens/Settings.jsx", "chunk": "cy\"\n            description=\"How we protect your data\"\n            onPress={() => toggleModal('privacyPolicy')}\n          />\n          <View style={styles.softDivider} />\n          <SettingItem \n            icon=\"help-circle-outline\"\n            title=\"Help & Support\"\n            description=\"Get assistance\"\n            onPress={() => toggleModal('helpSupport')}\n          />\n        </SettingsSection>\n\n        {/* Logout */}\n        <TouchableOpacity \n          style={styles.logoutButton} \n     "}, {"index": 1757, "path": "client/screens/Settings.jsx", "chunk": "ion>\n\n        {/* Logout */}\n        <TouchableOpacity \n          style={styles.logoutButton} \n          onPress={handleLogout}\n        >\n          <Text style={styles.logoutText}>Logout</Text>\n        </TouchableOpacity>\n      </ScrollView>\n\n      {/* Modal Screens */}\n      <TermsOfServiceScreen \n        isVisible={modalStates.termsOfService} \n        onClose={() => toggleModal('termsOfService')} \n      />\n      <PrivacyPolicyScreen \n        isVisible={modalStates.privacyPolicy} \n        onClo"}, {"index": 1758, "path": "client/screens/Settings.jsx", "chunk": "} \n      />\n      <PrivacyPolicyScreen \n        isVisible={modalStates.privacyPolicy} \n        onClose={() => toggleModal('privacyPolicy')} \n      />\n      <HelpAndSupportScreen \n        isVisible={modalStates.helpSupport} \n        onClose={() => toggleModal('helpSupport')} \n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F2F2F7',\n  },\n  scrollViewContent: {\n    paddingVertical: 10,\n  },\n  sectionContainer: {\n    backgroundColor"}, {"index": 1759, "path": "client/screens/Settings.jsx", "chunk": "\n  },\n  scrollViewContent: {\n    paddingVertical: 10,\n  },\n  sectionContainer: {\n    backgroundColor: 'white',\n    marginBottom: 12,\n    borderRadius: 10,\n    shadowColor: '#000',\n    shadowOffset: { width: 0, height: 1 },\n    shadowOpacity: 0.03,\n    shadowRadius: 3,\n    elevation: 1,\n    marginHorizontal: 16,\n  },\n  sectionTitle: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#8E8E93',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    textTransform: 'uppercase',\n  },\n  settingItem"}, {"index": 1760, "path": "client/screens/Settings.jsx", "chunk": "   paddingHorizontal: 16,\n    paddingVertical: 8,\n    textTransform: 'uppercase',\n  },\n  settingItem: {\n    backgroundColor: 'white',\n    paddingHorizontal: 16,\n  },\n  settingContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 10,\n  },\n  settingLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  iconContainer: {\n    width: 40,\n    height: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight"}, {"index": 1761, "path": "client/screens/Settings.jsx", "chunk": "  width: 40,\n    height: 40,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  settingIcon: {\n    opacity: 0.7,\n  },\n  textContainer: {\n    justifyContent: 'center',\n  },\n  settingTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n    color: '#000',\n  },\n  settingDescription: {\n    fontSize: 13,\n    color: '#8E8E93',\n    marginTop: 4,\n  },\n  softDivider: {\n    height: 1,\n    backgroundColor: 'rgba(142, 142, 147, 0.12)',\n    marginHorizontal: 16,\n  },\n  switchStyl"}, {"index": 1762, "path": "client/screens/Settings.jsx", "chunk": "ht: 1,\n    backgroundColor: 'rgba(142, 142, 147, 0.12)',\n    marginHorizontal: 16,\n  },\n  switchStyle: {\n    transform: [{ scaleX: 0.8 }, { scaleY: 0.8 }],\n  },\n  logoutButton: {\n    marginHorizontal: 16,\n    marginTop: 15,\n    backgroundColor: 'rgba(255, 59, 48, 0.1)',\n    paddingVertical: 13,\n    borderRadius: 10,\n    alignItems: 'center',\n  },\n  logoutText: {\n    color: '#FF3B30',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  // Modal-specific styles\n  modalHeader: {\n    flexDirection: 'row"}, {"index": 1763, "path": "client/screens/Settings.jsx", "chunk": " 16,\n    fontWeight: '600',\n  },\n  // Modal-specific styles\n  modalHeader: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n  },\n  closeButton: {\n    marginRight: 15,\n  },\n  pageTitle: {\n    fontSize: 24,\n    fontWeight: '700',\n    color: '#000',\n  },\n  contentSection: {\n    paddingHorizontal: 16,\n    paddingVertical: 10,\n  },\n  paragraph: {\n    fontSize: 15,\n    color: '#333',\n    lineHeight: 22,\n    marginBottom: 15,\n  },\n  supportItem: "}, {"index": 1764, "path": "client/screens/Settings.jsx", "chunk": "\n    fontSize: 15,\n    color: '#333',\n    lineHeight: 22,\n    marginBottom: 15,\n  },\n  supportItem: {\n    paddingVertical: 15,\n    paddingHorizontal: 16,\n  },\n  supportItemContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  supportIcon: {\n    marginRight: 15,\n  },\n  supportTextContainer: {\n    flex: 1,\n  },\n  supportTitle: {\n    fontSize: 16,\n    fontWeight: '500',\n  },\n  supportDescription: {\n    fontSize: 14,\n    color: '#8E8E93',\n    marginTop: 4,\n  },\n});\n\n// Prop Types (Op"}, {"index": 1765, "path": "client/screens/Settings.jsx", "chunk": "Description: {\n    fontSize: 14,\n    color: '#8E8E93',\n    marginTop: 4,\n  },\n});\n\n// Prop Types (Optional but recommended)\n// Settings.propTypes = {\n//   navigation: PropTypes.shape({\n//     navigate: PropTypes.func.isRequired,\n//   }).isRequired,\n// };\n\nObject.assign(styles, additionalStyles);\n\nexport default Settings;"}, {"index": 1766, "path": "client/tailwind.config.js", "chunk": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './App.{js,jsx,ts,tsx}',\n    './components/**/*.{js,jsx,ts,tsx}',\n    './screens/**/*.{js,jsx,ts,tsx}',\n    './navigation/**/*.{js,jsx,ts,tsx}',\n    './providers/**/*.{js,jsx,ts,tsx}',\n    './utils/**/*.{js,jsx,ts,tsx}',\n  ],\n\n  presets: [require('nativewind/preset')],\n  theme: {\n    extend: {\n      colors: {\n        // primary: '#F05454',\n        // secondary: '#CBD77E',\n        // dark: '#282828',\n        // backgr"}, {"index": 1767, "path": "client/tailwind.config.js", "chunk": "/ primary: '#F05454',\n        // secondary: '#CBD77E',\n        // dark: '#282828',\n        // background: '#DDDDDD',\n\n        // primary: '#A7A0D3',\n        // secondary: '#CBD77E',\n        // dark: '#282828',\n        // background: '#DDDDDD',\n\n        primary: 'var(--color-primary)',\n        secondary: 'var(--color-secondary)',\n        tertiary: 'var(--color-tertiary)',\n        accent: 'var(--color-accent)',\n        grey: 'var(--color-grey)',\n        slate: 'var(--color-slate)',\n        dark: '"}, {"index": 1768, "path": "client/tailwind.config.js", "chunk": "or-accent)',\n        grey: 'var(--color-grey)',\n        slate: 'var(--color-slate)',\n        dark: 'var(--color-dark)',\n        background: 'var(--color-bg)',\n        text: 'var(--color-text)',\n        highlight: 'var(--color-highlight)',\n        overlay: 'var(--color-overlay)',\n      },\n    },\n  },\n  plugins: [],\n};\n"}, {"index": 1769, "path": "client/tsconfig.base.json", "chunk": "{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"rootDir\": \".\",\n    \"importHelpers\": true,\n    \"allowJs\": false,\n    \"allowSyntheticDefaultImports\": true,\n    \"downlevelIteration\": true,\n    \"esModuleInterop\": true,\n    \"preserveSymlinks\": true,\n    \"incremental\": true,\n    \"jsx\": \"react-jsx\",\n    \"module\": \"system\",\n    \"moduleResolution\": \"node\",\n    \"noEmitOnError\": false,\n    \"noImplicitAny\": false,\n    \"noImplicitReturns\": false,\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false"}, {"index": 1770, "path": "client/tsconfig.base.json", "chunk": " false,\n    \"noImplicitReturns\": false,\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n    \"useUnknownInCatchVariables\": false,\n    \"preserveConstEnums\": true,\n    // DONT DO THIS so jsdoc will remain\n    \"removeComments\": false,\n    \"skipLibCheck\": true,\n    \"sourceMap\": false,\n    \"strictNullChecks\": true,\n    \"target\": \"es2020\",\n    \"types\": [\"node\"],\n    \"lib\": [\"dom\", \"esnext\"],\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"exclude\": [\"_\"],\n  \"typeAcquisition\": {\n    \"ena"}, {"index": 1771, "path": "client/tsconfig.base.json", "chunk": ",\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"exclude\": [\"_\"],\n  \"typeAcquisition\": {\n    \"enable\": true\n  }\n}\n"}, {"index": 1772, "path": "client/tsconfig.json", "chunk": "{\n  \"extends\": \"expo/tsconfig.base\",\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\n        \"*\"\n      ]\n    }\n  },\n  \"include\": [\n    \"**/*.ts\",\n    \"**/*.tsx\",\n    \".expo/types/**/*.ts\",\n    \"expo-env.d.ts\",\n    \"nativewind-env.d.ts\"\n  ]\n}"}, {"index": 1773, "path": "client/utils/ConnectModal.jsx", "chunk": "import { FontAwesome } from '@expo/vector-icons';\nimport { useNavigation } from '@react-navigation/native';\nimport { useState } from 'react';\nimport { Modal, View, Text, TouchableOpacity, Image, TextInput } from 'react-native';\n\nconst ConnectModal = ({ isVisible, closeModal, item }) => {\n  const [note, setNote] = useState('');\n  const [isNoteOpen, setIsNoteOpen] = useState(false); // State to toggle TextInput visibility\n  const navigation = useNavigation();\n\n  const CustomClose = () => {\n    set"}, {"index": 1774, "path": "client/utils/ConnectModal.jsx", "chunk": "le TextInput visibility\n  const navigation = useNavigation();\n\n  const CustomClose = () => {\n    setIsNoteOpen(false);\n    setNote('');\n    closeModal();\n  };\n\n  const handleConnect = () => {\n    console.log('Connecting...');\n    if (note) {\n      console.log('Note:', note); // Send connection with the note\n    } else {\n      console.log('Sending without a note'); // Send connection without the note\n    }\n    CustomClose(); // Close the modal after sending the connection\n  };\n\n  const handleView"}, {"index": 1775, "path": "client/utils/ConnectModal.jsx", "chunk": "te\n    }\n    CustomClose(); // Close the modal after sending the connection\n  };\n\n  const handleViewProfile = () => {\n    navigation.navigate('Profile'); // Navigate to the profile with the user ID\n    CustomClose(); // Close the modal after navigating to the profile\n  };\n\n  return (\n    <Modal visible={isVisible} animationType=\"slide\" transparent onRequestClose={CustomClose}>\n      <View\n        className=\"flex-1 items-center justify-center\"\n        style={{ backgroundColor: 'rgba(0,0,0, 0.8)' "}, {"index": 1776, "path": "client/utils/ConnectModal.jsx", "chunk": "className=\"flex-1 items-center justify-center\"\n        style={{ backgroundColor: 'rgba(0,0,0, 0.8)' }}>\n        <View className=\"max-h-80 w-80 rounded-lg bg-white p-6\">\n          {/* Close Button (X) */}\n          <TouchableOpacity\n            onPress={CustomClose}\n            className=\"absolute right-4 top-4 p-2\"\n            activeOpacity={0.7} // Click feedback\n            style={{ zIndex: 100 }} // Ensure it's on top\n          >\n            <Text className=\"text-2xl font-bold text-gray-800\">"}, {"index": 1777, "path": "client/utils/ConnectModal.jsx", "chunk": "}} // Ensure it's on top\n          >\n            <Text className=\"text-2xl font-bold text-gray-800\">&times;</Text>\n          </TouchableOpacity>\n\n          {/* User info */}\n          <View className=\"mb-6 flex-row items-center\">\n            <Image\n              source={{\n                uri: item.postedBy?.imageUrl || 'https://randomuser.me/api/portraits/men/32.jpg',\n              }} // Example random image URL\n              className=\"mr-4 h-16 w-16 rounded-full\"\n            />\n            <Vi"}, {"index": 1778, "path": "client/utils/ConnectModal.jsx", "chunk": "andom image URL\n              className=\"mr-4 h-16 w-16 rounded-full\"\n            />\n            <View>\n              <Text className=\"text-lg font-bold text-gray-800\">\n                {item.postedBy?.name || 'John Doe'}\n              </Text>\n              <Text className=\"text-sm text-gray-600\">\n                {item.postedBy?.position || 'Software Engineer'}\n              </Text>\n              <Text className=\"text-sm text-gray-600\">\n                {item.postedBy?.email || 'johndoe@example.co"}, {"index": 1779, "path": "client/utils/ConnectModal.jsx", "chunk": "Text className=\"text-sm text-gray-600\">\n                {item.postedBy?.email || 'johndoe@example.com'}\n              </Text>\n            </View>\n          </View>\n\n          {/* View Profile Button */}\n          <TouchableOpacity onPress={handleViewProfile}>\n            <Text className=\"mb-4 text-blue-600\">View Profile</Text>\n          </TouchableOpacity>\n\n          {/* Note input with pencil icon */}\n          <View className=\"mb-6\">\n            {!isNoteOpen ? (\n              <TouchableOpacity"}, {"index": 1780, "path": "client/utils/ConnectModal.jsx", "chunk": "n */}\n          <View className=\"mb-6\">\n            {!isNoteOpen ? (\n              <TouchableOpacity\n                onPress={() => setIsNoteOpen(true)}\n                className=\"flex-row items-center\">\n                <FontAwesome name=\"pencil\" size={16} color=\"gray\" />\n                <Text className=\"ml-2 text-sm text-gray-600\">Add a Note</Text>\n              </TouchableOpacity>\n            ) : (\n              <TextInput\n                value={note}\n                onChangeText={setNote}\n   "}, {"index": 1781, "path": "client/utils/ConnectModal.jsx", "chunk": ": (\n              <TextInput\n                value={note}\n                onChangeText={setNote}\n                className=\"rounded-md border border-gray-300 p-3 text-sm\"\n                placeholder=\"Add a note (optional)\"\n                multiline\n              />\n            )}\n          </View>\n\n          {/* Connect Button */}\n          <TouchableOpacity onPress={handleConnect} className=\"rounded-md bg-blue-600 px-4 py-2\">\n            <Text className=\"text-sm font-medium text-white\">Connect<"}, {"index": 1782, "path": "client/utils/ConnectModal.jsx", "chunk": "ded-md bg-blue-600 px-4 py-2\">\n            <Text className=\"text-sm font-medium text-white\">Connect</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  );\n};\n\nexport default ConnectModal;\n"}, {"index": 1783, "path": "client/utils/UserCard.jsx", "chunk": "import { useNavigation } from '@react-navigation/native';\nimport { View, Text, TouchableOpacity, Image } from 'react-native';\n\nimport { connectHandler } from './connectHandler';\nimport { useAuth } from '../providers/AuthProvider';\n\nconst UserCard = ({ alumni }) => {\n  const { _id, fullName, bio, profilePhoto } = alumni;\n  const navigation = useNavigation();\n  const { user, setUser, reqSet, setReqSet } = useAuth();\n\n  const handleViewProfile = () => {\n    navigation.navigate('Profile', { _id }); "}, {"index": 1784, "path": "client/utils/UserCard.jsx", "chunk": "et } = useAuth();\n\n  const handleViewProfile = () => {\n    navigation.navigate('Profile', { _id }); // Navigate to the profile with user ID\n  };\n\n  const handleConnect = async () => {\n    try {\n      const updatedUser = await connectHandler(_id);\n      setUser(updatedUser);\n      setReqSet(new Set(updatedUser.sentRequests));\n    } catch (error) {\n      console.error('Error connecting:', error);\n    }\n  };\n\n  const truncatedBio = bio\n    ? bio.length > 50\n      ? bio.substring(0, 50) + '...'\n    "}, {"index": 1785, "path": "client/utils/UserCard.jsx", "chunk": "  }\n  };\n\n  const truncatedBio = bio\n    ? bio.length > 50\n      ? bio.substring(0, 50) + '...'\n      : bio\n    : 'Software Engineer';\n\n  return (\n    <View className=\"w-48 items-center rounded-lg bg-white p-4 shadow-lg\">\n      {/* User Info */}\n      <Image\n        source={{\n          uri: profilePhoto || 'https://randomuser.me/api/portraits/men/32.jpg',\n        }}\n        className=\"mb-3 h-16 w-16 rounded-full\"\n      />\n      <Text className=\"mb-1 text-center text-base font-bold text-gray-800\""}, {"index": 1786, "path": "client/utils/UserCard.jsx", "chunk": "16 rounded-full\"\n      />\n      <Text className=\"mb-1 text-center text-base font-bold text-gray-800\" numberOfLines={1}>\n        {fullName || 'John Doe'}\n      </Text>\n      <Text className=\"mb-4 text-center text-xs text-gray-600\" numberOfLines={2}>\n        {truncatedBio}\n      </Text>\n\n      {/* Action Buttons */}\n      <View className=\"w-full space-y-2\">\n        <TouchableOpacity\n          onPress={handleViewProfile}\n          className=\"w-full rounded-md bg-gray-100 p-5\">\n          <Text class"}, {"index": 1787, "path": "client/utils/UserCard.jsx", "chunk": "s={handleViewProfile}\n          className=\"w-full rounded-md bg-gray-100 p-5\">\n          <Text className=\"text-center text-xs font-medium text-blue-600\">View Profile</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={handleConnect}\n          className={`w-full rounded-md px-3 py-2 mt-2 ${reqSet.has(_id) ? 'bg-gray-400' : 'bg-blue-600'}`} // Change the background color conditionally\n        >\n          <Text className=\"text-center text-xs font-medium text-white p-2\">\n"}, {"index": 1788, "path": "client/utils/UserCard.jsx", "chunk": "conditionally\n        >\n          <Text className=\"text-center text-xs font-medium text-white p-2\">\n            {reqSet.has(_id) ? 'Pending' : 'Connect'} {/* Change text based on the condition */}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default UserCard;\n"}, {"index": 1789, "path": "client/utils/colorTheme.js", "chunk": "import { vars } from 'nativewind';\n\nexport const themes = {\n  light: vars({\n    '--color-primary': '#2C3E8D',\n    '--color-primary-light': '#4B69C6',\n    '--color-secondary': '#3498DB',\n    '--color-secondary-light': '#7CC0F0',\n    '--color-tertiary': '#34495E',\n    '--color-tertiary-light': '#546E7A',\n    '--color-accent': '#E67E22',\n    '--color-accent-light': '#F39C12',\n    '--color-grey': '#95A5A6',\n    '--color-slate': '#2C3E50',\n    '--color-dark': '#1A1A2E',\n    '--color-overlay': 'rgba(0"}, {"index": 1790, "path": "client/utils/colorTheme.js", "chunk": "A5A6',\n    '--color-slate': '#2C3E50',\n    '--color-dark': '#1A1A2E',\n    '--color-overlay': 'rgba(0, 0, 0, .05)',\n    '--color-text': '#2C3E50',\n    '--color-highlight': '#34495E',\n    '--color-bg': '#F5F7FA',\n  }),\n  dark: vars({\n    '--color-primary': '#4B69C6',\n    '--color-primary-light': '#6C8EE6',\n    '--color-secondary': '#3498DB',\n    '--color-secondary-light': '#5DADE2',\n    '--color-tertiary': '#7F8C8D',\n    '--color-tertiary-light': '#95A5A6',\n    '--color-accent': '#F39C12',\n    '--"}, {"index": 1791, "path": "client/utils/colorTheme.js", "chunk": "tiary': '#7F8C8D',\n    '--color-tertiary-light': '#95A5A6',\n    '--color-accent': '#F39C12',\n    '--color-accent-light': '#FFB74D',\n    '--color-grey': '#BDC3C7',\n    '--color-slate': '#7F8C8D',\n    '--color-dark': '#2C3E50',\n    '--color-overlay': 'rgba(255, 255, 255, .07)',\n    '--color-text': '#ECF0F1',\n    '--color-highlight': '#34495E',\n    '--color-bg': '#121212',\n  }),\n};\n"}, {"index": 1792, "path": "client/utils/connectHandler.js", "chunk": "// utils/connectionUtils.js\nimport { SERVER_URL } from '@env';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\n\nexport const connectHandler = async (userId) => {\n  const token = await AsyncStorage.getItem('token');\n\n  if (!token) {\n    throw new Error('Token not found');\n  }\n\n  try {\n    const response = await axios.post(\n      `${SERVER_URL}/connections/send`,\n      { targetUserId: userId },\n      { headers: { Authorization: `Bearer ${token}` } }"}, {"index": 1793, "path": "client/utils/connectHandler.js", "chunk": "tions/send`,\n      { targetUserId: userId },\n      { headers: { Authorization: `Bearer ${token}` } }\n    );\n    alert('Connection request sent!');\n    console.log(response.data.message);\n    return response.data.user;\n  } catch (error) {\n    console.error('Error sending connection request:', error);\n    alert('Failed to send connection request');\n  }\n};\n"}, {"index": 1794, "path": "client/utils/dateUtils.js", "chunk": "export const formatMessageTime = (timestamp) => {\n  return new Date(timestamp).toLocaleTimeString([], {\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n};\n\nexport const formatMessageDate = (timestamp) => {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const yesterday = new Date(now);\n  yesterday.setDate(yesterday.getDate() - 1);\n\n  if (date.toDateString() === now.toDateString()) {\n    return 'Today';\n  } else if (date.toDateString() === yesterday.toDateString()) {\n    return "}, {"index": 1795, "path": "client/utils/dateUtils.js", "chunk": ") {\n    return 'Today';\n  } else if (date.toDateString() === yesterday.toDateString()) {\n    return 'Yesterday';\n  }\n  return date.toLocaleDateString('en-IN', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n  });\n};\n\nexport const groupMessagesByDate = (messages) => {\n  const groups = {};\n  messages.forEach((message) => {\n    const date = new Date(message.timestamp).toDateString();\n    if (!groups[date]) {\n      groups[date] = [];\n    }\n    groups[date].push(message);\n  });\n  return"}, {"index": 1796, "path": "client/utils/dateUtils.js", "chunk": "  if (!groups[date]) {\n      groups[date] = [];\n    }\n    groups[date].push(message);\n  });\n  return groups;\n};\n"}, {"index": 1797, "path": "client/utils/downloadPDF.js", "chunk": "import * as FileSystem from 'expo-file-system';\n\nexport const downloadPdf = async (url, filename) => {\n  try {\n    const fileUri = FileSystem.documentDirectory + filename;\n    const downloadResult = await FileSystem.downloadAsync(url, fileUri);\n\n    if (downloadResult.status === 200) {\n      console.log('File downloaded successfully!');\n      return fileUri;\n    } else {\n      console.error('Download failed, status:', downloadResult.status);\n      return null;\n    }\n  } catch (error) {\n    conso"}, {"index": 1798, "path": "client/utils/downloadPDF.js", "chunk": "oad failed, status:', downloadResult.status);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error downloading file:', error);\n    return null;\n  }\n};\n"}, {"index": 1799, "path": "client/utils/messageUtils.js", "chunk": "import { SERVER_URL } from '@env';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios from 'axios';\nimport { Audio } from 'expo-av';\nimport * as DocumentPicker from 'expo-document-picker';\nimport * as FileSystem from 'expo-file-system';\nimport * as ImagePicker from 'expo-image-picker';\nimport { Alert } from 'react-native';\n\nconst MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB in bytes\n\nexport class MessageService {\n  static async uploadMedia(base64String, type, mimeTyp"}, {"index": 1800, "path": "client/utils/messageUtils.js", "chunk": " 10MB in bytes\n\nexport class MessageService {\n  static async uploadMedia(base64String, type, mimeType) {\n    try {\n      const token = await AsyncStorage.getItem('token');\n      const response = await axios.post(\n        `${SERVER_URL}/media/upload`,\n        {\n          type,\n          buffer: base64String,\n          mimeType,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n      return response.data.id;\n    } catch (error) "}, {"index": 1801, "path": "client/utils/messageUtils.js", "chunk": "earer ${token}`,\n          },\n        }\n      );\n      return response.data.id;\n    } catch (error) {\n      console.error('Error uploading media:', error);\n      Alert.alert('Error', 'Could not upload media');\n      return null;\n    }\n  }\n\n  static async handleDocumentAttachment() {\n    try {\n      const result = await DocumentPicker.getDocumentAsync({\n        copyToCacheDirectory: true,\n        multiple: false,\n      });\n\n      if (result.canceled) return null;\n\n      if (result.assets && resul"}, {"index": 1802, "path": "client/utils/messageUtils.js", "chunk": "ultiple: false,\n      });\n\n      if (result.canceled) return null;\n\n      if (result.assets && result.assets.length > 0) {\n        const file = result.assets[0];\n\n        if (file.size > MAX_FILE_SIZE) {\n          Alert.alert('Error', 'File size must be less than 10MB');\n          return null;\n        }\n\n        // Upload document and get ID\n        const base64String = await FileSystem.readAsStringAsync(file.uri, {\n          encoding: FileSystem.EncodingType.Base64,\n        });\n        const me"}, {"index": 1803, "path": "client/utils/messageUtils.js", "chunk": "ngAsync(file.uri, {\n          encoding: FileSystem.EncodingType.Base64,\n        });\n        const mediaId = await this.uploadMedia(base64String, 'document', file.mimeType);\n\n        if (!mediaId) return null;\n\n        return {\n          type: 'document',\n          fileName: file.name,\n          fileSize: file.size,\n          uri: mediaId,\n          timestamp: Date.now(),\n        };\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Could not attach document');\n      return null;\n    }\n  }"}, {"index": 1804, "path": "client/utils/messageUtils.js", "chunk": "atch (error) {\n      Alert.alert('Error', 'Could not attach document');\n      return null;\n    }\n  }\n\n  static async handleImagePicker(useCamera = false) {\n    try {\n      const method = useCamera\n        ? ImagePicker.launchCameraAsync\n        : ImagePicker.launchImageLibraryAsync;\n\n      const result = await method({\n        mediaTypes: ['images'],\n        allowsEditing: true,\n        base64: true,\n      });\n\n      if (!result.canceled && result.assets[0]) {\n        const mediaId = await this."}, {"index": 1805, "path": "client/utils/messageUtils.js", "chunk": "ue,\n      });\n\n      if (!result.canceled && result.assets[0]) {\n        const mediaId = await this.uploadMedia(result.assets[0].base64, 'image', 'image/jpeg');\n\n        if (!mediaId) return null;\n\n        return {\n          type: 'image',\n          uri: mediaId,\n          timestamp: Date.now(),\n        };\n      }\n    } catch (error) {\n      Alert.alert('Error', 'Could not access camera/gallery');\n      return null;\n    }\n  }\n\n  static async startRecording() {\n    try {\n      await Audio.setAudi"}, {"index": 1806, "path": "client/utils/messageUtils.js", "chunk": "\n      return null;\n    }\n  }\n\n  static async startRecording() {\n    try {\n      await Audio.setAudioModeAsync({\n        allowsRecordingIOS: true,\n        playsInSilentModeIOS: true,\n      });\n\n      const { recording } = await Audio.Recording.createAsync(\n        Audio.RecordingOptionsPresets.HIGH_QUALITY\n      );\n      return recording;\n    } catch (error) {\n      Alert.alert('Error', 'Could not start recording');\n      return null;\n    }\n  }\n\n  static async stopRecording(recording) {\n    if ("}, {"index": 1807, "path": "client/utils/messageUtils.js", "chunk": " start recording');\n      return null;\n    }\n  }\n\n  static async stopRecording(recording) {\n    if (!recording) return null;\n\n    try {\n      await recording.stopAndUnloadAsync();\n      const uri = recording.getURI();\n\n      const base64String = await FileSystem.readAsStringAsync(uri, {\n        encoding: FileSystem.EncodingType.Base64,\n      });\n      const mediaId = await this.uploadMedia(base64String, 'audio', 'audio/mpeg');\n\n      if (!mediaId) return null;\n\n      return {\n        type: 'audi"}, {"index": 1808, "path": "client/utils/messageUtils.js", "chunk": "tring, 'audio', 'audio/mpeg');\n\n      if (!mediaId) return null;\n\n      return {\n        type: 'audio',\n        uri: mediaId,\n        timestamp: Date.now(),\n      };\n    } catch (error) {\n      console.log('Error stopping recording:', error);\n      return null;\n    }\n  }\n}\n"}, {"index": 1809, "path": "server/controllers/authController.js", "chunk": "import bcrypt from 'bcrypt';\nimport { User, College } from '../models/index.js';\nimport nodemailer from 'nodemailer';\nimport crypto from 'crypto';\n\nexport const collegeRegister = async (req, res) => {\n  try {\n    const { name, email, password, ...otherData } = req.body;\n\n    const existingUser = await College.findOne({ email });\n\n    if (existingUser) {\n      return res.status(400).json({\n        success: false,\n        message: 'College already registered',\n      });\n    }\n\n    const hashedPass"}, {"index": 1810, "path": "server/controllers/authController.js", "chunk": "success: false,\n        message: 'College already registered',\n      });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, SALT);\n\n    const collegeData = {\n      name,\n      email,\n      password: hashedPassword,\n      ...otherData,\n    };\n\n    const newCollege = await College.create(collegeData);\n\n    res.status(201).json({\n      success: true,\n      message: 'Registration successful',\n      id: newCollege._id,\n      collegeData: newCollege\n    });\n  } catch (error) {\n    console.e"}, {"index": 1811, "path": "server/controllers/authController.js", "chunk": "',\n      id: newCollege._id,\n      collegeData: newCollege\n    });\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Registration failed',\n      error: error.message,\n    });\n  }\n};\n\nexport const collegeLogin = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    const college = await College.findOne({ email });\n    if (!college) {\n      return res.status(400).json({ message: 'Invalid cred"}, {"index": 1812, "path": "server/controllers/authController.js", "chunk": "e.findOne({ email });\n    if (!college) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    const isMatch = await bcrypt.compare(password, college.password);\n    if (!isMatch) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    res.json({\n      message: 'Login successful',\n      id: college._id,\n      collegeData: college\n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Server error', error: error.message });\n  }\n};\n"}, {"index": 1813, "path": "server/controllers/authController.js", "chunk": "catch (error) {\n    res.status(500).json({ message: 'Server error', error: error.message });\n  }\n};\n\nexport const userRegister = async (req, res) => {\n  try {\n    const { email, password, ...otherData } = req.body;\n\n    const existingUser = await User.findOne({ email });\n\n    if (existingUser) {\n      return res.status(400).json({\n        success: false,\n        message: 'Email already registered',\n      });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, SALT);\n\n    const userData"}, {"index": 1814, "path": "server/controllers/authController.js", "chunk": ",\n      });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, SALT);\n\n    const userData = {\n      email,\n      password: hashedPassword,\n      ...otherData,\n    };\n\n    const newUser = await User.create(userData);\n\n    res.status(201).json({\n      success: true,\n      message: 'Registration successful',\n      id: newUser._id,\n      user: newUser\n    });\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      message"}, {"index": 1815, "path": "server/controllers/authController.js", "chunk": ".error('Registration error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Registration failed',\n      error: error.message,\n    });\n  }\n};\n\nexport const userLogin = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n   "}, {"index": 1816, "path": "server/controllers/authController.js", "chunk": ");\n    }\n\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n\n    res.json({\n      message: 'Login successful',\n      id: user._id,\n      user\n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Server error', error: error.message });\n  }\n};\n\nconst transporter = nodemailer.createTransport({\n  service: 'Gmail',\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process."}, {"index": 1817, "path": "server/controllers/authController.js", "chunk": "createTransport({\n  service: 'Gmail',\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.APP_PASSWORD,\n  },\n});\n\n// Function to generate a strong random password\nconst generateRandomPassword = (length = 12) => {\n  return crypto.randomBytes(length).toString('hex').slice(0, length);\n};\n\n// Function to send welcome email\nconst sendWelcomeEmail = async (email, password, fullName) => {\n  const mailOptions = {\n    from: process.env.EMAIL_USER,\n    to: email,\n    subject: 'Welcome to Col"}, {"index": 1818, "path": "server/controllers/authController.js", "chunk": " const mailOptions = {\n    from: process.env.EMAIL_USER,\n    to: email,\n    subject: 'Welcome to College Portal',\n    html: `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .container { \n          max-width: 600px; \n          margin: 0 auto; \n          padding: 20px; \n          background-color: #f4f4f4;\n          border-radius: 10px;\n        }\n        .header {"}, {"index": 1819, "path": "server/controllers/authController.js", "chunk": "px; \n          background-color: #f4f4f4;\n          border-radius: 10px;\n        }\n        .header { \n          background-color: #4a4a4a; \n          color: white; \n          text-align: center; \n          padding: 20px;\n          border-radius: 10px 10px 0 0;\n        }\n        .content { \n          background-color: white; \n          padding: 20px; \n          border-radius: 0 0 10px 10px;\n        }\n        .credentials { \n          background-color: #f0f0f0; \n          padding: 15px; \n         "}, {"index": 1820, "path": "server/controllers/authController.js", "chunk": " }\n        .credentials { \n          background-color: #f0f0f0; \n          padding: 15px; \n          border-radius: 5px; \n          margin: 20px 0;\n        }\n        .footer { \n          text-align: center; \n          color: #777; \n          margin-top: 20px; \n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <div class=\"header\">\n          <h1>Welcome to College Portal</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hello ${fullName},</h2>\n    "}, {"index": 1821, "path": "server/controllers/authController.js", "chunk": " Portal</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hello ${fullName},</h2>\n          <p>Welcome to our College Portal! We're excited to have you on board.</p>\n          \n          <div class=\"credentials\">\n            <h3>Your Login Credentials:</h3>\n            <p><strong>Email:</strong> ${email}</p>\n            <p><strong>Temporary Password:</strong> ${password}</p>\n            <p><em>Please change your password after first login.</em></p>\n          </div>\n          \n     "}, {"index": 1822, "path": "server/controllers/authController.js", "chunk": "    <p><em>Please change your password after first login.</em></p>\n          </div>\n          \n          <p>To get started:</p>\n          <ol>\n            <li>Visit our portal at [PORTAL_URL]</li>\n            <li>Log in with the credentials above</li>\n            <li>Update your password in the profile settings</li>\n          </ol>\n          \n          <p>If you have any questions, please contact our support team.</p>\n        </div>\n        <div class=\"footer\">\n          <p>&copy; ${new Date().g"}, {"index": 1823, "path": "server/controllers/authController.js", "chunk": "our support team.</p>\n        </div>\n        <div class=\"footer\">\n          <p>&copy; ${new Date().getFullYear()} College Portal. All rights reserved.</p>\n        </div>\n      </div>\n    </body>\n    </html>\n    `\n  };\n\n  try {\n    await transporter.sendMail(mailOptions);\n    console.log(`Welcome email sent to ${email}`);\n  } catch (error) {\n    console.error(`Failed to send email to ${email}:`, error);\n  }\n};\n\nexport const bulkCreateUsers = async (req, res) => {\n  const uploadedUsers = [];\n  con"}, {"index": 1824, "path": "server/controllers/authController.js", "chunk": "ror);\n  }\n};\n\nexport const bulkCreateUsers = async (req, res) => {\n  const uploadedUsers = [];\n  const failedUsers = [];\n\n  try {\n    const users = req.body;\n    console.log('Received users:', JSON.stringify(users, null, 2));\n\n    // Validate input\n    if (!Array.isArray(users) || users.length === 0) {\n      return res.status(400).json({\n        error: 'Invalid user data',\n        message: 'No users provided or invalid data format',\n      });\n    }\n\n    // Process users one by one\n    for (const"}, {"index": 1825, "path": "server/controllers/authController.js", "chunk": "rs provided or invalid data format',\n      });\n    }\n\n    // Process users one by one\n    for (const userData of users) {\n      try {\n        // Generate random password\n        const randomPassword = generateRandomPassword();\n\n        // Hash the password\n        const hashedPassword = await bcrypt.hash(randomPassword, 10);\n\n        // Normalize user data\n        const normalizedUserData = {\n          fullName: userData.fullName || '',\n          email: userData.email || '',\n          password: "}, {"index": 1826, "path": "server/controllers/authController.js", "chunk": "      fullName: userData.fullName || '',\n          email: userData.email || '',\n          password: hashedPassword, // Store hashed password\n          profilePhoto: userData.profilePhoto || '',\n          phone: userData.phone || '',\n          city: userData.city || '',\n          state: userData.state || '',\n          country: userData.country || '',\n          // Normalize education (handle array-like structure)\n          education: Array.isArray(userData['education[0]'])\n            ? userData['"}, {"index": 1827, "path": "server/controllers/authController.js", "chunk": "ike structure)\n          education: Array.isArray(userData['education[0]'])\n            ? userData['education[0]'].map(edu => ({\n              degree: edu.degree || '',\n              department: edu.department || '',\n              institution: edu.institution || '',\n              graduationYear: parseInt(edu.graduationYear) || null,\n              college_id: edu.college_id || null,\n              college_email: edu.college_email || '',\n              isVerified: edu.isVerified === 'TRUE'\n         "}, {"index": 1828, "path": "server/controllers/authController.js", "chunk": "ollege_email: edu.college_email || '',\n              isVerified: edu.isVerified === 'TRUE'\n            }))\n            : [],\n\n          // Normalize work experience\n          workExperience: Array.isArray(userData['workExperience[0]'])\n            ? userData['workExperience[0]'].map(work => ({\n              companyName: work.companyName ? work.companyName.replace(/\"/g, '') : '',\n              role: work.role ? work.role.replace(/\"/g, '') : '',\n              startDate: work.startDate ? new Date(w"}, {"index": 1829, "path": "server/controllers/authController.js", "chunk": ": work.role ? work.role.replace(/\"/g, '') : '',\n              startDate: work.startDate ? new Date(work.startDate) : null,\n              endDate: work.endDate ? new Date(work.endDate) : null,\n              description: work.description || ''\n            }))\n            : [],\n\n          // Normalize skills (handle array-like structure)\n          skills: [\n            userData['skills[0]'],\n            userData['skills[1]'],\n            userData['skills[2]'],\n            userData['skills[3]'],\n   "}, {"index": 1830, "path": "server/controllers/authController.js", "chunk": "    userData['skills[1]'],\n            userData['skills[2]'],\n            userData['skills[3]'],\n            userData['skills[4]']\n          ].filter(skill => skill && skill.trim() !== ''),\n\n          // Normalize interests\n          interests: [\n            userData['interests[0]'],\n            userData['interests[1]'],\n            userData['interests[2]']\n          ].filter(interest => interest && interest.trim() !== ''),\n\n          about: userData.about || '',\n        };\n\n        // Check for"}, {"index": 1831, "path": "server/controllers/authController.js", "chunk": "&& interest.trim() !== ''),\n\n          about: userData.about || '',\n        };\n\n        // Check for existing user\n        const existingUser = await User.findOne({ email: normalizedUserData.email });\n\n        let user;\n        if (existingUser) {\n          // Update existing user\n          existingUser.set(normalizedUserData);\n          user = await existingUser.save();\n          console.log(`Updated user: ${user.fullName}`);\n        } else {\n          // Create new user\n          user = new Us"}, {"index": 1832, "path": "server/controllers/authController.js", "chunk": "ated user: ${user.fullName}`);\n        } else {\n          // Create new user\n          user = new User(normalizedUserData);\n          await user.save();\n          console.log(`Created user: ${user.fullName}`);\n        }\n\n        // Send welcome email (with random password)\n        await sendWelcomeEmail(normalizedUserData.email, randomPassword, normalizedUserData.fullName);\n\n        // Log successful upload\n        uploadedUsers.push(user);\n      } catch (userError) {\n        // Log failed user\n"}, {"index": 1833, "path": "server/controllers/authController.js", "chunk": "ful upload\n        uploadedUsers.push(user);\n      } catch (userError) {\n        // Log failed user\n        console.error(\n          `Failed to process user: ${JSON.stringify(userData)}`,\n          userError\n        );\n        failedUsers.push({\n          userData,\n          error: userError.message,\n        });\n      }\n    }\n\n    console.log(\n      `Bulk upload summary - Total: ${users.length}, Successful: ${uploadedUsers.length}, Failed: ${failedUsers.length}`\n    );\n\n    // Prepare response\n "}, {"index": 1834, "path": "server/controllers/authController.js", "chunk": "uccessful: ${uploadedUsers.length}, Failed: ${failedUsers.length}`\n    );\n\n    // Prepare response\n    res.status(201).json({\n      message: 'Users processed',\n      details: {\n        totalUsers: users.length,\n        successful: uploadedUsers.length,\n        failed: failedUsers.length,\n      },\n      failedUsers: failedUsers, // Optional: return details of failed uploads\n    });\n  } catch (error) {\n    console.error('Bulk user creation error:', error);\n\n    res.status(500).json({\n      error: "}, {"index": 1835, "path": "server/controllers/authController.js", "chunk": ") {\n    console.error('Bulk user creation error:', error);\n\n    res.status(500).json({\n      error: 'Failed to create users',\n      message: error.message,\n    });\n  }\n};"}, {"index": 1836, "path": "server/controllers/authController2.js", "chunk": "import { User, College } from '../models/index.js';\nimport nodemailer from 'nodemailer';\nimport crypto from 'crypto';\nimport dotenv from 'dotenv';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\ndotenv.config();\n\nconst transporter = nodemailer.createTransport({\n    service: 'Gmail',\n    auth: {\n        user: process.env.EMAIL_USER,\n        pass: process.env.APP_PASSWORD,\n    },\n});\n\nconst getVerificationEmail = (verificationUrl) => `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta"}, {"index": 1837, "path": "server/controllers/authController2.js", "chunk": "onst getVerificationEmail = (verificationUrl) => `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Verify Your Email</title>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap\" rel=\"stylesheet\">\n    <style>\n        body {\n            font-family: 'Inter', Arial, sans-serif;\n            line-height: 1.6;\n            background-color: #f4f6f9;\n         "}, {"index": 1838, "path": "server/controllers/authController2.js", "chunk": "', Arial, sans-serif;\n            line-height: 1.6;\n            background-color: #f4f6f9;\n            margin: 0;\n            padding: 0;\n            color: #333;\n        }\n        .email-container {\n            max-width: 600px;\n            margin: 40px auto;\n            background-color: white;\n            border-radius: 12px;\n            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\n            overflow: hidden;\n        }\n        .email-header {\n            background: linear-gradient(135deg, #"}, {"index": 1839, "path": "server/controllers/authController2.js", "chunk": "verflow: hidden;\n        }\n        .email-header {\n            background: linear-gradient(135deg, #6366F1, #4F46E5);\n            color: white;\n            text-align: center;\n            padding: 30px 20px;\n        }\n        .email-header h1 {\n            margin: 0;\n            font-size: 24px;\n            font-weight: 600;\n        }\n        .email-body {\n            padding: 30px 20px;\n        }\n        .email-body p {\n            color: #4a5568;\n            margin-bottom: 20px;\n        }\n    "}, {"index": 1840, "path": "server/controllers/authController2.js", "chunk": "\n        .email-body p {\n            color: #4a5568;\n            margin-bottom: 20px;\n        }\n        .verify-button {\n            display: block;\n            width: 220px;\n            margin: 30px auto;\n            padding: 15px 25px;\n            background-color: #6366F1;\n            color: white;\n            text-decoration: none;\n            border-radius: 8px;\n            text-align: center;\n            font-weight: 600;\n            transition: background-color 0.3s ease;\n            box-"}, {"index": 1841, "path": "server/controllers/authController2.js", "chunk": ";\n            font-weight: 600;\n            transition: background-color 0.3s ease;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n        }\n        .verify-button:hover {\n            background-color: #4F46E5;\n        }\n        .footer {\n            background-color: #f4f6f9;\n            text-align: center;\n            padding: 20px;\n            font-size: 12px;\n            color: #718096;\n        }\n        .logo {\n            width: 60px;\n            height: 60px;\n            margin-bot"}, {"index": 1842, "path": "server/controllers/authController2.js", "chunk": "\n        }\n        .logo {\n            width: 60px;\n            height: 60px;\n            margin-bottom: 15px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"email-container\">\n        <div class=\"email-header\">\n            <svg class=\"logo\" viewBox=\"0 0 60 60\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle cx=\"30\" cy=\"30\" r=\"30\" fill=\"white\" fill-opacity=\"0.2\"/>\n                <path d=\"M30 15L40 25H35V40H25V25H20L30 15Z\" fill=\"white\"/>\n            </svg>\n            <h1>Veri"}, {"index": 1843, "path": "server/controllers/authController2.js", "chunk": " <path d=\"M30 15L40 25H35V40H25V25H20L30 15Z\" fill=\"white\"/>\n            </svg>\n            <h1>Verify Your Email Address</h1>\n        </div>\n        <div class=\"email-body\">\n            <p>Hello!</p>\n            <p>You're almost there. Click the button below to verify your college email address. This helps us ensure the authenticity of your account.</p>\n            <a href=\"${verificationUrl}\" class=\"verify-button\">Verify Email Address</a>\n            <p>If you didn't request this verification,"}, {"index": 1844, "path": "server/controllers/authController2.js", "chunk": "ass=\"verify-button\">Verify Email Address</a>\n            <p>If you didn't request this verification, you can safely ignore this email. The verification link will expire in 24 hours.</p>\n            <p>Need help? Contact our support team.</p>\n        </div>\n        <div class=\"footer\">\n            \u00a9 ${new Date().getFullYear()} Your Company. All rights reserved.\n        </div>\n    </div>\n</body>\n</html>\n`;\n\nexport const register = async (req, res) => {\n    try {\n        const { user } = req.body;\n"}, {"index": 1845, "path": "server/controllers/authController2.js", "chunk": "tml>\n`;\n\nexport const register = async (req, res) => {\n    try {\n        const { user } = req.body;\n        \n        // Validate the user object\n        if (!user || typeof user !== 'object') {\n            return res.status(400).json({\n                success: false,\n                error: 'User object must be provided'\n            });\n        }\n\n        // Normalize and validate emails from education array\n        const emails = user.education\n            ? user.education.map(edu => edu.college"}, {"index": 1846, "path": "server/controllers/authController2.js", "chunk": "tion array\n        const emails = user.education\n            ? user.education.map(edu => edu.college_email.toLowerCase().trim())\n            : [];\n\n        if (emails.length === 0) {\n            return res.status(400).json({\n                success: false,\n                error: 'At least one college email is required'\n            });\n        }\n\n        const results = await Promise.all(emails.map(async (email) => {\n            try {\n                // Check if a user with this college email alr"}, {"index": 1847, "path": "server/controllers/authController2.js", "chunk": "(async (email) => {\n            try {\n                // Check if a user with this college email already exists\n                let existingUser = await User.findOne({\n                    'education.college_email': email\n                });\n\n                if (existingUser) {\n                    return {\n                        email,\n                        status: 'failed',\n                        error: 'College email already registered'\n                    };\n                }\n\n            "}, {"index": 1848, "path": "server/controllers/authController2.js", "chunk": "    error: 'College email already registered'\n                    };\n                }\n\n                // Generate verification token for each education email\n                const educationEntries = user.education.map(edu => {\n                    if (edu.college_email.toLowerCase().trim() === email) {\n                        const verificationToken = crypto.randomBytes(32).toString('hex');\n                        return {\n                            ...edu,\n                            verifica"}, {"index": 1849, "path": "server/controllers/authController2.js", "chunk": "                   return {\n                            ...edu,\n                            verificationToken,\n                            verificationTokenExpires: new Date(Date.now() + 24 * 60 * 60 * 1000),\n                            isVerified: false\n                        };\n                    }\n                    return edu;\n                });\n\n                // Create the user with the updated education array\n                const newUser = await User.create({\n                    ..."}, {"index": 1850, "path": "server/controllers/authController2.js", "chunk": " updated education array\n                const newUser = await User.create({\n                    ...user,\n                    education: educationEntries\n                });\n\n                // Generate verification URL\n                const relevantEducation = newUser.education.find(\n                    edu => edu.college_email.toLowerCase().trim() === email\n                );\n                const verificationUrl = `http://localhost:3000/auth/${encodeURIComponent(email)}/verify?token=${relevan"}, {"index": 1851, "path": "server/controllers/authController2.js", "chunk": "st verificationUrl = `http://localhost:3000/auth/${encodeURIComponent(email)}/verify?token=${relevantEducation.verificationToken}`;\n\n                // Send verification email\n                await transporter.sendMail({\n                    from: '\"Your Company\" <noreply@yourcompany.com>',\n                    to: email,\n                    subject: 'Verify Your College Email Address',\n                    html: getVerificationEmail(verificationUrl)\n                });\n\n                return {\n  "}, {"index": 1852, "path": "server/controllers/authController2.js", "chunk": "        html: getVerificationEmail(verificationUrl)\n                });\n\n                return {\n                    email,\n                    status: 'success',\n                    message: 'Verification email sent'\n                };\n            } catch (error) {\n                console.error('Registration error for email:', email, error);\n                return {\n                    email,\n                    status: 'failed',\n                    error: error.message\n                };\n    "}, {"index": 1853, "path": "server/controllers/authController2.js", "chunk": "                  status: 'failed',\n                    error: error.message\n                };\n            }\n        }));\n\n        return res.json({\n            success: true,\n            results,\n            summary: {\n                total: results.length,\n                successful: results.filter(r => r.status === 'success').length,\n                failed: results.filter(r => r.status === 'failed').length\n            }\n        });\n\n    } catch (error) {\n        console.error('Registration p"}, {"index": 1854, "path": "server/controllers/authController2.js", "chunk": "iled').length\n            }\n        });\n\n    } catch (error) {\n        console.error('Registration process failed:', error);\n        return res.status(500).json({\n            success: false,\n            error: 'Internal server error',\n            message: error.message\n        });\n    }\n};\n\nexport const verify = async (req, res) => {\n    try {\n        const { email } = req.params;\n        const { token } = req.query;\n\n        if (!email || !token) {\n            return res.status(400).json({\n    "}, {"index": 1855, "path": "server/controllers/authController2.js", "chunk": "token } = req.query;\n\n        if (!email || !token) {\n            return res.status(400).json({\n                success: false,\n                error: 'Email and token are required'\n            });\n        }\n\n        // Normalize email\n        const normalizedEmail = decodeURIComponent(email).toLowerCase().trim();\n\n        // Find user with matching education email and token\n        const user = await User.findOne({\n            'education.college_email': normalizedEmail,\n            'education.v"}, {"index": 1856, "path": "server/controllers/authController2.js", "chunk": "wait User.findOne({\n            'education.college_email': normalizedEmail,\n            'education.verificationToken': token\n        });\n\n        if (!user) {\n            return res.status(404).json({\n                success: false,\n                error: 'Invalid verification link'\n            });\n        }\n\n        // Find the specific education entry to verify\n        const educationEntry = user.education.find(\n            edu =>\n                edu.college_email.toLowerCase().trim() === norm"}, {"index": 1857, "path": "server/controllers/authController2.js", "chunk": "r.education.find(\n            edu =>\n                edu.college_email.toLowerCase().trim() === normalizedEmail &&\n                edu.verificationToken === token\n        );\n\n        // Check token expiration\n        if (educationEntry.verificationTokenExpires < new Date()) {\n            return res.status(400).json({\n                success: false,\n                error: 'Verification link has expired'\n            });\n        }\n\n        // Check if already verified\n        if (educationEntry.isV"}, {"index": 1858, "path": "server/controllers/authController2.js", "chunk": "ired'\n            });\n        }\n\n        // Check if already verified\n        if (educationEntry.isVerified) {\n            return res.status(400).json({\n                success: false,\n                error: 'College email is already verified'\n            });\n        }\n\n        // Update the specific education entry\n        educationEntry.isVerified = true;\n        educationEntry.verificationToken = null;\n        educationEntry.verificationTokenExpires = null;\n        educationEntry.verifiedAt ="}, {"index": 1859, "path": "server/controllers/authController2.js", "chunk": " = null;\n        educationEntry.verificationTokenExpires = null;\n        educationEntry.verifiedAt = new Date();\n\n        // Save the updated user\n        await user.save();\n\n        // Redirect or respond\n        return res.send(`\n            <!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>Email Verified!</title>\n                <li"}, {"index": 1860, "path": "server/controllers/authController2.js", "chunk": "device-width, initial-scale=1.0\">\n                <title>Email Verified!</title>\n                <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap\" rel=\"stylesheet\">\n                <style>\n                    body, html {\n                        margin: 0;\n                        padding: 0;\n                        height: 100%;\n                        font-family: 'Inter', sans-serif;\n                        background: linear-gradient(135deg, #6366F1"}, {"index": 1861, "path": "server/controllers/authController2.js", "chunk": "ont-family: 'Inter', sans-serif;\n                        background: linear-gradient(135deg, #6366F1, #4F46E5);\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;\n                        overflow: hidden;\n                    }\n                    .container {\n                        background: white;\n                        border-radius: 20px;\n                        box-shadow: 0 20px 50px rgba(0,0,0,0.2);\n     "}, {"index": 1862, "path": "server/controllers/authController2.js", "chunk": "         border-radius: 20px;\n                        box-shadow: 0 20px 50px rgba(0,0,0,0.2);\n                        text-align: center;\n                        padding: 40px;\n                        max-width: 500px;\n                        position: relative;\n                        z-index: 10;\n                        transform: scale(0.9);\n                        opacity: 0;\n                        animation: popIn 0.6s ease-out forwards;\n                    }\n                    @keyframe"}, {"index": 1863, "path": "server/controllers/authController2.js", "chunk": "        animation: popIn 0.6s ease-out forwards;\n                    }\n                    @keyframes popIn {\n                        0% {\n                            transform: scale(0.6);\n                            opacity: 0;\n                        }\n                        100% {\n                            transform: scale(1);\n                            opacity: 1;\n                        }\n                    }\n                    .checkmark {\n                        width: 100px;\n     "}, {"index": 1864, "path": "server/controllers/authController2.js", "chunk": "}\n                    }\n                    .checkmark {\n                        width: 100px;\n                        height: 100px;\n                        border-radius: 50%;\n                        background: #4CAF50;\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;\n                        margin: 0 auto 20px;\n                        animation: pulse 1.5s infinite;\n                    }\n                    ."}, {"index": 1865, "path": "server/controllers/authController2.js", "chunk": "\n                        animation: pulse 1.5s infinite;\n                    }\n                    .checkmark svg {\n                        width: 50px;\n                        height: 50px;\n                        fill: white;\n                    }\n                    @keyframes pulse {\n                        0% { transform: scale(1); }\n                        50% { transform: scale(1.1); }\n                        100% { transform: scale(1); }\n                    }\n                    h1 {\n   "}, {"index": 1866, "path": "server/controllers/authController2.js", "chunk": "                    100% { transform: scale(1); }\n                    }\n                    h1 {\n                        color: #2D3748;\n                        margin-bottom: 15px;\n                        font-size: 2rem;\n                    }\n                    p {\n                        color: #4A5568;\n                        margin-bottom: 20px;\n                        line-height: 1.6;\n                    }\n                    .confetti-container {\n                        position: fixed;"}, {"index": 1867, "path": "server/controllers/authController2.js", "chunk": "                }\n                    .confetti-container {\n                        position: fixed;\n                        top: 0;\n                        left: 0;\n                        width: 100%;\n                        height: 100%;\n                        pointer-events: none;\n                        z-index: 1;\n                    }\n                    .confetti {\n                        width: 15px;\n                        height: 15px;\n                        background-color: #f1f1f"}, {"index": 1868, "path": "server/controllers/authController2.js", "chunk": " width: 15px;\n                        height: 15px;\n                        background-color: #f1f1f1;\n                        position: absolute;\n                        left: 50%;\n                        animation: fall 3s linear infinite;\n                        transform-origin: bottom;\n                    }\n                    @keyframes fall {\n                        to {\n                            transform: \n                                translateY(100vh) \n                            "}, {"index": 1869, "path": "server/controllers/authController2.js", "chunk": "         transform: \n                                translateY(100vh) \n                                rotate(360deg);\n                        }\n                    }\n                </style>\n            </head>\n            <body>\n                <div class=\"confetti-container\" id=\"confetti\"></div>\n                <div class=\"container\">\n                    <div class=\"checkmark\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <p"}, {"index": 1870, "path": "server/controllers/authController2.js", "chunk": "         <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n                            <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>\n                        </svg>\n                    </div>\n                    <h1>Email Verified!</h1>\n                    <p>Congratulations! Your college email has been successfully verified. You can now access all features of our platform.</p>\n                </div>\n        \n                <script>\n                    function createC"}, {"index": 1871, "path": "server/controllers/authController2.js", "chunk": "m.</p>\n                </div>\n        \n                <script>\n                    function createConfetti() {\n                        const container = document.getElementById('confetti');\n                        const colors = ['#6366F1', '#4F46E5', '#f1f1f1', '#4CAF50', '#FF6B6B'];\n                        \n                        for (let i = 0; i < 100; i++) {\n                            const confetti = document.createElement('div');\n                            confetti.classList.add('conf"}, {"index": 1872, "path": "server/controllers/authController2.js", "chunk": "t confetti = document.createElement('div');\n                            confetti.classList.add('confetti');\n                            \n                            // Randomize properties\n                            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];\n                            confetti.style.left = 55;\n                            confetti.style.animationDelay = 2;\n                            confetti.style.transform = rotate(150deg);\n           "}, {"index": 1873, "path": "server/controllers/authController2.js", "chunk": "imationDelay = 2;\n                            confetti.style.transform = rotate(150deg);\n                            \n                            container.appendChild(confetti);\n                        }\n                    }\n        \n                    // Create confetti when page loads\n                    createConfetti();\n                </script>\n            </body>\n            </html>\n        `);\n\n    } catch (error) {\n        console.error('Verification error:', error);\n        return re"}, {"index": 1874, "path": "server/controllers/authController2.js", "chunk": "   `);\n\n    } catch (error) {\n        console.error('Verification error:', error);\n        return res.status(500).json({\n            success: false,\n            error: 'Verification failed',\n            message: error.message\n        });\n    }\n};\n\nexport const login = async (req, res) => {\n    try {\n        const { email, password } = req.body;\n\n        let user = await User.findOne({ email });\n        console.log(user);\n\n        let role = 'user';\n\n        if (!user) {\n            user = await "}, {"index": 1875, "path": "server/controllers/authController2.js", "chunk": "      console.log(user);\n\n        let role = 'user';\n\n        if (!user) {\n            user = await College.findOne({ email });\n            role = 'college';\n        }\n\n        if (!user) {\n            return res.status(400).json({ message: 'Invalid credentials' });\n        }\n        console.log(user)\n        // const isValidPassword = await bcrypt.compare(password, user.password);\n        // if (!isValidPassword) {\n        //     return res.status(400).json({ message: 'Invalid credentials' });\n"}, {"index": 1876, "path": "server/controllers/authController2.js", "chunk": "!isValidPassword) {\n        //     return res.status(400).json({ message: 'Invalid credentials' });\n        // }\n\n        const token = jwt.sign(\n            {\n                id: user._id,\n                email: user.email,\n            },\n            process.env.JWT_SECRET,\n            { expiresIn: '24h' }\n        );\n\n        res.json({\n            message: 'Login successful',\n            token,\n            user\n        });\n    } catch (error) {\n        res.status(500).json({ message: 'Server e"}, {"index": 1877, "path": "server/controllers/authController2.js", "chunk": "            user\n        });\n    } catch (error) {\n        res.status(500).json({ message: 'Server error', error: error.message });\n        console.log(error);\n\n    }\n};"}, {"index": 1878, "path": "server/controllers/chatController.js", "chunk": "import Chat from '../models/chat.js';\nimport User from '../models/user.js';\nimport Group from '../models/group.js';  // Add this import\n\nconst ERROR_MESSAGES = {\n  CHAT_NOT_FOUND: 'Chat not found',\n  INVALID_PARTICIPANTS: 'Invalid participants',\n  UNAUTHORIZED: 'You are not authorized to access this chat',\n  SERVER_ERROR: 'Internal server error',\n};\n\nexport const getAllChats = async (req, res) => {\n  try {\n    const { email } = req.user;\n\n    const user = await User.findOne({ email });\n    if (!"}, {"index": 1879, "path": "server/controllers/chatController.js", "chunk": "{\n  try {\n    const { email } = req.user;\n\n    const user = await User.findOne({ email });\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: 'User not found',\n      });\n    }\n\n    if (!user.chats || user.chats.length === 0) {\n      return res.status(200).json({\n        success: true,\n        data: [],\n      });\n    }\n\n    const chatIds = user.chats.map((chat) => chat.chatId);\n    const otherParticipantsEmails = user.chats.map(\n      (chat) => chat.othe"}, {"index": 1880, "path": "server/controllers/chatController.js", "chunk": "chat) => chat.chatId);\n    const otherParticipantsEmails = user.chats.map(\n      (chat) => chat.otherParticipant\n    );\n\n    const [chatData, regularParticipants, groupParticipants] = await Promise.all([\n      Chat.find({ _id: { $in: chatIds } })\n        .select('lastMessage lastMessageTimestamp participants chatType')\n        .lean(),\n      User.find({ email: { $in: otherParticipantsEmails } })\n        .select('email fullName profilePhoto')\n        .lean(),\n      Group.find({ email: { $in: othe"}, {"index": 1881, "path": "server/controllers/chatController.js", "chunk": "       .select('email fullName profilePhoto')\n        .lean(),\n      Group.find({ email: { $in: otherParticipantsEmails } })\n        .select('email fullName profilePhoto')\n        .lean()\n    ]);\n\n    if (!chatData.length) {\n      return res.status(200).json({\n        success: true,\n        data: [],\n      });\n    }\n\n    const result = chatData.map((chat) => {\n      let otherParticipant;\n      if (chat.chatType) {\n        // For group chats, use first participant\n        const groupEmail = chat."}, {"index": 1882, "path": "server/controllers/chatController.js", "chunk": "(chat.chatType) {\n        // For group chats, use first participant\n        const groupEmail = chat.participants[0];\n        otherParticipant = groupParticipants.find(p => p.email === groupEmail);\n      } else {\n        // For regular chats, find the other participant\n        const otherEmail = chat.participants.find(email => email !== req.user.email);\n        otherParticipant = regularParticipants.find(p => p.email === otherEmail);\n      }\n\n      otherParticipant = otherParticipant || {\n       "}, {"index": 1883, "path": "server/controllers/chatController.js", "chunk": "s.find(p => p.email === otherEmail);\n      }\n\n      otherParticipant = otherParticipant || {\n        fullName: chat.chatType ? 'Unknown Group' : 'Unknown User',\n        profilePhoto: null,\n      };\n\n      return {\n        chatId: chat._id,\n        chatType: chat.chatType,\n        otherParticipantName: otherParticipant.fullName,\n        otherParticipantEmail: otherParticipant.email,\n        profilePhoto: otherParticipant.profilePhoto,\n        lastMessage: chat.lastMessage || '',\n        lastMessa"}, {"index": 1884, "path": "server/controllers/chatController.js", "chunk": "Photo: otherParticipant.profilePhoto,\n        lastMessage: chat.lastMessage || '',\n        lastMessageTimestamp: chat.lastMessageTimestamp || new Date(0),\n      };\n    });\n\n    result.sort(\n      (a, b) => (b.lastMessageTimestamp || 0) - (a.lastMessageTimestamp || 0)\n    );\n\n    res.status(200).json({\n      success: true,\n      data: result,\n    });\n  } catch (error) {\n    console.error('getAllChats error:', error);\n    res.status(500).json({\n      success: false,\n      message: ERROR_MESSAGES.S"}, {"index": 1885, "path": "server/controllers/chatController.js", "chunk": "ts error:', error);\n    res.status(500).json({\n      success: false,\n      message: ERROR_MESSAGES.SERVER_ERROR,\n      error: error.message,\n    });\n  }\n};\n\nexport const getChatMessages = async (req, res) => {\n  try {\n    const { chatId } = req.params;\n    const { email } = req.user;\n    const { page = 1, limit = 50 } = req.query;\n\n    const chat = await Chat.findById(chatId).lean();\n\n    if (!chat) {\n      return res.status(404).json({\n        success: false,\n        message: ERROR_MESSAGES.CHA"}, {"index": 1886, "path": "server/controllers/chatController.js", "chunk": "t) {\n      return res.status(404).json({\n        success: false,\n        message: ERROR_MESSAGES.CHAT_NOT_FOUND,\n      });\n    }\n\n    if (!chat.participants.includes(email)) {\n      return res.status(403).json({\n        success: false,\n        message: ERROR_MESSAGES.UNAUTHORIZED,\n      });\n    }\n\n    // Get other participant's details based on chat type\n    const otherParticipantEmail = chat.participants.find((p) => p !== email);\n    const ParticipantModel = chat.chatType ? Group : User;\n    co"}, {"index": 1887, "path": "server/controllers/chatController.js", "chunk": "icipants.find((p) => p !== email);\n    const ParticipantModel = chat.chatType ? Group : User;\n    const otherParticipant = await ParticipantModel.findOne({\n      email: otherParticipantEmail,\n    })\n      .select('fullName profilePhoto email')\n      .lean();\n\n    const totalMessages = chat.messages.length;\n    const endIndex = totalMessages - (Number(page) - 1) * Number(limit);\n    const startIndex = Math.max(0, endIndex - Number(limit));\n    const paginatedMessages = chat.messages.slice(startIn"}, {"index": 1888, "path": "server/controllers/chatController.js", "chunk": "x = Math.max(0, endIndex - Number(limit));\n    const paginatedMessages = chat.messages.slice(startIndex, endIndex);\n    const totalPages = Math.ceil(totalMessages / Number(limit));\n\n    // Get sender details for messages\n    const senderEmails = [...new Set(paginatedMessages.map(msg => msg.sender))];\n    const senders = await User.find({ email: { $in: senderEmails } })\n      .select('email fullName')\n      .lean();\n\n    const senderMap = senders.reduce((acc, sender) => {\n      acc[sender.email] "}, {"index": 1889, "path": "server/controllers/chatController.js", "chunk": "e')\n      .lean();\n\n    const senderMap = senders.reduce((acc, sender) => {\n      acc[sender.email] = sender.fullName;\n      return acc;\n    }, {});\n\n    paginatedMessages.forEach(msg => {\n      msg.senderName = senderMap[msg.sender] || 'Unknown User';\n    });\n\n    res.status(200).json({\n      success: true,\n      data: {\n        messages: paginatedMessages,\n        participant: otherParticipant || {\n          fullName: chat.chatType ? 'Unknown Group' : 'Unknown User',\n          email: otherPart"}, {"index": 1890, "path": "server/controllers/chatController.js", "chunk": "| {\n          fullName: chat.chatType ? 'Unknown Group' : 'Unknown User',\n          email: otherParticipantEmail,\n          profilePhoto: null,\n        },\n        chatType: chat.chatType,\n        pagination: {\n          currentPage: Number(page),\n          totalPages,\n          totalMessages,\n          hasMore: startIndex > 0,\n        },\n      },\n    });\n  } catch (error) {\n    console.error('getChatMessages error:', error);\n    res.status(500).json({\n      success: false,\n      message: ERROR_M"}, {"index": 1891, "path": "server/controllers/chatController.js", "chunk": "hatMessages error:', error);\n    res.status(500).json({\n      success: false,\n      message: ERROR_MESSAGES.SERVER_ERROR,\n      error: error.message,\n    });\n  }\n};\n\nexport const createNewChat = async (req, res) => {\n  try {\n    const { participantEmail } = req.body;\n    const { email } = req.user;\n\n    // Prevent self-chat\n    if (participantEmail === email) {\n      return res.status(400).json({\n        success: false,\n        message: 'Cannot create chat with yourself',\n      });\n    }\n\n    //"}, {"index": 1892, "path": "server/controllers/chatController.js", "chunk": "        success: false,\n        message: 'Cannot create chat with yourself',\n      });\n    }\n\n    // Check if participant exists\n    const participant = await User.findOne({ email: participantEmail });\n    if (!participant) {\n      return res.status(400).json({\n        success: false,\n        message: ERROR_MESSAGES.INVALID_PARTICIPANTS,\n      });\n    }\n\n    // Check if chat already exists\n    const existingChat = await Chat.findOne({\n      participants: { $all: [email, participantEmail], $size:"}, {"index": 1893, "path": "server/controllers/chatController.js", "chunk": "st existingChat = await Chat.findOne({\n      participants: { $all: [email, participantEmail], $size: 2 },\n    });\n\n    if (existingChat) {\n      return res.status(200).json({\n        success: true,\n        data: existingChat,\n      });\n    }\n\n    const newChat = new Chat({\n      participants: [email, participantEmail],\n      messages: [],\n      lastMessage: '',\n      lastMessageTimestamp: new Date(),\n    });\n\n    const savedChat = await newChat.save();\n\n    // Add chat reference to both users\n  "}, {"index": 1894, "path": "server/controllers/chatController.js", "chunk": "(),\n    });\n\n    const savedChat = await newChat.save();\n\n    // Add chat reference to both users\n    await Promise.all([\n      User.findOneAndUpdate(\n        { email },\n        {\n          $push: {\n            chats: {\n              chatId: savedChat._id,\n              otherParticipant: participantEmail,\n            },\n          },\n        }\n      ),\n      User.findOneAndUpdate(\n        { email: participantEmail },\n        { $push: { chats: { chatId: savedChat._id, otherParticipant: email } } }"}, {"index": 1895, "path": "server/controllers/chatController.js", "chunk": "participantEmail },\n        { $push: { chats: { chatId: savedChat._id, otherParticipant: email } } }\n      ),\n    ]);\n\n    res.status(201).json({\n      success: true,\n      data: savedChat,\n    });\n  } catch (error) {\n    console.error('createNewChat error:', error);\n    res.status(500).json({\n      success: false,\n      message: ERROR_MESSAGES.SERVER_ERROR,\n      error: error.message,\n    });\n  }\n};\n"}, {"index": 1896, "path": "server/controllers/chatController.js", "chunk": "\n};\n"}, {"index": 1897, "path": "server/controllers/collegeController.js", "chunk": "import { College, User } from '../models/index.js';\n\nexport const getCollege = async (req, res) => {\n  try {\n    const { college_id } = req.params;\n    const college = await College.findById(college_id);\n    if (!college) return res.status(404).json({ message: 'College not found' });\n    res.status(200).json(college);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\nexport const updateCollege = async (req, res) => {\n  try {\n    const { college_id } = req.params;\n\n "}, {"index": 1898, "path": "server/controllers/collegeController.js", "chunk": "export const updateCollege = async (req, res) => {\n  try {\n    const { college_id } = req.params;\n\n    const allowedUpdates = [\n      'email',\n      'logo',\n      'address',\n      'website',\n      'contactNumber',\n      'accreditation',\n      'ranking',\n      'establishedYear',\n      'coursesOffered',\n      'missionStatement',\n      'visionStatement',\n      'tagline',\n      'banners',\n    ];\n\n    const updates = Object.keys(req.body)\n      .filter((key) => allowedUpdates.includes(key))\n      .re"}, {"index": 1899, "path": "server/controllers/collegeController.js", "chunk": "const updates = Object.keys(req.body)\n      .filter((key) => allowedUpdates.includes(key))\n      .reduce((obj, key) => {\n        obj[key] = req.body[key];\n        return obj;\n      }, {});\n\n    if (Object.keys(updates).length === 0) {\n      return res\n        .status(400)\n        .json({ message: 'No valid update fields provided' });\n    }\n\n    const college = await College.findByIdAndUpdate(college_id, { $set: updates });\n\n    if (!college) {\n      return res.status(404).json({ message: 'Colleg"}, {"index": 1900, "path": "server/controllers/collegeController.js", "chunk": "ge_id, { $set: updates });\n\n    if (!college) {\n      return res.status(404).json({ message: 'College not found' });\n    }\n\n    res.json({\n      message: 'College updated successfully',\n      collegeData,\n    });\n  } catch (error) {\n    if (error.name === 'ValidationError') {\n      return res.status(400).json({ message: error.message });\n    }\n    res.status(500).json({ message: 'Server error', error: error.message });\n  }\n};\n\nexport const getDepartments = async (req, res) => {\n  try {\n    const"}, {"index": 1901, "path": "server/controllers/collegeController.js", "chunk": "ror: error.message });\n  }\n};\n\nexport const getDepartments = async (req, res) => {\n  try {\n    const { college_id } = req.params;\n\n    const users = await User.find();\n\n    const departments = new Set();\n    users.forEach((user) => {\n      user.education\n        .filter((edu) => edu.college_id.toString() === college_id)\n        .forEach((edu) => departments.add(edu.department));\n    });\n\n    res.status(200).json(Array.from(departments));\n  } catch (error) {\n    res.status(500).json({ error: 'Fai"}, {"index": 1902, "path": "server/controllers/collegeController.js", "chunk": "tatus(200).json(Array.from(departments));\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch departments' });\n  }\n};\n"}, {"index": 1903, "path": "server/controllers/connectionController.js", "chunk": "import { User } from '../models/index.js';\n\nexport const sendConnectionRequest = async (req, res) => {\n  try {\n    const { targetUserId } = req.body;\n    const senderId = req.user.id;\n\n    const [sender, receiver] = await Promise.all([\n      User.findById(senderId),\n      User.findById(targetUserId),\n    ]);\n\n    if (!sender || !receiver) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    if (\n      sender.sentRequests.some((req) => req._id.toString() === targetUserId"}, {"index": 1904, "path": "server/controllers/connectionController.js", "chunk": "und' });\n    }\n\n    if (\n      sender.sentRequests.some((req) => req._id.toString() === targetUserId)\n    ) {\n      return res\n        .status(400)\n        .json({ message: 'Connection request already sent' });\n    }\n\n    if (\n      sender.connections.some((conn) => conn._id.toString() === targetUserId)\n    ) {\n      return res.status(400).json({ message: 'Users are already connected' });\n    }\n\n    await Promise.all([\n      User.findByIdAndUpdate(senderId, {\n        $addToSet: { sentRequests: t"}, {"index": 1905, "path": "server/controllers/connectionController.js", "chunk": "   await Promise.all([\n      User.findByIdAndUpdate(senderId, {\n        $addToSet: { sentRequests: targetUserId },\n      }),\n      User.findByIdAndUpdate(targetUserId, {\n        $addToSet: {\n          receivedRequests: {\n            _id: senderId,\n            fullName: sender.fullName,\n            bio: sender.bio,\n            profilePhoto: sender.profilePhoto || null,\n          },\n          notifications: `${sender.fullName} sent you a connection request`,\n        },\n      }),\n    ]);\n    const "}, {"index": 1906, "path": "server/controllers/connectionController.js", "chunk": "cations: `${sender.fullName} sent you a connection request`,\n        },\n      }),\n    ]);\n    const updatedSender = await User.findById(senderId);\n    res.json({\n      message: 'Connection request sent successfully',\n      user: updatedSender,\n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Server error', error: error.message });\n  }\n};\n\nexport const acceptConnectionRequest = async (req, res) => {\n  try {\n    const { requesterId } = req.body;\n    const accepterId = req.user.id;\n"}, {"index": 1907, "path": "server/controllers/connectionController.js", "chunk": "c (req, res) => {\n  try {\n    const { requesterId } = req.body;\n    const accepterId = req.user.id;\n\n    const [requester, accepter] = await Promise.all([\n      User.findById(requesterId),\n      User.findById(accepterId),\n    ]);\n\n    if (!requester || !accepter) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    // Check if the request exists in receivedRequests\n    if (\n      !accepter.receivedRequests.some(\n        (req) => req._id.toString() === requesterId\n      "}, {"index": 1908, "path": "server/controllers/connectionController.js", "chunk": " (\n      !accepter.receivedRequests.some(\n        (req) => req._id.toString() === requesterId\n      )\n    ) {\n      return res.status(400).json({ message: 'No pending request found' });\n    }\n\n    await Promise.all([\n      // Update the accepter's data\n      User.findByIdAndUpdate(accepterId, {\n        $pull: { receivedRequests: { _id: requesterId } }, // Remove the request\n        $addToSet: {\n          connections: {\n            _id: requesterId,\n            fullName: requester.fullName,\n     "}, {"index": 1909, "path": "server/controllers/connectionController.js", "chunk": "        connections: {\n            _id: requesterId,\n            fullName: requester.fullName,\n            bio: requester.bio,\n            profilePhoto: requester.profilePhoto || null,\n          },\n          notifications: `You accepted ${requester.fullName}'s connection request`,\n        },\n      }),\n\n      // Update the requester's data\n      User.findByIdAndUpdate(\n        requesterId,\n        {\n          $pull: { sentRequests: accepterId }, // Remove the request from sentRequests\n          $"}, {"index": 1910, "path": "server/controllers/connectionController.js", "chunk": "{\n          $pull: { sentRequests: accepterId }, // Remove the request from sentRequests\n          $addToSet: {\n            connections: {\n              _id: accepterId,\n              fullName: accepter.fullName,\n              bio: accepter.bio,\n              profilePhoto: accepter.profilePhoto || null,\n            },\n            notifications: `${accepter.fullName} accepted your connection request`,\n          },\n        },\n        { new: true }\n      ),\n    ]);\n\n    const updatedAccepter = awai"}, {"index": 1911, "path": "server/controllers/connectionController.js", "chunk": "t`,\n          },\n        },\n        { new: true }\n      ),\n    ]);\n\n    const updatedAccepter = await User.findById(accepterId);\n    res.json({ message: 'Connection request accepted', user: updatedAccepter });\n  } catch (error) {\n    res.status(500).json({ message: 'Server error', error: error.message });\n  }\n};\n\nexport const rejectConnectionRequest = async (req, res) => {\n  try {\n    const { requesterId } = req.body;\n    const rejecterId = req.user.id;\n\n    const [requester, rejecter] = await P"}, {"index": 1912, "path": "server/controllers/connectionController.js", "chunk": "esterId } = req.body;\n    const rejecterId = req.user.id;\n\n    const [requester, rejecter] = await Promise.all([\n      User.findById(requesterId),\n      User.findById(rejecterId),\n    ]);\n\n    if (!requester || !rejecter) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    // Check if the request exists in receivedRequests\n    if (\n      !rejecter.receivedRequests.some(\n        (req) => req._id.toString() === requesterId\n      )\n    ) {\n      return res.status(400).jso"}, {"index": 1913, "path": "server/controllers/connectionController.js", "chunk": "        (req) => req._id.toString() === requesterId\n      )\n    ) {\n      return res.status(400).json({ message: 'No pending request found' });\n    }\n\n    await Promise.all([\n      // Remove the request from rejecter's receivedRequests\n      User.findByIdAndUpdate(rejecterId, {\n        $pull: { receivedRequests: { _id: requesterId } },\n      }),\n\n      // Remove the request from requester's sentRequests and notify\n      User.findByIdAndUpdate(\n        requesterId,\n        {\n          $pull: { se"}, {"index": 1914, "path": "server/controllers/connectionController.js", "chunk": "quests and notify\n      User.findByIdAndUpdate(\n        requesterId,\n        {\n          $pull: { sentRequests: rejecterId },\n          $addToSet: {\n            notifications: `${rejecter.fullName} declined your connection request`,\n          },\n        },\n        { new: true }\n      ),\n    ]);\n    const updatedRejecter = await User.findById(rejecterId);\n    res.json({ message: 'Connection request rejected', user: updatedRejecter });\n  } catch (error) {\n    res.status(500).json({ message: 'Serve"}, {"index": 1915, "path": "server/controllers/connectionController.js", "chunk": " rejected', user: updatedRejecter });\n  } catch (error) {\n    res.status(500).json({ message: 'Server error', error: error.message });\n  }\n};\n\nexport const getConnections = async (req, res) => {\n  try {\n    const userId = req.user.id;\n\n    const user = await User.findById(userId)\n      .populate('connections', 'fullName email profilePhoto')\n      .populate('sentRequests', 'fullName email profilePhoto')\n      .populate('receivedRequests', 'fullName email profilePhoto');\n\n    if (!user) {\n      re"}, {"index": 1916, "path": "server/controllers/connectionController.js", "chunk": "oto')\n      .populate('receivedRequests', 'fullName email profilePhoto');\n\n    if (!user) {\n      return res.status(404).json({ message: 'User not found' });\n    }\n\n    res.json({\n      connections: user.connections,\n      sentRequests: user.sentRequests,\n      receivedRequests: user.receivedRequests,\n    });\n  } catch (error) {\n    res.status(500).json({ message: 'Server error', error: error.message });\n  }\n};\n"}, {"index": 1917, "path": "server/controllers/connectionController.js", "chunk": "age });\n  }\n};\n"}, {"index": 1918, "path": "server/controllers/donationController.js", "chunk": "import { DonationCampaign, User, Transaction } from '../models/index.js';\nimport mongoose from 'mongoose';\n\nexport const getAllCollegeDonationCampaigns = async (req, res) => {\n  try {\n    const { college_id } = req.params;\n    if (!college_id) {\n      return res.status(400).json({ error: 'College ID is required' });\n    }\n\n    // Fetch the donation campaigns by the provided college_id\n    const campaigns = await DonationCampaign.find({ college_id });\n\n    // If no campaigns are found, return a m"}, {"index": 1919, "path": "server/controllers/donationController.js", "chunk": "mpaigns = await DonationCampaign.find({ college_id });\n\n    // If no campaigns are found, return a message\n    if (campaigns.length === 0) {\n      return res\n        .status(404)\n        .json({ message: 'No donation campaigns found for this college' });\n    }\n\n    // Return the campaigns if found\n    res.status(200).json(campaigns);\n  } catch (error) {\n    console.error(error); // Log the error for debugging purposes\n    res.status(500).json({ error: 'Failed to fetch donation campaigns' });\n  }"}, {"index": 1920, "path": "server/controllers/donationController.js", "chunk": "or debugging purposes\n    res.status(500).json({ error: 'Failed to fetch donation campaigns' });\n  }\n};\n\nexport const getDonationCampaignById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const campaign = await DonationCampaign.findOne({ id });\n    if (!campaign) return res.status(404).json({ error: 'Campaign not found' });\n    res.status(200).json(campaign);\n  } catch (error) {\n    res.status(400).json({ error: 'Invalid campaign ID' });\n  }\n};\n\nexport const addDonationCampa"}, {"index": 1921, "path": "server/controllers/donationController.js", "chunk": " {\n    res.status(400).json({ error: 'Invalid campaign ID' });\n  }\n};\n\nexport const addDonationCampaign = async (req, res) => {\n  try {\n    const { college_id } = req.params;\n    const newCampaign = new DonationCampaign(req.body);\n    newCampaign.college_id = college_id;\n    const savedCampaign = await newCampaign.save();\n    res.status(201).json(savedCampaign);\n  } catch (error) {\n    res.status(400).json({\n      error: 'Failed to create donation campaign',\n      details: error.message,\n    });"}, {"index": 1922, "path": "server/controllers/donationController.js", "chunk": "400).json({\n      error: 'Failed to create donation campaign',\n      details: error.message,\n    });\n  }\n};\n\nexport const deleteDonationCampaign = async (req, res) => {\n  try {\n    const { college_id } = req.params;\n    const deletedCampaign = await DonationCampaign.findOneAndDelete({\n      college_id,\n    });\n    if (!deletedCampaign)\n      return res.status(404).json({ error: 'Campaign not found' });\n    res.status(200).json({ message: 'Campaign deleted successfully' });\n  } catch (error) {\n  "}, {"index": 1923, "path": "server/controllers/donationController.js", "chunk": "' });\n    res.status(200).json({ message: 'Campaign deleted successfully' });\n  } catch (error) {\n    res\n      .status(400)\n      .json({ error: 'Invalid campaign ID or failed to delete campaign' });\n  }\n};\n\nexport const donateToCampaign = async (req, res) => {\n  const session = await mongoose.startSession();\n  session.startTransaction();\n\n  try {\n    const { id } = req.params;\n    const { userId, amount, transactionMethod } = req.body;\n\n    const user = await User.findById(userId).session(sess"}, {"index": 1924, "path": "server/controllers/donationController.js", "chunk": ", amount, transactionMethod } = req.body;\n\n    const user = await User.findById(userId).session(session);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const campaign = await DonationCampaign.findById(id).session(session);\n    if (!campaign) {\n      throw new Error('Campaign not found');\n    }\n\n    const transaction = new Transaction({\n      user: userId,\n      amount,\n      transactionMethod,\n    });\n    await transaction.save({ session });\n\n    campaign.raised += amount;"}, {"index": 1925, "path": "server/controllers/donationController.js", "chunk": " transactionMethod,\n    });\n    await transaction.save({ session });\n\n    campaign.raised += amount;\n    campaign.donors += 1;\n    campaign.transactions.push(transaction._id);\n    await campaign.save({ session });\n\n    user.donationHistory.push({\n      transactionId: transaction._id,\n      campaignId: campaign._id,\n    });\n    await user.save({ session });\n\n    await session.commitTransaction();\n\n    res.status(200).json({\n      message: 'Donation successful',\n      transaction: transaction,\n   "}, {"index": 1926, "path": "server/controllers/donationController.js", "chunk": "    res.status(200).json({\n      message: 'Donation successful',\n      transaction: transaction,\n    });\n  } catch (error) {\n    await session.abortTransaction();\n    res.status(400).json({\n      error: 'Failed to process donation',\n      details: error.message,\n    });\n    console.log(error);\n  } finally {\n    session.endSession();\n  }\n};\n\nexport const getDonors = async (req, res) => {\n  try {\n    const { id } = req.params;\n\n    const campaign = await DonationCampaign.findById(id).populate({\n  "}, {"index": 1927, "path": "server/controllers/donationController.js", "chunk": "  const { id } = req.params;\n\n    const campaign = await DonationCampaign.findById(id).populate({\n      path: 'transactions',\n      select: 'amount transactionDate transactionMethod',\n      populate: {\n        path: 'user',\n        select: '_id fullName profilePhoto',\n      },\n    });\n    res.status(200).json(campaign.transactions);\n  } catch (error) {\n    res.status(400).json({\n      error: 'Failed to get donor',\n      details: error.message,\n    });\n  }\n};\n"}, {"index": 1928, "path": "server/controllers/donationController.js", "chunk": "ed to get donor',\n      details: error.message,\n    });\n  }\n};\n"}, {"index": 1929, "path": "server/controllers/eventController.js", "chunk": "import { Event, User } from '../models/index.js';\nimport QRCode from 'qrcode';\nimport nodemailer from 'nodemailer';\nimport createEmailTemplate from '../services/mailServiceEvents.js';\n\nexport const getAllEvents = async (req, res) => {\n  try {\n    const events = await Event.find();\n\n    res.status(200).json(events);\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    res.status(500).json({ error: 'Failed to fetch events' });\n  }\n};\n\nexport const getAllCollegeEvents = async"}, {"index": 1930, "path": "server/controllers/eventController.js", "chunk": "tus(500).json({ error: 'Failed to fetch events' });\n  }\n};\n\nexport const getAllCollegeEvents = async (req, res) => {\n  try {\n    const { college_id } = req.params;\n\n    const events = await Event.find({ college_id }).populate({\n      path: 'registered',\n      select:\n        '_id fullName profilePhoto email phone city state country location education',\n    });\n\n    res.status(200).json(events);\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    res.status(500).json({ err"}, {"index": 1931, "path": "server/controllers/eventController.js", "chunk": "} catch (error) {\n    console.error('Error fetching events:', error);\n    res.status(500).json({ error: 'Failed to fetch events' });\n  }\n};\n\nexport const getAllUserEvents = async (req, res) => {\n  try {\n    const { userId, college_id } = req.params;\n\n    const events = await Event.find({ college_id }).populate({\n      path: 'registered',\n      select: '_id fullName profilePhoto email',\n    });\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ err"}, {"index": 1932, "path": "server/controllers/eventController.js", "chunk": "  const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ error: 'User not found' });\n    }\n\n    let eligibleEvents = events.filter((event) => {\n      return user.education.some((edu) => {\n        const isValidDepartment = event.department.includes(edu.department);\n        const isValidYear =\n          edu.graduationYear >= event.allowedRange.from &&\n          edu.graduationYear <= event.allowedRange.to;\n        return isValidDepartment && isValidYear;\n    "}, {"index": 1933, "path": "server/controllers/eventController.js", "chunk": "  edu.graduationYear <= event.allowedRange.to;\n        return isValidDepartment && isValidYear;\n      });\n    });\n\n    eligibleEvents = eligibleEvents.map((event) => ({\n      ...event.toObject(),\n      isRegistered: event.registered.some(\n        (registeredUser) => registeredUser._id.toString() === id\n      ),\n    }));\n\n    res.status(200).json(eligibleEvents);\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    res.status(500).json({ error: 'Failed to fetch events' });\n"}, {"index": 1934, "path": "server/controllers/eventController.js", "chunk": "or('Error fetching events:', error);\n    res.status(500).json({ error: 'Failed to fetch events' });\n  }\n};\n\nexport const addEvent = async (req, res) => {\n  try {\n    const { college_id } = req.params;\n    const newEvent = new Event(req.body);\n    newEvent.college_id = college_id;\n    const savedEvent = await newEvent.save();\n    res.status(201).json(savedEvent);\n  } catch (error) {\n    res\n      .status(400)\n      .json({ error: 'Failed to create event', details: error.message });\n  }\n};\n\nexport"}, {"index": 1935, "path": "server/controllers/eventController.js", "chunk": "status(400)\n      .json({ error: 'Failed to create event', details: error.message });\n  }\n};\n\nexport const deleteEvent = async (req, res) => {\n  try {\n    const { event_id } = req.params;\n    const deletedEvent = await Event.findOneAndDelete({ id: event_id });\n    if (!deletedEvent)\n      return res.status(404).json({ error: 'Event not found' });\n    res.status(200).json({ message: 'Event deleted successfully' });\n  } catch (error) {\n    res\n      .status(400)\n      .json({ error: 'Invalid event"}, {"index": 1936, "path": "server/controllers/eventController.js", "chunk": "successfully' });\n  } catch (error) {\n    res\n      .status(400)\n      .json({ error: 'Invalid event ID or failed to delete event' });\n  }\n};\n\nexport const registerForEvent = async (req, res) => {\n  try {\n    const { event_id, userId } = req.params;\n\n    const event = await Event.findById(event_id);\n    const user = await User.findById(userId);\n\n    if (!event) return res.status(404).json({ error: 'Event not found' });\n\n    if (event.registered.includes(userId))\n      return res.status(400).json"}, {"index": 1937, "path": "server/controllers/eventController.js", "chunk": " 'Event not found' });\n\n    if (event.registered.includes(userId))\n      return res.status(400).json({ error: 'Already registered for event' });\n\n    event.registered.push(userId);\n    user.eventsRegistered.push(event_id);\n    await event.save();\n    await user.save();\n\n    // Generate QR code\n    const qrData = JSON.stringify({\n      eventId: event._id,\n      userId,\n      registrationTime: new Date().toISOString(),\n    });\n\n    const qrCodeDataUrl = await QRCode.toDataURL(qrData);\n\n    const t"}, {"index": 1938, "path": "server/controllers/eventController.js", "chunk": "ate().toISOString(),\n    });\n\n    const qrCodeDataUrl = await QRCode.toDataURL(qrData);\n\n    const transporter = nodemailer.createTransport({\n      service: 'Gmail',\n      auth: {\n        user: process.env.EMAIL_USER,\n        pass: process.env.APP_PASSWORD,\n      },\n    });\n\n    await transporter.sendMail({\n      from: process.env.EMAIL_FROM,\n      to: user.email,\n      subject: `Registration Confirmed: ${event.title}`,\n      html: createEmailTemplate(user, event, qrCodeDataUrl),\n    });\n\n    re"}, {"index": 1939, "path": "server/controllers/eventController.js", "chunk": "irmed: ${event.title}`,\n      html: createEmailTemplate(user, event, qrCodeDataUrl),\n    });\n\n    res\n      .status(200)\n      .json({ message: 'Registered successfully and confirmation email sent' });\n  } catch (error) {\n    console.error('Registration error:', error);\n    res.status(400).json({ error: 'Failed to register for event' });\n  }\n};\n\nexport const deleteParticipant = async (req, res) => {\n  const { event_id, userId } = req.params;\n\n  const event = await Event.findById(event_id);\n  con"}, {"index": 1940, "path": "server/controllers/eventController.js", "chunk": " {\n  const { event_id, userId } = req.params;\n\n  const event = await Event.findById(event_id);\n  const user = await User.findById(userId);\n\n  event.registered = event.registered.filter((id) => id.toString() !== userId);\n  user.eventsRegistered = user.eventsRegistered.filter(\n    (eventId) => eventId.toString() !== event_id\n  );\n\n  await event.save();\n  await user.save();\n\n  res.status(200).json({ message: 'Participant removed successfully' });\n};\n\nexport const feedbackForEvent = async (req, res)"}, {"index": 1941, "path": "server/controllers/eventController.js", "chunk": "message: 'Participant removed successfully' });\n};\n\nexport const feedbackForEvent = async (req, res) => {\n  const { event_id, userId } = req.params;\n  const { feedback } = req.body;\n\n  const event = await Event.findById(event_id);\n  event.feedback.push({ user: userId, feedback });\n  await event.save();\n\n  res.status(200).json({ message: 'Participant removed successfully' });\n};\n"}, {"index": 1942, "path": "server/controllers/groupController.js", "chunk": "import { User, Group, Chat } from '../models/index.js';\n\nexport const createNewGroup = async (req, res) => {\n  try {\n    const { groupName, groupEmail, profilePhoto } = req.body;\n\n    const group = new Group({\n      fullName: groupName,\n      email: groupEmail,\n      profilePhoto,\n    });\n\n    const savedGroup = await group.save();\n\n    const users = await User.find();\n    const participantEmails = users.map((user) => user.email);\n\n    const newChat = new Chat({\n      participants: [groupEmail, "}, {"index": 1943, "path": "server/controllers/groupController.js", "chunk": "= users.map((user) => user.email);\n\n    const newChat = new Chat({\n      participants: [groupEmail, ...participantEmails],\n      chatType: true,\n      messages: [],\n      lastMessage: '',\n      lastMessageTimestamp: new Date(),\n    });\n\n    const savedChat = await newChat.save();\n\n    await User.updateMany(\n      {},\n      {\n        $push: {\n          chats: {\n            chatId: savedChat._id,\n            chatType: true,\n            otherParticipant: groupEmail,\n          },\n        },\n      }\n"}, {"index": 1944, "path": "server/controllers/groupController.js", "chunk": "          chatType: true,\n            otherParticipant: groupEmail,\n          },\n        },\n      }\n    );\n\n    res.status(201).json({\n      success: true,\n      data: savedChat,\n    });\n  } catch (error) {\n    console.error('createNewChat error:', error);\n    res.status(500).json({\n      success: false,\n      message: ERROR_MESSAGES.SERVER_ERROR,\n      error: error.message,\n    });\n  }\n};\n"}, {"index": 1945, "path": "server/controllers/jobController.js", "chunk": "import { Job, User } from '../models/index.js';\n\nexport const getAllCollegeJobs = async (req, res) => {\n  try {\n    const { college_id } = req.params;\n\n    if (!college_id) {\n      return res.status(400).json({ error: 'College id is required' });\n    }\n\n    const jobs = await Job.find({ college_id })\n      .populate('college_id')\n      .populate('postedBy');\n\n    if (!jobs || jobs.length === 0) {\n      return res\n        .status(404)\n        .json({ message: 'No jobs found for the provided colle"}, {"index": 1946, "path": "server/controllers/jobController.js", "chunk": "      return res\n        .status(404)\n        .json({ message: 'No jobs found for the provided college_id' });\n    }\n\n    res.status(200).json(jobs);\n  } catch (error) {\n    console.error('Error fetching jobs:', error);\n    res.status(500).json({ error: 'Failed to fetch jobs' });\n  }\n};\n\nexport const getJobById = async (req, res) => {\n  try {\n    const { job_id } = req.params;\n    const job = await Job.findOne({ id: job_id });\n    if (!job) return res.status(404).json({ error: 'Job not found' })"}, {"index": 1947, "path": "server/controllers/jobController.js", "chunk": "t Job.findOne({ id: job_id });\n    if (!job) return res.status(404).json({ error: 'Job not found' });\n    res.status(200).json(job);\n  } catch (error) {\n    res.status(400).json({ error: 'Invalid job ID' });\n  }\n};\n\nexport const addJob = async (req, res) => {\n  try {\n    const { college_id, userId } = req.params;\n    const user = await User.findById(userId);\n    console.log(user);\n\n    if (!user) return res.status(404).json({ error: 'User not found' });\n\n    const newJob = new Job(req.body);\n   "}, {"index": 1948, "path": "server/controllers/jobController.js", "chunk": "return res.status(404).json({ error: 'User not found' });\n\n    const newJob = new Job(req.body);\n    newJob.postedBy = user._id;\n    user.jobsPosted.push(newJob._id);\n    newJob.college_id = college_id;\n    const savedJob = await newJob.save();\n\n    res.status(201).json(savedJob);\n  } catch (error) {\n    res\n      .status(400)\n      .json({ error: 'Failed to create job', details: error.message });\n    console.log(error);\n  }\n};\n\nexport const deleteJob = async (req, res) => {\n  try {\n    const { "}, {"index": 1949, "path": "server/controllers/jobController.js", "chunk": "\n    console.log(error);\n  }\n};\n\nexport const deleteJob = async (req, res) => {\n  try {\n    const { job_id } = req.params;\n    const deletedJob = await Job.findByIdAndDelete(job_id);\n\n    if (!deletedJob) return res.status(404).json({ error: 'Job not found' });\n\n    await User.updateMany({ jobsApplied: job_id }, { $pull: { jobsApplied: job_id } });\n    await User.updateMany({ jobsPosted: job_id }, { $pull: { jobsPosted: job_id } });\n\n    res.status(200).json({ message: 'Job deleted successfully'"}, {"index": 1950, "path": "server/controllers/jobController.js", "chunk": " { $pull: { jobsPosted: job_id } });\n\n    res.status(200).json({ message: 'Job deleted successfully' });\n  } catch (error) {\n    res.status(400).json({ error: 'Invalid job ID or failed to delete job' });\n  }\n};\n\nexport const applyJob = async (req, res) => {\n  try {\n    const { job_id, userId } = req.params;\n    const job = await Job.findById(job_id);\n    const user = await User.findById(userId);\n\n    if (!job) return res.status(404).json({ error: 'Job not found' });\n    if (!user) return res.sta"}, {"index": 1951, "path": "server/controllers/jobController.js", "chunk": "    if (!job) return res.status(404).json({ error: 'Job not found' });\n    if (!user) return res.status(404).json({ error: 'User not found' });\n\n    job.applicants.push(user._id);\n    user.jobsApplied.push(job._id);\n    await job.save();\n    await user.save();\n\n    res.status(200).json({ message: 'Job application successful' });\n  } catch (error) {\n    res\n      .status(400)\n      .json({ error: 'Failed to apply for job', details: error.message });\n  }\n};\n"}, {"index": 1952, "path": "server/controllers/jobController.js", "chunk": "Failed to apply for job', details: error.message });\n  }\n};\n"}, {"index": 1953, "path": "server/controllers/mediaController.js", "chunk": "import { Media } from '../models/index.js';\n\nexport const getMedia = async (req, res) => {\n  try {\n    const { type, id } = req.params;\n\n    if (!['image', 'audio', 'video', 'document'].includes(type)) {\n      return res.status(400).json({ message: 'Invalid media type' });\n    }\n\n    const media = await Media.findOne({ _id: id, type: type });\n    if (!media) return res.status(404).json({ message: 'Media not found' });\n\n    const contentTypes = {\n      image: 'image/jpeg',\n      audio: 'audio/mpe"}, {"index": 1954, "path": "server/controllers/mediaController.js", "chunk": "'Media not found' });\n\n    const contentTypes = {\n      image: 'image/jpeg',\n      audio: 'audio/mpeg',\n      video: 'video/mp4',\n      document: media.mimeType || 'application/octet-stream',\n    };\n\n    const buffer = media.buffer.startsWith('data:')\n      ? Buffer.from(media.buffer.split(',')[1], 'base64')\n      : Buffer.from(media.buffer, 'base64');\n\n    res.set('Content-Type', contentTypes[type]);\n    res.send(buffer);\n  } catch (error) {\n    res.status(500).json({ message: error.message });"}, {"index": 1955, "path": "server/controllers/mediaController.js", "chunk": "e]);\n    res.send(buffer);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexport const putMedia = async (req, res) => {\n  try {\n    const { type, buffer, mimeType } = req.body;\n\n    if (!['image', 'audio', 'video', 'document'].includes(type)) {\n      return res.status(400).json({ message: 'Invalid media type' });\n    }\n\n    // Handle base64 data with or without data URI scheme\n    const base64Data = buffer.startsWith('data:')\n      ? buffer\n      : `data:${mime"}, {"index": 1956, "path": "server/controllers/mediaController.js", "chunk": "ata URI scheme\n    const base64Data = buffer.startsWith('data:')\n      ? buffer\n      : `data:${mimeType};base64,${buffer}`;\n\n    const media = new Media({\n      type,\n      buffer: base64Data,\n      mimeType: mimeType || null,\n    });\n\n    await media.save();\n\n    res.status(201).json({\n      message: 'Media created successfully',\n      id: media._id,\n    });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n"}, {"index": 1957, "path": "server/controllers/mediaController.js", "chunk": "0).json({ message: error.message });\n  }\n};\n"}, {"index": 1958, "path": "server/controllers/postController.js", "chunk": "import { Post, User } from \"../models/index.js\";\n\nexport const createPost = async (req, res) => {\n  try {\n    const newPost = new Post({\n      userId: req.user.id,\n      text: req.body.text,\n      media: req.body.media || [],\n    });\n\n    const savedPost = await newPost.save();\n    const user = await User.findById(req.user.id);\n    user.posts.push(savedPost._id);\n    await user.save();\n    res.status(201).json(savedPost);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n"}, {"index": 1959, "path": "server/controllers/postController.js", "chunk": "tus(201).json(savedPost);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexport const getPosts = async (req, res) => {\n  try {\n    const posts = await Post.find()\n    res.status(200).json(posts);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexport const getPostById = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id)\n      .populate('userId', 'username profilePicture')\n      .populate('comments"}, {"index": 1960, "path": "server/controllers/postController.js", "chunk": "ndById(req.params.id)\n      .populate('userId', 'username profilePicture')\n      .populate('comments.userId', 'username profilePicture');\n\n    if (!post) return res.status(404).json({ message: 'Post not found' });\n\n    res.status(200).json(post);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexport const updatePost = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    if (!post) return res.status(404).json({ message: 'Post n"}, {"index": 1961, "path": "server/controllers/postController.js", "chunk": "= await Post.findById(req.params.id);\n\n    if (!post) return res.status(404).json({ message: 'Post not found' });\n\n    if (post.userId.toString() !== req.user.id) {\n      return res.status(403).json({ message: 'Not authorized to update this post' });\n    }\n\n    post.text = req.body.text || post.text;\n    post.media = req.body.media || post.media;\n    post.updatedAt = Date.now();\n\n    const updatedPost = await post.save();\n    res.status(200).json(updatedPost);\n  } catch (error) {\n    res.status("}, {"index": 1962, "path": "server/controllers/postController.js", "chunk": "Post = await post.save();\n    res.status(200).json(updatedPost);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexport const deletePost = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.id);\n\n    if (!post) return res.status(404).json({ message: 'Post not found' });\n\n    if (post.userId.toString() !== req.user.id) {\n      return res.status(403).json({ message: 'Not authorized to delete this post' });\n    }\n\n    await post.deleteOne"}, {"index": 1963, "path": "server/controllers/postController.js", "chunk": "status(403).json({ message: 'Not authorized to delete this post' });\n    }\n\n    await post.deleteOne();\n    res.status(200).json({ message: 'Post deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexport const addComment = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.postId);\n    const user = await User.findById(req.user.id);\n\n    if (!post) return res.status(404).json({ message: 'Post not found' });\n\n    c"}, {"index": 1964, "path": "server/controllers/postController.js", "chunk": "yId(req.user.id);\n\n    if (!post) return res.status(404).json({ message: 'Post not found' });\n\n    const newComment = {\n      userId: req.user.id,\n      text: req.body.text,\n      createdAt: Date.now()\n    };\n\n    post.comments.push(newComment);\n    user.comments.push(post._id);\n\n    await post.save();\n    await user.save();\n\n    res.status(201).json(post.comments);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexport const updateComment = async (req, res) => "}, {"index": 1965, "path": "server/controllers/postController.js", "chunk": "tus(400).json({ message: error.message });\n  }\n};\n\nexport const updateComment = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.postId);\n\n    if (!post) return res.status(404).json({ message: 'Post not found' });\n\n    const comment = post.comments.id(req.params.commentId);\n\n    if (!comment) return res.status(404).json({ message: 'Comment not found' });\n\n    if (comment.userId.toString() !== req.user.id) {\n      return res.status(403).json({ message: 'Not authorized"}, {"index": 1966, "path": "server/controllers/postController.js", "chunk": "nt.userId.toString() !== req.user.id) {\n      return res.status(403).json({ message: 'Not authorized to update this comment' });\n    }\n\n    comment.text = req.body.text;\n    comment.updatedAt = Date.now();\n\n    await post.save();\n    res.status(200).json(comment);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexport const deleteComment = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.postId);\n    const user = await User.findById("}, {"index": 1967, "path": "server/controllers/postController.js", "chunk": "try {\n    const post = await Post.findById(req.params.postId);\n    const user = await User.findById(req.user.id);\n\n    if (!post) return res.status(404).json({ message: 'Post not found' });\n\n    const commentIndex = post.comments.findIndex(\n      comment => comment._id.toString() === req.params.commentId\n    );\n\n    if (commentIndex === -1) {\n      return res.status(404).json({ message: 'Comment not found' });\n    }\n\n    const comment = post.comments[commentIndex];\n\n    if (\n      comment.userId"}, {"index": 1968, "path": "server/controllers/postController.js", "chunk": "ot found' });\n    }\n\n    const comment = post.comments[commentIndex];\n\n    if (\n      comment.userId.toString() !== req.user.id &&\n      post.userId.toString() !== req.user.id\n    ) {\n      return res.status(403).json({ message: 'Not authorized to delete this comment' });\n    }\n    \n    post.comments.splice(commentIndex, 1);\n    user.comments.pull(post._id);\n\n    await post.save();\n    await user.save();\n\n    res.status(200).json({ message: 'Comment deleted successfully' });\n  } catch (error) {\n"}, {"index": 1969, "path": "server/controllers/postController.js", "chunk": "save();\n\n    res.status(200).json({ message: 'Comment deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\n\nexport const toggleLike = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.postId);\n    const user = await User.findById(req.user.id);\n\n    if (!post) return res.status(404).json({ message: 'Post not found' });\n\n    // Check if the user already liked the post\n    const likeIndex = post.likes.findIndex(\n    "}, {"index": 1970, "path": "server/controllers/postController.js", "chunk": ");\n\n    // Check if the user already liked the post\n    const likeIndex = post.likes.findIndex(\n      like => like.userId.toString() === req.user.id\n    );\n\n    if (likeIndex > -1) {\n      post.likes.splice(likeIndex, 1);\n      const userLikeIndex = user.likes.findIndex(\n        likedPostId => likedPostId.toString() === post._id.toString()\n      );\n      if (userLikeIndex > -1) {\n        user.likes.splice(userLikeIndex, 1);\n      }\n    } else {\n      post.likes.push({ userId: req.user.id });\n   "}, {"index": 1971, "path": "server/controllers/postController.js", "chunk": "s.splice(userLikeIndex, 1);\n      }\n    } else {\n      post.likes.push({ userId: req.user.id });\n      if (!user.likes.includes(post._id.toString())) {\n        user.likes.push(post._id);\n      }\n    }\n\n    await post.save();\n    await user.save();\n\n    res.status(200).json(post.likes);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\n\nexport const addReaction = async (req, res) => {\n  try {\n    const post = await Post.findById(req.params.postId);\n\n    if (!post) "}, {"index": 1972, "path": "server/controllers/postController.js", "chunk": "nc (req, res) => {\n  try {\n    const post = await Post.findById(req.params.postId);\n\n    if (!post) return res.status(404).json({ message: 'Post not found' });\n\n    const existingReactionIndex = post.reactions.findIndex(\n      reaction => reaction.userId.toString() === req.user.id\n    );\n\n    if (existingReactionIndex > -1) {\n      post.reactions[existingReactionIndex].type = req.body.type;\n    } else {\n      post.reactions.push({\n        userId: req.user.id,\n        type: req.body.type\n      })"}, {"index": 1973, "path": "server/controllers/postController.js", "chunk": "else {\n      post.reactions.push({\n        userId: req.user.id,\n        type: req.body.type\n      });\n    }\n\n    await post.save();\n    res.status(201).json(post.reactions);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};"}, {"index": 1974, "path": "server/controllers/userController.js", "chunk": "import bcrypt from 'bcrypt';\nimport { User, LandingPageConfig } from '../models/index.js';\n\nconst SALT = Number(process.env.SALT_ROUNDS);\n\nexport const changePassword = async (req, res) => {\n  try {\n    const { userId } = req.params;\n    const { currentPassword, newPassword, confirmPassword } = req.body;\n\n    if (newPassword.length < 8) {\n      return res.status(400).json({\n        success: false,\n        message: 'Password must be at least 8 characters long',\n      });\n    }\n\n    if (newPasswor"}, {"index": 1975, "path": "server/controllers/userController.js", "chunk": "\n        message: 'Password must be at least 8 characters long',\n      });\n    }\n\n    if (newPassword !== confirmPassword) {\n      return res.status(400).json({\n        success: false,\n        message: 'New password and confirm password do not match',\n      });\n    }\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({\n        success: false,\n        message: 'User not found',\n      });\n    }\n\n    const isMatch = await bcrypt.compare(currentPassword"}, {"index": 1976, "path": "server/controllers/userController.js", "chunk": "message: 'User not found',\n      });\n    }\n\n    const isMatch = await bcrypt.compare(currentPassword, user.password);\n    if (!isMatch) {\n      return res.status(401).json({\n        success: false,\n        message: 'Current password is incorrect',\n      });\n    }\n\n    // Hash and update new password\n    const hashedPassword = await bcrypt.hash(newPassword, SALT);\n    await User.findByIdAndUpdate(userId, {\n      password: hashedPassword,\n    });\n\n    res.status(200).json({\n      success: true,\n  "}, {"index": 1977, "path": "server/controllers/userController.js", "chunk": "serId, {\n      password: hashedPassword,\n    });\n\n    res.status(200).json({\n      success: true,\n      message: 'Password changed successfully',\n    });\n  } catch (error) {\n    console.error('Password change error:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Server error occurred while changing password',\n    });\n  }\n};\n\nexport const getAllUsersExceptConnections = async (req, res) => {\n  const { id } = req.params;\n\n  try {\n    const user = await User.findById(id);"}, {"index": 1978, "path": "server/controllers/userController.js", "chunk": "sync (req, res) => {\n  const { id } = req.params;\n\n  try {\n    const user = await User.findById(id);\n\n    // Fetch all users except the current user\n    const users = await User.find({ _id: { $ne: user._id } });\n\n    // Create a Set of connection user IDs for quick lookup\n    const connectionsSet = new Set(\n      user.connections &&\n        user.connections.map((connection) => connection._id.toString())\n    );\n\n    // Filter users who are not in the connections Set\n    const filteredUsers = user"}, {"index": 1979, "path": "server/controllers/userController.js", "chunk": "ing())\n    );\n\n    // Filter users who are not in the connections Set\n    const filteredUsers = users.filter(\n      (user) => !connectionsSet.has(user._id.toString())\n    );\n\n    res.status(200).json(filteredUsers);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\nexport const getAllUsers = async (req, res) => {\n  const { id } = req.params;\n  try {\n    const users = await User.find({ _id: { $ne: id } });\n    res.status(200).json(users);\n  } catch (error) {\n    res."}, {"index": 1980, "path": "server/controllers/userController.js", "chunk": "await User.find({ _id: { $ne: id } });\n    res.status(200).json(users);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\nexport const getAllAlumni = async (req, res) => {\n  const { college_id } = req.params;\n  try {\n    const users = await User.find({ \n      'education.college_id': college_id,\n    });\n    res.status(200).json(users);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\nexport const getUser = async (req, res) => {\n  try {\n"}, {"index": 1981, "path": "server/controllers/userController.js", "chunk": "s(500).json({ error: error.message });\n  }\n};\n\nexport const getUser = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const user = await User.findById(id);\n    if (!user) return res.status(404).json({ message: 'User not found' });\n    res.status(200).json(user);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\nexport const getDonations = async (req, res) => {\n  try {\n    const { userId } = req.params;\n\n    const user = await User.findById(userId )\n"}, {"index": 1982, "path": "server/controllers/userController.js", "chunk": "res) => {\n  try {\n    const { userId } = req.params;\n\n    const user = await User.findById(userId )\n      .populate({\n        path: 'donationHistory.transactionId',\n        model: 'Transaction',\n        select: '-user',\n      })\n      .populate({\n        path: 'donationHistory.campaignId',\n        model: 'DonationCampaign',\n        select: 'id title',\n      });\n\n    if (!user) return res.status(404).json({ message: 'User not found' });\n\n    const donations = user.donationHistory.map((donation) ="}, {"index": 1983, "path": "server/controllers/userController.js", "chunk": "4).json({ message: 'User not found' });\n\n    const donations = user.donationHistory.map((donation) => ({\n      ...donation.transactionId.toObject(),\n      campaign: donation.campaignId,\n    }));\n\n    res.status(200).json(donations);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n};\n\nexport const landingPageConfig = async (req, res) => {\n  const college_id = req.params.college_id;\n\n  const config = await LandingPageConfig.findById(college_id);\n\n  return res.json(confi"}, {"index": 1984, "path": "server/controllers/userController.js", "chunk": "college_id;\n\n  const config = await LandingPageConfig.findById(college_id);\n\n  return res.json(config);\n};\n\n"}, {"index": 1985, "path": "server/middleware/authenticateToken.js", "chunk": "import jwt from 'jsonwebtoken';\n\nexport const authenticateToken = (req, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token =\n    authHeader && authHeader.startsWith('Bearer ')\n      ? authHeader.split(' ')[1]\n      : null;\n\n  if (!token) {\n    return res.status(401).json({ message: 'No token, authorization denied' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    // if (decoded.userAgent !== req.headers[\"user-agent\"] || decoded.ip !"}, {"index": 1986, "path": "server/middleware/authenticateToken.js", "chunk": " process.env.JWT_SECRET);\n    // if (decoded.userAgent !== req.headers[\"user-agent\"] || decoded.ip !== req.ip) {\n    //   return res.status(401).json({ message: \"Token invalid due to device change\" });\n    // }\n    req.user = decoded;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: 'Token is not valid' });\n  }\n};\n"}, {"index": 1987, "path": "server/middleware/socketAuthMiddleware.js", "chunk": "import jwt from 'jsonwebtoken';\nimport logger from '../utils/logger.js';\n\nexport const socketAuthMiddleware = (socket, next) => {\n  try {\n    const token = socket.handshake.auth.token;\n    if (!token) {\n      return next(new Error('Authentication error'));\n    }\n\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    socket.user = decoded;\n    next();\n  } catch (error) {\n    logger.error(`Socket authentication error: ${error.message}`);\n    next(new Error('Authentication error'));\n  "}, {"index": 1988, "path": "server/middleware/socketAuthMiddleware.js", "chunk": "or(`Socket authentication error: ${error.message}`);\n    next(new Error('Authentication error'));\n  }\n};\n"}, {"index": 1989, "path": "server/models/bulkUser.js", "chunk": "import mongoose from 'mongoose';\n\nconst UserSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  year: {\n    type: String,\n    required: true\n  },\n  department: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n}, {\n  timestamps: true\n},{Collection : \"userss\"});\n\n// Create a compound unique index to prevent duplicate entries\nUserSchema.index({ name: 1, year: 1, department: 1 }, { un"}, {"index": 1990, "path": "server/models/bulkUser.js", "chunk": "unique index to prevent duplicate entries\nUserSchema.index({ name: 1, year: 1, department: 1 }, { unique: true });\n\nconst Userss =  mongoose.model('userss', UserSchema);\n\nexport default Userss;"}, {"index": 1991, "path": "server/models/chat.js", "chunk": "import mongoose from 'mongoose';\n\nconst messageSchema = new mongoose.Schema({\n  type: {\n    type: String,\n    enum: ['text', 'image', 'audio', 'video', 'document'],\n    required: true,\n  },\n  text: { type: String },\n  uri: { type: String },\n  fileName: { type: String },\n  fileSize: { type: Number },\n  sender: { type: String, required: true },\n  timestamp: { type: Number, required: true },\n});\n\nconst chatSchema = new mongoose.Schema({\n  participants: [{ type: String, required: true }], // Array o"}, {"index": 1992, "path": "server/models/chat.js", "chunk": "st chatSchema = new mongoose.Schema({\n  participants: [{ type: String, required: true }], // Array of email addresses\n  chatType: { type: Boolean, default: false, required: true }, // True for group chat, false for individual chat \n  messages: [messageSchema],\n  lastMessage: { type: String },\n  lastMessageTimestamp: { type: Date },\n});\n\nconst Chat = mongoose.model('Chat', chatSchema);\n\nexport default Chat;\n"}, {"index": 1993, "path": "server/models/chat.js", "chunk": "ult Chat;\n"}, {"index": 1994, "path": "server/models/college.js", "chunk": "import mongoose from 'mongoose';\n\nconst collegeSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  logo: { type: String, required: true },\n  address: { type: String },\n  website: { type: String },\n  contactNumber: { type: String },\n  accreditation: { type: String, default: '' },\n  ranking: { type: String, default: '' },\n  establishedYear: { type: String, default: 1947 },\n"}, {"index": 1995, "path": "server/models/college.js", "chunk": "'' },\n  ranking: { type: String, default: '' },\n  establishedYear: { type: String, default: 1947 },\n  missionStatement: { type: String, default: '' },\n  visionStatement: { type: String, default: '' },\n  tagline: { type: String, default: '' },\n  gallery: [String],\n  registeredAlumni: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],\n  alumni_emails: [{ type: String }],\n  requestForAlumniPortal: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],\n});\n\nconst College = mongoose.model('Co"}, {"index": 1996, "path": "server/models/college.js", "chunk": "al: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],\n});\n\nconst College = mongoose.model('College', collegeSchema);\n\nexport default College;\n"}, {"index": 1997, "path": "server/models/donations.js", "chunk": "import mongoose from 'mongoose';\n\nconst campaignManagerSchema = new mongoose.Schema({\n  name: { type: String, required: false },\n  role: { type: String, required: false },\n  contact: { type: String, required: false },\n});\n\nconst donationCampaignSchema = new mongoose.Schema({\n  college_id: { type: mongoose.Schema.Types.ObjectId, ref: 'College', required: true },\n  title: { type: String, required: false },\n  description: { type: String, required: false },\n  goal: { type: Number, required: false },"}, {"index": 1998, "path": "server/models/donations.js", "chunk": "alse },\n  description: { type: String, required: false },\n  goal: { type: Number, required: false },\n  raised: { type: Number, default: 0 },\n  donors: { type: Number, default: 0 },\n  image: { type: String, required: false },\n  deadline: { type: Date, required: false },\n  impact: { type: String, required: false },\n  category: { type: String, required: false },\n  campaignManager: { type: campaignManagerSchema, required: false },\n  taxBenefits: { type: String },\n  suggestedDonations: { type: [Numbe"}, {"index": 1999, "path": "server/models/donations.js", "chunk": "agerSchema, required: false },\n  taxBenefits: { type: String },\n  suggestedDonations: { type: [Number], required: false },\n  transactions: { type: [mongoose.Schema.Types.ObjectId], ref: 'Transaction' },\n});\n\nconst DonationCampaign = mongoose.model(\n  'DonationCampaign',\n  donationCampaignSchema\n);\n\nexport default DonationCampaign;\n"}, {"index": 2000, "path": "server/models/events.js", "chunk": "import mongoose from 'mongoose';\n\nconst speakerSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  role: { type: String, required: true },\n  company: { type: String, required: true },\n  image: { type: String, required: true },\n});\n\nconst eventSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  college_id: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'College',\n    required: true,\n  },\n  location: { type: String, required: true },\n  date: { t"}, {"index": 2001, "path": "server/models/events.js", "chunk": "  ref: 'College',\n    required: true,\n  },\n  location: { type: String, required: true },\n  date: { type: String, required: true },\n  time: { type: String, required: true },\n  price: { type: Number, required: true },\n  image: { type: String, required: true },\n  speakers: [speakerSchema],\n  agenda: { type: String, required: true },\n  sponsors: [{ type: String }],\n  department: [{ type: String, required: true }],\n  allowedRange: {\n    from: { type: Number, required: true },\n    to: { type: Number, "}, {"index": 2002, "path": "server/models/events.js", "chunk": "red: true }],\n  allowedRange: {\n    from: { type: Number, required: true },\n    to: { type: Number, required: true },\n  },\n  registered: [\n    { type: mongoose.Schema.Types.ObjectId, ref: 'User', default: [] },\n  ],\n  maxCapacity: { type: Number },\n  feedback: {\n    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n    feedback: { type: Object },\n  },\n  isActive: { type: Boolean, required: true, default: true },\n});\n\nconst Event = mongoose.model('Event', eventSchema);\n\nexport defaul"}, {"index": 2003, "path": "server/models/events.js", "chunk": "ired: true, default: true },\n});\n\nconst Event = mongoose.model('Event', eventSchema);\n\nexport default Event;\n"}, {"index": 2004, "path": "server/models/group.js", "chunk": "import mongoose from 'mongoose';\n\nconst groupSchema = new mongoose.Schema({\n  fullName: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  profilePhoto: { type: String },\n});\n\nconst Group = mongoose.model('Group', groupSchema);\n\nexport default Group;\n"}, {"index": 2005, "path": "server/models/index.js", "chunk": "import Event from './events.js';\nimport Job from './jobs.js';\nimport DonationCampaign from './donations.js';\nimport User from './user.js';\nimport College from './college.js';\nimport Media from './media.js';\nimport Transaction from './transactions.js';\nimport Post from './post.js';\nimport Chat from './chat.js';\nimport Group from './group.js';\nimport LandingPageConfig from './landingPageConfig.js';\nimport Userss from './bulkUser.js';\n\nexport { Event, Job, DonationCampaign, User, College, Media, Tr"}, {"index": 2006, "path": "server/models/index.js", "chunk": "import Userss from './bulkUser.js';\n\nexport { Event, Job, DonationCampaign, User, College, Media, Transaction, Chat, Post, Group , LandingPageConfig , Userss};"}, {"index": 2007, "path": "server/models/jobs.js", "chunk": "import mongoose from 'mongoose';\n\nconst jobSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n  },\n  description: {\n    type: String,\n    required: true,\n  },\n  company: {\n    type: String,\n    required: true,\n  },\n  location: {\n    type: String,\n    required: true,\n  },\n  salary: {\n    type: String,\n    required: true,\n  },\n  type: {\n    type: String,\n    enum: ['Full-time', 'Part-time', 'Contract', 'Internship'],\n    required: true,\n  },\n  experience: {\n    minYear"}, {"index": 2008, "path": "server/models/jobs.js", "chunk": "-time', 'Part-time', 'Contract', 'Internship'],\n    required: true,\n  },\n  experience: {\n    minYears: { type: Number, required: true },\n    maxYears: { type: Number, required: true },\n  },\n  skills: {\n    type: [String],\n    required: true,\n  },\n  benefits: {\n    type: [String],\n    default: [],\n  },\n  department: [{ type: String, required: true }],\n  vacancies: {\n    type: Number,\n    default: 1,\n  },\n  jdPdf: {\n    type: String,\n  },\n  postedBy: {\n    type: mongoose.Schema.Types.ObjectId,\n   "}, {"index": 2009, "path": "server/models/jobs.js", "chunk": ",\n  },\n  jdPdf: {\n    type: String,\n  },\n  postedBy: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n  },\n  applicants: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],\n  college_id: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'College',\n    required: true,\n  },\n});\n\nconst Job = mongoose.model('Job', jobSchema);\n\nexport default Job;\n"}, {"index": 2010, "path": "server/models/landingPageConfig.js", "chunk": "import mongoose from 'mongoose';\n\n// Schema for individual news/event/job item\nconst commonItemSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  imageUrl: {\n    type: String,\n    required: true,\n    validate: {\n      validator: function(v) {\n        return /^(https?:\\/\\/)/.test(v);\n      },\n      message: props => `${props.value} is not a valid URL!`\n    }\n  },\n  date: {\n    type: String,\n    required: true\n  },\n  description: {\n    type: Strin"}, {"index": 2011, "path": "server/models/landingPageConfig.js", "chunk": "RL!`\n    }\n  },\n  date: {\n    type: String,\n    required: true\n  },\n  description: {\n    type: String,\n    trim: true\n  },\n  link: {\n    type: String,\n    validate: {\n      validator: function(v) {\n        return v === '' || /^(https?:\\/\\/)/.test(v);\n      },\n      message: props => `${props.value} is not a valid URL!`\n    }\n  }\n}, { _id: false });\n\n// Job-specific schema extends common item schema\nconst jobItemSchema = new mongoose.Schema({\n  ...commonItemSchema.obj,\n  company: {\n    type: Stri"}, {"index": 2012, "path": "server/models/landingPageConfig.js", "chunk": "a\nconst jobItemSchema = new mongoose.Schema({\n  ...commonItemSchema.obj,\n  company: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  location: {\n    type: String,\n    required: true,\n    trim: true\n  }\n}, { _id: false });\n\n// Landing Page Configuration Schema\nconst landingPageConfigSchema = new mongoose.Schema({\n  collegeId: {\n    type: String,\n    required: true,\n    index: true\n  },\n  heroSection: {\n    title: {\n      type: String,\n      required: true\n    },\n    subtitle: {\n     "}, {"index": 2013, "path": "server/models/landingPageConfig.js", "chunk": "\n  heroSection: {\n    title: {\n      type: String,\n      required: true\n    },\n    subtitle: {\n      type: String,\n      required: true\n    },\n    backgroundImage: {\n      type: String,\n      validate: {\n        validator: function(v) {\n          return /^(https?:\\/\\/)/.test(v);\n        },\n        message: props => `${props.value} is not a valid URL!`\n      }\n    }\n  },\n  newsroom: {\n    type: [commonItemSchema],\n    default: []\n  },\n  events: {\n    type: [commonItemSchema],\n    default: []\n  },"}, {"index": 2014, "path": "server/models/landingPageConfig.js", "chunk": "mmonItemSchema],\n    default: []\n  },\n  events: {\n    type: [commonItemSchema],\n    default: []\n  },\n  jobsAndInternships: {\n    type: [jobItemSchema],\n    default: []\n  },\n  latestNews: {\n    type: [commonItemSchema],\n    default: []\n  },\n  metadata: {\n    lastUpdated: {\n      type: Date,\n      default: Date.now\n    },\n    version: {\n      type: String,\n      default: '1.0.0'\n    }\n  }\n}, {\n  timestamps: true,\n  collection: 'landing_page_configs'\n});\n\n\nlandingPageConfigSchema.index({ collegeId:"}, {"index": 2015, "path": "server/models/landingPageConfig.js", "chunk": "estamps: true,\n  collection: 'landing_page_configs'\n});\n\n\nlandingPageConfigSchema.index({ collegeId: 1, 'metadata.lastUpdated': -1 });\n\n\nconst LandingPageConfig = mongoose.model('LandingPageConfig', landingPageConfigSchema);\n\nexport default LandingPageConfig;"}, {"index": 2016, "path": "server/models/media.js", "chunk": "import mongoose from 'mongoose';\n\nconst mediaSchema = new mongoose.Schema({\n  type: {\n    type: String,\n    enum: ['image', 'audio', 'video', 'document'],\n    required: true,\n  },\n  buffer: {\n    type: String,\n    required: true,\n  },\n  mimeType: { type: String },\n  createdAt: {\n    type: Date,\n    default: Date.now,\n  },\n});\n\nconst Media = mongoose.model('Media', mediaSchema);\n\nexport default Media;\n"}, {"index": 2017, "path": "server/models/media.js", "chunk": "ia;\n"}, {"index": 2018, "path": "server/models/post.js", "chunk": "import mongoose from 'mongoose';\n\nconst { Schema } = mongoose;\n\nconst CommentSchema = new Schema({\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  text: { type: String, required: true },\n  likes: [\n    {\n      userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n    },\n  ],\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\n\nconst ReactionSchema = new Schema({\n  userId: { type: Schema.Types.ObjectId, ref:"}, {"index": 2019, "path": "server/models/post.js", "chunk": ": Date.now },\n});\n\nconst ReactionSchema = new Schema({\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  type: { type: String, enum: ['like', 'love', 'wow', 'haha', 'sad', 'angry'], required: true },\n  createdAt: { type: Date, default: Date.now },\n});\n\nconst PostSchema = new Schema({\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  text: { type: String, required: true },\n  media: [\n    {\n      type: { type: String, enum: ['image', 'video', 'audio'"}, {"index": 2020, "path": "server/models/post.js", "chunk": "ing, required: true },\n  media: [\n    {\n      type: { type: String, enum: ['image', 'video', 'audio', 'file'], required: true },\n      url: { type: String, required: true },\n      description: { type: String },\n    },\n  ],\n  likes: [\n    {\n      userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n    },\n  ],\n  comments: [CommentSchema],\n  reactions: [ReactionSchema],\n  shares: [\n    {\n      userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n      sharedAt: { "}, {"index": 2021, "path": "server/models/post.js", "chunk": "    {\n      userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n      sharedAt: { type: Date, default: Date.now },\n    },\n  ],\n  createdAt: { type: Date, default: Date.now },\n  updatedAt: { type: Date, default: Date.now },\n});\nexport default mongoose.model('Post', PostSchema);"}, {"index": 2022, "path": "server/models/transactions.js", "chunk": "import mongoose from 'mongoose';\n\nconst transactionSchema = new mongoose.Schema({\n  user: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n    required: true,\n  },\n  amount: {\n    type: Number,\n    required: true,\n  },\n  transactionMethod: {\n    type: String,\n    required: true,\n  },\n  transactionDate: {\n    type: Date,\n    default: Date.now,\n  },\n});\n\nconst Transaction = mongoose.model('Transaction', transactionSchema);\n\nexport default Transaction;\n"}, {"index": 2023, "path": "server/models/transactions.js", "chunk": "l('Transaction', transactionSchema);\n\nexport default Transaction;\n"}, {"index": 2024, "path": "server/models/user.js", "chunk": "import mongoose from 'mongoose';\n\nconst userSchema = new mongoose.Schema({\n  fullName: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  profilePhoto: { type: String },\n  phone: { type: String, required: true },\n  city: { type: String, required: true },\n  state: { type: String, required: true },\n  country: { type: String, required: true },\n  // location: { type: String, required: true },\n  education: [\n    {"}, {"index": 2025, "path": "server/models/user.js", "chunk": "ype: String, required: true },\n  // location: { type: String, required: true },\n  education: [\n    {\n      degree: { type: String, required: true },\n      department: { type: String, required: true },\n      institution: { type: String, required: true },\n      graduationYear: { type: Number, default: null, required: true },\n      college_id: { type: mongoose.Schema.Types.ObjectId, ref: 'College', required: true },\n      college_email: { type: String, required: true },\n      verificationToken: {\n "}, {"index": 2026, "path": "server/models/user.js", "chunk": "equired: true },\n      college_email: { type: String, required: true },\n      verificationToken: {\n        type: String,\n        default: null\n      },\n      verificationTokenExpires: {\n        type: Date,\n        default: null\n      },\n      isVerified: {\n        type: Boolean,\n        default: false\n      },\n      verifiedAt: {\n        type: Date,\n        default: null\n      }\n    },\n  ],\n  workExperience: [\n    {\n      companyName: { type: String },\n      role: { type: String },\n      startDa"}, {"index": 2027, "path": "server/models/user.js", "chunk": "Experience: [\n    {\n      companyName: { type: String },\n      role: { type: String },\n      startDate: { type: String },\n      endDate: { type: String, default: null },\n      description: { type: String },\n    },\n  ],\n  skills: { type: [String], required: true },\n  // projects: [\n  //   {\n  //     title: { type: String },\n  //     description: { type: String },\n  //     link: { type: String },\n  //   },\n  // ],\n  // certifications: [\n  //   {\n  //     name: { type: String },\n  //     issuingOrg"}, {"index": 2028, "path": "server/models/user.js", "chunk": "//   },\n  // ],\n  // certifications: [\n  //   {\n  //     name: { type: String },\n  //     issuingOrganization: { type: String },\n  //     issueDate: { type: Date },\n  //   },\n  // ],\n  // connections: { type: [requestSchema], default: [] },\n  // receivedRequests: { type: [requestSchema], default: [] },\n  // sentRequests: {\n  //   type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],\n  //   default: [],\n  // },\n  about: { type: String },\n  interests: { type: [String], required: true },\n "}, {"index": 2029, "path": "server/models/user.js", "chunk": "  default: [],\n  // },\n  about: { type: String },\n  interests: { type: [String], required: true },\n  chats: [\n    {\n      chatId: { type: mongoose.Schema.Types.ObjectId, ref: 'Chat' },\n      otherParticipant: { type: String },\n    },\n  ],\n  notifications: { type: [String], default: [] },\n  donationHistory: [\n    {\n      transactionId: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'Transaction',\n      },\n      campaignId: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref:"}, {"index": 2030, "path": "server/models/user.js", "chunk": "ransaction',\n      },\n      campaignId: {\n        type: mongoose.Schema.Types.ObjectId,\n        ref: 'DonationCampaign',\n      },\n    },\n  ],\n  // posts:\n  // {\n  //   type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Post' }],\n  //   default: [],\n  // },\n  // likes:\n  // {\n  //   type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Post' }],\n  //   default: [],\n  // },\n  // comments:\n  // {\n  //   type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Post' }],\n  //   default: [],\n  // },\n  ev"}, {"index": 2031, "path": "server/models/user.js", "chunk": "//   type: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Post' }],\n  //   default: [],\n  // },\n  eventsRegistered: [{type: mongoose.Schema.Types.ObjectId, ref: 'Event'}],\n  jobsPosted: [{type: mongoose.Schema.Types.ObjectId, ref: 'Job'}],\n  jobsApplied: [{type: mongoose.Schema.Types.ObjectId, ref: 'Job'}],\n});\n\nconst User = mongoose.model('User', userSchema);\n\nexport default User;\n"}, {"index": 2032, "path": "server/package.json", "chunk": "{\n  \"name\": \"server\",\n  \"version\": \"1.0.0\",\n  \"main\": \"server.js\",\n  \"license\": \"MIT\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"nodemon server.js\",\n    \"format\": \"prettier --write \\\"{controllers,middleware,models,routers,services,utils}/**/*.js\\\" server.js\"\n  },\n  \"dependencies\": {\n    \"@supabase/supabase-js\": \"^2.47.2\",\n    \"bcrypt\": \"^5.1.1\",\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.4.7\",\n    \"express\": \"^4.21.2\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"mongoose\": \"^8.8.4\",\n    \"morgan\": \"^1."}, {"index": 2033, "path": "server/package.json", "chunk": "    \"express\": \"^4.21.2\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"mongoose\": \"^8.8.4\",\n    \"morgan\": \"^1.10.0\",\n    \"nodemailer\": \"^6.9.16\",\n    \"nodemon\": \"^3.1.7\",\n    \"qrcode\": \"^1.5.4\",\n    \"socket.io\": \"^4.8.1\",\n    \"winston\": \"^3.17.0\"\n  },\n  \"packageManager\": \"yarn@1.22.22\",\n  \"devDependencies\": {\n    \"prettier\": \"^3.4.2\"\n  }\n}\n"}, {"index": 2034, "path": "server/routers/authRouter.js", "chunk": "import express from 'express';\nimport {\n  collegeLogin,\n  collegeRegister,\n  userLogin,\n  userRegister,\n  bulkCreateUsers,\n} from '../controllers/authController.js';\nimport { verify } from '../controllers/authController2.js';\n\nconst authRouter = express.Router();\n\nauthRouter.post('/college/login', collegeLogin);\nauthRouter.post('/college/register', collegeRegister);\nauthRouter.post('/user/login', userLogin);\nauthRouter.post('/user/register', userRegister);\n\nauthRouter.get('/:email/verify', verif"}, {"index": 2035, "path": "server/routers/authRouter.js", "chunk": "userLogin);\nauthRouter.post('/user/register', userRegister);\n\nauthRouter.get('/:email/verify', verify);\nauthRouter.post('/bulkcreateusers', bulkCreateUsers);\n\nexport default authRouter;\n"}, {"index": 2036, "path": "server/routers/chatRouter.js", "chunk": "import express from 'express';\nimport {\n  getAllChats,\n  getChatMessages,\n  createNewChat,\n} from '../controllers/chatController.js';\n\nconst router = express.Router();\n\nrouter.post('/new', createNewChat);\nrouter.get('/fetch', getAllChats);\n\nrouter.get('/:chatId/messages', getChatMessages);\n\nexport default router;\n"}, {"index": 2037, "path": "server/routers/collegeRouter.js", "chunk": "import express from 'express';\nimport { getCollege, getDepartments, updateCollege } from '../controllers/collegeController.js';\n\nconst collegeRouter = express.Router();\n\ncollegeRouter.get('/:college_id', getCollege);\ncollegeRouter.get('/:college_id/departments', getDepartments);\ncollegeRouter.post('/:college_id/update', updateCollege);\n\nexport default collegeRouter;\n"}, {"index": 2038, "path": "server/routers/connectionRouter.js", "chunk": "import express from 'express';\nimport {\n  sendConnectionRequest,\n  acceptConnectionRequest,\n  rejectConnectionRequest,\n  getConnections,\n} from '../controllers/connectionController.js';\n\nconst connectionRouter = express.Router();\n\nconnectionRouter.post('/send', sendConnectionRequest);\nconnectionRouter.post('/accept', acceptConnectionRequest);\nconnectionRouter.post('/reject', rejectConnectionRequest);\nconnectionRouter.get('/all', getConnections);\n\nexport default connectionRouter;\n"}, {"index": 2039, "path": "server/routers/connectionRouter.js", "chunk": "t);\nconnectionRouter.get('/all', getConnections);\n\nexport default connectionRouter;\n"}, {"index": 2040, "path": "server/routers/donationRouter.js", "chunk": "import express from 'express';\nimport {\n  getAllCollegeDonationCampaigns,\n  getDonationCampaignById,\n  addDonationCampaign,\n  deleteDonationCampaign,\n  donateToCampaign,\n  getDonors,\n} from '../controllers/donationController.js';\n\nconst donationCampaignRouter = express.Router();\n\ndonationCampaignRouter.get('/:college_id', getAllCollegeDonationCampaigns);\ndonationCampaignRouter.post('/:college_id', addDonationCampaign);\ndonationCampaignRouter.delete('/:college_id', deleteDonationCampaign);\ndonati"}, {"index": 2041, "path": "server/routers/donationRouter.js", "chunk": " addDonationCampaign);\ndonationCampaignRouter.delete('/:college_id', deleteDonationCampaign);\ndonationCampaignRouter.get('/:id/single', getDonationCampaignById);\n\ndonationCampaignRouter.post('/:id/donate', donateToCampaign);\ndonationCampaignRouter.get('/:id/getDonors', getDonors);\n\nexport default donationCampaignRouter;\n"}, {"index": 2042, "path": "server/routers/eventRouter.js", "chunk": "import express from 'express';\nimport {\n  getAllEvents,\n  getAllCollegeEvents,\n  getAllUserEvents,\n  addEvent,\n  deleteEvent,\n  registerForEvent,\n  feedbackForEvent,\n  deleteParticipant\n} from '../controllers/eventController.js';\n\nconst eventRouter = express.Router();\n\neventRouter.get('/', getAllEvents);\neventRouter.get('/college/:college_id', getAllCollegeEvents);\neventRouter.get('/user/:userId/:college_id', getAllUserEvents);\neventRouter.post('/:college_id', addEvent);\neventRouter.delete('/:co"}, {"index": 2043, "path": "server/routers/eventRouter.js", "chunk": "college_id', getAllUserEvents);\neventRouter.post('/:college_id', addEvent);\neventRouter.delete('/:college_id', deleteEvent);\n\neventRouter.post('/register/:event_id/:userId', registerForEvent);\neventRouter.post('/feedback/:event_id/:userId', feedbackForEvent);\neventRouter.delete('/delete/:event_id/:userId', deleteParticipant);\n\n\nexport default eventRouter;\n"}, {"index": 2044, "path": "server/routers/groupRouter.js", "chunk": "import express from 'express';\nimport { createNewGroup } from '../controllers/groupController.js';\n\nconst groupRouter = express.Router();\n\ngroupRouter.post('/create', createNewGroup);\n\nexport default groupRouter;\n"}, {"index": 2045, "path": "server/routers/index.js", "chunk": "import eventRouter from './eventRouter.js';\nimport jobRouter from './jobRouter.js';\nimport donationCampaignRouter from './donationRouter.js';\nimport authRouter from './authRouter.js';\nimport connectionRouter from './connectionRouter.js';\nimport userRouter from './userRouter.js';\nimport { mediaGetRouter, mediaUploadRouter } from './mediaRouter.js';\nimport chatRouter from './chatRouter.js';\nimport postRouter from \"./postRouter.js\";\nimport groupRouter from \"./groupRouter.js\";\nimport collegeRouter f"}, {"index": 2046, "path": "server/routers/index.js", "chunk": "ostRouter from \"./postRouter.js\";\nimport groupRouter from \"./groupRouter.js\";\nimport collegeRouter from './collegeRouter.js';\n\nexport {\n  eventRouter,\n  jobRouter,\n  authRouter,\n  connectionRouter,\n  userRouter,\n  mediaGetRouter,\n  mediaUploadRouter,\n  chatRouter,\n  donationCampaignRouter,\n  postRouter,\n  groupRouter,\n  collegeRouter\n};\n"}, {"index": 2047, "path": "server/routers/jobRouter.js", "chunk": "import express from 'express';\nimport {\naddJob,\ndeleteJob,\napplyJob,\ngetAllCollegeJobs,\ngetJobById\n} from '../controllers/jobController.js';\n\nconst jobRouter = express.Router();\n\njobRouter.get('/:job_id', getJobById);\njobRouter.delete('/:job_id', deleteJob);\njobRouter.post('/:college_id/:userId', addJob);\n\njobRouter.get('/apply/:job_id/:userId', applyJob);\njobRouter.get('/college/:college_id', getAllCollegeJobs);\n\nexport default jobRouter;\n"}, {"index": 2048, "path": "server/routers/jobRouter.js", "chunk": "AllCollegeJobs);\n\nexport default jobRouter;\n"}, {"index": 2049, "path": "server/routers/mediaRouter.js", "chunk": "import express from 'express';\nimport { getMedia, putMedia } from '../controllers/mediaController.js';\n\nconst mediaGetRouter = express.Router();\nconst mediaUploadRouter = express.Router();\n\nmediaGetRouter.get('/:type/:id', getMedia);\nmediaUploadRouter.post('/upload', putMedia);\n\nexport { mediaGetRouter, mediaUploadRouter };\n"}, {"index": 2050, "path": "server/routers/postRouter.js", "chunk": "import express from 'express';\nimport {\n  createPost,\n  getPosts,\n  getPostById,\n  updatePost,\n  deletePost,\n  addComment,\n  updateComment,\n  deleteComment,\n  toggleLike,\n  addReaction\n} from '../controllers/postController.js';\n\nconst postRouter = express.Router();\n\npostRouter.post('/', createPost);\npostRouter.delete('/:id', deletePost);\npostRouter.get('/', getPosts);\n// postRouter.get('/:id', getPostById);\n// postRouter.put('/:id', updatePost);\n\npostRouter.post('/:postId/comments', addComment);"}, {"index": 2051, "path": "server/routers/postRouter.js", "chunk": "PostById);\n// postRouter.put('/:id', updatePost);\n\npostRouter.post('/:postId/comments', addComment);\npostRouter.delete('/:postId/comments/:commentId', deleteComment);\npostRouter.post('/:postId/likes', toggleLike);\n\nexport default postRouter;"}, {"index": 2052, "path": "server/routers/userRouter.js", "chunk": "import express from 'express';\nimport {\n  getUser,\n  getAllUsers,\n  getAllAlumni,\n  changePassword,\n  getAllUsersExceptConnections,\n  getDonations,\n  landingPageConfig,\n} from '../controllers/userController.js';\n\nconst userRouter = express.Router();\n\nuserRouter.get('/getConfig/:college_id', landingPageConfig);\n\nuserRouter.get('/getAll/:id', getAllUsers);\nuserRouter.get('/getAllAlumni/:college_id', getAllUsers);\nuserRouter.get('/getAllexCon/:id', getAllUsersExceptConnections);\nuserRouter.get('/do"}, {"index": 2053, "path": "server/routers/userRouter.js", "chunk": " getAllUsers);\nuserRouter.get('/getAllexCon/:id', getAllUsersExceptConnections);\nuserRouter.get('/donations/:userId', getDonations);\nuserRouter.get('/fetch/:id', getUser);\nuserRouter.post('/changePassword/:userId', changePassword);\n\nexport default userRouter;\n"}, {"index": 2054, "path": "server/server.js", "chunk": "import express from 'express';\nimport morgan from 'morgan';\nimport logger from './utils/logger.js';\nimport cors from 'cors';\nimport { createServer } from 'http';\nimport { Server } from 'socket.io';\nimport Chat from './models/chat.js';\n\nimport { connectMongoDB } from './services/index.js';\nimport {\n  eventRouter,\n  jobRouter,\n  donationCampaignRouter,\n  authRouter,\n  connectionRouter,\n  userRouter,\n  mediaGetRouter,\n  mediaUploadRouter,\n  chatRouter,\n  postRouter,\n  groupRouter,\n  collegeRouter,\n"}, {"index": 2055, "path": "server/server.js", "chunk": "\n  mediaGetRouter,\n  mediaUploadRouter,\n  chatRouter,\n  postRouter,\n  groupRouter,\n  collegeRouter,\n} from './routers/index.js';\nimport { socketAuthMiddleware } from './middleware/socketAuthMiddleware.js';\nimport User from './models/user.js';\n\nconst app = express();\nconst server = createServer(app);\nconst io = new Server(server, {\n  cors: {\n    origin: '*',\n    methods: ['GET', 'POST', 'PATCH', 'PUT', 'DELETE', 'OPTIONS'],\n  },\n});\n\nio.use(socketAuthMiddleware);\n\nconst PORT = 3000;\nconst rooms ="}, {"index": 2056, "path": "server/server.js", "chunk": "UT', 'DELETE', 'OPTIONS'],\n  },\n});\n\nio.use(socketAuthMiddleware);\n\nconst PORT = 3000;\nconst rooms = {};\n\nconnectMongoDB();\n\napp.use(express.json({ limit: '10mb' }));\napp.use(morgan('dev'));\n\napp.use(\n  cors({\n    origin: '*',\n    methods: ['GET', 'POST', 'PATCH', 'PUT', 'DELETE', 'OPTIONS'],\n  })\n);\n\napp.use('/auth', authRouter);\napp.use('/media', mediaGetRouter);\napp.use('/group', groupRouter);\napp.use('/users', userRouter);\napp.use('/donationcampaigns', donationCampaignRouter);\napp.use('/medi"}, {"index": 2057, "path": "server/server.js", "chunk": "app.use('/users', userRouter);\napp.use('/donationcampaigns', donationCampaignRouter);\napp.use('/media', mediaUploadRouter);\napp.use('/events', eventRouter);\napp.use('/jobs', jobRouter);\napp.use('/connections', connectionRouter);\napp.use('/users', userRouter);\napp.use('/chat', chatRouter);\napp.use('/posts', postRouter);\napp.use('/college', collegeRouter);\n\napp.get('/', (req, res) => {\n  res.send('<h1>Hello World</h1>');\n});\n\nio.on('connection', (socket) => {\n  const userEmail = socket.user.email;"}, {"index": 2058, "path": "server/server.js", "chunk": "h1>Hello World</h1>');\n});\n\nio.on('connection', (socket) => {\n  const userEmail = socket.user.email;\n\n  socket.on('joinChat', async (chatId) => {\n    try {\n      const chat = await Chat.findById(chatId);\n      if (!chat) return;\n\n      if (!chat.participants.includes(userEmail)) {\n        socket.emit('error', { message: 'Unauthorized to join this chat' });\n        return;\n      }\n\n      socket.join(chatId);\n\n      logger.info(`User ${userEmail} joined chat: ${chatId}`);\n    } catch (error) {\n   "}, {"index": 2059, "path": "server/server.js", "chunk": "n(chatId);\n\n      logger.info(`User ${userEmail} joined chat: ${chatId}`);\n    } catch (error) {\n      logger.error(`Error joining chat: ${error.message}`);\n    }\n  });\n\n  socket.on('leaveChat', (chatId) => {\n    socket.leave(chatId);\n    logger.info(`User ${socket.id} left chat: ${chatId}`);\n  });\n\n  socket.on('sendMessage', async ({ chatId, message }) => {\n    try {\n      const chat = await Chat.findById(chatId);\n      if (!chat) return;\n\n      // Check if user is a participant\n      if (!chat"}, {"index": 2060, "path": "server/server.js", "chunk": ".findById(chatId);\n      if (!chat) return;\n\n      // Check if user is a participant\n      if (!chat.participants.includes(socket.user.email)) {\n        socket.emit('error', {\n          message: 'Unauthorized to send messages in this chat',\n        });\n        return;\n      }\n\n      // Add sender information to message\n      message.sender = socket.user.email;\n\n      chat.messages.push(message);\n      chat.lastMessage = message.text || `${message.type} message`;\n      chat.lastMessageTimestamp ="}, {"index": 2061, "path": "server/server.js", "chunk": "     chat.lastMessage = message.text || `${message.type} message`;\n      chat.lastMessageTimestamp = new Date(message.timestamp);\n\n      await chat.save();\n\n      const currUser = await User.findOne({ email: socket.user.email });\n      message.sender = currUser.fullName;\n\n      // Emit to all users in the chat room except sender\n      socket.to(chatId).emit('receiveMessage', message);\n    } catch (error) {\n      logger.error(`Error sending message: ${error.message}`);\n    }\n  });\n\n  socket.on('j"}, {"index": 2062, "path": "server/server.js", "chunk": "(error) {\n      logger.error(`Error sending message: ${error.message}`);\n    }\n  });\n\n  socket.on('joinRoom', (roomId) => {\n    if (!rooms[roomId]) {\n      rooms[roomId] = [];\n    }\n    rooms[roomId].push(socket.id);\n    socket.join(roomId);\n    logger.info(`User ${socket.id} joined room: ${roomId}`);\n  });\n\n  socket.on('videoFrame', ({ roomId, frame }) => {\n    logger.info(`Received frame from ${socket.id} for room ${roomId}`);\n    socket.to(roomId).emit('videoFrame', { frame });\n  });\n\n  socke"}, {"index": 2063, "path": "server/server.js", "chunk": "socket.id} for room ${roomId}`);\n    socket.to(roomId).emit('videoFrame', { frame });\n  });\n\n  socket.on('disconnect', () => {\n    logger.info(`User disconnected: ${socket.id}`);\n\n    Object.keys(rooms).forEach((roomId) => {\n      rooms[roomId] = rooms[roomId].filter((id) => id !== socket.id);\n      if (rooms[roomId].length === 0) {\n        delete rooms[roomId];\n      }\n    });\n  });\n});\n\nserver.listen(PORT, () => {\n  logger.info(`Server is running on port ${PORT}`);\n});\n"}, {"index": 2064, "path": "server/server.js", "chunk": "isten(PORT, () => {\n  logger.info(`Server is running on port ${PORT}`);\n});\n"}, {"index": 2065, "path": "server/services/connectMongo.js", "chunk": "import mongoose from 'mongoose';\nimport 'dotenv/config';\n\nimport logger from '../utils/logger.js';\n\nconst connectMongoDB = async () => {\n  try {\n    await mongoose.connect(process.env.MONGO_URI);\n    logger.info('connected to database successfully');\n  } catch (err) {\n    logger.error(err);\n  }\n};\n\nexport default connectMongoDB;\n"}, {"index": 2066, "path": "server/services/index.js", "chunk": "import connectMongoDB from './connectMongo.js';\n\nexport { connectMongoDB };\n"}, {"index": 2067, "path": "server/services/mailServiceEvents.js", "chunk": "import nodemailer from 'nodemailer';\nimport QRCode from 'qrcode';\nimport { Event } from '../models/index.js';\n\nconst createEmailTemplate = (user, event, qrCodeDataUrl) => `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Event Registration Confirmation</title>\n  <style>\n    .email-container {\n      max-width: 600px;\n      margin: 0 auto;\n      font-family: 'Arial', sans-serif;\n      color: #2d3748;\n      bac"}, {"index": 2068, "path": "server/services/mailServiceEvents.js", "chunk": "600px;\n      margin: 0 auto;\n      font-family: 'Arial', sans-serif;\n      color: #2d3748;\n      background-color: #f7fafc;\n      padding: 20px;\n    }\n    \n    .header {\n      background: linear-gradient(135deg, #4a90e2 0%, #357abd 100%);\n      color: white;\n      padding: 30px 20px;\n      text-align: center;\n      border-radius: 12px 12px 0 0;\n    }\n    \n    .header h1 {\n      margin: 0;\n      font-size: 28px;\n      text-shadow: 1px 1px 2px rgba(0,0,0,0.1);\n    }\n    \n    .content {\n      backg"}, {"index": 2069, "path": "server/services/mailServiceEvents.js", "chunk": "nt-size: 28px;\n      text-shadow: 1px 1px 2px rgba(0,0,0,0.1);\n    }\n    \n    .content {\n      background-color: white;\n      padding: 30px;\n      border-radius: 0 0 12px 12px;\n      box-shadow: 0 4px 6px rgba(0,0,0,0.05);\n    }\n    \n    .event-card {\n      background-color: white;\n      border: 1px solid #e2e8f0;\n      border-radius: 8px;\n      padding: 20px;\n      margin: 20px 0;\n    }\n    \n    .event-image {\n      width: 100%;\n      height: 200px;\n      object-fit: cover;\n      border-radius:"}, {"index": 2070, "path": "server/services/mailServiceEvents.js", "chunk": ".event-image {\n      width: 100%;\n      height: 200px;\n      object-fit: cover;\n      border-radius: 8px;\n      margin-bottom: 20px;\n    }\n    \n    .event-type {\n      display: inline-block;\n      background-color: #ebf8ff;\n      color: #4299e1;\n      padding: 5px 12px;\n      border-radius: 20px;\n      font-size: 14px;\n      margin-bottom: 15px;\n    }\n    \n    .detail-row {\n      display: flex;\n      justify-content: space-between;\n      padding: 12px 0;\n      border-bottom: 1px solid #edf2f7;\n "}, {"index": 2071, "path": "server/services/mailServiceEvents.js", "chunk": "    justify-content: space-between;\n      padding: 12px 0;\n      border-bottom: 1px solid #edf2f7;\n    }\n    \n    .detail-label {\n      font-weight: bold;\n      color: #4a5568;\n      min-width: 120px;\n    }\n    \n    .detail-value {\n      color: #2d3748;\n      text-align: right;\n      flex: 1;\n    }\n    \n    .speakers-section {\n      margin: 25px 0;\n    }\n    \n    .speaker-card {\n      display: flex;\n      align-items: center;\n      padding: 15px;\n      background-color: #f8fafc;\n      border-rad"}, {"index": 2072, "path": "server/services/mailServiceEvents.js", "chunk": "x;\n      align-items: center;\n      padding: 15px;\n      background-color: #f8fafc;\n      border-radius: 8px;\n      margin: 10px 0;\n    }\n    \n    .speaker-image {\n      width: 60px;\n      height: 60px;\n      border-radius: 50%;\n      margin-right: 15px;\n      object-fit: cover;\n    }\n    \n    .speaker-info {\n      flex: 1;\n    }\n    \n    .speaker-name {\n      font-weight: bold;\n      margin: 0;\n    }\n    \n    .speaker-role {\n      color: #718096;\n      font-size: 14px;\n      margin: 5px 0;\n    "}, {"index": 2073, "path": "server/services/mailServiceEvents.js", "chunk": "   }\n    \n    .speaker-role {\n      color: #718096;\n      font-size: 14px;\n      margin: 5px 0;\n    }\n    \n    .qr-section {\n      text-align: center;\n      background: linear-gradient(180deg, #ffffff 0%, #f7fafc 100%);\n      padding: 30px;\n      border-radius: 8px;\n      margin: 25px 0;\n      border: 2px dashed #e2e8f0;\n    }\n    \n    .qr-code {\n      width: 200px;\n      height: 200px;\n      margin: 20px auto;\n    }\n    \n    .qr-title {\n      color: #2d3748;\n      font-size: 20px;\n      margin-"}, {"index": 2074, "path": "server/services/mailServiceEvents.js", "chunk": "in: 20px auto;\n    }\n    \n    .qr-title {\n      color: #2d3748;\n      font-size: 20px;\n      margin-bottom: 10px;\n    }\n    \n    .qr-subtitle {\n      color: #718096;\n      font-size: 14px;\n    }\n    \n    .sponsors-section {\n      margin: 25px 0;\n      text-align: center;\n    }\n    \n    .sponsor-logos {\n      display: flex;\n      justify-content: center;\n      flex-wrap: wrap;\n      gap: 15px;\n      margin-top: 15px;\n    }\n    \n    .capacity-info {\n      background-color: #f7fafc;\n      padding: "}, {"index": 2075, "path": "server/services/mailServiceEvents.js", "chunk": "  margin-top: 15px;\n    }\n    \n    .capacity-info {\n      background-color: #f7fafc;\n      padding: 15px;\n      border-radius: 8px;\n      margin-top: 20px;\n      text-align: center;\n    }\n    \n    .footer {\n      text-align: center;\n      padding: 20px;\n      color: #718096;\n      font-size: 12px;\n      margin-top: 30px;\n      border-top: 1px solid #e2e8f0;\n    }\n    \n    .button {\n      display: inline-block;\n      padding: 12px 24px;\n      background: linear-gradient(135deg, #4a90e2 0%, #357ab"}, {"index": 2076, "path": "server/services/mailServiceEvents.js", "chunk": "inline-block;\n      padding: 12px 24px;\n      background: linear-gradient(135deg, #4a90e2 0%, #357abd 100%);\n      color: white;\n      text-decoration: none;\n      border-radius: 6px;\n      margin: 20px 0;\n      text-align: center;\n      font-weight: bold;\n      box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n    }\n  </style>\n</head>\n<body>\n  <div class=\"email-container\">\n    <div class=\"header\">\n      <h1>Registration Confirmed! \ud83c\udf89</h1>\n    </div>\n    \n    <div class=\"content\">\n      <p>Dear ${user.fullN"}, {"index": 2077, "path": "server/services/mailServiceEvents.js", "chunk": ">Registration Confirmed! \ud83c\udf89</h1>\n    </div>\n    \n    <div class=\"content\">\n      <p>Dear ${user.fullName},</p>\n      <p>Your registration for the following event has been confirmed:</p>\n      \n      <div class=\"event-card\">\n        <img src=\"${event.image}\" alt=\"${event.title}\" class=\"event-image\">\n        <span class=\"event-type\">${event.type}</span>\n        \n        <div class=\"detail-row\">\n          <span class=\"detail-label\">Event Name:</span>\n          <span class=\"detail-value\">${event.titl"}, {"index": 2078, "path": "server/services/mailServiceEvents.js", "chunk": "     <span class=\"detail-label\">Event Name:</span>\n          <span class=\"detail-value\">${event.title}</span>\n        </div>\n        <div class=\"detail-row\">\n          <span class=\"detail-label\">Date:</span>\n          <span class=\"detail-value\">${event.date}</span>\n        </div>\n        <div class=\"detail-row\">\n          <span class=\"detail-label\">Time:</span>\n          <span class=\"detail-value\">${event.time}</span>\n        </div>\n        <div class=\"detail-row\">\n          <span class=\"detail-"}, {"index": 2079, "path": "server/services/mailServiceEvents.js", "chunk": ">${event.time}</span>\n        </div>\n        <div class=\"detail-row\">\n          <span class=\"detail-label\">Location:</span>\n          <span class=\"detail-value\">${event.location}</span>\n        </div>\n        <div class=\"detail-row\">\n          <span class=\"detail-label\">Price:</span>\n          <span class=\"detail-value\">$${event.price.toFixed(2)}</span>\n        </div>\n      </div>\n\n      <div class=\"speakers-section\">\n        <h3>Featured Speakers</h3>\n        ${event.speakers.map(speaker => `\n "}, {"index": 2080, "path": "server/services/mailServiceEvents.js", "chunk": "s=\"speakers-section\">\n        <h3>Featured Speakers</h3>\n        ${event.speakers.map(speaker => `\n          <div class=\"speaker-card\">\n            <img src=\"${speaker.image}\" alt=\"${speaker.name}\" class=\"speaker-image\">\n            <div class=\"speaker-info\">\n              <p class=\"speaker-name\">${speaker.name}</p>\n              <p class=\"speaker-role\">${speaker.role}</p>\n              <p class=\"speaker-company\">${speaker.company}</p>\n            </div>\n          </div>\n        `).join('')}\n   "}, {"index": 2081, "path": "server/services/mailServiceEvents.js", "chunk": "speaker-company\">${speaker.company}</p>\n            </div>\n          </div>\n        `).join('')}\n      </div>\n\n      <div class=\"qr-section\">\n        <h3 class=\"qr-title\">Your Event Ticket</h3>\n        <p class=\"qr-subtitle\">Present this QR code at check-in</p>\n        <img src=\"${qrCodeDataUrl}\" alt=\"Event QR Code\" class=\"qr-code\">\n      </div>\n\n      ${event.agenda ? `\n        <div class=\"event-card\">\n          <h3>Event Agenda</h3>\n          <p>${event.agenda}</p>\n        </div>\n      ` : ''}"}, {"index": 2082, "path": "server/services/mailServiceEvents.js", "chunk": "card\">\n          <h3>Event Agenda</h3>\n          <p>${event.agenda}</p>\n        </div>\n      ` : ''}\n\n      ${event.sponsors && event.sponsors.length > 0 ? `\n        <div class=\"sponsors-section\">\n          <h3>Event Sponsors</h3>\n          <div class=\"sponsor-logos\">\n            ${event.sponsors.map(sponsor => `\n              <img src=\"${sponsor}\" alt=\"Sponsor logo\" style=\"height: 40px; width: auto;\">\n            `).join('')}\n          </div>\n        </div>\n      ` : ''}\n\n      <div class=\"capa"}, {"index": 2083, "path": "server/services/mailServiceEvents.js", "chunk": "to;\">\n            `).join('')}\n          </div>\n        </div>\n      ` : ''}\n\n      <div class=\"capacity-info\">\n        <p>Event Capacity: ${event.registeredCount} / ${event.maxCapacity || 'Unlimited'}</p>\n      </div>\n\n      <div style=\"text-align: center;\">\n        <a href=\"${process.env.FRONTEND_URL}/events/${event._id}\" class=\"button\">\n          View Event Details\n        </a>\n      </div>\n    </div>\n    \n    <div class=\"footer\">\n      <p>This is an automated message. Please do not reply to "}, {"index": 2084, "path": "server/services/mailServiceEvents.js", "chunk": " </div>\n    \n    <div class=\"footer\">\n      <p>This is an automated message. Please do not reply to this email.</p>\n      <p>If you have any questions, please contact our support team.</p>\n      ${event.maxCapacity ? `<p>This event has limited capacity. Early arrival is recommended.</p>` : ''}\n    </div>\n  </div>\n</body>\n</html>\n`;\n\nexport default createEmailTemplate;"}, {"index": 2085, "path": "server/utils/logger.js", "chunk": "import { createLogger, format, transports } from 'winston';\nconst { combine, colorize, timestamp, printf } = format;\n\nconst myFormat = printf(({ timestamp, level, message }) => {\n  return `${timestamp}  [${level}]: ${message}`;\n});\n\nconst logger = createLogger({\n  level: 'silly',\n  format: combine(\n    colorize(),\n    timestamp({ format: 'YYYY-MM-DD HH:mm:ss.SSS' }),\n    myFormat\n  ),\n  transports: [new transports.Console()],\n});\n\nexport default logger;\n"}, {"index": 2086, "path": "server/utils/logger.js", "chunk": ": [new transports.Console()],\n});\n\nexport default logger;\n"}, {"index": 2087, "path": "utils/scripts/datainsertion.py", "chunk": "import os\nimport random\nfrom datetime import datetime, timedelta\nfrom faker import Faker\nfrom sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, ForeignKey, JSON\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, relationship\nfrom dotenv import load_dotenv\nfrom sqlalchemy import Column, Integer, String, Text, DateTime, Float, ForeignKey, JSON\n\n# Load environment variables\nload_dotenv()\n\n# Create a base class for declarative mod"}, {"index": 2088, "path": "utils/scripts/datainsertion.py", "chunk": "eignKey, JSON\n\n# Load environment variables\nload_dotenv()\n\n# Create a base class for declarative models\nBase = declarative_base()\n\n# Enhanced User Model\nclass User(Base):\n    __tablename__ = 'users'\n    \n    id = Column(Integer, primary_key=True, autoincrement=True)\n    username = Column(String(50), unique=True, nullable=False)\n    email = Column(String(100), unique=True, nullable=False)\n    first_name = Column(String(50), nullable=False)\n    last_name = Column(String(50), nullable=False)\n    po"}, {"index": 2089, "path": "utils/scripts/datainsertion.py", "chunk": "_name = Column(String(50), nullable=False)\n    last_name = Column(String(50), nullable=False)\n    position = Column(String(100))\n    department = Column(String(100))\n    skills = Column(JSON)\n    interests = Column(JSON)\n    hire_date = Column(DateTime, default=datetime.now)\n    \n    # Relationships\n    posts = relationship(\"Post\", back_populates=\"user\")\n    connections = relationship(\"Connection\", back_populates=\"user\")\n\n# Enhanced Post Model\nclass Post(Base):\n    __tablename__ = 'posts'\n    \n "}, {"index": 2090, "path": "utils/scripts/datainsertion.py", "chunk": ", back_populates=\"user\")\n\n# Enhanced Post Model\nclass Post(Base):\n    __tablename__ = 'posts'\n    \n    id = Column(Integer, primary_key=True, autoincrement=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    title = Column(String(200), nullable=False)\n    content = Column(Text)\n    created_at = Column(DateTime, default=datetime.now)\n    media = Column(JSON)\n    \n    # Relationships\n    user = relationship(\"User\", back_populates=\"posts\")\n    likes = relationship(\"Like\""}, {"index": 2091, "path": "utils/scripts/datainsertion.py", "chunk": "elationships\n    user = relationship(\"User\", back_populates=\"posts\")\n    likes = relationship(\"Like\", back_populates=\"post\")\n    comments = relationship(\"Comment\", back_populates=\"post\")\n    reactions = relationship(\"Reaction\", back_populates=\"post\")\n\n# New Models for Social Interactions\nclass Connection(Base):\n    __tablename__ = 'connections'\n    \n    id = Column(Integer, primary_key=True, autoincrement=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    connected_u"}, {"index": 2092, "path": "utils/scripts/datainsertion.py", "chunk": "ncrement=True)\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    connected_user_id = Column(Integer, nullable=False)\n    interaction_strength = Column(Float)\n    \n    user = relationship(\"User\", back_populates=\"connections\")\n\nclass Like(Base):\n    __tablename__ = 'likes'\n    \n    id = Column(Integer, primary_key=True, autoincrement=True)\n    user_id = Column(Integer, nullable=False)\n    post_id = Column(Integer, ForeignKey('posts.id'), nullable=False)\n    created_at = Col"}, {"index": 2093, "path": "utils/scripts/datainsertion.py", "chunk": "le=False)\n    post_id = Column(Integer, ForeignKey('posts.id'), nullable=False)\n    created_at = Column(DateTime, default=datetime.now)\n    \n    post = relationship(\"Post\", back_populates=\"likes\")\n\nclass Comment(Base):\n    __tablename__ = 'comments'\n    \n    id = Column(Integer, primary_key=True, autoincrement=True)\n    user_id = Column(Integer, nullable=False)\n    post_id = Column(Integer, ForeignKey('posts.id'), nullable=False)\n    content = Column(Text, nullable=False)\n    created_at = Column"}, {"index": 2094, "path": "utils/scripts/datainsertion.py", "chunk": "nKey('posts.id'), nullable=False)\n    content = Column(Text, nullable=False)\n    created_at = Column(DateTime, default=datetime.now)\n    \n    post = relationship(\"Post\", back_populates=\"comments\")\n\nclass Reaction(Base):\n    __tablename__ = 'reactions'\n    \n    id = Column(Integer, primary_key=True, autoincrement=True)\n    user_id = Column(Integer, nullable=False)\n    post_id = Column(Integer, ForeignKey('posts.id'), nullable=False)\n    reaction_type = Column(String(20))\n    created_at = Column(D"}, {"index": 2095, "path": "utils/scripts/datainsertion.py", "chunk": "ignKey('posts.id'), nullable=False)\n    reaction_type = Column(String(20))\n    created_at = Column(DateTime, default=datetime.now)\n    \n    post = relationship(\"Post\", back_populates=\"reactions\")\n\nclass DatabaseSeeder:\n    def __init__(self, host, port, user, password, database):\n        # Create database connection string for PostgreSQL\n        connection_string = f\"postgresql://{user}:{password}@{host}:{port}/{database}\"\n        \n        # Create SQLAlchemy engine\n        self.engine = create_"}, {"index": 2096, "path": "utils/scripts/datainsertion.py", "chunk": "@{host}:{port}/{database}\"\n        \n        # Create SQLAlchemy engine\n        self.engine = create_engine(connection_string)\n        \n        # Drop existing tables and create new ones\n        Base.metadata.drop_all(self.engine)\n        Base.metadata.create_all(self.engine)\n        \n        # Create a session\n        Session = sessionmaker(bind=self.engine)\n        self.session = Session()\n        \n        # Initialize Faker\n        self.fake = Faker()\n\n    def generate_users(self, num_users=50"}, {"index": 2097, "path": "utils/scripts/datainsertion.py", "chunk": "  \n        # Initialize Faker\n        self.fake = Faker()\n\n    def generate_users(self, num_users=50):\n        skills_pool = [\n            \"Python\", \"Machine Learning\", \"Data Science\", \"Cloud Computing\", \n            \"Kubernetes\", \"React\", \"Node.js\", \"AWS\", \"Docker\", \"SQL\"\n        ]\n        interests_pool = [\n            \"Technology\", \"Fintech\", \"E-commerce\", \"AI\", \"Blockchain\", \n            \"Startups\", \"Digital Marketing\", \"Software Development\"\n        ]\n        departments = [\"IT\", \"Sales\", \""}, {"index": 2098, "path": "utils/scripts/datainsertion.py", "chunk": "tups\", \"Digital Marketing\", \"Software Development\"\n        ]\n        departments = [\"IT\", \"Sales\", \"Marketing\", \"HR\", \"Finance\", \"Engineering\"]\n        positions = [\"Manager\", \"Specialist\", \"Engineer\", \"Analyst\", \"Director\"]\n\n        users = []\n        for _ in range(num_users):\n            first_name = self.fake.first_name()\n            last_name = self.fake.last_name()\n            user = User(\n                username=f\"{first_name.lower()}_{last_name.lower()}\",\n                email=f\"{first_"}, {"index": 2099, "path": "utils/scripts/datainsertion.py", "chunk": "               username=f\"{first_name.lower()}_{last_name.lower()}\",\n                email=f\"{first_name.lower()}.{last_name.lower()}@company.com\",\n                first_name=first_name,\n                last_name=last_name,\n                position=f\"{random.choice(positions)} of {random.choice(departments)}\",\n                department=random.choice(departments),\n                skills=random.sample(skills_pool, k=random.randint(3, 7)),\n                interests=random.sample(interests_pool, k="}, {"index": 2100, "path": "utils/scripts/datainsertion.py", "chunk": "ple(skills_pool, k=random.randint(3, 7)),\n                interests=random.sample(interests_pool, k=random.randint(2, 5)),\n                hire_date=self.fake.date_between(start_date='-5y', end_date='now')\n            )\n            users.append(user)\n            self.session.add(user)\n        \n        self.session.commit()\n        return users\n\n    def generate_posts(self, users, num_posts_per_user=3):\n        media_types = [\"image\", \"video\", \"document\"]\n        posts = []\n        for user in us"}, {"index": 2101, "path": "utils/scripts/datainsertion.py", "chunk": "r=3):\n        media_types = [\"image\", \"video\", \"document\"]\n        posts = []\n        for user in users:\n            for _ in range(num_posts_per_user):\n                post = Post(\n                    user=user,\n                    title=self.fake.sentence(nb_words=6),\n                    content=self.fake.paragraph(nb_sentences=3),\n                    created_at=self.fake.date_time_between(start_date='-1y', end_date='now'),\n                    media=[{\n                        \"type\": random.sa"}, {"index": 2102, "path": "utils/scripts/datainsertion.py", "chunk": "_date='-1y', end_date='now'),\n                    media=[{\n                        \"type\": random.sample(media_types, k=random.randint(1, 2)),\n                        \"url\": self.fake.url(),\n                        \"description\": self.fake.sentence()\n                    }]\n                )\n                posts.append(post)\n                self.session.add(post)\n        \n        self.session.commit()\n        return posts\n\n    def generate_connections(self, users, max_connections_per_user=10):\n "}, {"index": 2103, "path": "utils/scripts/datainsertion.py", "chunk": "it()\n        return posts\n\n    def generate_connections(self, users, max_connections_per_user=10):\n        connections = []\n        for user in users:\n            possible_connections = [u for u in users if u.id != user.id]\n            num_connections = min(len(possible_connections), random.randint(3, max_connections_per_user))\n            connected_users = random.sample(possible_connections, num_connections)\n            \n            for connected_user in connected_users:\n                connect"}, {"index": 2104, "path": "utils/scripts/datainsertion.py", "chunk": "connections)\n            \n            for connected_user in connected_users:\n                connection = Connection(\n                    user=user,\n                    connected_user_id=connected_user.id,\n                    interaction_strength=round(random.uniform(0.1, 1.0), 2)\n                )\n                connections.append(connection)\n                self.session.add(connection)\n        \n        self.session.commit()\n        return connections\n\n    def generate_interactions(self, users"}, {"index": 2105, "path": "utils/scripts/datainsertion.py", "chunk": "\n        self.session.commit()\n        return connections\n\n    def generate_interactions(self, users, posts):\n        reaction_types = ['like', 'love', 'wow', 'sad', 'angry']\n        \n        # Generate Likes\n        for post in posts:\n            num_likes = random.randint(1, 10)\n            like_users = random.sample(users, num_likes)\n            for user in like_users:\n                like = Like(user_id=user.id, post=post)\n                self.session.add(like)\n        \n        # Generate Co"}, {"index": 2106, "path": "utils/scripts/datainsertion.py", "chunk": "ke(user_id=user.id, post=post)\n                self.session.add(like)\n        \n        # Generate Comments\n        for post in posts:\n            num_comments = random.randint(0, 5)\n            comment_users = random.sample(users, num_comments)\n            for user in comment_users:\n                comment = Comment(\n                    user_id=user.id, \n                    post=post, \n                    content=self.fake.sentence(nb_words=10)\n                )\n                self.session.add("}, {"index": 2107, "path": "utils/scripts/datainsertion.py", "chunk": "         content=self.fake.sentence(nb_words=10)\n                )\n                self.session.add(comment)\n        \n        # Generate Reactions\n        for post in posts:\n            num_reactions = random.randint(0, 7)\n            reaction_users = random.sample(users, num_reactions)\n            for user in reaction_users:\n                reaction = Reaction(\n                    user_id=user.id, \n                    post=post, \n                    reaction_type=random.choice(reaction_types)\n "}, {"index": 2108, "path": "utils/scripts/datainsertion.py", "chunk": ", \n                    post=post, \n                    reaction_type=random.choice(reaction_types)\n                )\n                self.session.add(reaction)\n        \n        self.session.commit()\n\n    def seed_database(self):\n        print(\"Generating users...\")\n        users = self.generate_users()\n        \n        print(\"Generating posts...\")\n        posts = self.generate_posts(users)\n        \n        print(\"Generating connections...\")\n        self.generate_connections(users)\n        \n     "}, {"index": 2109, "path": "utils/scripts/datainsertion.py", "chunk": " \n        print(\"Generating connections...\")\n        self.generate_connections(users)\n        \n        print(\"Generating interactions...\")\n        self.generate_interactions(users, posts)\n        \n        print(\"Database seeded successfully!\")\n\ndef main():\n    # Database connection parameters (replace with your actual credentials)\n    seeder = DatabaseSeeder(\n        host=os.getenv('DB_HOST', 'localhost'),\n        port=os.getenv('DB_PORT', '5432'),\n        user=os.getenv('DB_USER','sql2'),\n     "}, {"index": 2110, "path": "utils/scripts/datainsertion.py", "chunk": "alhost'),\n        port=os.getenv('DB_PORT', '5432'),\n        user=os.getenv('DB_USER','sql2'),\n        password=os.getenv('DB_PASSWORD','sql2'),\n        database=os.getenv('DB_NAME','sql2')\n    )\n    \n    # Seed the database\n    seeder.seed_database()\n\nif __name__ == \"__main__\":\n    main()"}, {"index": 2111, "path": "utils/scripts/offensive.py", "chunk": "import re\nfrom typing import Set, List, Tuple\nimport unicodedata\n\nclass ContentModerator:\n    def __init__(self):\n        self.offensive_words: Set[str] = set()\n        self.word_pattern = re.compile(r'\\b\\w+\\b')\n        \n    def normalize_text(self, text: str) -> str:\n        \"\"\"Normalize text by removing accents and converting to lowercase.\"\"\"\n        text = text.lower()\n        text = unicodedata.normalize('NFKD', text)\n        text = ''.join(c for c in text if not unicodedata.combining(c))\n  "}, {"index": 2112, "path": "utils/scripts/offensive.py", "chunk": "a.normalize('NFKD', text)\n        text = ''.join(c for c in text if not unicodedata.combining(c))\n        return text\n    \n    def load_words(self, filepath: str) -> None:\n        \"\"\"Load offensive words from a file, one word/phrase per line.\"\"\"\n        try:\n            with open(filepath, 'r', encoding='utf-8') as file:\n                words = [line.strip().lower() for line in file if line.strip()]\n                self.offensive_words.update(words)\n        except FileNotFoundError:\n            "}, {"index": 2113, "path": "utils/scripts/offensive.py", "chunk": ")]\n                self.offensive_words.update(words)\n        except FileNotFoundError:\n            raise FileNotFoundError(f\"Could not find word list file: {filepath}\")\n    \n    def check_text(self, text: str) -> Tuple[bool, List[str], str]:\n        \"\"\"\n        Check text for offensive content and return:\n        - Whether text is offensive\n        - List of found offensive terms\n        - Censored version of the text\n        \"\"\"\n        if not text:\n            return False, [], text\n        \n"}, {"index": 2114, "path": "utils/scripts/offensive.py", "chunk": "ed version of the text\n        \"\"\"\n        if not text:\n            return False, [], text\n        \n        original_text = text\n        text = self.normalize_text(text)\n        found_terms = []\n        censored_text = original_text\n        \n        # Check for exact matches of multi-word phrases first\n        for term in sorted(self.offensive_words, key=len, reverse=True):\n            if ' ' in term and term in text:\n                found_terms.append(term)\n                # Censor the term in "}, {"index": 2115, "path": "utils/scripts/offensive.py", "chunk": "erm and term in text:\n                found_terms.append(term)\n                # Censor the term in the output text\n                pattern = re.compile(re.escape(term), re.IGNORECASE)\n                censored_text = pattern.sub('*' * len(term), censored_text)\n        \n        # Check for single word matches\n        words = self.word_pattern.findall(text)\n        for word in words:\n            if word in self.offensive_words:\n                found_terms.append(word)\n                # Censor the "}, {"index": 2116, "path": "utils/scripts/offensive.py", "chunk": "word in self.offensive_words:\n                found_terms.append(word)\n                # Censor the word in the output text\n                pattern = re.compile(r'\\b' + re.escape(word) + r'\\b', re.IGNORECASE)\n                censored_text = pattern.sub('*' * len(word), censored_text)\n        \n        return bool(found_terms), found_terms, censored_text\n\ndef main():\n    moderator = ContentModerator()\n    \n    # Example usage\n    try:\n        moderator.load_words('offensive_words.txt')\n        \n  "}, {"index": 2117, "path": "utils/scripts/offensive.py", "chunk": "()\n    \n    # Example usage\n    try:\n        moderator.load_words('offensive_words.txt')\n        \n        while True:\n            text = input(\"\\nEnter text to check (or 'quit' to exit): \")\n            if text.lower() == 'quit':\n                break\n                \n            is_offensive, found_terms, censored_text = moderator.check_text(text)\n            \n            print(\"\\nResults:\")\n            print(f\"Original text: {text}\")\n            print(f\"Offensive content detected: {is_offensive"}, {"index": 2118, "path": "utils/scripts/offensive.py", "chunk": "       print(f\"Original text: {text}\")\n            print(f\"Offensive content detected: {is_offensive}\")\n            if found_terms:\n                print(f\"Found offensive terms: {', '.join(found_terms)}\")\n            print(f\"Censored text: {censored_text}\")\n            \n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    main()"}, {"index": 2119, "path": "utils/scripts/rewrite.py", "chunk": "\"\"\"\nINSTALLATION COMMAND:\npip install transformers torch sentencepiece langchain google-generativeai\n\"\"\"\n\nimport json\nimport torch\nfrom transformers import pipeline\nfrom typing import Dict, Any\n\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain_core.prompts import PromptTemplate\nfrom langchain_core.output_parsers import StrOutputParser\n\nclass EmotionPostRewriter:\n    def __init__(self):\n        # Initialize Gemini model\n        self.model = ChatGoogleGenerativeAI(\n        "}, {"index": 2120, "path": "utils/scripts/rewrite.py", "chunk": "nit__(self):\n        # Initialize Gemini model\n        self.model = ChatGoogleGenerativeAI(\n            model=\"gemini-pro\",\n            google_api_key=\"AIzaSyCjMNWVDFBNU6F0k5UC_6jt5OY2gJCLPSo\"\n        )\n        \n        # Emotion Analysis Model\n        self.emotion_analyzer = pipeline(\n            \"text-classification\", \n            model=\"j-hartmann/emotion-english-distilroberta-base\"\n        )\n        \n        # Rewriting styles\n        self.styles = {\n            'professional': PromptTemplat"}, {"index": 2121, "path": "utils/scripts/rewrite.py", "chunk": "       \n        # Rewriting styles\n        self.styles = {\n            'professional': PromptTemplate.from_template(\n                \"Rewrite the following text in a highly professional, formal business communication style:\\n\\n{post}\"\n            ),\n            'funny': PromptTemplate.from_template(\n                \"Transform this text into a hilarious, witty version with clever jokes and comedic tone:\\n\\n{post}\"\n            ),\n            'concise': PromptTemplate.from_template(\n               "}, {"index": 2122, "path": "utils/scripts/rewrite.py", "chunk": "tone:\\n\\n{post}\"\n            ),\n            'concise': PromptTemplate.from_template(\n                \"Drastically reduce the following text to its most essential meaning, removing all unnecessary words:\\n\\n{post}\"\n            ),\n            'casual': PromptTemplate.from_template(\n                \"Rewrite this text in a super relaxed, conversational style as if chatting with a close friend:\\n\\n{post}\"\n            )\n        }\n    \n    def analyze_emotions(self, text: str) -> Dict[str, Any]:\n      "}, {"index": 2123, "path": "utils/scripts/rewrite.py", "chunk": "t}\"\n            )\n        }\n    \n    def analyze_emotions(self, text: str) -> Dict[str, Any]:\n        \"\"\"\n        Analyze emotions using pre-trained model\n        Returns top 3 emotions with their confidence scores\n        \"\"\"\n        try:\n            # Get emotion analysis results\n            emotions = self.emotion_analyzer(text)\n            \n            # Sort emotions by score in descending order\n            sorted_emotions = sorted(\n                emotions, \n                key=lambda x: x"}, {"index": 2124, "path": "utils/scripts/rewrite.py", "chunk": "der\n            sorted_emotions = sorted(\n                emotions, \n                key=lambda x: x['score'], \n                reverse=True\n            )\n            \n            # Return top 3 emotions\n            return {\n                \"top_emotions\": sorted_emotions[:3]\n            }\n        except Exception as e:\n            return {\"error\": str(e)}\n    \n    def rewrite_post(self, post: str, style: str):\n        \"\"\"\n        Rewrite post with emotion analysis\n        \"\"\"\n        # Validate"}, {"index": 2125, "path": "utils/scripts/rewrite.py", "chunk": ", style: str):\n        \"\"\"\n        Rewrite post with emotion analysis\n        \"\"\"\n        # Validate style\n        if style.lower() not in self.styles:\n            raise ValueError(f\"Invalid style. Choose from: {', '.join(self.styles.keys())}\")\n        \n        # Analyze original text emotions\n        original_emotions = self.analyze_emotions(post)\n        \n        # Create rewriting chain\n        rewrite_chain = self.styles[style.lower()] | self.model | StrOutputParser()\n        \n        # Rewr"}, {"index": 2126, "path": "utils/scripts/rewrite.py", "chunk": " rewrite_chain = self.styles[style.lower()] | self.model | StrOutputParser()\n        \n        # Rewrite the post\n        rewritten_post = rewrite_chain.invoke({\"post\": post})\n        \n        # Analyze rewritten post emotions\n        rewritten_emotions = self.analyze_emotions(rewritten_post)\n        \n        # Create JSON output\n        result = {\n            \"style\": style,\n            \"emotions\": {\n                \"original\": original_emotions,\n                \"rewritten\": rewritten_emotions\n "}, {"index": 2127, "path": "utils/scripts/rewrite.py", "chunk": ": {\n                \"original\": original_emotions,\n                \"rewritten\": rewritten_emotions\n            },\n            \"output\": rewritten_post\n        }\n        \n        return json.dumps(result, indent=2)\n\n# Example usage\ndef main():\n    # Initialize the rewriter\n    rewriter = EmotionPostRewriter()\n    \n    # Example post\n    post = \"I had an incredible day at the beach with my friends. We played volleyball, laughed a lot, and enjoyed delicious ice cream.\"\n    \n    # Specify style\n    "}, {"index": 2128, "path": "utils/scripts/rewrite.py", "chunk": "We played volleyball, laughed a lot, and enjoyed delicious ice cream.\"\n    \n    # Specify style\n    style = \"professional\"\n    \n    # Rewrite the post\n    result = rewriter.rewrite_post(post, style)\n    print(result)\n\nif __name__ == \"__main__\":\n    main()"}, {"index": 2129, "path": "utils/scripts/search.py", "chunk": "import os\nfrom sqlalchemy import create_engine\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.agents import create_sql_agent\nfrom langchain.agents.agent_toolkits import SQLDatabaseToolkit\nfrom langchain.sql_database import SQLDatabase\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\nclass SmartSearchEngine:\n    def __init__(self, host, port, user, password, database, google_api_key):\n        # Set Google API key from environment variable\n     "}, {"index": 2130, "path": "utils/scripts/search.py", "chunk": "r, password, database, google_api_key):\n        # Set Google API key from environment variable\n        os.environ[\"GOOGLE_API_KEY\"] = google_api_key\n        \n        # Create database connection string for PostgreSQL\n        connection_string = f\"postgresql://{user}:{password}@{host}:{port}/{database}\"\n        \n        # Create SQLAlchemy engine and database connection\n        self.engine = create_engine(connection_string)\n        self.db = SQLDatabase(self.engine)\n        \n        # Initialize "}, {"index": 2131, "path": "utils/scripts/search.py", "chunk": "_engine(connection_string)\n        self.db = SQLDatabase(self.engine)\n        \n        # Initialize Google Gemini LLM\n        self.llm = ChatGoogleGenerativeAI(model=\"gemini-pro\")\n        \n        # Create SQL agent\n        self.agent_executor = self._create_sql_agent()\n    \n    def _create_sql_agent(self):\n        toolkit = SQLDatabaseToolkit(db=self.db, llm=self.llm)\n        \n        return create_sql_agent(\n            llm=self.llm,\n            toolkit=toolkit,\n            verbose=True,  # Se"}, {"index": 2132, "path": "utils/scripts/search.py", "chunk": "te_sql_agent(\n            llm=self.llm,\n            toolkit=toolkit,\n            verbose=True,  # Set to True for debugging\n            handle_parsing_errors=True\n        )\n    \n    def search(self, query):\n        try:\n            result = self.agent_executor.invoke({\"input\": query})\n            return result.get('output', 'No results found')\n        \n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\ndef main():\n    # Read credentials from .env file or replace with your actu"}, {"index": 2133, "path": "utils/scripts/search.py", "chunk": "turn f\"Error: {str(e)}\"\n\ndef main():\n    # Read credentials from .env file or replace with your actual credentials\n    search_engine = SmartSearchEngine(\n        host=os.getenv('DB_HOST', 'localhost'),\n        port=os.getenv('DB_PORT', '5432'),\n        user='sql2',\n        password='sql2',\n        database='sql2',\n        google_api_key=\" AIzaSyCUDF78iyPv8JKVdTKPCYMoM_HSL0UzFjA\"\n    )\n    \n    queries = [\n        \"tell me commented posts of michael_jackson\"\n    ]\n    \n    for query in queries:\n "}, {"index": 2134, "path": "utils/scripts/search.py", "chunk": "ries = [\n        \"tell me commented posts of michael_jackson\"\n    ]\n    \n    for query in queries:\n        print(f\"Query: {query}\")\n        print(search_engine.search(query))\n        print(\"-\" * 50)\n\nif __name__ == \"__main__\":\n    main()"}, {"index": 2135, "path": "utils/scripts/sql_agent.py", "chunk": "import os\nimport pymysql\nfrom sqlalchemy import create_engine\nfrom langchain_google_genai import ChatGoogleGenerativeAI\nfrom langchain.agents import create_sql_agent\nfrom langchain.agents.agent_toolkits import SQLDatabaseToolkit\nfrom langchain.sql_database import SQLDatabase\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\nclass SmartSearchEngine:\n    def __init__(self, host, user, password, database, google_api_key):\n        # Set Google API key from environment varia"}, {"index": 2136, "path": "utils/scripts/sql_agent.py", "chunk": "host, user, password, database, google_api_key):\n        # Set Google API key from environment variable\n        os.environ[\"GOOGLE_API_KEY\"] = google_api_key\n        \n        # Create database connection string\n        connection_string = f\"mysql+pymysql://{user}:{password}@{host}/{database}\"\n        \n        # Create SQLAlchemy engine and database connection\n        self.engine = create_engine(connection_string)\n        self.db = SQLDatabase(self.engine)\n        \n        # Initialize Google Gem"}, {"index": 2137, "path": "utils/scripts/sql_agent.py", "chunk": "nnection_string)\n        self.db = SQLDatabase(self.engine)\n        \n        # Initialize Google Gemini LLM\n        self.llm = ChatGoogleGenerativeAI(model=\"gemini-pro\")\n        \n        # Create SQL agent\n        self.agent_executor = self._create_sql_agent()\n    \n    def _create_sql_agent(self):\n        toolkit = SQLDatabaseToolkit(db=self.db, llm=self.llm)\n        \n        return create_sql_agent(\n            llm=self.llm,\n            toolkit=toolkit,\n            verbose=True,  # Set to True "}, {"index": 2138, "path": "utils/scripts/sql_agent.py", "chunk": "nt(\n            llm=self.llm,\n            toolkit=toolkit,\n            verbose=True,  # Set to True for debugging\n            handle_parsing_errors=True\n        )\n    \n    def search(self, query):\n        try:\n            result = self.agent_executor.invoke({\"input\": query})\n            return result.get('output', 'No results found')\n        \n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\ndef main():\n    # Read credentials from .env file\n    search_engine = SmartSearchEngi"}, {"index": 2139, "path": "utils/scripts/sql_agent.py", "chunk": "or: {str(e)}\"\n\ndef main():\n    # Read credentials from .env file\n    search_engine = SmartSearchEngine(\n        host=os.getenv('DB_HOST', 'localhost'),\n        user=os.getenv('DB_USER'),\n        password=os.getenv('DB_PASSWORD'),\n        database=os.getenv('DB_NAME'),\n        google_api_key=os.getenv('GOOGLE_API_KEY')\n    )\n    \n    queries = [\n        \"give what is the position of murphy diane\",\n        # Add more queries as needed\n    ]\n    \n    for query in queries:\n        print(f\"Query: {qu"}, {"index": 2140, "path": "utils/scripts/sql_agent.py", "chunk": "        # Add more queries as needed\n    ]\n    \n    for query in queries:\n        print(f\"Query: {query}\")\n        print(search_engine.search(query))\n\nif __name__ == \"__main__\":\n    main()"}]